/* Generated by Cython 3.0.8 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "networkit/cython_helper.h"
        ],
        "include_dirs": [
            "networkit"
        ],
        "language": "c++",
        "name": "networkit.community",
        "sources": [
            "networkit/community.pyx"
        ]
    },
    "module_name": "networkit.community"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_8" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030008F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__networkit__community
#define __PYX_HAVE_API__networkit__community
/* Early includes */
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include <networkit/base/Algorithm.hpp>
#include <unordered_set>
#include <stdint.h>
#include <set>
#include "cython_helper.h"
#include <algorithm>
#include <networkit/structures/Cover.hpp>
#include <networkit/structures/Partition.hpp>
#include <networkit/Globals.hpp>
#include <networkit/graph/Graph.hpp>
#include <networkit/graph/SpanningForest.hpp>
#include <networkit/graph/RandomMaximumSpanningForest.hpp>
#include <networkit/graph/UnionMaximumSpanningForest.hpp>
#include <networkit/scd/SelectiveCommunityDetector.hpp>
#include <networkit/community/CommunityDetectionAlgorithm.hpp>
#include <networkit/community/OverlappingCommunityDetectionAlgorithm.hpp>
#include <networkit/community/ClusteringGenerator.hpp>
#include <networkit/community/GraphClusteringTools.hpp>
#include <networkit/community/PartitionIntersection.hpp>
#include <networkit/community/Coverage.hpp>
#include <networkit/community/EdgeCut.hpp>
#include <networkit/community/Modularity.hpp>
#include <networkit/community/HubDominance.hpp>
#include <networkit/community/PLM.hpp>
#include <networkit/community/ParallelLeiden.hpp>
#include <networkit/community/LouvainMapEquation.hpp>
#include <networkit/community/PLP.hpp>
#include <networkit/community/LFM.hpp>
#include <networkit/community/LPDegreeOrdered.hpp>
#include <networkit/community/CutClustering.hpp>
#include <networkit/community/NodeStructuralRandMeasure.hpp>
#include <networkit/community/GraphStructuralRandMeasure.hpp>
#include <networkit/community/JaccardMeasure.hpp>
#include <networkit/community/NMIDistance.hpp>
#include <networkit/community/AdjustedRandMeasure.hpp>
#include <networkit/community/LocalCommunityEvaluation.hpp>
#include <networkit/community/LocalPartitionEvaluation.hpp>
#include <networkit/community/LocalCoverEvaluation.hpp>
#include <networkit/community/IntrapartitionDensity.hpp>
#include <networkit/community/IsolatedInterpartitionConductance.hpp>
#include <networkit/community/IsolatedInterpartitionExpansion.hpp>
#include <networkit/community/CoverHubDominance.hpp>
#include <networkit/community/PartitionHubDominance.hpp>
#include <networkit/community/PartitionFragmentation.hpp>
#include <networkit/community/StablePartitionNodes.hpp>
#include <networkit/community/CoverF1Similarity.hpp>
#include <networkit/community/OverlappingNMIDistance.hpp>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "networkit/community.pyx",
  "<stringsource>",
  "networkit/base.pxd",
  "networkit/structures.pxd",
  "networkit/graph.pxd",
  "networkit/scd.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* #### Code section: numeric_typedefs ### */

/* "structures.pxd":8
 * from libcpp.string cimport string
 * 
 * ctypedef uint64_t count             # <<<<<<<<<<<<<<
 * ctypedef uint64_t index
 * ctypedef uint64_t edgeid
 */
typedef uint64_t __pyx_t_9networkit_10structures_count;

/* "structures.pxd":9
 * 
 * ctypedef uint64_t count
 * ctypedef uint64_t index             # <<<<<<<<<<<<<<
 * ctypedef uint64_t edgeid
 * ctypedef index node
 */
typedef uint64_t __pyx_t_9networkit_10structures_index;

/* "structures.pxd":10
 * ctypedef uint64_t count
 * ctypedef uint64_t index
 * ctypedef uint64_t edgeid             # <<<<<<<<<<<<<<
 * ctypedef index node
 * ctypedef double coordinate
 */
typedef uint64_t __pyx_t_9networkit_10structures_edgeid;

/* "structures.pxd":11
 * ctypedef uint64_t index
 * ctypedef uint64_t edgeid
 * ctypedef index node             # <<<<<<<<<<<<<<
 * ctypedef double coordinate
 * ctypedef double edgeweight
 */
typedef __pyx_t_9networkit_10structures_index __pyx_t_9networkit_10structures_node;

/* "structures.pxd":12
 * ctypedef uint64_t edgeid
 * ctypedef index node
 * ctypedef double coordinate             # <<<<<<<<<<<<<<
 * ctypedef double edgeweight
 * 
 */
typedef double __pyx_t_9networkit_10structures_coordinate;

/* "structures.pxd":13
 * ctypedef index node
 * ctypedef double coordinate
 * ctypedef double edgeweight             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "cython_helper.h":
 */
typedef double __pyx_t_9networkit_10structures_edgeweight;
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_9networkit_4base__CythonParentClass;
struct __pyx_obj_9networkit_4base_Algorithm;
struct __pyx_obj_9networkit_10structures_Cover;
struct __pyx_obj_9networkit_10structures_Partition;
struct __pyx_obj_9networkit_5graph_Graph;
struct __pyx_obj_9networkit_5graph_NodeIntAttribute;
struct __pyx_obj_9networkit_5graph_NodeDoubleAttribute;
struct __pyx_obj_9networkit_5graph_NodeStringAttribute;
struct __pyx_obj_9networkit_5graph_EdgeIntAttribute;
struct __pyx_obj_9networkit_5graph_EdgeDoubleAttribute;
struct __pyx_obj_9networkit_5graph_EdgeStringAttribute;
struct __pyx_obj_9networkit_5graph_RandomMaximumSpanningForest;
struct __pyx_obj_9networkit_5graph_UnionMaximumSpanningForest;
struct __pyx_obj_9networkit_3scd_SelectiveCommunityDetector;
struct __pyx_obj_9networkit_9community_CommunityDetector;
struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector;
struct __pyx_obj_9networkit_9community_ClusteringGenerator;
struct __pyx_obj_9networkit_9community_GraphClusteringTools;
struct __pyx_obj_9networkit_9community_PartitionIntersection;
struct __pyx_obj_9networkit_9community_Coverage;
struct __pyx_obj_9networkit_9community_EdgeCut;
struct __pyx_obj_9networkit_9community_Modularity;
struct __pyx_obj_9networkit_9community_HubDominance;
struct __pyx_obj_9networkit_9community_PLM;
struct __pyx_obj_9networkit_9community_ParallelLeiden;
struct __pyx_obj_9networkit_9community_LouvainMapEquation;
struct __pyx_obj_9networkit_9community_PLP;
struct __pyx_obj_9networkit_9community_LFM;
struct __pyx_obj_9networkit_9community_LPDegreeOrdered;
struct __pyx_obj_9networkit_9community_CutClustering;
struct __pyx_obj_9networkit_9community_DissimilarityMeasure;
struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure;
struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure;
struct __pyx_obj_9networkit_9community_JaccardMeasure;
struct __pyx_obj_9networkit_9community_NMIDistance;
struct __pyx_obj_9networkit_9community_AdjustedRandMeasure;
struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation;
struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation;
struct __pyx_obj_9networkit_9community_LocalCoverEvaluation;
struct __pyx_obj_9networkit_9community_IntrapartitionDensity;
struct __pyx_obj_9networkit_9community_IsolatedInterpartitionConductance;
struct __pyx_obj_9networkit_9community_IsolatedInterpartitionExpansion;
struct __pyx_obj_9networkit_9community_CoverHubDominance;
struct __pyx_obj_9networkit_9community_PartitionHubDominance;
struct __pyx_obj_9networkit_9community_PartitionFragmentation;
struct __pyx_obj_9networkit_9community_StablePartitionNodes;
struct __pyx_obj_9networkit_9community_CoverF1Similarity;
struct __pyx_obj_9networkit_9community_OverlappingNMIDistance;

/* "base.pxd":9
 * 		bool_t hasFinished() except +
 * 
 * cdef class _CythonParentClass:             # <<<<<<<<<<<<<<
 * 	cdef _Algorithm *_this
 * 
 */
struct __pyx_obj_9networkit_4base__CythonParentClass {
  PyObject_HEAD
  NetworKit::Algorithm *_this;
};


/* "base.pxd":12
 * 	cdef _Algorithm *_this
 * 
 * cdef class Algorithm(_CythonParentClass):             # <<<<<<<<<<<<<<
 * 	pass
 */
struct __pyx_obj_9networkit_4base_Algorithm {
  struct __pyx_obj_9networkit_4base__CythonParentClass __pyx_base;
};


/* "structures.pxd":50
 * 		set[index] getSubsetIds() except +
 * 
 * cdef class Cover:             # <<<<<<<<<<<<<<
 * 	cdef _Cover _this
 * 	cdef setThis(self, _Cover& other)
 */
struct __pyx_obj_9networkit_10structures_Cover {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_10structures_Cover *__pyx_vtab;
  NetworKit::Cover _this;
};


/* "structures.pxd":86
 * 		index operator[](index) except +
 * 
 * cdef class Partition:             # <<<<<<<<<<<<<<
 * 	cdef _Partition _this
 * 	cdef setThis(self, _Partition& other)
 */
struct __pyx_obj_9networkit_10structures_Partition {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_10structures_Partition *__pyx_vtab;
  NetworKit::Partition _this;
};


/* "graph.pxd":283
 * 		void swap(_EdgeStringAttribute& other)
 * 
 * cdef class Graph:             # <<<<<<<<<<<<<<
 * 	cdef _Graph _this
 * 	cdef setThis(self, _Graph& other)
 */
struct __pyx_obj_9networkit_5graph_Graph {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_5graph_Graph *__pyx_vtab;
  NetworKit::Graph _this;
};


/* "graph.pxd":287
 * 	cdef setThis(self, _Graph& other)
 * 
 * cdef class NodeIntAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _NodeIntAttribute _this
 * 	cdef _NodeIntAttribute._AttributeIterator _iter
 */
struct __pyx_obj_9networkit_5graph_NodeIntAttribute {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_5graph_NodeIntAttribute *__pyx_vtab;
  NetworKit::Graph::NodeIntAttribute _this;
  NetworKit::Graph::NodeIntAttribute::Iterator _iter;
  NetworKit::Graph::NodeIntAttribute::Iterator _stopiter;
  NetworKit::Graph *_G;
};


/* "graph.pxd":294
 * 	cdef setThis(self, _NodeIntAttribute& other, _Graph* graph)
 * 
 * cdef class NodeDoubleAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _NodeDoubleAttribute _this
 * 	cdef _NodeDoubleAttribute._AttributeIterator _iter
 */
struct __pyx_obj_9networkit_5graph_NodeDoubleAttribute {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_5graph_NodeDoubleAttribute *__pyx_vtab;
  NetworKit::Graph::NodeDoubleAttribute _this;
  NetworKit::Graph::NodeDoubleAttribute::Iterator _iter;
  NetworKit::Graph::NodeDoubleAttribute::Iterator _stopiter;
  NetworKit::Graph *_G;
};


/* "graph.pxd":301
 * 	cdef setThis(self, _NodeDoubleAttribute& other, _Graph* graph)
 * 
 * cdef class NodeStringAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _NodeStringAttribute _this
 * 	cdef _NodeStringAttribute._AttributeIterator _iter
 */
struct __pyx_obj_9networkit_5graph_NodeStringAttribute {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_5graph_NodeStringAttribute *__pyx_vtab;
  NetworKit::Graph::NodeStringAttribute _this;
  NetworKit::Graph::NodeStringAttribute::Iterator _iter;
  NetworKit::Graph::NodeStringAttribute::Iterator _stopiter;
  NetworKit::Graph *_G;
};


/* "graph.pxd":308
 * 	cdef setThis(self, _NodeStringAttribute& other, _Graph* graph)
 * 
 * cdef class EdgeIntAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _EdgeIntAttribute _this
 * 	cdef _EdgeIntAttribute._AttributeIterator _iter
 */
struct __pyx_obj_9networkit_5graph_EdgeIntAttribute {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_5graph_EdgeIntAttribute *__pyx_vtab;
  NetworKit::Graph::EdgeIntAttribute _this;
  NetworKit::Graph::EdgeIntAttribute::Iterator _iter;
  NetworKit::Graph::EdgeIntAttribute::Iterator _stopiter;
  NetworKit::Graph *_G;
};


/* "graph.pxd":315
 * 	cdef setThis(self, _EdgeIntAttribute& other, _Graph* graph)
 * 
 * cdef class EdgeDoubleAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _EdgeDoubleAttribute _this
 * 	cdef _EdgeDoubleAttribute._AttributeIterator _iter
 */
struct __pyx_obj_9networkit_5graph_EdgeDoubleAttribute {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_5graph_EdgeDoubleAttribute *__pyx_vtab;
  NetworKit::Graph::EdgeDoubleAttribute _this;
  NetworKit::Graph::EdgeDoubleAttribute::Iterator _iter;
  NetworKit::Graph::EdgeDoubleAttribute::Iterator _stopiter;
  NetworKit::Graph *_G;
};


/* "graph.pxd":322
 * 	cdef setThis(self, _EdgeDoubleAttribute& other, _Graph* graph)
 * 
 * cdef class EdgeStringAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _EdgeStringAttribute _this
 * 	cdef _EdgeStringAttribute._AttributeIterator _iter
 */
struct __pyx_obj_9networkit_5graph_EdgeStringAttribute {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_5graph_EdgeStringAttribute *__pyx_vtab;
  NetworKit::Graph::EdgeStringAttribute _this;
  NetworKit::Graph::EdgeStringAttribute::Iterator _iter;
  NetworKit::Graph::EdgeStringAttribute::Iterator _stopiter;
  NetworKit::Graph *_G;
};


/* "graph.pxd":347
 * 		bool_t inMSF(node u, node v) except +
 * 
 * cdef class RandomMaximumSpanningForest(Algorithm):             # <<<<<<<<<<<<<<
 * 	cdef vector[double] _attribute
 * 	cdef Graph _G
 */
struct __pyx_obj_9networkit_5graph_RandomMaximumSpanningForest {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  std::vector<double>  _attribute;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "graph.pxd":362
 * 		bool_t inUMSF(node u, node v) except +
 * 
 * cdef class UnionMaximumSpanningForest(Algorithm):             # <<<<<<<<<<<<<<
 * 	cdef Graph _G
 */
struct __pyx_obj_9networkit_5graph_UnionMaximumSpanningForest {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "scd.pxd":15
 * 		set[node] expandOneCommunity(set[node] seeds) except +
 * 
 * cdef class SelectiveCommunityDetector:             # <<<<<<<<<<<<<<
 * 	cdef _SelectiveCommunityDetector *_this
 * 	cdef Graph _G
 */
struct __pyx_obj_9networkit_3scd_SelectiveCommunityDetector {
  PyObject_HEAD
  NetworKit::SelectiveCommunityDetector *_this;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/community.pyx":55
 * 		_Partition &getPartition() except +
 * 
 * cdef class CommunityDetector(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	CommunityDetector()
 */
struct __pyx_obj_9networkit_9community_CommunityDetector {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/community.pyx":88
 * 		_Cover getCover() except +
 * 
 * cdef class OverlappingCommunityDetector(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	OverlappingCommunityDetector()
 */
struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/community.pyx":130
 * 		_Partition makeNoncontinuousBalancedClustering(_Graph G, count k) except +
 * 
 * cdef class ClusteringGenerator:             # <<<<<<<<<<<<<<
 * 	""" Generators for various clusterings """
 * 	cdef _ClusteringGenerator _this
 */
struct __pyx_obj_9networkit_9community_ClusteringGenerator {
  PyObject_HEAD
  NetworKit::ClusteringGenerator _this;
};


/* "networkit/community.pyx":238
 * 	bool_t equalClusterings(_Partition zeta, _Partition eta, _Graph G)
 * 
 * cdef class GraphClusteringTools:             # <<<<<<<<<<<<<<
 * 	@staticmethod
 * 	def getImbalance(Partition zeta, Graph G = None):
 */
struct __pyx_obj_9networkit_9community_GraphClusteringTools {
  PyObject_HEAD
};


/* "networkit/community.pyx":402
 * 		_Partition calculate(_Partition zeta, _Partition eta) except +
 * 
 * cdef class PartitionIntersection:             # <<<<<<<<<<<<<<
 * 	"""
 * 	PartitionIntersection(zeta, eta)
 */
struct __pyx_obj_9networkit_9community_PartitionIntersection {
  PyObject_HEAD
  NetworKit::PartitionIntersection _this;
};


/* "networkit/community.pyx":436
 * 		double getQuality(_Partition _zeta, _Graph _G) except +
 * 
 * cdef class Coverage:             # <<<<<<<<<<<<<<
 * 	"""
 * 	Coverage()
 */
struct __pyx_obj_9networkit_9community_Coverage {
  PyObject_HEAD
  NetworKit::Coverage _this;
};


/* "networkit/community.pyx":471
 * 		double getQuality(_Partition _zeta, _Graph _G) except +
 * 
 * cdef class EdgeCut:             # <<<<<<<<<<<<<<
 * 	"""
 * 	EdgeCut()
 */
struct __pyx_obj_9networkit_9community_EdgeCut {
  PyObject_HEAD
  NetworKit::EdgeCut _this;
};


/* "networkit/community.pyx":507
 * 
 * 
 * cdef class Modularity:             # <<<<<<<<<<<<<<
 * 	"""
 * 	Modularity()
 */
struct __pyx_obj_9networkit_9community_Modularity {
  PyObject_HEAD
  NetworKit::Modularity _this;
};


/* "networkit/community.pyx":555
 * 		double getQuality(_Cover _zeta, _Graph _G) except +
 * 
 * cdef class HubDominance:             # <<<<<<<<<<<<<<
 * 	"""
 * 	HubDominance()
 */
struct __pyx_obj_9networkit_9community_HubDominance {
  PyObject_HEAD
  NetworKit::HubDominance _this;
};


/* "networkit/community.pyx":608
 * 
 * 
 * cdef class PLM(CommunityDetector):             # <<<<<<<<<<<<<<
 * 	"""
 * 	PLM(G, refine=False, gamma=1.0, par="balanced", maxIter=32, turbo=True, recurse=True)
 */
struct __pyx_obj_9networkit_9community_PLM {
  struct __pyx_obj_9networkit_9community_CommunityDetector __pyx_base;
};


/* "networkit/community.pyx":708
 * 		_ParallelLeiden(_Graph _G, int iterations, bool_t randomize, double gamma) except +
 * 
 * cdef class ParallelLeiden(CommunityDetector):             # <<<<<<<<<<<<<<
 * 	"""
 * 	ParallelLeiden(G, randomize=True, iterations=3, gamma=1)
 */
struct __pyx_obj_9networkit_9community_ParallelLeiden {
  struct __pyx_obj_9networkit_9community_CommunityDetector __pyx_base;
};


/* "networkit/community.pyx":734
 * 		_LouvainMapEquation(_Graph, bool, count, string ) except +
 * 
 * cdef class LouvainMapEquation(CommunityDetector):             # <<<<<<<<<<<<<<
 * 	"""
 * 	LouvainMapEquation(G, hierarchical=False, maxIterations=32, parallelizationStrategy="relaxmap")
 */
struct __pyx_obj_9networkit_9community_LouvainMapEquation {
  struct __pyx_obj_9networkit_9community_CommunityDetector __pyx_base;
};


/* "networkit/community.pyx":765
 * 
 * 
 * cdef class PLP(CommunityDetector):             # <<<<<<<<<<<<<<
 * 	"""
 * 	PLP(G, updateThreshold=None, maxIterations=None, baseClustering=None)
 */
struct __pyx_obj_9networkit_9community_PLP {
  struct __pyx_obj_9networkit_9community_CommunityDetector __pyx_base;
};


/* "networkit/community.pyx":839
 * 		_LFM(_Graph _G, _SelectiveCommunityDetector _scd) except +
 * 
 * cdef class LFM(OverlappingCommunityDetector):             # <<<<<<<<<<<<<<
 * 	"""
 * 	LFM(G, scd)
 */
struct __pyx_obj_9networkit_9community_LFM {
  struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector __pyx_base;
  struct __pyx_obj_9networkit_3scd_SelectiveCommunityDetector *_scd;
};


/* "networkit/community.pyx":879
 * 		count numberOfIterations()
 * 
 * cdef class LPDegreeOrdered(CommunityDetector):             # <<<<<<<<<<<<<<
 * 	"""
 * 	LPDegreeOrdered(G)
 */
struct __pyx_obj_9networkit_9community_LPDegreeOrdered {
  struct __pyx_obj_9networkit_9community_CommunityDetector __pyx_base;
};


/* "networkit/community.pyx":913
 * 
 * 
 * cdef class CutClustering(CommunityDetector):             # <<<<<<<<<<<<<<
 * 	"""
 * 	CutClustering(G, alpha)
 */
struct __pyx_obj_9networkit_9community_CutClustering {
  struct __pyx_obj_9networkit_9community_CommunityDetector __pyx_base;
};


/* "networkit/community.pyx":965
 * 		return pyResult
 * 
 * cdef class DissimilarityMeasure:             # <<<<<<<<<<<<<<
 * 	""" Abstract base class for partition/community dissimilarity measures """
 * 	# TODO: use conventional class design of parametrized constructor, run-method and getters
 */
struct __pyx_obj_9networkit_9community_DissimilarityMeasure {
  PyObject_HEAD
};


/* "networkit/community.pyx":976
 * 		double getDissimilarity(_Graph G, _Partition first, _Partition second) nogil except +
 * 
 * cdef class NodeStructuralRandMeasure(DissimilarityMeasure):             # <<<<<<<<<<<<<<
 * 	"""
 * 	NodeStructuralRandMeasure()
 */
struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure {
  struct __pyx_obj_9networkit_9community_DissimilarityMeasure __pyx_base;
  NetworKit::NodeStructuralRandMeasure _this;
};


/* "networkit/community.pyx":1017
 * 		double getDissimilarity(_Graph G, _Partition first, _Partition second) nogil except +
 * 
 * cdef class GraphStructuralRandMeasure(DissimilarityMeasure):             # <<<<<<<<<<<<<<
 * 	"""
 * 	GraphStructuralRandMeasure()
 */
struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure {
  struct __pyx_obj_9networkit_9community_DissimilarityMeasure __pyx_base;
  NetworKit::GraphStructuralRandMeasure _this;
};


/* "networkit/community.pyx":1058
 * 		double getDissimilarity(_Graph G, _Partition first, _Partition second) nogil except +
 * 
 * cdef class JaccardMeasure(DissimilarityMeasure):             # <<<<<<<<<<<<<<
 * 	"""
 * 	JaccardMeasure()
 */
struct __pyx_obj_9networkit_9community_JaccardMeasure {
  struct __pyx_obj_9networkit_9community_DissimilarityMeasure __pyx_base;
  NetworKit::JaccardMeasure _this;
};


/* "networkit/community.pyx":1095
 * 		double getDissimilarity(_Graph G, _Partition first, _Partition second) nogil except +
 * 
 * cdef class NMIDistance(DissimilarityMeasure):             # <<<<<<<<<<<<<<
 * 	"""
 * 	NMIDistance()
 */
struct __pyx_obj_9networkit_9community_NMIDistance {
  struct __pyx_obj_9networkit_9community_DissimilarityMeasure __pyx_base;
  NetworKit::NMIDistance _this;
};


/* "networkit/community.pyx":1134
 * 		double getDissimilarity(_Graph G, _Partition first, _Partition second) nogil except +
 * 
 * cdef class AdjustedRandMeasure(DissimilarityMeasure):             # <<<<<<<<<<<<<<
 * 	"""
 * 	AdjustedRandMeasure()
 */
struct __pyx_obj_9networkit_9community_AdjustedRandMeasure {
  struct __pyx_obj_9networkit_9community_DissimilarityMeasure __pyx_base;
  NetworKit::AdjustedRandMeasure _this;
};


/* "networkit/community.pyx":1178
 * 		bool_t isSmallBetter() except +
 * 
 * cdef class LocalCommunityEvaluation(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	LocalCommunityEvaluation()
 */
struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
};


/* "networkit/community.pyx":1304
 * 		pass
 * 
 * cdef class LocalPartitionEvaluation(LocalCommunityEvaluation):             # <<<<<<<<<<<<<<
 * 	"""
 * 	LocalPartitionEvaluation(G, P)
 */
struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation {
  struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
  struct __pyx_obj_9networkit_10structures_Partition *_P;
};


/* "networkit/community.pyx":1334
 * 
 * 
 * cdef class LocalCoverEvaluation(LocalCommunityEvaluation):             # <<<<<<<<<<<<<<
 * 	"""
 * 	LocalCoverEvaluation(G, P)
 */
struct __pyx_obj_9networkit_9community_LocalCoverEvaluation {
  struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
  struct __pyx_obj_9networkit_10structures_Cover *_C;
};


/* "networkit/community.pyx":1363
 * 		double getGlobal() except +
 * 
 * cdef class IntrapartitionDensity(LocalPartitionEvaluation):             # <<<<<<<<<<<<<<
 * 	"""
 * 	IntrapartitionDensity(G, P)
 */
struct __pyx_obj_9networkit_9community_IntrapartitionDensity {
  struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation __pyx_base;
};


/* "networkit/community.pyx":1401
 * 		_IsolatedInterpartitionConductance(_Graph G, _Partition P) except +
 * 
 * cdef class IsolatedInterpartitionConductance(LocalPartitionEvaluation):             # <<<<<<<<<<<<<<
 * 	"""
 * 	IsolatedInterpartitionConductance(G, P)
 */
struct __pyx_obj_9networkit_9community_IsolatedInterpartitionConductance {
  struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation __pyx_base;
};


/* "networkit/community.pyx":1434
 * 		_IsolatedInterpartitionExpansion(_Graph G, _Partition P) except +
 * 
 * cdef class IsolatedInterpartitionExpansion(LocalPartitionEvaluation):             # <<<<<<<<<<<<<<
 * 	"""
 * 	IsolatedInterpartitionExpansion(G, P)
 */
struct __pyx_obj_9networkit_9community_IsolatedInterpartitionExpansion {
  struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation __pyx_base;
};


/* "networkit/community.pyx":1467
 * 		_CoverHubDominance(_Graph G, _Cover C) except +
 * 
 * cdef class CoverHubDominance(LocalCoverEvaluation):             # <<<<<<<<<<<<<<
 * 	"""
 * 	CoverHubDominance(G, C)
 */
struct __pyx_obj_9networkit_9community_CoverHubDominance {
  struct __pyx_obj_9networkit_9community_LocalCoverEvaluation __pyx_base;
};


/* "networkit/community.pyx":1498
 * 		_PartitionHubDominance(_Graph G, _Partition C) except +
 * 
 * cdef class PartitionHubDominance(LocalPartitionEvaluation):             # <<<<<<<<<<<<<<
 * 	"""
 * 	PartitionHubDominance(G, P)
 */
struct __pyx_obj_9networkit_9community_PartitionHubDominance {
  struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation __pyx_base;
};


/* "networkit/community.pyx":1528
 * 		_PartitionFragmentation(_Graph G, _Partition C) except +
 * 
 * cdef class PartitionFragmentation(LocalPartitionEvaluation):             # <<<<<<<<<<<<<<
 * 	"""
 * 	PartitionFragmentation(G, P)
 */
struct __pyx_obj_9networkit_9community_PartitionFragmentation {
  struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation __pyx_base;
};


/* "networkit/community.pyx":1551
 * 		bool_t isStable(node u) except +
 * 
 * cdef class StablePartitionNodes(LocalPartitionEvaluation):             # <<<<<<<<<<<<<<
 * 	"""
 * 	StablePartitionNodes(G, P)
 */
struct __pyx_obj_9networkit_9community_StablePartitionNodes {
  struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation __pyx_base;
};


/* "networkit/community.pyx":1597
 * 		_CoverF1Similarity(_Graph G, _Cover C, _Cover reference) except +
 * 
 * cdef class CoverF1Similarity(LocalCoverEvaluation):             # <<<<<<<<<<<<<<
 * 	"""
 * 	CoverF1Similarity(G, C, reference)
 */
struct __pyx_obj_9networkit_9community_CoverF1Similarity {
  struct __pyx_obj_9networkit_9community_LocalCoverEvaluation __pyx_base;
  struct __pyx_obj_9networkit_10structures_Cover *_reference;
};


/* "networkit/community.pyx":1923
 * 		double getDissimilarity(_Graph G, _Cover first, _Cover second) nogil except +
 * 
 * cdef class OverlappingNMIDistance(DissimilarityMeasure):             # <<<<<<<<<<<<<<
 * 	"""
 * 	OverlappingNMIDistance(normalization = networkit.community.Normalization.MAX)
 */
struct __pyx_obj_9networkit_9community_OverlappingNMIDistance {
  struct __pyx_obj_9networkit_9community_DissimilarityMeasure __pyx_base;
  NetworKit::OverlappingNMIDistance _this;
};



/* "structures.pxd":50
 * 		set[index] getSubsetIds() except +
 * 
 * cdef class Cover:             # <<<<<<<<<<<<<<
 * 	cdef _Cover _this
 * 	cdef setThis(self, _Cover& other)
 */

struct __pyx_vtabstruct_9networkit_10structures_Cover {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_10structures_Cover *, NetworKit::Cover &);
};
static struct __pyx_vtabstruct_9networkit_10structures_Cover *__pyx_vtabptr_9networkit_10structures_Cover;


/* "structures.pxd":86
 * 		index operator[](index) except +
 * 
 * cdef class Partition:             # <<<<<<<<<<<<<<
 * 	cdef _Partition _this
 * 	cdef setThis(self, _Partition& other)
 */

struct __pyx_vtabstruct_9networkit_10structures_Partition {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_10structures_Partition *, NetworKit::Partition &);
};
static struct __pyx_vtabstruct_9networkit_10structures_Partition *__pyx_vtabptr_9networkit_10structures_Partition;


/* "graph.pxd":283
 * 		void swap(_EdgeStringAttribute& other)
 * 
 * cdef class Graph:             # <<<<<<<<<<<<<<
 * 	cdef _Graph _this
 * 	cdef setThis(self, _Graph& other)
 */

struct __pyx_vtabstruct_9networkit_5graph_Graph {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_5graph_Graph *, NetworKit::Graph &);
};
static struct __pyx_vtabstruct_9networkit_5graph_Graph *__pyx_vtabptr_9networkit_5graph_Graph;


/* "graph.pxd":287
 * 	cdef setThis(self, _Graph& other)
 * 
 * cdef class NodeIntAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _NodeIntAttribute _this
 * 	cdef _NodeIntAttribute._AttributeIterator _iter
 */

struct __pyx_vtabstruct_9networkit_5graph_NodeIntAttribute {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_5graph_NodeIntAttribute *, NetworKit::Graph::NodeIntAttribute &, NetworKit::Graph *);
};
static struct __pyx_vtabstruct_9networkit_5graph_NodeIntAttribute *__pyx_vtabptr_9networkit_5graph_NodeIntAttribute;


/* "graph.pxd":294
 * 	cdef setThis(self, _NodeIntAttribute& other, _Graph* graph)
 * 
 * cdef class NodeDoubleAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _NodeDoubleAttribute _this
 * 	cdef _NodeDoubleAttribute._AttributeIterator _iter
 */

struct __pyx_vtabstruct_9networkit_5graph_NodeDoubleAttribute {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_5graph_NodeDoubleAttribute *, NetworKit::Graph::NodeDoubleAttribute &, NetworKit::Graph *);
};
static struct __pyx_vtabstruct_9networkit_5graph_NodeDoubleAttribute *__pyx_vtabptr_9networkit_5graph_NodeDoubleAttribute;


/* "graph.pxd":301
 * 	cdef setThis(self, _NodeDoubleAttribute& other, _Graph* graph)
 * 
 * cdef class NodeStringAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _NodeStringAttribute _this
 * 	cdef _NodeStringAttribute._AttributeIterator _iter
 */

struct __pyx_vtabstruct_9networkit_5graph_NodeStringAttribute {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_5graph_NodeStringAttribute *, NetworKit::Graph::NodeStringAttribute &, NetworKit::Graph *);
};
static struct __pyx_vtabstruct_9networkit_5graph_NodeStringAttribute *__pyx_vtabptr_9networkit_5graph_NodeStringAttribute;


/* "graph.pxd":308
 * 	cdef setThis(self, _NodeStringAttribute& other, _Graph* graph)
 * 
 * cdef class EdgeIntAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _EdgeIntAttribute _this
 * 	cdef _EdgeIntAttribute._AttributeIterator _iter
 */

struct __pyx_vtabstruct_9networkit_5graph_EdgeIntAttribute {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_5graph_EdgeIntAttribute *, NetworKit::Graph::EdgeIntAttribute &, NetworKit::Graph *);
};
static struct __pyx_vtabstruct_9networkit_5graph_EdgeIntAttribute *__pyx_vtabptr_9networkit_5graph_EdgeIntAttribute;


/* "graph.pxd":315
 * 	cdef setThis(self, _EdgeIntAttribute& other, _Graph* graph)
 * 
 * cdef class EdgeDoubleAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _EdgeDoubleAttribute _this
 * 	cdef _EdgeDoubleAttribute._AttributeIterator _iter
 */

struct __pyx_vtabstruct_9networkit_5graph_EdgeDoubleAttribute {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_5graph_EdgeDoubleAttribute *, NetworKit::Graph::EdgeDoubleAttribute &, NetworKit::Graph *);
};
static struct __pyx_vtabstruct_9networkit_5graph_EdgeDoubleAttribute *__pyx_vtabptr_9networkit_5graph_EdgeDoubleAttribute;


/* "graph.pxd":322
 * 	cdef setThis(self, _EdgeDoubleAttribute& other, _Graph* graph)
 * 
 * cdef class EdgeStringAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _EdgeStringAttribute _this
 * 	cdef _EdgeStringAttribute._AttributeIterator _iter
 */

struct __pyx_vtabstruct_9networkit_5graph_EdgeStringAttribute {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_5graph_EdgeStringAttribute *, NetworKit::Graph::EdgeStringAttribute &, NetworKit::Graph *);
};
static struct __pyx_vtabstruct_9networkit_5graph_EdgeStringAttribute *__pyx_vtabptr_9networkit_5graph_EdgeStringAttribute;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* py_dict_values.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* AssertionsEnabled.proto */
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (1)
#elif CYTHON_COMPILING_IN_LIMITED_API  ||  (CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030C0000)
  static int __pyx_assertions_enabled_flag;
  #define __pyx_assertions_enabled() (__pyx_assertions_enabled_flag)
  static int __Pyx_init_assertions_enabled(void) {
    PyObject *builtins, *debug, *debug_str;
    int flag;
    builtins = PyEval_GetBuiltins();
    if (!builtins) goto bad;
    debug_str = PyUnicode_FromStringAndSize("__debug__", 9);
    if (!debug_str) goto bad;
    debug = PyObject_GetItem(builtins, debug_str);
    Py_DECREF(debug_str);
    if (!debug) goto bad;
    flag = PyObject_IsTrue(debug);
    Py_DECREF(debug);
    if (flag == -1) goto bad;
    __pyx_assertions_enabled_flag = flag;
    return 0;
  bad:
    __pyx_assertions_enabled_flag = 1;
    return -1;
  }
#else
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (!Py_OptimizeFlag)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_RemainderObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_RemainderObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceRemainder(op1, op2) : PyNumber_Remainder(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_TrueDivideObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
#define __Pyx_HasAttr(o, n)  PyObject_HasAttrWithError(o, n)
#else
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);
#endif

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_8
#define __PYX_HAVE_RT_ImportType_proto_3_0_8
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_8(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_8(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_8 {
   __Pyx_ImportType_CheckSize_Error_3_0_8 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_8 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_8 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_8(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_8 check_size);
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* FusedFunction.proto */
typedef struct {
    __pyx_CyFunctionObject func;
    PyObject *__signatures__;
    PyObject *self;
} __pyx_FusedFunctionObject;
static PyObject *__pyx_FusedFunction_New(PyMethodDef *ml, int flags,
                                         PyObject *qualname, PyObject *closure,
                                         PyObject *module, PyObject *globals,
                                         PyObject *code);
static int __pyx_FusedFunction_clear(__pyx_FusedFunctionObject *self);
static int __pyx_FusedFunction_init(PyObject *module);
#define __Pyx_FusedFunction_USED

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(enum NetworKit::OverlappingNMIDistance::Normalization value);

/* CIntFromPy.proto */
static CYTHON_INLINE enum NetworKit::OverlappingNMIDistance::Normalization __Pyx_PyInt_As_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */

/* Module declarations from "libc.string" */

/* Module declarations from "libcpp.string" */

/* Module declarations from "libcpp" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.map" */

/* Module declarations from "networkit.base" */

/* Module declarations from "libcpp.unordered_set" */

/* Module declarations from "libc.stdint" */

/* Module declarations from "libcpp.set" */

/* Module declarations from "networkit.structures" */

/* Module declarations from "networkit.graph" */

/* Module declarations from "networkit.scd" */

/* Module declarations from "networkit.community" */
static PyObject *__pyx_f_9networkit_9community___pyx_unpickle_GraphClusteringTools__set_state(struct __pyx_obj_9networkit_9community_GraphClusteringTools *, PyObject *); /*proto*/
static PyObject *__pyx_f_9networkit_9community___pyx_unpickle_DissimilarityMeasure__set_state(struct __pyx_obj_9networkit_9community_DissimilarityMeasure *, PyObject *); /*proto*/
static std::vector<__pyx_t_9networkit_10structures_node>  __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(PyObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(std::vector<__pyx_t_9networkit_10structures_count>  const &); /*proto*/
static PyObject *__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c___pyx_t_9networkit_10structures_count_3e___(std::map<std::string,std::vector<__pyx_t_9networkit_10structures_count> >  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(std::vector<__pyx_t_9networkit_10structures_node>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_double(std::vector<double>  const &); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "networkit.community"
extern int __pyx_module_is_main_networkit__community;
int __pyx_module_is_main_networkit__community = 0;

/* Implementation of "networkit.community" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin___import__;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_min;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_MemoryError;
/* #### Code section: string_decls ### */
static const char __pyx_k_C[] = "C";
static const char __pyx_k_G[] = "G";
static const char __pyx_k_P[] = "P";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_u[] = "u";
static const char __pyx_k__5[] = "";
static const char __pyx_k__6[] = "()";
static const char __pyx_k__7[] = "|";
static const char __pyx_k_cg[] = "cg";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_LFM[] = "LFM";
static const char __pyx_k_MAX[] = "MAX";
static const char __pyx_k_MIN[] = "MIN";
static const char __pyx_k_Max[] = "Max";
static const char __pyx_k_Min[] = "Min";
static const char __pyx_k_PLM[] = "PLM";
static const char __pyx_k_PLP[] = "PLP";
static const char __pyx_k__16[] = "\t";
static const char __pyx_k__19[] = " ";
static const char __pyx_k__22[] = "~";
static const char __pyx_k__32[] = ".";
static const char __pyx_k__33[] = "*";
static const char __pyx_k_cid[] = "cid";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_eta[] = "eta";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_log[] = "log";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_mod[] = "mod";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_par[] = "par";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_ret[] = "ret";
static const char __pyx_k_run[] = "run";
static const char __pyx_k_scd[] = "scd";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_TODO[] = "TODO:";
static const char __pyx_k__207[] = "?";
static const char __pyx_k_algo[] = "algo";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_ceil[] = "ceil";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_eCut[] = "eCut";
static const char __pyx_k_eigv[] = "eigv";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_mean[] = "mean";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_none[] = "none";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_zeta[] = "zeta";
static const char __pyx_k_Cover[] = "Cover";
static const char __pyx_k_Gfine[] = "Gfine";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_cores[] = "cores";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_first[] = "first";
static const char __pyx_k_floor[] = "floor";
static const char __pyx_k_gamma[] = "gamma";
static const char __pyx_k_graph[] = "graph";
static const char __pyx_k_kCore[] = "kCore";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_partA[] = "partA";
static const char __pyx_k_partB[] = "partB";
static const char __pyx_k_partC[] = "partC";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_strip[] = "strip";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_turbo[] = "turbo";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_zeta1[] = "zeta1";
static const char __pyx_k_zeta2[] = "zeta2";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_bisect[] = "_bisect";
static const char __pyx_k_cutoff[] = "cutoff";
static const char __pyx_k_dict_2[] = "_dict";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_isfile[] = "isfile";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_reader[] = "reader";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_refine[] = "refine";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_scores[] = "scores";
static const char __pyx_k_second[] = "second";
static const char __pyx_k_time_s[] = "time [s]";
static const char __pyx_k_timeit[] = "timeit";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_vertex[] = "vertex";
static const char __pyx_k_EdgeCut[] = "EdgeCut";
static const char __pyx_k_Gcoarse[] = "Gcoarse";
static const char __pyx_k_IOError[] = "IOError";
static const char __pyx_k_coarsen[] = "coarsen";
static const char __pyx_k_coreDec[] = "coreDec";
static const char __pyx_k_default[] = "default";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_getMean[] = "_getMean";
static const char __pyx_k_graphio[] = "graphio";
static const char __pyx_k_helpers[] = "helpers";
static const char __pyx_k_inspect[] = "inspect";
static const char __pyx_k_maxIter[] = "maxIter";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_prolong[] = "prolong";
static const char __pyx_k_readers[] = "readers";
static const char __pyx_k_recurse[] = "recurse";
static const char __pyx_k_results[] = "results";
static const char __pyx_k_reverse[] = "reverse";
static const char __pyx_k_support[] = "support";
static const char __pyx_k_trisect[] = "_trisect";
static const char __pyx_k_Coverage[] = "Coverage";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_balanced[] = "balanced";
static const char __pyx_k_defaults[] = "defaults";
static const char __pyx_k_edge_cut[] = "edge cut";
static const char __pyx_k_getCover[] = "getCover";
static const char __pyx_k_getValue[] = "getValue";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_isStable[] = "isStable";
static const char __pyx_k_parallel[] = "parallel";
static const char __pyx_k_pyResult[] = "pyResult";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_quantile[] = "quantile";
static const char __pyx_k_relaxmap[] = "relaxmap";
static const char __pyx_k_sections[] = "sections";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_spectrum[] = "spectrum";
static const char __pyx_k_subsetID[] = "subsetID";
static const char __pyx_k_tabulate[] = "tabulate";
static const char __pyx_k_tempfile[] = "tempfile";
static const char __pyx_k_vertices[] = "vertices";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_Partition[] = "Partition";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_algebraic[] = "algebraic";
static const char __pyx_k_calculate[] = "calculate";
static const char __pyx_k_commProps[] = "commProps";
static const char __pyx_k_firstItem[] = "firstItem";
static const char __pyx_k_getGlobal[] = "getGlobal";
static const char __pyx_k_getTiming[] = "getTiming";
static const char __pyx_k_getValues[] = "getValues";
static const char __pyx_k_imbalance[] = "imbalance";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_iterNodes[] = "iterNodes";
static const char __pyx_k_iteration[] = "iteration";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_nextCount[] = "nextCount";
static const char __pyx_k_partIndex[] = "partIndex";
static const char __pyx_k_partition[] = "partition";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_quantiles[] = "quantiles";
static const char __pyx_k_randomize[] = "randomize";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_reference[] = "reference";
static const char __pyx_k_stdstring[] = "stdstring";
static const char __pyx_k_GraphTools[] = "GraphTools";
static const char __pyx_k_Modularity[] = "Modularity";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_centrality[] = "centrality";
static const char __pyx_k_coarsening[] = "coarsening";
static const char __pyx_k_expanduser[] = "expanduser";
static const char __pyx_k_getMembers[] = "getMembers";
static const char __pyx_k_getQuality[] = "getQuality";
static const char __pyx_k_graphtools[] = "graphtools";
static const char __pyx_k_iterations[] = "iterations";
static const char __pyx_k_modularity[] = "modularity";
static const char __pyx_k_partitions[] = "partitions";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_subprocess[] = "subprocess";
static const char __pyx_k_zetaCoarse[] = "zetaCoarse";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_NMIDistance[] = "NMIDistance";
static const char __pyx_k_PLM_coarsen[] = "PLM.coarsen";
static const char __pyx_k_PLM_prolong[] = "PLM.prolong";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_addToSubset[] = "addToSubset";
static const char __pyx_k_communities[] = "# communities";
static const char __pyx_k_edgelist_s0[] = "edgelist-s0";
static const char __pyx_k_edgelist_s1[] = "edgelist-s1";
static const char __pyx_k_edgelist_t0[] = "edgelist-t0";
static const char __pyx_k_edgelist_t1[] = "edgelist-t1";
static const char __pyx_k_eigenvalues[] = "eigenvalues";
static const char __pyx_k_subsetSizes[] = "subsetSizes";
static const char __pyx_k_toSingleton[] = "toSingleton";
static const char __pyx_k_HubDominance[] = "HubDominance";
static const char __pyx_k_JointEntropy[] = "JointEntropy";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_eigenvectors[] = "eigenvectors";
static const char __pyx_k_getImbalance[] = "getImbalance";
static const char __pyx_k_getPartition[] = "getPartition";
static const char __pyx_k_getQuantiles[] = "_getQuantiles";
static const char __pyx_k_hierarchical[] = "hierarchical";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_use_setstate[] = "use_setstate";
static const char __pyx_k_CutClustering[] = "CutClustering";
static const char __pyx_k_GeometricMean[] = "GeometricMean";
static const char __pyx_k_JOINT_ENTROPY[] = "JOINT_ENTROPY";
static const char __pyx_k_Normalization[] = "Normalization";
static const char __pyx_k_PLM_getTiming[] = "PLM.getTiming";
static const char __pyx_k_PLP_getTiming[] = "PLP.getTiming";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_communities_2[] = "communities";
static const char __pyx_k_default_timer[] = "default_timer";
static const char __pyx_k_have_tabulate[] = "have_tabulate";
static const char __pyx_k_init_subclass[] = "__init_subclass__";
static const char __pyx_k_isSmallBetter[] = "isSmallBetter";
static const char __pyx_k_maxIterations[] = "maxIterations";
static const char __pyx_k_nextPartition[] = "nextPartition";
static const char __pyx_k_normalization[] = "normalization";
static const char __pyx_k_numberOfEdges[] = "numberOfEdges";
static const char __pyx_k_numberOfNodes[] = "numberOfNodes";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_ArithmeticMean[] = "ArithmeticMean";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_GEOMETRIC_MEAN[] = "GEOMETRIC_MEAN";
static const char __pyx_k_JaccardMeasure[] = "JaccardMeasure";
static const char __pyx_k_ParallelLeiden[] = "ParallelLeiden";
static const char __pyx_k_baseClustering[] = "baseClustering";
static const char __pyx_k_communityGraph[] = "communityGraph";
static const char __pyx_k_communitySizes[] = "communitySizes";
static const char __pyx_k_fused_sigindex[] = "_fused_sigindex";
static const char __pyx_k_getCoarseGraph[] = "getCoarseGraph";
static const char __pyx_k_nodeToMetaNode[] = "nodeToMetaNode";
static const char __pyx_k_0_is_not_a_file[] = "{0} is not a file";
static const char __pyx_k_ARITHMETIC_MEAN[] = "ARITHMETIC_MEAN";
static const char __pyx_k_LPDegreeOrdered[] = "LPDegreeOrdered";
static const char __pyx_k_PartitionReader[] = "PartitionReader";
static const char __pyx_k_PartitionWriter[] = "PartitionWriter";
static const char __pyx_k_equalClustering[] = "equalClustering";
static const char __pyx_k_getMaximumValue[] = "getMaximumValue";
static const char __pyx_k_getMinimumValue[] = "getMinimumValue";
static const char __pyx_k_isOneClustering[] = "isOneClustering";
static const char __pyx_k_numberOfSubsets[] = "numberOfSubsets";
static const char __pyx_k_prepareSpectrum[] = "_prepareSpectrum";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_readCommunities[] = "readCommunities";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_updateThreshold[] = "updateThreshold";
static const char __pyx_k_edge_cut_portion[] = "edge cut (portion)";
static const char __pyx_k_getDissimilarity[] = "getDissimilarity";
static const char __pyx_k_setNormalization[] = "setNormalization";
static const char __pyx_k_writeCommunities[] = "writeCommunities";
static const char __pyx_k_CommunityDetector[] = "CommunityDetector";
static const char __pyx_k_CoreDecomposition[] = "CoreDecomposition";
static const char __pyx_k_CoverF1Similarity[] = "CoverF1Similarity";
static const char __pyx_k_CoverHubDominance[] = "CoverHubDominance";
static const char __pyx_k_detectCommunities[] = "detectCommunities";
static const char __pyx_k_generatePartition[] = "_generatePartition";
static const char __pyx_k_makeOneClustering[] = "makeOneClustering";
static const char __pyx_k_subgraphFromNodes[] = "subgraphFromNodes";
static const char __pyx_k_EdgeCut_getQuality[] = "EdgeCut.getQuality";
static const char __pyx_k_LouvainMapEquation[] = "LouvainMapEquation";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_avg_community_size[] = "avg. community size";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_communicationGraph[] = "communicationGraph";
static const char __pyx_k_compareCommunities[] = "compareCommunities";
static const char __pyx_k_getWeightedAverage[] = "getWeightedAverage";
static const char __pyx_k_inspectCommunities[] = "inspectCommunities";
static const char __pyx_k_isProperClustering[] = "isProperClustering";
static const char __pyx_k_max_community_size[] = "max community size";
static const char __pyx_k_min_community_size[] = "min community size";
static const char __pyx_k_numberOfIterations[] = "numberOfIterations";
static const char __pyx_k_path_expanded_to_0[] = "path expanded to: {0}";
static const char __pyx_k_AdjustedRandMeasure[] = "AdjustedRandMeasure";
static const char __pyx_k_ClusteringGenerator[] = "ClusteringGenerator";
static const char __pyx_k_Coverage_getQuality[] = "Coverage.getQuality";
static const char __pyx_k_LFM___reduce_cython[] = "LFM.__reduce_cython__";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_PLM___reduce_cython[] = "PLM.__reduce_cython__";
static const char __pyx_k_PLP___reduce_cython[] = "PLP.__reduce_cython__";
static const char __pyx_k_SpectralPartitioner[] = "SpectralPartitioner";
static const char __pyx_k_getClusterHierarchy[] = "getClusterHierarchy";
static const char __pyx_k_networkit_community[] = "networkit.community";
static const char __pyx_k_solution_properties[] = "solution properties:";
static const char __pyx_k_DissimilarityMeasure[] = "DissimilarityMeasure";
static const char __pyx_k_GraphClusteringTools[] = "GraphClusteringTools";
static const char __pyx_k_LocalCoverEvaluation[] = "LocalCoverEvaluation";
static const char __pyx_k_StablePartitionNodes[] = "StablePartitionNodes";
static const char __pyx_k_getUnweightedAverage[] = "getUnweightedAverage";
static const char __pyx_k_makeRandomClustering[] = "makeRandomClustering";
static const char __pyx_k_networkit_structures[] = "networkit.structures";
static const char __pyx_k_BinaryPartitionReader[] = "BinaryPartitionReader";
static const char __pyx_k_BinaryPartitionWriter[] = "BinaryPartitionWriter";
static const char __pyx_k_IntrapartitionDensity[] = "IntrapartitionDensity";
static const char __pyx_k_LFM___setstate_cython[] = "LFM.__setstate_cython__";
static const char __pyx_k_Modularity_getQuality[] = "Modularity.getQuality";
static const char __pyx_k_PLM___setstate_cython[] = "PLM.__setstate_cython__";
static const char __pyx_k_PLP___setstate_cython[] = "PLP.__setstate_cython__";
static const char __pyx_k_PartitionHubDominance[] = "PartitionHubDominance";
static const char __pyx_k_PartitionIntersection[] = "PartitionIntersection";
static const char __pyx_k_isSingletonClustering[] = "isSingletonClustering";
static const char __pyx_k_laplacianEigenvectors[] = "laplacianEigenvectors";
static const char __pyx_k_unrecognized_format_0[] = "unrecognized format: {0}";
static const char __pyx_k_validateNormalization[] = "_validateNormalization";
static const char __pyx_k_MissingDependencyError[] = "MissingDependencyError";
static const char __pyx_k_OverlappingNMIDistance[] = "OverlappingNMIDistance";
static const char __pyx_k_PLP_numberOfIterations[] = "PLP.numberOfIterations";
static const char __pyx_k_PartitionFragmentation[] = "PartitionFragmentation";
static const char __pyx_k_evalCommunityDetection[] = "evalCommunityDetection";
static const char __pyx_k_wrote_communities_to_0[] = "wrote communities to: {0}";
static const char __pyx_k_EdgeCut___reduce_cython[] = "EdgeCut.__reduce_cython__";
static const char __pyx_k_EdgeListPartitionReader[] = "EdgeListPartitionReader";
static const char __pyx_k_HubDominance_getQuality[] = "HubDominance.getQuality";
static const char __pyx_k_SpectralPartitioner_run[] = "SpectralPartitioner.run";
static const char __pyx_k_kCoreCommunityDetection[] = "kCoreCommunityDetection";
static const char __pyx_k_makeSingletonClustering[] = "makeSingletonClustering";
static const char __pyx_k_networkit_community_pyx[] = "networkit/community.pyx";
static const char __pyx_k_parallelizationStrategy[] = "parallelizationStrategy";
static const char __pyx_k_read_communities_from_0[] = "read communities from: {0}";
static const char __pyx_k_Coverage___reduce_cython[] = "Coverage.__reduce_cython__";
static const char __pyx_k_LocalCommunityEvaluation[] = "LocalCommunityEvaluation";
static const char __pyx_k_LocalPartitionEvaluation[] = "LocalPartitionEvaluation";
static const char __pyx_k_EdgeCut___setstate_cython[] = "EdgeCut.__setstate_cython__";
static const char __pyx_k_NodeStructuralRandMeasure[] = "NodeStructuralRandMeasure";
static const char __pyx_k_weightedDegreeWithCluster[] = "weightedDegreeWithCluster";
static const char __pyx_k_Coverage___setstate_cython[] = "Coverage.__setstate_cython__";
static const char __pyx_k_GraphStructuralRandMeasure[] = "GraphStructuralRandMeasure";
static const char __pyx_k_Modularity___reduce_cython[] = "Modularity.__reduce_cython__";
static const char __pyx_k_SpectralPartitioner___init[] = "SpectralPartitioner.__init__";
static const char __pyx_k_NMIDistance___reduce_cython[] = "NMIDistance.__reduce_cython__";
static const char __pyx_k_No_matching_signature_found[] = "No matching signature found";
static const char __pyx_k_ParallelPartitionCoarsening[] = "ParallelPartitionCoarsening";
static const char __pyx_k_SpectralPartitioner__bisect[] = "SpectralPartitioner._bisect";
static const char __pyx_k_Communities_detected_in_5f_s[] = "Communities detected in {:.5f} [s]";
static const char __pyx_k_HubDominance___reduce_cython[] = "HubDominance.__reduce_cython__";
static const char __pyx_k_Modularity___setstate_cython[] = "Modularity.__setstate_cython__";
static const char __pyx_k_NMIDistance_getDissimilarity[] = "NMIDistance.getDissimilarity";
static const char __pyx_k_OverlappingCommunityDetector[] = "OverlappingCommunityDetector";
static const char __pyx_k_SpectralPartitioner__getMean[] = "SpectralPartitioner._getMean";
static const char __pyx_k_SpectralPartitioner__trisect[] = "SpectralPartitioner._trisect";
static const char __pyx_k_BinaryEdgeListPartitionReader[] = "BinaryEdgeListPartitionReader";
static const char __pyx_k_BinaryEdgeListPartitionWriter[] = "BinaryEdgeListPartitionWriter";
static const char __pyx_k_CutClustering___reduce_cython[] = "CutClustering.__reduce_cython__";
static const char __pyx_k_NMIDistance___setstate_cython[] = "NMIDistance.__setstate_cython__";
static const char __pyx_k_StablePartitionNodes_isStable[] = "StablePartitionNodes.isStable";
static const char __pyx_k_CommunityDetector_getPartition[] = "CommunityDetector.getPartition";
static const char __pyx_k_HubDominance___setstate_cython[] = "HubDominance.__setstate_cython__";
static const char __pyx_k_JaccardMeasure___reduce_cython[] = "JaccardMeasure.__reduce_cython__";
static const char __pyx_k_ParallelLeiden___reduce_cython[] = "ParallelLeiden.__reduce_cython__";
static const char __pyx_k_pyx_unpickle_DissimilarityMeas[] = "__pyx_unpickle_DissimilarityMeasure";
static const char __pyx_k_pyx_unpickle_GraphClusteringTo[] = "__pyx_unpickle_GraphClusteringTools";
static const char __pyx_k_CutClustering___setstate_cython[] = "CutClustering.__setstate_cython__";
static const char __pyx_k_DissimilarityMeasure___setstate[] = "DissimilarityMeasure.__setstate_cython__";
static const char __pyx_k_GraphClusteringTools___setstate[] = "GraphClusteringTools.__setstate_cython__";
static const char __pyx_k_IntrapartitionDensity_getGlobal[] = "IntrapartitionDensity.getGlobal";
static const char __pyx_k_IsolatedInterpartitionExpansion[] = "IsolatedInterpartitionExpansion";
static const char __pyx_k_JaccardMeasure_getDissimilarity[] = "JaccardMeasure.getDissimilarity";
static const char __pyx_k_LPDegreeOrdered___reduce_cython[] = "LPDegreeOrdered.__reduce_cython__";
static const char __pyx_k_LocalCoverEvaluation___setstate[] = "LocalCoverEvaluation.__setstate_cython__";
static const char __pyx_k_OverlappingNMIDistance___reduce[] = "OverlappingNMIDistance.__reduce_cython__";
static const char __pyx_k_PartitionFragmentation___reduce[] = "PartitionFragmentation.__reduce_cython__";
static const char __pyx_k_PartitionIntersection_calculate[] = "PartitionIntersection.calculate";
static const char __pyx_k_SpectralPartitioner_graph_count[] = "\n\tSpectralPartitioner(graph, count, balances=True)\n\n\tClass to do spectral partitioning.\n\n\tPlease note that the code in this class assumes the nodes of a graph to be numbered\n\tfrom 0 to n.\n\n\tParameters\n\t----------\n\tgraph : networkit.Graph\n\t\tThe input graph.\n\tcount : int\n\t\tThe number of partitions to create.\n\tbalanced : bool, optional\n\t\tSet this to false if you do not want to enforce balance, possibly increasing quality. Default: True\n\t";
static const char __pyx_k_StablePartitionNodes___setstate[] = "StablePartitionNodes.__setstate_cython__";
static const char __pyx_k_AdjustedRandMeasure___reduce_cyt[] = "AdjustedRandMeasure.__reduce_cython__";
static const char __pyx_k_AdjustedRandMeasure___setstate_c[] = "AdjustedRandMeasure.__setstate_cython__";
static const char __pyx_k_AdjustedRandMeasure_getDissimila[] = "AdjustedRandMeasure.getDissimilarity";
static const char __pyx_k_ClusteringGenerator___reduce_cyt[] = "ClusteringGenerator.__reduce_cython__";
static const char __pyx_k_ClusteringGenerator___setstate_c[] = "ClusteringGenerator.__setstate_cython__";
static const char __pyx_k_ClusteringGenerator_makeContinuo[] = "ClusteringGenerator.makeContinuousBalancedClustering";
static const char __pyx_k_ClusteringGenerator_makeNonconti[] = "ClusteringGenerator.makeNoncontinuousBalancedClustering";
static const char __pyx_k_ClusteringGenerator_makeOneClust[] = "ClusteringGenerator.makeOneClustering";
static const char __pyx_k_ClusteringGenerator_makeRandomCl[] = "ClusteringGenerator.makeRandomClustering";
static const char __pyx_k_ClusteringGenerator_makeSingleto[] = "ClusteringGenerator.makeSingletonClustering";
static const char __pyx_k_CommunityDetector___reduce_cytho[] = "CommunityDetector.__reduce_cython__";
static const char __pyx_k_CommunityDetector___setstate_cyt[] = "CommunityDetector.__setstate_cython__";
static const char __pyx_k_CoverF1Similarity___reduce_cytho[] = "CoverF1Similarity.__reduce_cython__";
static const char __pyx_k_CoverF1Similarity___setstate_cyt[] = "CoverF1Similarity.__setstate_cython__";
static const char __pyx_k_CoverHubDominance___reduce_cytho[] = "CoverHubDominance.__reduce_cython__";
static const char __pyx_k_CoverHubDominance___setstate_cyt[] = "CoverHubDominance.__setstate_cython__";
static const char __pyx_k_CutClustering_getClusterHierarch[] = "CutClustering.getClusterHierarchy";
static const char __pyx_k_DissimilarityMeasure___reduce_cy[] = "DissimilarityMeasure.__reduce_cython__";
static const char __pyx_k_Error_first_and_second_must_both[] = "Error, first and second must both be either a Partition or a Cover";
static const char __pyx_k_Error_invalid_normalization_meth[] = "Error, invalid normalization method";
static const char __pyx_k_Error_object_not_properly_initia[] = "Error, object not properly initialized";
static const char __pyx_k_Error_you_may_not_use_CommunityD[] = "Error, you may not use CommunityDetector directly, use a sub-class instead";
static const char __pyx_k_Error_you_may_not_use_LocalCommu[] = "Error, you may not use LocalCommunityEvaluation directly, use a sub-class instead";
static const char __pyx_k_Error_you_may_not_use_LocalCover[] = "Error, you may not use LocalCoverEvaluation directly, use a sub-class instead";
static const char __pyx_k_Error_you_may_not_use_LocalParti[] = "Error, you may not use LocalPartitionEvaluation directly, use a sub-class instead";
static const char __pyx_k_Error_you_may_not_use_Overlappin[] = "Error, you may not use OverlappingCommunityDetector directly, use a sub-class instead";
static const char __pyx_k_Expected_at_least_d_argument_s_g[] = "Expected at least %d argument%s, got %d";
static const char __pyx_k_Function_call_with_ambiguous_arg[] = "Function call with ambiguous argument types";
static const char __pyx_k_GraphClusteringTools___reduce_cy[] = "GraphClusteringTools.__reduce_cython__";
static const char __pyx_k_GraphClusteringTools_communicati[] = "GraphClusteringTools.communicationGraph";
static const char __pyx_k_GraphClusteringTools_equalCluste[] = "GraphClusteringTools.equalClustering";
static const char __pyx_k_GraphClusteringTools_getImbalanc[] = "GraphClusteringTools.getImbalance";
static const char __pyx_k_GraphClusteringTools_isOneCluste[] = "GraphClusteringTools.isOneClustering";
static const char __pyx_k_GraphClusteringTools_isProperClu[] = "GraphClusteringTools.isProperClustering";
static const char __pyx_k_GraphClusteringTools_isSingleton[] = "GraphClusteringTools.isSingletonClustering";
static const char __pyx_k_GraphClusteringTools_weightedDeg[] = "GraphClusteringTools.weightedDegreeWithCluster";
static const char __pyx_k_GraphStructuralRandMeasure___red[] = "GraphStructuralRandMeasure.__reduce_cython__";
static const char __pyx_k_GraphStructuralRandMeasure___set[] = "GraphStructuralRandMeasure.__setstate_cython__";
static const char __pyx_k_GraphStructuralRandMeasure_getDi[] = "GraphStructuralRandMeasure.getDissimilarity";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())";
static const char __pyx_k_IntrapartitionDensity___reduce_c[] = "IntrapartitionDensity.__reduce_cython__";
static const char __pyx_k_IntrapartitionDensity___setstate[] = "IntrapartitionDensity.__setstate_cython__";
static const char __pyx_k_IsolatedInterpartitionConductanc[] = "IsolatedInterpartitionConductance";
static const char __pyx_k_JaccardMeasure___setstate_cython[] = "JaccardMeasure.__setstate_cython__";
static const char __pyx_k_LPDegreeOrdered___setstate_cytho[] = "LPDegreeOrdered.__setstate_cython__";
static const char __pyx_k_LPDegreeOrdered_numberOfIteratio[] = "LPDegreeOrdered.numberOfIterations";
static const char __pyx_k_LocalCommunityEvaluation___reduc[] = "LocalCommunityEvaluation.__reduce_cython__";
static const char __pyx_k_LocalCommunityEvaluation___setst[] = "LocalCommunityEvaluation.__setstate_cython__";
static const char __pyx_k_LocalCommunityEvaluation_getMaxi[] = "LocalCommunityEvaluation.getMaximumValue";
static const char __pyx_k_LocalCommunityEvaluation_getMini[] = "LocalCommunityEvaluation.getMinimumValue";
static const char __pyx_k_LocalCommunityEvaluation_getUnwe[] = "LocalCommunityEvaluation.getUnweightedAverage";
static const char __pyx_k_LocalCommunityEvaluation_getValu[] = "LocalCommunityEvaluation.getValue";
static const char __pyx_k_LocalCommunityEvaluation_getWeig[] = "LocalCommunityEvaluation.getWeightedAverage";
static const char __pyx_k_LocalCommunityEvaluation_isSmall[] = "LocalCommunityEvaluation.isSmallBetter";
static const char __pyx_k_LocalCoverEvaluation___reduce_cy[] = "LocalCoverEvaluation.__reduce_cython__";
static const char __pyx_k_LocalPartitionEvaluation___reduc[] = "LocalPartitionEvaluation.__reduce_cython__";
static const char __pyx_k_LocalPartitionEvaluation___setst[] = "LocalPartitionEvaluation.__setstate_cython__";
static const char __pyx_k_LouvainMapEquation___reduce_cyth[] = "LouvainMapEquation.__reduce_cython__";
static const char __pyx_k_LouvainMapEquation___setstate_cy[] = "LouvainMapEquation.__setstate_cython__";
static const char __pyx_k_NodeStructuralRandMeasure___redu[] = "NodeStructuralRandMeasure.__reduce_cython__";
static const char __pyx_k_NodeStructuralRandMeasure___sets[] = "NodeStructuralRandMeasure.__setstate_cython__";
static const char __pyx_k_NodeStructuralRandMeasure_getDis[] = "NodeStructuralRandMeasure.getDissimilarity";
static const char __pyx_k_OverlappingCommunityDetector___r[] = "OverlappingCommunityDetector.__reduce_cython__";
static const char __pyx_k_OverlappingCommunityDetector___s[] = "OverlappingCommunityDetector.__setstate_cython__";
static const char __pyx_k_OverlappingCommunityDetector_get[] = "OverlappingCommunityDetector.getCover";
static const char __pyx_k_OverlappingNMIDistance___setstat[] = "OverlappingNMIDistance.__setstate_cython__";
static const char __pyx_k_OverlappingNMIDistance__validate[] = "OverlappingNMIDistance._validateNormalization";
static const char __pyx_k_OverlappingNMIDistance_getDissim[] = "OverlappingNMIDistance.getDissimilarity";
static const char __pyx_k_OverlappingNMIDistance_setNormal[] = "OverlappingNMIDistance.setNormalization";
static const char __pyx_k_ParallelLeiden___setstate_cython[] = "ParallelLeiden.__setstate_cython__";
static const char __pyx_k_PartitionFragmentation___setstat[] = "PartitionFragmentation.__setstate_cython__";
static const char __pyx_k_PartitionHubDominance___reduce_c[] = "PartitionHubDominance.__reduce_cython__";
static const char __pyx_k_PartitionHubDominance___setstate[] = "PartitionHubDominance.__setstate_cython__";
static const char __pyx_k_PartitionIntersection___reduce_c[] = "PartitionIntersection.__reduce_cython__";
static const char __pyx_k_PartitionIntersection___setstate[] = "PartitionIntersection.__setstate_cython__";
static const char __pyx_k_SpectralPartitioner__generatePar[] = "SpectralPartitioner._generatePartition";
static const char __pyx_k_SpectralPartitioner__getQuantile[] = "SpectralPartitioner._getQuantiles";
static const char __pyx_k_SpectralPartitioner__prepareSpec[] = "SpectralPartitioner._prepareSpectrum";
static const char __pyx_k_SpectralPartitioner_getPartition[] = "SpectralPartitioner.getPartition";
static const char __pyx_k_StablePartitionNodes___reduce_cy[] = "StablePartitionNodes.__reduce_cython__";
static const char __pyx_k_There_is_no_core_for_the_specifi[] = "There is no core for the specified k";
static const char __pyx_k_makeContinuousBalancedClustering[] = "makeContinuousBalancedClustering";
static const char __pyx_k_makeNoncontinuousBalancedCluster[] = "makeNoncontinuousBalancedClustering";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_self__this_cannot_be_converted_t[] = "self._this cannot be converted to a Python object for pickling";
static const char __pyx_k_IsolatedInterpartitionExpansion_2[] = "IsolatedInterpartitionExpansion.__reduce_cython__";
static const char __pyx_k_IsolatedInterpartitionExpansion_3[] = "IsolatedInterpartitionExpansion.__setstate_cython__";
static const char __pyx_k_IsolatedInterpartitionConductanc_2[] = "IsolatedInterpartitionConductance.__reduce_cython__";
static const char __pyx_k_IsolatedInterpartitionConductanc_3[] = "IsolatedInterpartitionConductance.__setstate_cython__";
static const char __pyx_k_LocalCommunityEvaluation_getValu_2[] = "LocalCommunityEvaluation.getValues";
/* #### Code section: decls ### */
static int __pyx_pf_9networkit_9community_17CommunityDetector___init__(struct __pyx_obj_9networkit_9community_CommunityDetector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs); /* proto */
static PyObject *__pyx_pf_9networkit_9community_17CommunityDetector_2getPartition(struct __pyx_obj_9networkit_9community_CommunityDetector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_17CommunityDetector_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_CommunityDetector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_17CommunityDetector_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_CommunityDetector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_28OverlappingCommunityDetector___init__(struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs); /* proto */
static PyObject *__pyx_pf_9networkit_9community_28OverlappingCommunityDetector_2getCover(struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_28OverlappingCommunityDetector_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_28OverlappingCommunityDetector_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19ClusteringGenerator_makeSingletonClustering(struct __pyx_obj_9networkit_9community_ClusteringGenerator *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19ClusteringGenerator_2makeOneClustering(struct __pyx_obj_9networkit_9community_ClusteringGenerator *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19ClusteringGenerator_4makeRandomClustering(struct __pyx_obj_9networkit_9community_ClusteringGenerator *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_count __pyx_v_k); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19ClusteringGenerator_6makeContinuousBalancedClustering(struct __pyx_obj_9networkit_9community_ClusteringGenerator *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_count __pyx_v_k); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19ClusteringGenerator_8makeNoncontinuousBalancedClustering(struct __pyx_obj_9networkit_9community_ClusteringGenerator *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_count __pyx_v_k); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19ClusteringGenerator_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_ClusteringGenerator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19ClusteringGenerator_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_ClusteringGenerator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_getImbalance(struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_2communicationGraph(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_graph, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta); /* proto */
static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_4weightedDegreeWithCluster(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_graph, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, __pyx_t_9networkit_10structures_node __pyx_v_u, __pyx_t_9networkit_10structures_index __pyx_v_cid); /* proto */
static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_6isProperClustering(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta); /* proto */
static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_8isSingletonClustering(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta); /* proto */
static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_10isOneClustering(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta); /* proto */
static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_12equalClustering(struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_eta, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_14__reduce_cython__(struct __pyx_obj_9networkit_9community_GraphClusteringTools *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_16__setstate_cython__(struct __pyx_obj_9networkit_9community_GraphClusteringTools *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_9community_21PartitionIntersection_calculate(struct __pyx_obj_9networkit_9community_PartitionIntersection *__pyx_v_self, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_eta); /* proto */
static PyObject *__pyx_pf_9networkit_9community_21PartitionIntersection_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PartitionIntersection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_21PartitionIntersection_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PartitionIntersection *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_9community_8Coverage_getQuality(struct __pyx_obj_9networkit_9community_Coverage *__pyx_v_self, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_9community_8Coverage_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_Coverage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_8Coverage_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_Coverage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_9community_7EdgeCut_getQuality(struct __pyx_obj_9networkit_9community_EdgeCut *__pyx_v_self, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_9community_7EdgeCut_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_EdgeCut *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_7EdgeCut_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_EdgeCut *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_9community_10Modularity_getQuality(struct __pyx_obj_9networkit_9community_Modularity *__pyx_v_self, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_9community_10Modularity_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_Modularity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_10Modularity_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_Modularity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_9community_12HubDominance_getQuality(struct __pyx_obj_9networkit_9community_HubDominance *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults, PyObject *__pyx_v__fused_sigindex); /* proto */
static PyObject *__pyx_pf_9networkit_9community_12HubDominance_2getQuality(struct __pyx_obj_9networkit_9community_HubDominance *__pyx_v_self, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_9community_12HubDominance_4getQuality(struct __pyx_obj_9networkit_9community_HubDominance *__pyx_v_self, struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_zeta, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_9community_12HubDominance_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_HubDominance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_12HubDominance_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_HubDominance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_3PLM___cinit__(struct __pyx_obj_9networkit_9community_PLM *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_refine, PyObject *__pyx_v_gamma, PyObject *__pyx_v_par, PyObject *__pyx_v_maxIter, PyObject *__pyx_v_turbo, PyObject *__pyx_v_recurse); /* proto */
static PyObject *__pyx_pf_9networkit_9community_3PLM_2getTiming(struct __pyx_obj_9networkit_9community_PLM *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_3PLM_4coarsen(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, CYTHON_UNUSED bool __pyx_v_parallel); /* proto */
static PyObject *__pyx_pf_9networkit_9community_3PLM_6prolong(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_Gcoarse, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zetaCoarse, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_Gfine, std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_nodeToMetaNode); /* proto */
static PyObject *__pyx_pf_9networkit_9community_3PLM_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PLM *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_3PLM_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PLM *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_14ParallelLeiden___cinit__(struct __pyx_obj_9networkit_9community_ParallelLeiden *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, int __pyx_v_iterations, bool __pyx_v_randomize, double __pyx_v_gamma); /* proto */
static PyObject *__pyx_pf_9networkit_9community_14ParallelLeiden_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_ParallelLeiden *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_14ParallelLeiden_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_ParallelLeiden *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_18LouvainMapEquation___cinit__(struct __pyx_obj_9networkit_9community_LouvainMapEquation *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_hierarchical, PyObject *__pyx_v_maxIterations, PyObject *__pyx_v_parallelizationStrategy); /* proto */
static PyObject *__pyx_pf_9networkit_9community_18LouvainMapEquation_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LouvainMapEquation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_18LouvainMapEquation_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LouvainMapEquation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_3PLP___cinit__(struct __pyx_obj_9networkit_9community_PLP *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_count __pyx_v_updateThreshold, __pyx_t_9networkit_10structures_count __pyx_v_maxIterations, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_baseClustering); /* proto */
static PyObject *__pyx_pf_9networkit_9community_3PLP_2numberOfIterations(struct __pyx_obj_9networkit_9community_PLP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_3PLP_4getTiming(struct __pyx_obj_9networkit_9community_PLP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_3PLP_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PLP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_3PLP_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PLP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_3LFM___cinit__(struct __pyx_obj_9networkit_9community_LFM *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_3scd_SelectiveCommunityDetector *__pyx_v_scd); /* proto */
static PyObject *__pyx_pf_9networkit_9community_3LFM_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LFM *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_3LFM_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LFM *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_15LPDegreeOrdered___cinit__(struct __pyx_obj_9networkit_9community_LPDegreeOrdered *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_9community_15LPDegreeOrdered_2numberOfIterations(struct __pyx_obj_9networkit_9community_LPDegreeOrdered *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_15LPDegreeOrdered_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LPDegreeOrdered *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_15LPDegreeOrdered_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LPDegreeOrdered *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_13CutClustering___cinit__(struct __pyx_obj_9networkit_9community_CutClustering *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_edgeweight __pyx_v_alpha); /* proto */
static PyObject *__pyx_pf_9networkit_9community_13CutClustering_2getClusterHierarchy(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_9community_13CutClustering_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_CutClustering *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_13CutClustering_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_CutClustering *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_9community_20DissimilarityMeasure___reduce_cython__(struct __pyx_obj_9networkit_9community_DissimilarityMeasure *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_20DissimilarityMeasure_2__setstate_cython__(struct __pyx_obj_9networkit_9community_DissimilarityMeasure *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_9community_25NodeStructuralRandMeasure_getDissimilarity(struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second); /* proto */
static PyObject *__pyx_pf_9networkit_9community_25NodeStructuralRandMeasure_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_25NodeStructuralRandMeasure_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_9community_26GraphStructuralRandMeasure_getDissimilarity(struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second); /* proto */
static PyObject *__pyx_pf_9networkit_9community_26GraphStructuralRandMeasure_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_26GraphStructuralRandMeasure_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_9community_14JaccardMeasure_getDissimilarity(struct __pyx_obj_9networkit_9community_JaccardMeasure *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second); /* proto */
static PyObject *__pyx_pf_9networkit_9community_14JaccardMeasure_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_JaccardMeasure *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_14JaccardMeasure_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_JaccardMeasure *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_9community_11NMIDistance_getDissimilarity(struct __pyx_obj_9networkit_9community_NMIDistance *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second); /* proto */
static PyObject *__pyx_pf_9networkit_9community_11NMIDistance_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_NMIDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_11NMIDistance_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_NMIDistance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19AdjustedRandMeasure_getDissimilarity(struct __pyx_obj_9networkit_9community_AdjustedRandMeasure *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19AdjustedRandMeasure_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_AdjustedRandMeasure *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19AdjustedRandMeasure_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_AdjustedRandMeasure *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_24LocalCommunityEvaluation___init__(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs); /* proto */
static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_2getWeightedAverage(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_4getUnweightedAverage(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_6getMaximumValue(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_8getMinimumValue(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_10getValue(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self, __pyx_t_9networkit_10structures_index __pyx_v_i); /* proto */
static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_12getValues(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_14isSmallBetter(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_24LocalPartitionEvaluation___init__(struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs); /* proto */
static int __pyx_pf_9networkit_9community_24LocalPartitionEvaluation_2__cinit__(struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_P, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs); /* proto */
static void __pyx_pf_9networkit_9community_24LocalPartitionEvaluation_4__dealloc__(struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_24LocalPartitionEvaluation_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_24LocalPartitionEvaluation_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_20LocalCoverEvaluation___init__(struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs); /* proto */
static int __pyx_pf_9networkit_9community_20LocalCoverEvaluation_2__cinit__(struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_C, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs); /* proto */
static void __pyx_pf_9networkit_9community_20LocalCoverEvaluation_4__dealloc__(struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_20LocalCoverEvaluation_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_20LocalCoverEvaluation_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_21IntrapartitionDensity___cinit__(struct __pyx_obj_9networkit_9community_IntrapartitionDensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_21IntrapartitionDensity_2getGlobal(struct __pyx_obj_9networkit_9community_IntrapartitionDensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_21IntrapartitionDensity_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_IntrapartitionDensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_21IntrapartitionDensity_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_IntrapartitionDensity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_33IsolatedInterpartitionConductance___cinit__(struct __pyx_obj_9networkit_9community_IsolatedInterpartitionConductance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_33IsolatedInterpartitionConductance_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_IsolatedInterpartitionConductance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_33IsolatedInterpartitionConductance_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_IsolatedInterpartitionConductance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_31IsolatedInterpartitionExpansion___cinit__(struct __pyx_obj_9networkit_9community_IsolatedInterpartitionExpansion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_31IsolatedInterpartitionExpansion_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_IsolatedInterpartitionExpansion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_31IsolatedInterpartitionExpansion_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_IsolatedInterpartitionExpansion *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_17CoverHubDominance___cinit__(struct __pyx_obj_9networkit_9community_CoverHubDominance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_17CoverHubDominance_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_CoverHubDominance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_17CoverHubDominance_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_CoverHubDominance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_21PartitionHubDominance___cinit__(struct __pyx_obj_9networkit_9community_PartitionHubDominance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_21PartitionHubDominance_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PartitionHubDominance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_21PartitionHubDominance_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PartitionHubDominance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_22PartitionFragmentation___cinit__(struct __pyx_obj_9networkit_9community_PartitionFragmentation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_22PartitionFragmentation_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PartitionFragmentation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_22PartitionFragmentation_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PartitionFragmentation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_20StablePartitionNodes___cinit__(struct __pyx_obj_9networkit_9community_StablePartitionNodes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_20StablePartitionNodes_2isStable(struct __pyx_obj_9networkit_9community_StablePartitionNodes *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_u); /* proto */
static PyObject *__pyx_pf_9networkit_9community_20StablePartitionNodes_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_StablePartitionNodes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_20StablePartitionNodes_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_StablePartitionNodes *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_9community_17CoverF1Similarity___cinit__(struct __pyx_obj_9networkit_9community_CoverF1Similarity *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_C, struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_reference); /* proto */
static PyObject *__pyx_pf_9networkit_9community_17CoverF1Similarity_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_CoverF1Similarity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_17CoverF1Similarity_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_CoverF1Similarity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_9community_detectCommunities(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_G, PyObject *__pyx_v_algo, PyObject *__pyx_v_inspect); /* proto */
static PyObject *__pyx_pf_9networkit_9community_2inspectCommunities(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_zeta, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_9community_4communityGraph(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_G, PyObject *__pyx_v_zeta); /* proto */
static PyObject *__pyx_pf_9networkit_9community_6evalCommunityDetection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_algo, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_9community_8readCommunities(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_path, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_9networkit_9community_10writeCommunities(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_communities, PyObject *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_9networkit_9community_12compareCommunities(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_G, CYTHON_UNUSED PyObject *__pyx_v_zeta1, CYTHON_UNUSED PyObject *__pyx_v_zeta2); /* proto */
static PyObject *__pyx_pf_9networkit_9community_14kCoreCommunityDetection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_G, PyObject *__pyx_v_k, PyObject *__pyx_v_algo, PyObject *__pyx_v_inspect); /* proto */
static int __pyx_pf_9networkit_9community_22OverlappingNMIDistance___cinit__(struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *__pyx_v_self, PyObject *__pyx_v_normalization); /* proto */
static PyObject *__pyx_pf_9networkit_9community_22OverlappingNMIDistance_2setNormalization(struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *__pyx_v_self, PyObject *__pyx_v_normalization); /* proto */
static PyObject *__pyx_pf_9networkit_9community_22OverlappingNMIDistance_4getDissimilarity(struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults, PyObject *__pyx_v__fused_sigindex); /* proto */
static PyObject *__pyx_pf_9networkit_9community_22OverlappingNMIDistance_8getDissimilarity(struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second); /* proto */
static PyObject *__pyx_pf_9networkit_9community_22OverlappingNMIDistance_10getDissimilarity(struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_first, struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_second); /* proto */
static PyObject *__pyx_pf_9networkit_9community_22OverlappingNMIDistance_6_validateNormalization(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *__pyx_v_self, enum NetworKit::OverlappingNMIDistance::Normalization __pyx_v_normalization); /* proto */
static PyObject *__pyx_pf_9networkit_9community_22OverlappingNMIDistance_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_22OverlappingNMIDistance_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_graph, PyObject *__pyx_v_count, PyObject *__pyx_v_balanced); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner_2_prepareSpectrum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner_4_getQuantiles(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_eigv, PyObject *__pyx_v_vertices, PyObject *__pyx_v_count); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner_6_getMean(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_eigv, PyObject *__pyx_v_vertices); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner_8_trisect(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_partition, PyObject *__pyx_v_iteration); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner_10_bisect(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_count, PyObject *__pyx_v_partition, PyObject *__pyx_v_iteration); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner_12_generatePartition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner_14run(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner_16getPartition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9community_16__pyx_unpickle_GraphClusteringTools(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_9community_18__pyx_unpickle_DissimilarityMeasure(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_9networkit_9community_CommunityDetector(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_OverlappingCommunityDetector(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_ClusteringGenerator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_GraphClusteringTools(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_PartitionIntersection(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_Coverage(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_EdgeCut(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_Modularity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_HubDominance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_PLM(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_ParallelLeiden(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_LouvainMapEquation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_PLP(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_LFM(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_LPDegreeOrdered(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_CutClustering(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_DissimilarityMeasure(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_NodeStructuralRandMeasure(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_GraphStructuralRandMeasure(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_JaccardMeasure(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_NMIDistance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_AdjustedRandMeasure(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_LocalPartitionEvaluation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_LocalCoverEvaluation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_IntrapartitionDensity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_IsolatedInterpartitionConductance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_IsolatedInterpartitionExpansion(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_CoverHubDominance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_PartitionHubDominance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_PartitionFragmentation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_StablePartitionNodes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_CoverF1Similarity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9community_OverlappingNMIDistance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, 0, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_values = {0, 0, 0, 0, 0};
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_9networkit_4base__CythonParentClass;
  PyTypeObject *__pyx_ptype_9networkit_4base_Algorithm;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_9networkit_10structures_Cover;
  PyTypeObject *__pyx_ptype_9networkit_10structures_Partition;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_9networkit_5graph_Graph;
  PyTypeObject *__pyx_ptype_9networkit_5graph_NodeIntAttribute;
  PyTypeObject *__pyx_ptype_9networkit_5graph_NodeDoubleAttribute;
  PyTypeObject *__pyx_ptype_9networkit_5graph_NodeStringAttribute;
  PyTypeObject *__pyx_ptype_9networkit_5graph_EdgeIntAttribute;
  PyTypeObject *__pyx_ptype_9networkit_5graph_EdgeDoubleAttribute;
  PyTypeObject *__pyx_ptype_9networkit_5graph_EdgeStringAttribute;
  PyTypeObject *__pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest;
  PyTypeObject *__pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_9networkit_3scd_SelectiveCommunityDetector;
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_9networkit_9community_CommunityDetector;
  PyObject *__pyx_type_9networkit_9community_OverlappingCommunityDetector;
  PyObject *__pyx_type_9networkit_9community_ClusteringGenerator;
  PyObject *__pyx_type_9networkit_9community_GraphClusteringTools;
  PyObject *__pyx_type_9networkit_9community_PartitionIntersection;
  PyObject *__pyx_type_9networkit_9community_Coverage;
  PyObject *__pyx_type_9networkit_9community_EdgeCut;
  PyObject *__pyx_type_9networkit_9community_Modularity;
  PyObject *__pyx_type_9networkit_9community_HubDominance;
  PyObject *__pyx_type_9networkit_9community_PLM;
  PyObject *__pyx_type_9networkit_9community_ParallelLeiden;
  PyObject *__pyx_type_9networkit_9community_LouvainMapEquation;
  PyObject *__pyx_type_9networkit_9community_PLP;
  PyObject *__pyx_type_9networkit_9community_LFM;
  PyObject *__pyx_type_9networkit_9community_LPDegreeOrdered;
  PyObject *__pyx_type_9networkit_9community_CutClustering;
  PyObject *__pyx_type_9networkit_9community_DissimilarityMeasure;
  PyObject *__pyx_type_9networkit_9community_NodeStructuralRandMeasure;
  PyObject *__pyx_type_9networkit_9community_GraphStructuralRandMeasure;
  PyObject *__pyx_type_9networkit_9community_JaccardMeasure;
  PyObject *__pyx_type_9networkit_9community_NMIDistance;
  PyObject *__pyx_type_9networkit_9community_AdjustedRandMeasure;
  PyObject *__pyx_type_9networkit_9community_LocalCommunityEvaluation;
  PyObject *__pyx_type_9networkit_9community_LocalPartitionEvaluation;
  PyObject *__pyx_type_9networkit_9community_LocalCoverEvaluation;
  PyObject *__pyx_type_9networkit_9community_IntrapartitionDensity;
  PyObject *__pyx_type_9networkit_9community_IsolatedInterpartitionConductance;
  PyObject *__pyx_type_9networkit_9community_IsolatedInterpartitionExpansion;
  PyObject *__pyx_type_9networkit_9community_CoverHubDominance;
  PyObject *__pyx_type_9networkit_9community_PartitionHubDominance;
  PyObject *__pyx_type_9networkit_9community_PartitionFragmentation;
  PyObject *__pyx_type_9networkit_9community_StablePartitionNodes;
  PyObject *__pyx_type_9networkit_9community_CoverF1Similarity;
  PyObject *__pyx_type_9networkit_9community_OverlappingNMIDistance;
  #endif
  PyTypeObject *__pyx_ptype_9networkit_9community_CommunityDetector;
  PyTypeObject *__pyx_ptype_9networkit_9community_OverlappingCommunityDetector;
  PyTypeObject *__pyx_ptype_9networkit_9community_ClusteringGenerator;
  PyTypeObject *__pyx_ptype_9networkit_9community_GraphClusteringTools;
  PyTypeObject *__pyx_ptype_9networkit_9community_PartitionIntersection;
  PyTypeObject *__pyx_ptype_9networkit_9community_Coverage;
  PyTypeObject *__pyx_ptype_9networkit_9community_EdgeCut;
  PyTypeObject *__pyx_ptype_9networkit_9community_Modularity;
  PyTypeObject *__pyx_ptype_9networkit_9community_HubDominance;
  PyTypeObject *__pyx_ptype_9networkit_9community_PLM;
  PyTypeObject *__pyx_ptype_9networkit_9community_ParallelLeiden;
  PyTypeObject *__pyx_ptype_9networkit_9community_LouvainMapEquation;
  PyTypeObject *__pyx_ptype_9networkit_9community_PLP;
  PyTypeObject *__pyx_ptype_9networkit_9community_LFM;
  PyTypeObject *__pyx_ptype_9networkit_9community_LPDegreeOrdered;
  PyTypeObject *__pyx_ptype_9networkit_9community_CutClustering;
  PyTypeObject *__pyx_ptype_9networkit_9community_DissimilarityMeasure;
  PyTypeObject *__pyx_ptype_9networkit_9community_NodeStructuralRandMeasure;
  PyTypeObject *__pyx_ptype_9networkit_9community_GraphStructuralRandMeasure;
  PyTypeObject *__pyx_ptype_9networkit_9community_JaccardMeasure;
  PyTypeObject *__pyx_ptype_9networkit_9community_NMIDistance;
  PyTypeObject *__pyx_ptype_9networkit_9community_AdjustedRandMeasure;
  PyTypeObject *__pyx_ptype_9networkit_9community_LocalCommunityEvaluation;
  PyTypeObject *__pyx_ptype_9networkit_9community_LocalPartitionEvaluation;
  PyTypeObject *__pyx_ptype_9networkit_9community_LocalCoverEvaluation;
  PyTypeObject *__pyx_ptype_9networkit_9community_IntrapartitionDensity;
  PyTypeObject *__pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance;
  PyTypeObject *__pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion;
  PyTypeObject *__pyx_ptype_9networkit_9community_CoverHubDominance;
  PyTypeObject *__pyx_ptype_9networkit_9community_PartitionHubDominance;
  PyTypeObject *__pyx_ptype_9networkit_9community_PartitionFragmentation;
  PyTypeObject *__pyx_ptype_9networkit_9community_StablePartitionNodes;
  PyTypeObject *__pyx_ptype_9networkit_9community_CoverF1Similarity;
  PyTypeObject *__pyx_ptype_9networkit_9community_OverlappingNMIDistance;
  PyObject *__pyx_kp_u_0_is_not_a_file;
  PyObject *__pyx_n_s_ARITHMETIC_MEAN;
  PyObject *__pyx_n_s_AdjustedRandMeasure;
  PyObject *__pyx_n_s_AdjustedRandMeasure___reduce_cyt;
  PyObject *__pyx_n_s_AdjustedRandMeasure___setstate_c;
  PyObject *__pyx_n_s_AdjustedRandMeasure_getDissimila;
  PyObject *__pyx_n_s_ArithmeticMean;
  PyObject *__pyx_n_s_AssertionError;
  PyObject *__pyx_n_s_BinaryEdgeListPartitionReader;
  PyObject *__pyx_n_s_BinaryEdgeListPartitionWriter;
  PyObject *__pyx_n_s_BinaryPartitionReader;
  PyObject *__pyx_n_s_BinaryPartitionWriter;
  PyObject *__pyx_n_s_C;
  PyObject *__pyx_n_s_ClusteringGenerator;
  PyObject *__pyx_n_s_ClusteringGenerator___reduce_cyt;
  PyObject *__pyx_n_s_ClusteringGenerator___setstate_c;
  PyObject *__pyx_n_s_ClusteringGenerator_makeContinuo;
  PyObject *__pyx_n_s_ClusteringGenerator_makeNonconti;
  PyObject *__pyx_n_s_ClusteringGenerator_makeOneClust;
  PyObject *__pyx_n_s_ClusteringGenerator_makeRandomCl;
  PyObject *__pyx_n_s_ClusteringGenerator_makeSingleto;
  PyObject *__pyx_kp_u_Communities_detected_in_5f_s;
  PyObject *__pyx_n_s_CommunityDetector;
  PyObject *__pyx_n_s_CommunityDetector___reduce_cytho;
  PyObject *__pyx_n_s_CommunityDetector___setstate_cyt;
  PyObject *__pyx_n_s_CommunityDetector_getPartition;
  PyObject *__pyx_n_s_CoreDecomposition;
  PyObject *__pyx_n_s_Cover;
  PyObject *__pyx_n_s_CoverF1Similarity;
  PyObject *__pyx_n_s_CoverF1Similarity___reduce_cytho;
  PyObject *__pyx_n_s_CoverF1Similarity___setstate_cyt;
  PyObject *__pyx_n_s_CoverHubDominance;
  PyObject *__pyx_n_s_CoverHubDominance___reduce_cytho;
  PyObject *__pyx_n_s_CoverHubDominance___setstate_cyt;
  PyObject *__pyx_n_s_Coverage;
  PyObject *__pyx_n_s_Coverage___reduce_cython;
  PyObject *__pyx_n_s_Coverage___setstate_cython;
  PyObject *__pyx_n_s_Coverage_getQuality;
  PyObject *__pyx_n_s_CutClustering;
  PyObject *__pyx_n_s_CutClustering___reduce_cython;
  PyObject *__pyx_n_s_CutClustering___setstate_cython;
  PyObject *__pyx_n_s_CutClustering_getClusterHierarch;
  PyObject *__pyx_n_s_DissimilarityMeasure;
  PyObject *__pyx_n_s_DissimilarityMeasure___reduce_cy;
  PyObject *__pyx_n_s_DissimilarityMeasure___setstate;
  PyObject *__pyx_n_s_EdgeCut;
  PyObject *__pyx_n_s_EdgeCut___reduce_cython;
  PyObject *__pyx_n_s_EdgeCut___setstate_cython;
  PyObject *__pyx_n_s_EdgeCut_getQuality;
  PyObject *__pyx_n_s_EdgeListPartitionReader;
  PyObject *__pyx_kp_u_Error_first_and_second_must_both;
  PyObject *__pyx_kp_u_Error_invalid_normalization_meth;
  PyObject *__pyx_kp_u_Error_object_not_properly_initia;
  PyObject *__pyx_kp_u_Error_you_may_not_use_CommunityD;
  PyObject *__pyx_kp_u_Error_you_may_not_use_LocalCommu;
  PyObject *__pyx_kp_u_Error_you_may_not_use_LocalCover;
  PyObject *__pyx_kp_u_Error_you_may_not_use_LocalParti;
  PyObject *__pyx_kp_u_Error_you_may_not_use_Overlappin;
  PyObject *__pyx_kp_s_Expected_at_least_d_argument_s_g;
  PyObject *__pyx_kp_s_Function_call_with_ambiguous_arg;
  PyObject *__pyx_n_s_G;
  PyObject *__pyx_n_s_GEOMETRIC_MEAN;
  PyObject *__pyx_n_s_Gcoarse;
  PyObject *__pyx_n_s_GeometricMean;
  PyObject *__pyx_n_s_Gfine;
  PyObject *__pyx_n_s_GraphClusteringTools;
  PyObject *__pyx_n_s_GraphClusteringTools___reduce_cy;
  PyObject *__pyx_n_s_GraphClusteringTools___setstate;
  PyObject *__pyx_n_s_GraphClusteringTools_communicati;
  PyObject *__pyx_n_s_GraphClusteringTools_equalCluste;
  PyObject *__pyx_n_s_GraphClusteringTools_getImbalanc;
  PyObject *__pyx_n_s_GraphClusteringTools_isOneCluste;
  PyObject *__pyx_n_s_GraphClusteringTools_isProperClu;
  PyObject *__pyx_n_s_GraphClusteringTools_isSingleton;
  PyObject *__pyx_n_s_GraphClusteringTools_weightedDeg;
  PyObject *__pyx_n_s_GraphStructuralRandMeasure;
  PyObject *__pyx_n_s_GraphStructuralRandMeasure___red;
  PyObject *__pyx_n_s_GraphStructuralRandMeasure___set;
  PyObject *__pyx_n_s_GraphStructuralRandMeasure_getDi;
  PyObject *__pyx_n_s_GraphTools;
  PyObject *__pyx_n_s_HubDominance;
  PyObject *__pyx_n_s_HubDominance___reduce_cython;
  PyObject *__pyx_n_s_HubDominance___setstate_cython;
  PyObject *__pyx_n_s_HubDominance_getQuality;
  PyObject *__pyx_n_s_IOError;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
  PyObject *__pyx_n_s_IntrapartitionDensity;
  PyObject *__pyx_n_s_IntrapartitionDensity___reduce_c;
  PyObject *__pyx_n_s_IntrapartitionDensity___setstate;
  PyObject *__pyx_n_s_IntrapartitionDensity_getGlobal;
  PyObject *__pyx_n_s_IsolatedInterpartitionConductanc;
  PyObject *__pyx_n_s_IsolatedInterpartitionConductanc_2;
  PyObject *__pyx_n_s_IsolatedInterpartitionConductanc_3;
  PyObject *__pyx_n_s_IsolatedInterpartitionExpansion;
  PyObject *__pyx_n_s_IsolatedInterpartitionExpansion_2;
  PyObject *__pyx_n_s_IsolatedInterpartitionExpansion_3;
  PyObject *__pyx_n_s_JOINT_ENTROPY;
  PyObject *__pyx_n_s_JaccardMeasure;
  PyObject *__pyx_n_s_JaccardMeasure___reduce_cython;
  PyObject *__pyx_n_s_JaccardMeasure___setstate_cython;
  PyObject *__pyx_n_s_JaccardMeasure_getDissimilarity;
  PyObject *__pyx_n_s_JointEntropy;
  PyObject *__pyx_n_s_KeyError;
  PyObject *__pyx_n_s_LFM;
  PyObject *__pyx_n_s_LFM___reduce_cython;
  PyObject *__pyx_n_s_LFM___setstate_cython;
  PyObject *__pyx_n_s_LPDegreeOrdered;
  PyObject *__pyx_n_s_LPDegreeOrdered___reduce_cython;
  PyObject *__pyx_n_s_LPDegreeOrdered___setstate_cytho;
  PyObject *__pyx_n_s_LPDegreeOrdered_numberOfIteratio;
  PyObject *__pyx_n_s_LocalCommunityEvaluation;
  PyObject *__pyx_n_s_LocalCommunityEvaluation___reduc;
  PyObject *__pyx_n_s_LocalCommunityEvaluation___setst;
  PyObject *__pyx_n_s_LocalCommunityEvaluation_getMaxi;
  PyObject *__pyx_n_s_LocalCommunityEvaluation_getMini;
  PyObject *__pyx_n_s_LocalCommunityEvaluation_getUnwe;
  PyObject *__pyx_n_s_LocalCommunityEvaluation_getValu;
  PyObject *__pyx_n_s_LocalCommunityEvaluation_getValu_2;
  PyObject *__pyx_n_s_LocalCommunityEvaluation_getWeig;
  PyObject *__pyx_n_s_LocalCommunityEvaluation_isSmall;
  PyObject *__pyx_n_s_LocalCoverEvaluation;
  PyObject *__pyx_n_s_LocalCoverEvaluation___reduce_cy;
  PyObject *__pyx_n_s_LocalCoverEvaluation___setstate;
  PyObject *__pyx_n_s_LocalPartitionEvaluation;
  PyObject *__pyx_n_s_LocalPartitionEvaluation___reduc;
  PyObject *__pyx_n_s_LocalPartitionEvaluation___setst;
  PyObject *__pyx_n_s_LouvainMapEquation;
  PyObject *__pyx_n_s_LouvainMapEquation___reduce_cyth;
  PyObject *__pyx_n_s_LouvainMapEquation___setstate_cy;
  PyObject *__pyx_n_s_MAX;
  PyObject *__pyx_n_s_MIN;
  PyObject *__pyx_n_s_Max;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_n_s_Min;
  PyObject *__pyx_n_s_MissingDependencyError;
  PyObject *__pyx_n_s_Modularity;
  PyObject *__pyx_n_s_Modularity___reduce_cython;
  PyObject *__pyx_n_s_Modularity___setstate_cython;
  PyObject *__pyx_n_s_Modularity_getQuality;
  PyObject *__pyx_n_s_NMIDistance;
  PyObject *__pyx_n_s_NMIDistance___reduce_cython;
  PyObject *__pyx_n_s_NMIDistance___setstate_cython;
  PyObject *__pyx_n_s_NMIDistance_getDissimilarity;
  PyObject *__pyx_kp_s_No_matching_signature_found;
  PyObject *__pyx_n_s_NodeStructuralRandMeasure;
  PyObject *__pyx_n_s_NodeStructuralRandMeasure___redu;
  PyObject *__pyx_n_s_NodeStructuralRandMeasure___sets;
  PyObject *__pyx_n_s_NodeStructuralRandMeasure_getDis;
  PyObject *__pyx_n_s_Normalization;
  PyObject *__pyx_n_s_NotImplementedError;
  PyObject *__pyx_n_s_OverlappingCommunityDetector;
  PyObject *__pyx_n_s_OverlappingCommunityDetector___r;
  PyObject *__pyx_n_s_OverlappingCommunityDetector___s;
  PyObject *__pyx_n_s_OverlappingCommunityDetector_get;
  PyObject *__pyx_n_s_OverlappingNMIDistance;
  PyObject *__pyx_n_s_OverlappingNMIDistance___reduce;
  PyObject *__pyx_n_s_OverlappingNMIDistance___setstat;
  PyObject *__pyx_n_s_OverlappingNMIDistance__validate;
  PyObject *__pyx_n_s_OverlappingNMIDistance_getDissim;
  PyObject *__pyx_n_s_OverlappingNMIDistance_setNormal;
  PyObject *__pyx_n_s_P;
  PyObject *__pyx_n_s_PLM;
  PyObject *__pyx_n_s_PLM___reduce_cython;
  PyObject *__pyx_n_s_PLM___setstate_cython;
  PyObject *__pyx_n_s_PLM_coarsen;
  PyObject *__pyx_n_s_PLM_getTiming;
  PyObject *__pyx_n_s_PLM_prolong;
  PyObject *__pyx_n_s_PLP;
  PyObject *__pyx_n_s_PLP___reduce_cython;
  PyObject *__pyx_n_s_PLP___setstate_cython;
  PyObject *__pyx_n_s_PLP_getTiming;
  PyObject *__pyx_n_s_PLP_numberOfIterations;
  PyObject *__pyx_n_s_ParallelLeiden;
  PyObject *__pyx_n_s_ParallelLeiden___reduce_cython;
  PyObject *__pyx_n_s_ParallelLeiden___setstate_cython;
  PyObject *__pyx_n_s_ParallelPartitionCoarsening;
  PyObject *__pyx_n_s_Partition;
  PyObject *__pyx_n_s_PartitionFragmentation;
  PyObject *__pyx_n_s_PartitionFragmentation___reduce;
  PyObject *__pyx_n_s_PartitionFragmentation___setstat;
  PyObject *__pyx_n_s_PartitionHubDominance;
  PyObject *__pyx_n_s_PartitionHubDominance___reduce_c;
  PyObject *__pyx_n_s_PartitionHubDominance___setstate;
  PyObject *__pyx_n_s_PartitionIntersection;
  PyObject *__pyx_n_s_PartitionIntersection___reduce_c;
  PyObject *__pyx_n_s_PartitionIntersection___setstate;
  PyObject *__pyx_n_s_PartitionIntersection_calculate;
  PyObject *__pyx_n_s_PartitionReader;
  PyObject *__pyx_n_s_PartitionWriter;
  PyObject *__pyx_n_s_PickleError;
  PyObject *__pyx_n_s_RuntimeError;
  PyObject *__pyx_n_s_SpectralPartitioner;
  PyObject *__pyx_n_s_SpectralPartitioner___init;
  PyObject *__pyx_n_s_SpectralPartitioner__bisect;
  PyObject *__pyx_n_s_SpectralPartitioner__generatePar;
  PyObject *__pyx_n_s_SpectralPartitioner__getMean;
  PyObject *__pyx_n_s_SpectralPartitioner__getQuantile;
  PyObject *__pyx_n_s_SpectralPartitioner__prepareSpec;
  PyObject *__pyx_n_s_SpectralPartitioner__trisect;
  PyObject *__pyx_n_s_SpectralPartitioner_getPartition;
  PyObject *__pyx_kp_s_SpectralPartitioner_graph_count;
  PyObject *__pyx_n_s_SpectralPartitioner_run;
  PyObject *__pyx_n_s_StablePartitionNodes;
  PyObject *__pyx_n_s_StablePartitionNodes___reduce_cy;
  PyObject *__pyx_n_s_StablePartitionNodes___setstate;
  PyObject *__pyx_n_s_StablePartitionNodes_isStable;
  PyObject *__pyx_kp_u_TODO;
  PyObject *__pyx_kp_u_There_is_no_core_for_the_specifi;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_kp_u__16;
  PyObject *__pyx_kp_u__19;
  PyObject *__pyx_n_s__207;
  PyObject *__pyx_kp_u__22;
  PyObject *__pyx_kp_u__32;
  PyObject *__pyx_n_s__33;
  PyObject *__pyx_kp_s__5;
  PyObject *__pyx_kp_s__6;
  PyObject *__pyx_kp_s__7;
  PyObject *__pyx_kp_u__7;
  PyObject *__pyx_n_s_addToSubset;
  PyObject *__pyx_n_s_algebraic;
  PyObject *__pyx_n_s_algo;
  PyObject *__pyx_n_s_alpha;
  PyObject *__pyx_n_s_append;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_kp_u_avg_community_size;
  PyObject *__pyx_n_s_balanced;
  PyObject *__pyx_n_u_balanced;
  PyObject *__pyx_n_s_baseClustering;
  PyObject *__pyx_n_s_bisect;
  PyObject *__pyx_n_s_calculate;
  PyObject *__pyx_n_s_ceil;
  PyObject *__pyx_n_s_centrality;
  PyObject *__pyx_n_s_cg;
  PyObject *__pyx_n_s_cid;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_coarsen;
  PyObject *__pyx_n_s_coarsening;
  PyObject *__pyx_n_s_commProps;
  PyObject *__pyx_n_s_communicationGraph;
  PyObject *__pyx_kp_u_communities;
  PyObject *__pyx_n_s_communities_2;
  PyObject *__pyx_n_s_communityGraph;
  PyObject *__pyx_n_s_communitySizes;
  PyObject *__pyx_n_s_compareCommunities;
  PyObject *__pyx_n_s_coreDec;
  PyObject *__pyx_n_s_cores;
  PyObject *__pyx_n_s_count;
  PyObject *__pyx_n_s_cutoff;
  PyObject *__pyx_n_u_default;
  PyObject *__pyx_n_s_default_timer;
  PyObject *__pyx_n_s_defaults;
  PyObject *__pyx_n_s_detectCommunities;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_dict_2;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_doc;
  PyObject *__pyx_n_s_eCut;
  PyObject *__pyx_kp_u_edge_cut;
  PyObject *__pyx_kp_u_edge_cut_portion;
  PyObject *__pyx_kp_u_edgelist_s0;
  PyObject *__pyx_kp_u_edgelist_s1;
  PyObject *__pyx_kp_u_edgelist_t0;
  PyObject *__pyx_kp_u_edgelist_t1;
  PyObject *__pyx_n_s_eigenvalues;
  PyObject *__pyx_n_s_eigenvectors;
  PyObject *__pyx_n_s_eigv;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_end;
  PyObject *__pyx_n_s_enter;
  PyObject *__pyx_n_s_equalClustering;
  PyObject *__pyx_n_s_eta;
  PyObject *__pyx_n_s_evalCommunityDetection;
  PyObject *__pyx_n_s_exit;
  PyObject *__pyx_n_s_expanduser;
  PyObject *__pyx_n_s_file;
  PyObject *__pyx_n_s_first;
  PyObject *__pyx_n_s_firstItem;
  PyObject *__pyx_n_s_floor;
  PyObject *__pyx_n_s_format;
  PyObject *__pyx_n_s_fused_sigindex;
  PyObject *__pyx_n_s_gamma;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_generatePartition;
  PyObject *__pyx_n_s_get;
  PyObject *__pyx_n_s_getClusterHierarchy;
  PyObject *__pyx_n_s_getCoarseGraph;
  PyObject *__pyx_n_s_getCover;
  PyObject *__pyx_n_s_getDissimilarity;
  PyObject *__pyx_n_s_getGlobal;
  PyObject *__pyx_n_s_getImbalance;
  PyObject *__pyx_n_s_getMaximumValue;
  PyObject *__pyx_n_s_getMean;
  PyObject *__pyx_n_s_getMembers;
  PyObject *__pyx_n_s_getMinimumValue;
  PyObject *__pyx_n_s_getPartition;
  PyObject *__pyx_n_s_getQuality;
  PyObject *__pyx_n_s_getQuantiles;
  PyObject *__pyx_n_s_getTiming;
  PyObject *__pyx_n_s_getUnweightedAverage;
  PyObject *__pyx_n_s_getValue;
  PyObject *__pyx_n_s_getValues;
  PyObject *__pyx_n_s_getWeightedAverage;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_graph;
  PyObject *__pyx_n_s_graphio;
  PyObject *__pyx_n_s_graphtools;
  PyObject *__pyx_n_s_have_tabulate;
  PyObject *__pyx_n_s_helpers;
  PyObject *__pyx_n_s_hierarchical;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_imbalance;
  PyObject *__pyx_n_u_imbalance;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_init;
  PyObject *__pyx_n_s_init_subclass;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_inspect;
  PyObject *__pyx_n_s_inspectCommunities;
  PyObject *__pyx_n_s_isOneClustering;
  PyObject *__pyx_n_s_isProperClustering;
  PyObject *__pyx_n_s_isSingletonClustering;
  PyObject *__pyx_n_s_isSmallBetter;
  PyObject *__pyx_n_s_isStable;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_isfile;
  PyObject *__pyx_n_s_iterNodes;
  PyObject *__pyx_n_s_iteration;
  PyObject *__pyx_n_s_iterations;
  PyObject *__pyx_n_s_k;
  PyObject *__pyx_n_s_kCore;
  PyObject *__pyx_n_s_kCoreCommunityDetection;
  PyObject *__pyx_n_s_kwargs;
  PyObject *__pyx_n_s_laplacianEigenvectors;
  PyObject *__pyx_n_s_log;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_makeContinuousBalancedClustering;
  PyObject *__pyx_n_s_makeNoncontinuousBalancedCluster;
  PyObject *__pyx_n_s_makeOneClustering;
  PyObject *__pyx_n_s_makeRandomClustering;
  PyObject *__pyx_n_s_makeSingletonClustering;
  PyObject *__pyx_n_s_math;
  PyObject *__pyx_n_s_max;
  PyObject *__pyx_n_s_maxIter;
  PyObject *__pyx_n_s_maxIterations;
  PyObject *__pyx_kp_u_max_community_size;
  PyObject *__pyx_n_s_mean;
  PyObject *__pyx_n_s_metaclass;
  PyObject *__pyx_n_s_min;
  PyObject *__pyx_kp_u_min_community_size;
  PyObject *__pyx_n_s_mod;
  PyObject *__pyx_n_u_modularity;
  PyObject *__pyx_n_s_module;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_networkit_community;
  PyObject *__pyx_kp_s_networkit_community_pyx;
  PyObject *__pyx_kp_s_networkit_structures;
  PyObject *__pyx_n_s_new;
  PyObject *__pyx_n_s_nextCount;
  PyObject *__pyx_n_s_nextPartition;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_s_nodeToMetaNode;
  PyObject *__pyx_n_s_none;
  PyObject *__pyx_n_s_normalization;
  PyObject *__pyx_n_s_np;
  PyObject *__pyx_n_s_numberOfEdges;
  PyObject *__pyx_n_s_numberOfIterations;
  PyObject *__pyx_n_s_numberOfNodes;
  PyObject *__pyx_n_s_numberOfSubsets;
  PyObject *__pyx_n_s_numpy;
  PyObject *__pyx_n_s_open;
  PyObject *__pyx_n_s_os;
  PyObject *__pyx_n_s_par;
  PyObject *__pyx_n_s_parallel;
  PyObject *__pyx_n_s_parallelizationStrategy;
  PyObject *__pyx_n_s_partA;
  PyObject *__pyx_n_s_partB;
  PyObject *__pyx_n_s_partC;
  PyObject *__pyx_n_s_partIndex;
  PyObject *__pyx_n_s_partition;
  PyObject *__pyx_n_s_partitions;
  PyObject *__pyx_n_s_path;
  PyObject *__pyx_kp_u_path_expanded_to_0;
  PyObject *__pyx_n_s_pickle;
  PyObject *__pyx_n_s_prepare;
  PyObject *__pyx_n_s_prepareSpectrum;
  PyObject *__pyx_n_s_print;
  PyObject *__pyx_n_s_prolong;
  PyObject *__pyx_n_s_pyResult;
  PyObject *__pyx_n_s_pyx_PickleError;
  PyObject *__pyx_n_s_pyx_checksum;
  PyObject *__pyx_n_s_pyx_result;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_type;
  PyObject *__pyx_n_s_pyx_unpickle_DissimilarityMeas;
  PyObject *__pyx_n_s_pyx_unpickle_GraphClusteringTo;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_qualname;
  PyObject *__pyx_n_s_quantile;
  PyObject *__pyx_n_s_quantiles;
  PyObject *__pyx_n_u_r;
  PyObject *__pyx_n_s_random;
  PyObject *__pyx_n_s_randomize;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_read;
  PyObject *__pyx_n_s_readCommunities;
  PyObject *__pyx_kp_u_read_communities_from_0;
  PyObject *__pyx_n_s_reader;
  PyObject *__pyx_n_s_readers;
  PyObject *__pyx_n_s_recurse;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_reference;
  PyObject *__pyx_n_s_refine;
  PyObject *__pyx_n_u_relaxmap;
  PyObject *__pyx_n_s_res;
  PyObject *__pyx_n_s_result;
  PyObject *__pyx_n_s_results;
  PyObject *__pyx_n_s_ret;
  PyObject *__pyx_n_s_reverse;
  PyObject *__pyx_n_s_run;
  PyObject *__pyx_n_s_s;
  PyObject *__pyx_n_s_scd;
  PyObject *__pyx_n_s_scores;
  PyObject *__pyx_n_s_second;
  PyObject *__pyx_n_s_sections;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self__this_cannot_be_converted_t;
  PyObject *__pyx_n_s_setNormalization;
  PyObject *__pyx_n_s_set_name;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_size;
  PyObject *__pyx_kp_u_solution_properties;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_spectrum;
  PyObject *__pyx_n_s_split;
  PyObject *__pyx_n_s_start;
  PyObject *__pyx_n_s_state;
  PyObject *__pyx_n_s_staticmethod;
  PyObject *__pyx_n_s_stdstring;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_strip;
  PyObject *__pyx_n_s_subgraphFromNodes;
  PyObject *__pyx_n_s_subprocess;
  PyObject *__pyx_n_s_subsetID;
  PyObject *__pyx_n_s_subsetSizes;
  PyObject *__pyx_n_s_sum;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_support;
  PyObject *__pyx_n_s_tabulate;
  PyObject *__pyx_n_u_tabulate;
  PyObject *__pyx_n_s_tempfile;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_kp_u_time_s;
  PyObject *__pyx_n_s_timeit;
  PyObject *__pyx_n_s_toSingleton;
  PyObject *__pyx_n_s_trisect;
  PyObject *__pyx_n_s_turbo;
  PyObject *__pyx_n_s_u;
  PyObject *__pyx_kp_u_unrecognized_format_0;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_updateThreshold;
  PyObject *__pyx_n_s_use_setstate;
  PyObject *__pyx_n_s_validateNormalization;
  PyObject *__pyx_n_s_values;
  PyObject *__pyx_n_s_vertex;
  PyObject *__pyx_n_s_vertices;
  PyObject *__pyx_n_s_warnings;
  PyObject *__pyx_n_s_weightedDegreeWithCluster;
  PyObject *__pyx_n_s_write;
  PyObject *__pyx_n_s_writeCommunities;
  PyObject *__pyx_kp_u_wrote_communities_to_0;
  PyObject *__pyx_n_s_zeta;
  PyObject *__pyx_n_s_zeta1;
  PyObject *__pyx_n_s_zeta2;
  PyObject *__pyx_n_s_zetaCoarse;
  PyObject *__pyx_float_1_0;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_4;
  PyObject *__pyx_int_32;
  PyObject *__pyx_int_222419149;
  PyObject *__pyx_int_228825662;
  PyObject *__pyx_int_238750788;
  PyObject *__pyx_k__4;
  __pyx_t_9networkit_10structures_count __pyx_k__10;
  __pyx_t_9networkit_10structures_count __pyx_k__11;
  PyObject *__pyx_k__26;
  PyObject *__pyx_k__27;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_slice__30;
  PyObject *__pyx_tuple__12;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_tuple__31;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__37;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__45;
  PyObject *__pyx_tuple__51;
  PyObject *__pyx_tuple__53;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__56;
  PyObject *__pyx_tuple__58;
  PyObject *__pyx_tuple__62;
  PyObject *__pyx_tuple__64;
  PyObject *__pyx_tuple__67;
  PyObject *__pyx_tuple__71;
  PyObject *__pyx_tuple__78;
  PyObject *__pyx_tuple__86;
  PyObject *__pyx_tuple__88;
  PyObject *__pyx_tuple__89;
  PyObject *__pyx_tuple__106;
  PyObject *__pyx_tuple__112;
  PyObject *__pyx_tuple__132;
  PyObject *__pyx_tuple__155;
  PyObject *__pyx_tuple__161;
  PyObject *__pyx_tuple__163;
  PyObject *__pyx_tuple__164;
  PyObject *__pyx_tuple__166;
  PyObject *__pyx_tuple__168;
  PyObject *__pyx_tuple__170;
  PyObject *__pyx_tuple__172;
  PyObject *__pyx_tuple__173;
  PyObject *__pyx_tuple__175;
  PyObject *__pyx_tuple__177;
  PyObject *__pyx_tuple__179;
  PyObject *__pyx_tuple__185;
  PyObject *__pyx_tuple__187;
  PyObject *__pyx_tuple__188;
  PyObject *__pyx_tuple__190;
  PyObject *__pyx_tuple__192;
  PyObject *__pyx_tuple__193;
  PyObject *__pyx_tuple__195;
  PyObject *__pyx_tuple__197;
  PyObject *__pyx_tuple__198;
  PyObject *__pyx_tuple__200;
  PyObject *__pyx_tuple__204;
  PyObject *__pyx_codeobj__35;
  PyObject *__pyx_codeobj__36;
  PyObject *__pyx_codeobj__38;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__40;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__43;
  PyObject *__pyx_codeobj__44;
  PyObject *__pyx_codeobj__46;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__48;
  PyObject *__pyx_codeobj__49;
  PyObject *__pyx_codeobj__50;
  PyObject *__pyx_codeobj__52;
  PyObject *__pyx_codeobj__55;
  PyObject *__pyx_codeobj__57;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__60;
  PyObject *__pyx_codeobj__61;
  PyObject *__pyx_codeobj__63;
  PyObject *__pyx_codeobj__65;
  PyObject *__pyx_codeobj__66;
  PyObject *__pyx_codeobj__68;
  PyObject *__pyx_codeobj__69;
  PyObject *__pyx_codeobj__70;
  PyObject *__pyx_codeobj__72;
  PyObject *__pyx_codeobj__73;
  PyObject *__pyx_codeobj__74;
  PyObject *__pyx_codeobj__75;
  PyObject *__pyx_codeobj__76;
  PyObject *__pyx_codeobj__77;
  PyObject *__pyx_codeobj__79;
  PyObject *__pyx_codeobj__80;
  PyObject *__pyx_codeobj__81;
  PyObject *__pyx_codeobj__82;
  PyObject *__pyx_codeobj__83;
  PyObject *__pyx_codeobj__84;
  PyObject *__pyx_codeobj__85;
  PyObject *__pyx_codeobj__87;
  PyObject *__pyx_codeobj__90;
  PyObject *__pyx_codeobj__91;
  PyObject *__pyx_codeobj__92;
  PyObject *__pyx_codeobj__93;
  PyObject *__pyx_codeobj__94;
  PyObject *__pyx_codeobj__95;
  PyObject *__pyx_codeobj__96;
  PyObject *__pyx_codeobj__97;
  PyObject *__pyx_codeobj__98;
  PyObject *__pyx_codeobj__99;
  PyObject *__pyx_codeobj__100;
  PyObject *__pyx_codeobj__101;
  PyObject *__pyx_codeobj__102;
  PyObject *__pyx_codeobj__103;
  PyObject *__pyx_codeobj__104;
  PyObject *__pyx_codeobj__105;
  PyObject *__pyx_codeobj__107;
  PyObject *__pyx_codeobj__108;
  PyObject *__pyx_codeobj__109;
  PyObject *__pyx_codeobj__110;
  PyObject *__pyx_codeobj__111;
  PyObject *__pyx_codeobj__113;
  PyObject *__pyx_codeobj__114;
  PyObject *__pyx_codeobj__115;
  PyObject *__pyx_codeobj__116;
  PyObject *__pyx_codeobj__117;
  PyObject *__pyx_codeobj__118;
  PyObject *__pyx_codeobj__119;
  PyObject *__pyx_codeobj__120;
  PyObject *__pyx_codeobj__121;
  PyObject *__pyx_codeobj__122;
  PyObject *__pyx_codeobj__123;
  PyObject *__pyx_codeobj__124;
  PyObject *__pyx_codeobj__125;
  PyObject *__pyx_codeobj__126;
  PyObject *__pyx_codeobj__127;
  PyObject *__pyx_codeobj__128;
  PyObject *__pyx_codeobj__129;
  PyObject *__pyx_codeobj__130;
  PyObject *__pyx_codeobj__131;
  PyObject *__pyx_codeobj__133;
  PyObject *__pyx_codeobj__134;
  PyObject *__pyx_codeobj__135;
  PyObject *__pyx_codeobj__136;
  PyObject *__pyx_codeobj__137;
  PyObject *__pyx_codeobj__138;
  PyObject *__pyx_codeobj__139;
  PyObject *__pyx_codeobj__140;
  PyObject *__pyx_codeobj__141;
  PyObject *__pyx_codeobj__142;
  PyObject *__pyx_codeobj__143;
  PyObject *__pyx_codeobj__144;
  PyObject *__pyx_codeobj__145;
  PyObject *__pyx_codeobj__146;
  PyObject *__pyx_codeobj__147;
  PyObject *__pyx_codeobj__148;
  PyObject *__pyx_codeobj__149;
  PyObject *__pyx_codeobj__150;
  PyObject *__pyx_codeobj__151;
  PyObject *__pyx_codeobj__152;
  PyObject *__pyx_codeobj__153;
  PyObject *__pyx_codeobj__154;
  PyObject *__pyx_codeobj__156;
  PyObject *__pyx_codeobj__157;
  PyObject *__pyx_codeobj__158;
  PyObject *__pyx_codeobj__159;
  PyObject *__pyx_codeobj__160;
  PyObject *__pyx_codeobj__162;
  PyObject *__pyx_codeobj__165;
  PyObject *__pyx_codeobj__167;
  PyObject *__pyx_codeobj__169;
  PyObject *__pyx_codeobj__171;
  PyObject *__pyx_codeobj__174;
  PyObject *__pyx_codeobj__176;
  PyObject *__pyx_codeobj__178;
  PyObject *__pyx_codeobj__180;
  PyObject *__pyx_codeobj__181;
  PyObject *__pyx_codeobj__182;
  PyObject *__pyx_codeobj__183;
  PyObject *__pyx_codeobj__184;
  PyObject *__pyx_codeobj__186;
  PyObject *__pyx_codeobj__189;
  PyObject *__pyx_codeobj__191;
  PyObject *__pyx_codeobj__194;
  PyObject *__pyx_codeobj__196;
  PyObject *__pyx_codeobj__199;
  PyObject *__pyx_codeobj__201;
  PyObject *__pyx_codeobj__202;
  PyObject *__pyx_codeobj__203;
  PyObject *__pyx_codeobj__205;
  PyObject *__pyx_codeobj__206;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_4base__CythonParentClass);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_4base_Algorithm);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_10structures_Cover);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_10structures_Partition);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_Graph);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_NodeIntAttribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_NodeDoubleAttribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_NodeStringAttribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_EdgeIntAttribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_EdgeDoubleAttribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_EdgeStringAttribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_3scd_SelectiveCommunityDetector);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_CommunityDetector);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_CommunityDetector);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_OverlappingCommunityDetector);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_OverlappingCommunityDetector);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_ClusteringGenerator);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_ClusteringGenerator);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_GraphClusteringTools);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_GraphClusteringTools);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_PartitionIntersection);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_PartitionIntersection);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_Coverage);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_Coverage);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_EdgeCut);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_EdgeCut);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_Modularity);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_Modularity);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_HubDominance);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_HubDominance);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_PLM);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_PLM);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_ParallelLeiden);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_ParallelLeiden);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_LouvainMapEquation);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_LouvainMapEquation);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_PLP);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_PLP);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_LFM);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_LFM);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_LPDegreeOrdered);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_LPDegreeOrdered);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_CutClustering);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_CutClustering);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_DissimilarityMeasure);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_DissimilarityMeasure);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_NodeStructuralRandMeasure);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_NodeStructuralRandMeasure);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_GraphStructuralRandMeasure);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_GraphStructuralRandMeasure);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_JaccardMeasure);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_JaccardMeasure);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_NMIDistance);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_NMIDistance);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_AdjustedRandMeasure);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_AdjustedRandMeasure);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_LocalCommunityEvaluation);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_LocalCommunityEvaluation);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_LocalPartitionEvaluation);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_LocalPartitionEvaluation);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_LocalCoverEvaluation);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_LocalCoverEvaluation);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_IntrapartitionDensity);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_IntrapartitionDensity);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_IsolatedInterpartitionConductance);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_IsolatedInterpartitionExpansion);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_CoverHubDominance);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_CoverHubDominance);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_PartitionHubDominance);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_PartitionHubDominance);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_PartitionFragmentation);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_PartitionFragmentation);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_StablePartitionNodes);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_StablePartitionNodes);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_CoverF1Similarity);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_CoverF1Similarity);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_9community_OverlappingNMIDistance);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_9community_OverlappingNMIDistance);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0_is_not_a_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_ARITHMETIC_MEAN);
  Py_CLEAR(clear_module_state->__pyx_n_s_AdjustedRandMeasure);
  Py_CLEAR(clear_module_state->__pyx_n_s_AdjustedRandMeasure___reduce_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_AdjustedRandMeasure___setstate_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_AdjustedRandMeasure_getDissimila);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArithmeticMean);
  Py_CLEAR(clear_module_state->__pyx_n_s_AssertionError);
  Py_CLEAR(clear_module_state->__pyx_n_s_BinaryEdgeListPartitionReader);
  Py_CLEAR(clear_module_state->__pyx_n_s_BinaryEdgeListPartitionWriter);
  Py_CLEAR(clear_module_state->__pyx_n_s_BinaryPartitionReader);
  Py_CLEAR(clear_module_state->__pyx_n_s_BinaryPartitionWriter);
  Py_CLEAR(clear_module_state->__pyx_n_s_C);
  Py_CLEAR(clear_module_state->__pyx_n_s_ClusteringGenerator);
  Py_CLEAR(clear_module_state->__pyx_n_s_ClusteringGenerator___reduce_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_ClusteringGenerator___setstate_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_ClusteringGenerator_makeContinuo);
  Py_CLEAR(clear_module_state->__pyx_n_s_ClusteringGenerator_makeNonconti);
  Py_CLEAR(clear_module_state->__pyx_n_s_ClusteringGenerator_makeOneClust);
  Py_CLEAR(clear_module_state->__pyx_n_s_ClusteringGenerator_makeRandomCl);
  Py_CLEAR(clear_module_state->__pyx_n_s_ClusteringGenerator_makeSingleto);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Communities_detected_in_5f_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_CommunityDetector);
  Py_CLEAR(clear_module_state->__pyx_n_s_CommunityDetector___reduce_cytho);
  Py_CLEAR(clear_module_state->__pyx_n_s_CommunityDetector___setstate_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_CommunityDetector_getPartition);
  Py_CLEAR(clear_module_state->__pyx_n_s_CoreDecomposition);
  Py_CLEAR(clear_module_state->__pyx_n_s_Cover);
  Py_CLEAR(clear_module_state->__pyx_n_s_CoverF1Similarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_CoverF1Similarity___reduce_cytho);
  Py_CLEAR(clear_module_state->__pyx_n_s_CoverF1Similarity___setstate_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_CoverHubDominance);
  Py_CLEAR(clear_module_state->__pyx_n_s_CoverHubDominance___reduce_cytho);
  Py_CLEAR(clear_module_state->__pyx_n_s_CoverHubDominance___setstate_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_Coverage);
  Py_CLEAR(clear_module_state->__pyx_n_s_Coverage___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Coverage___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Coverage_getQuality);
  Py_CLEAR(clear_module_state->__pyx_n_s_CutClustering);
  Py_CLEAR(clear_module_state->__pyx_n_s_CutClustering___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_CutClustering___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_CutClustering_getClusterHierarch);
  Py_CLEAR(clear_module_state->__pyx_n_s_DissimilarityMeasure);
  Py_CLEAR(clear_module_state->__pyx_n_s_DissimilarityMeasure___reduce_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_DissimilarityMeasure___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_EdgeCut);
  Py_CLEAR(clear_module_state->__pyx_n_s_EdgeCut___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_EdgeCut___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_EdgeCut_getQuality);
  Py_CLEAR(clear_module_state->__pyx_n_s_EdgeListPartitionReader);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_first_and_second_must_both);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_invalid_normalization_meth);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_object_not_properly_initia);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_you_may_not_use_CommunityD);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_you_may_not_use_LocalCommu);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_you_may_not_use_LocalCover);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_you_may_not_use_LocalParti);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_you_may_not_use_Overlappin);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Expected_at_least_d_argument_s_g);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Function_call_with_ambiguous_arg);
  Py_CLEAR(clear_module_state->__pyx_n_s_G);
  Py_CLEAR(clear_module_state->__pyx_n_s_GEOMETRIC_MEAN);
  Py_CLEAR(clear_module_state->__pyx_n_s_Gcoarse);
  Py_CLEAR(clear_module_state->__pyx_n_s_GeometricMean);
  Py_CLEAR(clear_module_state->__pyx_n_s_Gfine);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphClusteringTools);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphClusteringTools___reduce_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphClusteringTools___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphClusteringTools_communicati);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphClusteringTools_equalCluste);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphClusteringTools_getImbalanc);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphClusteringTools_isOneCluste);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphClusteringTools_isProperClu);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphClusteringTools_isSingleton);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphClusteringTools_weightedDeg);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphStructuralRandMeasure);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphStructuralRandMeasure___red);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphStructuralRandMeasure___set);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphStructuralRandMeasure_getDi);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphTools);
  Py_CLEAR(clear_module_state->__pyx_n_s_HubDominance);
  Py_CLEAR(clear_module_state->__pyx_n_s_HubDominance___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_HubDominance___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_HubDominance_getQuality);
  Py_CLEAR(clear_module_state->__pyx_n_s_IOError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_IntrapartitionDensity);
  Py_CLEAR(clear_module_state->__pyx_n_s_IntrapartitionDensity___reduce_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_IntrapartitionDensity___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_IntrapartitionDensity_getGlobal);
  Py_CLEAR(clear_module_state->__pyx_n_s_IsolatedInterpartitionConductanc);
  Py_CLEAR(clear_module_state->__pyx_n_s_IsolatedInterpartitionConductanc_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_IsolatedInterpartitionConductanc_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_IsolatedInterpartitionExpansion);
  Py_CLEAR(clear_module_state->__pyx_n_s_IsolatedInterpartitionExpansion_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_IsolatedInterpartitionExpansion_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_JOINT_ENTROPY);
  Py_CLEAR(clear_module_state->__pyx_n_s_JaccardMeasure);
  Py_CLEAR(clear_module_state->__pyx_n_s_JaccardMeasure___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_JaccardMeasure___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_JaccardMeasure_getDissimilarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_JointEntropy);
  Py_CLEAR(clear_module_state->__pyx_n_s_KeyError);
  Py_CLEAR(clear_module_state->__pyx_n_s_LFM);
  Py_CLEAR(clear_module_state->__pyx_n_s_LFM___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_LFM___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_LPDegreeOrdered);
  Py_CLEAR(clear_module_state->__pyx_n_s_LPDegreeOrdered___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_LPDegreeOrdered___setstate_cytho);
  Py_CLEAR(clear_module_state->__pyx_n_s_LPDegreeOrdered_numberOfIteratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_LocalCommunityEvaluation);
  Py_CLEAR(clear_module_state->__pyx_n_s_LocalCommunityEvaluation___reduc);
  Py_CLEAR(clear_module_state->__pyx_n_s_LocalCommunityEvaluation___setst);
  Py_CLEAR(clear_module_state->__pyx_n_s_LocalCommunityEvaluation_getMaxi);
  Py_CLEAR(clear_module_state->__pyx_n_s_LocalCommunityEvaluation_getMini);
  Py_CLEAR(clear_module_state->__pyx_n_s_LocalCommunityEvaluation_getUnwe);
  Py_CLEAR(clear_module_state->__pyx_n_s_LocalCommunityEvaluation_getValu);
  Py_CLEAR(clear_module_state->__pyx_n_s_LocalCommunityEvaluation_getValu_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_LocalCommunityEvaluation_getWeig);
  Py_CLEAR(clear_module_state->__pyx_n_s_LocalCommunityEvaluation_isSmall);
  Py_CLEAR(clear_module_state->__pyx_n_s_LocalCoverEvaluation);
  Py_CLEAR(clear_module_state->__pyx_n_s_LocalCoverEvaluation___reduce_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_LocalCoverEvaluation___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_LocalPartitionEvaluation);
  Py_CLEAR(clear_module_state->__pyx_n_s_LocalPartitionEvaluation___reduc);
  Py_CLEAR(clear_module_state->__pyx_n_s_LocalPartitionEvaluation___setst);
  Py_CLEAR(clear_module_state->__pyx_n_s_LouvainMapEquation);
  Py_CLEAR(clear_module_state->__pyx_n_s_LouvainMapEquation___reduce_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_LouvainMapEquation___setstate_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_MAX);
  Py_CLEAR(clear_module_state->__pyx_n_s_MIN);
  Py_CLEAR(clear_module_state->__pyx_n_s_Max);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Min);
  Py_CLEAR(clear_module_state->__pyx_n_s_MissingDependencyError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Modularity);
  Py_CLEAR(clear_module_state->__pyx_n_s_Modularity___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Modularity___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Modularity_getQuality);
  Py_CLEAR(clear_module_state->__pyx_n_s_NMIDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_NMIDistance___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_NMIDistance___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_NMIDistance_getDissimilarity);
  Py_CLEAR(clear_module_state->__pyx_kp_s_No_matching_signature_found);
  Py_CLEAR(clear_module_state->__pyx_n_s_NodeStructuralRandMeasure);
  Py_CLEAR(clear_module_state->__pyx_n_s_NodeStructuralRandMeasure___redu);
  Py_CLEAR(clear_module_state->__pyx_n_s_NodeStructuralRandMeasure___sets);
  Py_CLEAR(clear_module_state->__pyx_n_s_NodeStructuralRandMeasure_getDis);
  Py_CLEAR(clear_module_state->__pyx_n_s_Normalization);
  Py_CLEAR(clear_module_state->__pyx_n_s_NotImplementedError);
  Py_CLEAR(clear_module_state->__pyx_n_s_OverlappingCommunityDetector);
  Py_CLEAR(clear_module_state->__pyx_n_s_OverlappingCommunityDetector___r);
  Py_CLEAR(clear_module_state->__pyx_n_s_OverlappingCommunityDetector___s);
  Py_CLEAR(clear_module_state->__pyx_n_s_OverlappingCommunityDetector_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_OverlappingNMIDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_OverlappingNMIDistance___reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_OverlappingNMIDistance___setstat);
  Py_CLEAR(clear_module_state->__pyx_n_s_OverlappingNMIDistance__validate);
  Py_CLEAR(clear_module_state->__pyx_n_s_OverlappingNMIDistance_getDissim);
  Py_CLEAR(clear_module_state->__pyx_n_s_OverlappingNMIDistance_setNormal);
  Py_CLEAR(clear_module_state->__pyx_n_s_P);
  Py_CLEAR(clear_module_state->__pyx_n_s_PLM);
  Py_CLEAR(clear_module_state->__pyx_n_s_PLM___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PLM___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PLM_coarsen);
  Py_CLEAR(clear_module_state->__pyx_n_s_PLM_getTiming);
  Py_CLEAR(clear_module_state->__pyx_n_s_PLM_prolong);
  Py_CLEAR(clear_module_state->__pyx_n_s_PLP);
  Py_CLEAR(clear_module_state->__pyx_n_s_PLP___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PLP___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PLP_getTiming);
  Py_CLEAR(clear_module_state->__pyx_n_s_PLP_numberOfIterations);
  Py_CLEAR(clear_module_state->__pyx_n_s_ParallelLeiden);
  Py_CLEAR(clear_module_state->__pyx_n_s_ParallelLeiden___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ParallelLeiden___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ParallelPartitionCoarsening);
  Py_CLEAR(clear_module_state->__pyx_n_s_Partition);
  Py_CLEAR(clear_module_state->__pyx_n_s_PartitionFragmentation);
  Py_CLEAR(clear_module_state->__pyx_n_s_PartitionFragmentation___reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_PartitionFragmentation___setstat);
  Py_CLEAR(clear_module_state->__pyx_n_s_PartitionHubDominance);
  Py_CLEAR(clear_module_state->__pyx_n_s_PartitionHubDominance___reduce_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_PartitionHubDominance___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_PartitionIntersection);
  Py_CLEAR(clear_module_state->__pyx_n_s_PartitionIntersection___reduce_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_PartitionIntersection___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_PartitionIntersection_calculate);
  Py_CLEAR(clear_module_state->__pyx_n_s_PartitionReader);
  Py_CLEAR(clear_module_state->__pyx_n_s_PartitionWriter);
  Py_CLEAR(clear_module_state->__pyx_n_s_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_RuntimeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_SpectralPartitioner);
  Py_CLEAR(clear_module_state->__pyx_n_s_SpectralPartitioner___init);
  Py_CLEAR(clear_module_state->__pyx_n_s_SpectralPartitioner__bisect);
  Py_CLEAR(clear_module_state->__pyx_n_s_SpectralPartitioner__generatePar);
  Py_CLEAR(clear_module_state->__pyx_n_s_SpectralPartitioner__getMean);
  Py_CLEAR(clear_module_state->__pyx_n_s_SpectralPartitioner__getQuantile);
  Py_CLEAR(clear_module_state->__pyx_n_s_SpectralPartitioner__prepareSpec);
  Py_CLEAR(clear_module_state->__pyx_n_s_SpectralPartitioner__trisect);
  Py_CLEAR(clear_module_state->__pyx_n_s_SpectralPartitioner_getPartition);
  Py_CLEAR(clear_module_state->__pyx_kp_s_SpectralPartitioner_graph_count);
  Py_CLEAR(clear_module_state->__pyx_n_s_SpectralPartitioner_run);
  Py_CLEAR(clear_module_state->__pyx_n_s_StablePartitionNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_StablePartitionNodes___reduce_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_StablePartitionNodes___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_StablePartitionNodes_isStable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_TODO);
  Py_CLEAR(clear_module_state->__pyx_kp_u_There_is_no_core_for_the_specifi);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_kp_u__16);
  Py_CLEAR(clear_module_state->__pyx_kp_u__19);
  Py_CLEAR(clear_module_state->__pyx_n_s__207);
  Py_CLEAR(clear_module_state->__pyx_kp_u__22);
  Py_CLEAR(clear_module_state->__pyx_kp_u__32);
  Py_CLEAR(clear_module_state->__pyx_n_s__33);
  Py_CLEAR(clear_module_state->__pyx_kp_s__5);
  Py_CLEAR(clear_module_state->__pyx_kp_s__6);
  Py_CLEAR(clear_module_state->__pyx_kp_s__7);
  Py_CLEAR(clear_module_state->__pyx_kp_u__7);
  Py_CLEAR(clear_module_state->__pyx_n_s_addToSubset);
  Py_CLEAR(clear_module_state->__pyx_n_s_algebraic);
  Py_CLEAR(clear_module_state->__pyx_n_s_algo);
  Py_CLEAR(clear_module_state->__pyx_n_s_alpha);
  Py_CLEAR(clear_module_state->__pyx_n_s_append);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_kp_u_avg_community_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_balanced);
  Py_CLEAR(clear_module_state->__pyx_n_u_balanced);
  Py_CLEAR(clear_module_state->__pyx_n_s_baseClustering);
  Py_CLEAR(clear_module_state->__pyx_n_s_bisect);
  Py_CLEAR(clear_module_state->__pyx_n_s_calculate);
  Py_CLEAR(clear_module_state->__pyx_n_s_ceil);
  Py_CLEAR(clear_module_state->__pyx_n_s_centrality);
  Py_CLEAR(clear_module_state->__pyx_n_s_cg);
  Py_CLEAR(clear_module_state->__pyx_n_s_cid);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_coarsen);
  Py_CLEAR(clear_module_state->__pyx_n_s_coarsening);
  Py_CLEAR(clear_module_state->__pyx_n_s_commProps);
  Py_CLEAR(clear_module_state->__pyx_n_s_communicationGraph);
  Py_CLEAR(clear_module_state->__pyx_kp_u_communities);
  Py_CLEAR(clear_module_state->__pyx_n_s_communities_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_communityGraph);
  Py_CLEAR(clear_module_state->__pyx_n_s_communitySizes);
  Py_CLEAR(clear_module_state->__pyx_n_s_compareCommunities);
  Py_CLEAR(clear_module_state->__pyx_n_s_coreDec);
  Py_CLEAR(clear_module_state->__pyx_n_s_cores);
  Py_CLEAR(clear_module_state->__pyx_n_s_count);
  Py_CLEAR(clear_module_state->__pyx_n_s_cutoff);
  Py_CLEAR(clear_module_state->__pyx_n_u_default);
  Py_CLEAR(clear_module_state->__pyx_n_s_default_timer);
  Py_CLEAR(clear_module_state->__pyx_n_s_defaults);
  Py_CLEAR(clear_module_state->__pyx_n_s_detectCommunities);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_doc);
  Py_CLEAR(clear_module_state->__pyx_n_s_eCut);
  Py_CLEAR(clear_module_state->__pyx_kp_u_edge_cut);
  Py_CLEAR(clear_module_state->__pyx_kp_u_edge_cut_portion);
  Py_CLEAR(clear_module_state->__pyx_kp_u_edgelist_s0);
  Py_CLEAR(clear_module_state->__pyx_kp_u_edgelist_s1);
  Py_CLEAR(clear_module_state->__pyx_kp_u_edgelist_t0);
  Py_CLEAR(clear_module_state->__pyx_kp_u_edgelist_t1);
  Py_CLEAR(clear_module_state->__pyx_n_s_eigenvalues);
  Py_CLEAR(clear_module_state->__pyx_n_s_eigenvectors);
  Py_CLEAR(clear_module_state->__pyx_n_s_eigv);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_end);
  Py_CLEAR(clear_module_state->__pyx_n_s_enter);
  Py_CLEAR(clear_module_state->__pyx_n_s_equalClustering);
  Py_CLEAR(clear_module_state->__pyx_n_s_eta);
  Py_CLEAR(clear_module_state->__pyx_n_s_evalCommunityDetection);
  Py_CLEAR(clear_module_state->__pyx_n_s_exit);
  Py_CLEAR(clear_module_state->__pyx_n_s_expanduser);
  Py_CLEAR(clear_module_state->__pyx_n_s_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_first);
  Py_CLEAR(clear_module_state->__pyx_n_s_firstItem);
  Py_CLEAR(clear_module_state->__pyx_n_s_floor);
  Py_CLEAR(clear_module_state->__pyx_n_s_format);
  Py_CLEAR(clear_module_state->__pyx_n_s_fused_sigindex);
  Py_CLEAR(clear_module_state->__pyx_n_s_gamma);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_generatePartition);
  Py_CLEAR(clear_module_state->__pyx_n_s_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_getClusterHierarchy);
  Py_CLEAR(clear_module_state->__pyx_n_s_getCoarseGraph);
  Py_CLEAR(clear_module_state->__pyx_n_s_getCover);
  Py_CLEAR(clear_module_state->__pyx_n_s_getDissimilarity);
  Py_CLEAR(clear_module_state->__pyx_n_s_getGlobal);
  Py_CLEAR(clear_module_state->__pyx_n_s_getImbalance);
  Py_CLEAR(clear_module_state->__pyx_n_s_getMaximumValue);
  Py_CLEAR(clear_module_state->__pyx_n_s_getMean);
  Py_CLEAR(clear_module_state->__pyx_n_s_getMembers);
  Py_CLEAR(clear_module_state->__pyx_n_s_getMinimumValue);
  Py_CLEAR(clear_module_state->__pyx_n_s_getPartition);
  Py_CLEAR(clear_module_state->__pyx_n_s_getQuality);
  Py_CLEAR(clear_module_state->__pyx_n_s_getQuantiles);
  Py_CLEAR(clear_module_state->__pyx_n_s_getTiming);
  Py_CLEAR(clear_module_state->__pyx_n_s_getUnweightedAverage);
  Py_CLEAR(clear_module_state->__pyx_n_s_getValue);
  Py_CLEAR(clear_module_state->__pyx_n_s_getValues);
  Py_CLEAR(clear_module_state->__pyx_n_s_getWeightedAverage);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_graph);
  Py_CLEAR(clear_module_state->__pyx_n_s_graphio);
  Py_CLEAR(clear_module_state->__pyx_n_s_graphtools);
  Py_CLEAR(clear_module_state->__pyx_n_s_have_tabulate);
  Py_CLEAR(clear_module_state->__pyx_n_s_helpers);
  Py_CLEAR(clear_module_state->__pyx_n_s_hierarchical);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_imbalance);
  Py_CLEAR(clear_module_state->__pyx_n_u_imbalance);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_init);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_subclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_inspect);
  Py_CLEAR(clear_module_state->__pyx_n_s_inspectCommunities);
  Py_CLEAR(clear_module_state->__pyx_n_s_isOneClustering);
  Py_CLEAR(clear_module_state->__pyx_n_s_isProperClustering);
  Py_CLEAR(clear_module_state->__pyx_n_s_isSingletonClustering);
  Py_CLEAR(clear_module_state->__pyx_n_s_isSmallBetter);
  Py_CLEAR(clear_module_state->__pyx_n_s_isStable);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_isfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_iterNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_iteration);
  Py_CLEAR(clear_module_state->__pyx_n_s_iterations);
  Py_CLEAR(clear_module_state->__pyx_n_s_k);
  Py_CLEAR(clear_module_state->__pyx_n_s_kCore);
  Py_CLEAR(clear_module_state->__pyx_n_s_kCoreCommunityDetection);
  Py_CLEAR(clear_module_state->__pyx_n_s_kwargs);
  Py_CLEAR(clear_module_state->__pyx_n_s_laplacianEigenvectors);
  Py_CLEAR(clear_module_state->__pyx_n_s_log);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_makeContinuousBalancedClustering);
  Py_CLEAR(clear_module_state->__pyx_n_s_makeNoncontinuousBalancedCluster);
  Py_CLEAR(clear_module_state->__pyx_n_s_makeOneClustering);
  Py_CLEAR(clear_module_state->__pyx_n_s_makeRandomClustering);
  Py_CLEAR(clear_module_state->__pyx_n_s_makeSingletonClustering);
  Py_CLEAR(clear_module_state->__pyx_n_s_math);
  Py_CLEAR(clear_module_state->__pyx_n_s_max);
  Py_CLEAR(clear_module_state->__pyx_n_s_maxIter);
  Py_CLEAR(clear_module_state->__pyx_n_s_maxIterations);
  Py_CLEAR(clear_module_state->__pyx_kp_u_max_community_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_mean);
  Py_CLEAR(clear_module_state->__pyx_n_s_metaclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_min);
  Py_CLEAR(clear_module_state->__pyx_kp_u_min_community_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_mod);
  Py_CLEAR(clear_module_state->__pyx_n_u_modularity);
  Py_CLEAR(clear_module_state->__pyx_n_s_module);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_networkit_community);
  Py_CLEAR(clear_module_state->__pyx_kp_s_networkit_community_pyx);
  Py_CLEAR(clear_module_state->__pyx_kp_s_networkit_structures);
  Py_CLEAR(clear_module_state->__pyx_n_s_new);
  Py_CLEAR(clear_module_state->__pyx_n_s_nextCount);
  Py_CLEAR(clear_module_state->__pyx_n_s_nextPartition);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_nodeToMetaNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_none);
  Py_CLEAR(clear_module_state->__pyx_n_s_normalization);
  Py_CLEAR(clear_module_state->__pyx_n_s_np);
  Py_CLEAR(clear_module_state->__pyx_n_s_numberOfEdges);
  Py_CLEAR(clear_module_state->__pyx_n_s_numberOfIterations);
  Py_CLEAR(clear_module_state->__pyx_n_s_numberOfNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_numberOfSubsets);
  Py_CLEAR(clear_module_state->__pyx_n_s_numpy);
  Py_CLEAR(clear_module_state->__pyx_n_s_open);
  Py_CLEAR(clear_module_state->__pyx_n_s_os);
  Py_CLEAR(clear_module_state->__pyx_n_s_par);
  Py_CLEAR(clear_module_state->__pyx_n_s_parallel);
  Py_CLEAR(clear_module_state->__pyx_n_s_parallelizationStrategy);
  Py_CLEAR(clear_module_state->__pyx_n_s_partA);
  Py_CLEAR(clear_module_state->__pyx_n_s_partB);
  Py_CLEAR(clear_module_state->__pyx_n_s_partC);
  Py_CLEAR(clear_module_state->__pyx_n_s_partIndex);
  Py_CLEAR(clear_module_state->__pyx_n_s_partition);
  Py_CLEAR(clear_module_state->__pyx_n_s_partitions);
  Py_CLEAR(clear_module_state->__pyx_n_s_path);
  Py_CLEAR(clear_module_state->__pyx_kp_u_path_expanded_to_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_pickle);
  Py_CLEAR(clear_module_state->__pyx_n_s_prepare);
  Py_CLEAR(clear_module_state->__pyx_n_s_prepareSpectrum);
  Py_CLEAR(clear_module_state->__pyx_n_s_print);
  Py_CLEAR(clear_module_state->__pyx_n_s_prolong);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyResult);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_checksum);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_DissimilarityMeas);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_GraphClusteringTo);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_qualname);
  Py_CLEAR(clear_module_state->__pyx_n_s_quantile);
  Py_CLEAR(clear_module_state->__pyx_n_s_quantiles);
  Py_CLEAR(clear_module_state->__pyx_n_u_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_random);
  Py_CLEAR(clear_module_state->__pyx_n_s_randomize);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_read);
  Py_CLEAR(clear_module_state->__pyx_n_s_readCommunities);
  Py_CLEAR(clear_module_state->__pyx_kp_u_read_communities_from_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_reader);
  Py_CLEAR(clear_module_state->__pyx_n_s_readers);
  Py_CLEAR(clear_module_state->__pyx_n_s_recurse);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_reference);
  Py_CLEAR(clear_module_state->__pyx_n_s_refine);
  Py_CLEAR(clear_module_state->__pyx_n_u_relaxmap);
  Py_CLEAR(clear_module_state->__pyx_n_s_res);
  Py_CLEAR(clear_module_state->__pyx_n_s_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_results);
  Py_CLEAR(clear_module_state->__pyx_n_s_ret);
  Py_CLEAR(clear_module_state->__pyx_n_s_reverse);
  Py_CLEAR(clear_module_state->__pyx_n_s_run);
  Py_CLEAR(clear_module_state->__pyx_n_s_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_scd);
  Py_CLEAR(clear_module_state->__pyx_n_s_scores);
  Py_CLEAR(clear_module_state->__pyx_n_s_second);
  Py_CLEAR(clear_module_state->__pyx_n_s_sections);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__this_cannot_be_converted_t);
  Py_CLEAR(clear_module_state->__pyx_n_s_setNormalization);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_size);
  Py_CLEAR(clear_module_state->__pyx_kp_u_solution_properties);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_spectrum);
  Py_CLEAR(clear_module_state->__pyx_n_s_split);
  Py_CLEAR(clear_module_state->__pyx_n_s_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_staticmethod);
  Py_CLEAR(clear_module_state->__pyx_n_s_stdstring);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_strip);
  Py_CLEAR(clear_module_state->__pyx_n_s_subgraphFromNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_subprocess);
  Py_CLEAR(clear_module_state->__pyx_n_s_subsetID);
  Py_CLEAR(clear_module_state->__pyx_n_s_subsetSizes);
  Py_CLEAR(clear_module_state->__pyx_n_s_sum);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_s_support);
  Py_CLEAR(clear_module_state->__pyx_n_s_tabulate);
  Py_CLEAR(clear_module_state->__pyx_n_u_tabulate);
  Py_CLEAR(clear_module_state->__pyx_n_s_tempfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_kp_u_time_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_timeit);
  Py_CLEAR(clear_module_state->__pyx_n_s_toSingleton);
  Py_CLEAR(clear_module_state->__pyx_n_s_trisect);
  Py_CLEAR(clear_module_state->__pyx_n_s_turbo);
  Py_CLEAR(clear_module_state->__pyx_n_s_u);
  Py_CLEAR(clear_module_state->__pyx_kp_u_unrecognized_format_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_updateThreshold);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_validateNormalization);
  Py_CLEAR(clear_module_state->__pyx_n_s_values);
  Py_CLEAR(clear_module_state->__pyx_n_s_vertex);
  Py_CLEAR(clear_module_state->__pyx_n_s_vertices);
  Py_CLEAR(clear_module_state->__pyx_n_s_warnings);
  Py_CLEAR(clear_module_state->__pyx_n_s_weightedDegreeWithCluster);
  Py_CLEAR(clear_module_state->__pyx_n_s_write);
  Py_CLEAR(clear_module_state->__pyx_n_s_writeCommunities);
  Py_CLEAR(clear_module_state->__pyx_kp_u_wrote_communities_to_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_zeta);
  Py_CLEAR(clear_module_state->__pyx_n_s_zeta1);
  Py_CLEAR(clear_module_state->__pyx_n_s_zeta2);
  Py_CLEAR(clear_module_state->__pyx_n_s_zetaCoarse);
  Py_CLEAR(clear_module_state->__pyx_float_1_0);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_3);
  Py_CLEAR(clear_module_state->__pyx_int_4);
  Py_CLEAR(clear_module_state->__pyx_int_32);
  Py_CLEAR(clear_module_state->__pyx_int_222419149);
  Py_CLEAR(clear_module_state->__pyx_int_228825662);
  Py_CLEAR(clear_module_state->__pyx_int_238750788);
  Py_CLEAR(clear_module_state->__pyx_k__4);
  Py_CLEAR(clear_module_state->__pyx_k__26);
  Py_CLEAR(clear_module_state->__pyx_k__27);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_slice__30);
  Py_CLEAR(clear_module_state->__pyx_tuple__12);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__23);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__28);
  Py_CLEAR(clear_module_state->__pyx_tuple__29);
  Py_CLEAR(clear_module_state->__pyx_tuple__31);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__37);
  Py_CLEAR(clear_module_state->__pyx_tuple__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__45);
  Py_CLEAR(clear_module_state->__pyx_tuple__51);
  Py_CLEAR(clear_module_state->__pyx_tuple__53);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__56);
  Py_CLEAR(clear_module_state->__pyx_tuple__58);
  Py_CLEAR(clear_module_state->__pyx_tuple__62);
  Py_CLEAR(clear_module_state->__pyx_tuple__64);
  Py_CLEAR(clear_module_state->__pyx_tuple__67);
  Py_CLEAR(clear_module_state->__pyx_tuple__71);
  Py_CLEAR(clear_module_state->__pyx_tuple__78);
  Py_CLEAR(clear_module_state->__pyx_tuple__86);
  Py_CLEAR(clear_module_state->__pyx_tuple__88);
  Py_CLEAR(clear_module_state->__pyx_tuple__89);
  Py_CLEAR(clear_module_state->__pyx_tuple__106);
  Py_CLEAR(clear_module_state->__pyx_tuple__112);
  Py_CLEAR(clear_module_state->__pyx_tuple__132);
  Py_CLEAR(clear_module_state->__pyx_tuple__155);
  Py_CLEAR(clear_module_state->__pyx_tuple__161);
  Py_CLEAR(clear_module_state->__pyx_tuple__163);
  Py_CLEAR(clear_module_state->__pyx_tuple__164);
  Py_CLEAR(clear_module_state->__pyx_tuple__166);
  Py_CLEAR(clear_module_state->__pyx_tuple__168);
  Py_CLEAR(clear_module_state->__pyx_tuple__170);
  Py_CLEAR(clear_module_state->__pyx_tuple__172);
  Py_CLEAR(clear_module_state->__pyx_tuple__173);
  Py_CLEAR(clear_module_state->__pyx_tuple__175);
  Py_CLEAR(clear_module_state->__pyx_tuple__177);
  Py_CLEAR(clear_module_state->__pyx_tuple__179);
  Py_CLEAR(clear_module_state->__pyx_tuple__185);
  Py_CLEAR(clear_module_state->__pyx_tuple__187);
  Py_CLEAR(clear_module_state->__pyx_tuple__188);
  Py_CLEAR(clear_module_state->__pyx_tuple__190);
  Py_CLEAR(clear_module_state->__pyx_tuple__192);
  Py_CLEAR(clear_module_state->__pyx_tuple__193);
  Py_CLEAR(clear_module_state->__pyx_tuple__195);
  Py_CLEAR(clear_module_state->__pyx_tuple__197);
  Py_CLEAR(clear_module_state->__pyx_tuple__198);
  Py_CLEAR(clear_module_state->__pyx_tuple__200);
  Py_CLEAR(clear_module_state->__pyx_tuple__204);
  Py_CLEAR(clear_module_state->__pyx_codeobj__35);
  Py_CLEAR(clear_module_state->__pyx_codeobj__36);
  Py_CLEAR(clear_module_state->__pyx_codeobj__38);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__40);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__43);
  Py_CLEAR(clear_module_state->__pyx_codeobj__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__46);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__48);
  Py_CLEAR(clear_module_state->__pyx_codeobj__49);
  Py_CLEAR(clear_module_state->__pyx_codeobj__50);
  Py_CLEAR(clear_module_state->__pyx_codeobj__52);
  Py_CLEAR(clear_module_state->__pyx_codeobj__55);
  Py_CLEAR(clear_module_state->__pyx_codeobj__57);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__60);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  Py_CLEAR(clear_module_state->__pyx_codeobj__63);
  Py_CLEAR(clear_module_state->__pyx_codeobj__65);
  Py_CLEAR(clear_module_state->__pyx_codeobj__66);
  Py_CLEAR(clear_module_state->__pyx_codeobj__68);
  Py_CLEAR(clear_module_state->__pyx_codeobj__69);
  Py_CLEAR(clear_module_state->__pyx_codeobj__70);
  Py_CLEAR(clear_module_state->__pyx_codeobj__72);
  Py_CLEAR(clear_module_state->__pyx_codeobj__73);
  Py_CLEAR(clear_module_state->__pyx_codeobj__74);
  Py_CLEAR(clear_module_state->__pyx_codeobj__75);
  Py_CLEAR(clear_module_state->__pyx_codeobj__76);
  Py_CLEAR(clear_module_state->__pyx_codeobj__77);
  Py_CLEAR(clear_module_state->__pyx_codeobj__79);
  Py_CLEAR(clear_module_state->__pyx_codeobj__80);
  Py_CLEAR(clear_module_state->__pyx_codeobj__81);
  Py_CLEAR(clear_module_state->__pyx_codeobj__82);
  Py_CLEAR(clear_module_state->__pyx_codeobj__83);
  Py_CLEAR(clear_module_state->__pyx_codeobj__84);
  Py_CLEAR(clear_module_state->__pyx_codeobj__85);
  Py_CLEAR(clear_module_state->__pyx_codeobj__87);
  Py_CLEAR(clear_module_state->__pyx_codeobj__90);
  Py_CLEAR(clear_module_state->__pyx_codeobj__91);
  Py_CLEAR(clear_module_state->__pyx_codeobj__92);
  Py_CLEAR(clear_module_state->__pyx_codeobj__93);
  Py_CLEAR(clear_module_state->__pyx_codeobj__94);
  Py_CLEAR(clear_module_state->__pyx_codeobj__95);
  Py_CLEAR(clear_module_state->__pyx_codeobj__96);
  Py_CLEAR(clear_module_state->__pyx_codeobj__97);
  Py_CLEAR(clear_module_state->__pyx_codeobj__98);
  Py_CLEAR(clear_module_state->__pyx_codeobj__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__100);
  Py_CLEAR(clear_module_state->__pyx_codeobj__101);
  Py_CLEAR(clear_module_state->__pyx_codeobj__102);
  Py_CLEAR(clear_module_state->__pyx_codeobj__103);
  Py_CLEAR(clear_module_state->__pyx_codeobj__104);
  Py_CLEAR(clear_module_state->__pyx_codeobj__105);
  Py_CLEAR(clear_module_state->__pyx_codeobj__107);
  Py_CLEAR(clear_module_state->__pyx_codeobj__108);
  Py_CLEAR(clear_module_state->__pyx_codeobj__109);
  Py_CLEAR(clear_module_state->__pyx_codeobj__110);
  Py_CLEAR(clear_module_state->__pyx_codeobj__111);
  Py_CLEAR(clear_module_state->__pyx_codeobj__113);
  Py_CLEAR(clear_module_state->__pyx_codeobj__114);
  Py_CLEAR(clear_module_state->__pyx_codeobj__115);
  Py_CLEAR(clear_module_state->__pyx_codeobj__116);
  Py_CLEAR(clear_module_state->__pyx_codeobj__117);
  Py_CLEAR(clear_module_state->__pyx_codeobj__118);
  Py_CLEAR(clear_module_state->__pyx_codeobj__119);
  Py_CLEAR(clear_module_state->__pyx_codeobj__120);
  Py_CLEAR(clear_module_state->__pyx_codeobj__121);
  Py_CLEAR(clear_module_state->__pyx_codeobj__122);
  Py_CLEAR(clear_module_state->__pyx_codeobj__123);
  Py_CLEAR(clear_module_state->__pyx_codeobj__124);
  Py_CLEAR(clear_module_state->__pyx_codeobj__125);
  Py_CLEAR(clear_module_state->__pyx_codeobj__126);
  Py_CLEAR(clear_module_state->__pyx_codeobj__127);
  Py_CLEAR(clear_module_state->__pyx_codeobj__128);
  Py_CLEAR(clear_module_state->__pyx_codeobj__129);
  Py_CLEAR(clear_module_state->__pyx_codeobj__130);
  Py_CLEAR(clear_module_state->__pyx_codeobj__131);
  Py_CLEAR(clear_module_state->__pyx_codeobj__133);
  Py_CLEAR(clear_module_state->__pyx_codeobj__134);
  Py_CLEAR(clear_module_state->__pyx_codeobj__135);
  Py_CLEAR(clear_module_state->__pyx_codeobj__136);
  Py_CLEAR(clear_module_state->__pyx_codeobj__137);
  Py_CLEAR(clear_module_state->__pyx_codeobj__138);
  Py_CLEAR(clear_module_state->__pyx_codeobj__139);
  Py_CLEAR(clear_module_state->__pyx_codeobj__140);
  Py_CLEAR(clear_module_state->__pyx_codeobj__141);
  Py_CLEAR(clear_module_state->__pyx_codeobj__142);
  Py_CLEAR(clear_module_state->__pyx_codeobj__143);
  Py_CLEAR(clear_module_state->__pyx_codeobj__144);
  Py_CLEAR(clear_module_state->__pyx_codeobj__145);
  Py_CLEAR(clear_module_state->__pyx_codeobj__146);
  Py_CLEAR(clear_module_state->__pyx_codeobj__147);
  Py_CLEAR(clear_module_state->__pyx_codeobj__148);
  Py_CLEAR(clear_module_state->__pyx_codeobj__149);
  Py_CLEAR(clear_module_state->__pyx_codeobj__150);
  Py_CLEAR(clear_module_state->__pyx_codeobj__151);
  Py_CLEAR(clear_module_state->__pyx_codeobj__152);
  Py_CLEAR(clear_module_state->__pyx_codeobj__153);
  Py_CLEAR(clear_module_state->__pyx_codeobj__154);
  Py_CLEAR(clear_module_state->__pyx_codeobj__156);
  Py_CLEAR(clear_module_state->__pyx_codeobj__157);
  Py_CLEAR(clear_module_state->__pyx_codeobj__158);
  Py_CLEAR(clear_module_state->__pyx_codeobj__159);
  Py_CLEAR(clear_module_state->__pyx_codeobj__160);
  Py_CLEAR(clear_module_state->__pyx_codeobj__162);
  Py_CLEAR(clear_module_state->__pyx_codeobj__165);
  Py_CLEAR(clear_module_state->__pyx_codeobj__167);
  Py_CLEAR(clear_module_state->__pyx_codeobj__169);
  Py_CLEAR(clear_module_state->__pyx_codeobj__171);
  Py_CLEAR(clear_module_state->__pyx_codeobj__174);
  Py_CLEAR(clear_module_state->__pyx_codeobj__176);
  Py_CLEAR(clear_module_state->__pyx_codeobj__178);
  Py_CLEAR(clear_module_state->__pyx_codeobj__180);
  Py_CLEAR(clear_module_state->__pyx_codeobj__181);
  Py_CLEAR(clear_module_state->__pyx_codeobj__182);
  Py_CLEAR(clear_module_state->__pyx_codeobj__183);
  Py_CLEAR(clear_module_state->__pyx_codeobj__184);
  Py_CLEAR(clear_module_state->__pyx_codeobj__186);
  Py_CLEAR(clear_module_state->__pyx_codeobj__189);
  Py_CLEAR(clear_module_state->__pyx_codeobj__191);
  Py_CLEAR(clear_module_state->__pyx_codeobj__194);
  Py_CLEAR(clear_module_state->__pyx_codeobj__196);
  Py_CLEAR(clear_module_state->__pyx_codeobj__199);
  Py_CLEAR(clear_module_state->__pyx_codeobj__201);
  Py_CLEAR(clear_module_state->__pyx_codeobj__202);
  Py_CLEAR(clear_module_state->__pyx_codeobj__203);
  Py_CLEAR(clear_module_state->__pyx_codeobj__205);
  Py_CLEAR(clear_module_state->__pyx_codeobj__206);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_4base__CythonParentClass);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_4base_Algorithm);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_10structures_Cover);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_10structures_Partition);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_Graph);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_NodeIntAttribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_NodeDoubleAttribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_NodeStringAttribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_EdgeIntAttribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_EdgeDoubleAttribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_EdgeStringAttribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_3scd_SelectiveCommunityDetector);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_CommunityDetector);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_CommunityDetector);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_OverlappingCommunityDetector);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_OverlappingCommunityDetector);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_ClusteringGenerator);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_ClusteringGenerator);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_GraphClusteringTools);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_GraphClusteringTools);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_PartitionIntersection);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_PartitionIntersection);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_Coverage);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_Coverage);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_EdgeCut);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_EdgeCut);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_Modularity);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_Modularity);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_HubDominance);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_HubDominance);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_PLM);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_PLM);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_ParallelLeiden);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_ParallelLeiden);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_LouvainMapEquation);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_LouvainMapEquation);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_PLP);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_PLP);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_LFM);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_LFM);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_LPDegreeOrdered);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_LPDegreeOrdered);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_CutClustering);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_CutClustering);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_DissimilarityMeasure);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_DissimilarityMeasure);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_NodeStructuralRandMeasure);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_NodeStructuralRandMeasure);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_GraphStructuralRandMeasure);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_GraphStructuralRandMeasure);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_JaccardMeasure);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_JaccardMeasure);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_NMIDistance);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_NMIDistance);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_AdjustedRandMeasure);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_AdjustedRandMeasure);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_LocalCommunityEvaluation);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_LocalCommunityEvaluation);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_LocalPartitionEvaluation);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_LocalPartitionEvaluation);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_LocalCoverEvaluation);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_LocalCoverEvaluation);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_IntrapartitionDensity);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_IntrapartitionDensity);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_IsolatedInterpartitionConductance);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_IsolatedInterpartitionExpansion);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_CoverHubDominance);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_CoverHubDominance);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_PartitionHubDominance);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_PartitionHubDominance);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_PartitionFragmentation);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_PartitionFragmentation);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_StablePartitionNodes);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_StablePartitionNodes);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_CoverF1Similarity);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_CoverF1Similarity);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_9community_OverlappingNMIDistance);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_9community_OverlappingNMIDistance);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0_is_not_a_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_ARITHMETIC_MEAN);
  Py_VISIT(traverse_module_state->__pyx_n_s_AdjustedRandMeasure);
  Py_VISIT(traverse_module_state->__pyx_n_s_AdjustedRandMeasure___reduce_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_AdjustedRandMeasure___setstate_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_AdjustedRandMeasure_getDissimila);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArithmeticMean);
  Py_VISIT(traverse_module_state->__pyx_n_s_AssertionError);
  Py_VISIT(traverse_module_state->__pyx_n_s_BinaryEdgeListPartitionReader);
  Py_VISIT(traverse_module_state->__pyx_n_s_BinaryEdgeListPartitionWriter);
  Py_VISIT(traverse_module_state->__pyx_n_s_BinaryPartitionReader);
  Py_VISIT(traverse_module_state->__pyx_n_s_BinaryPartitionWriter);
  Py_VISIT(traverse_module_state->__pyx_n_s_C);
  Py_VISIT(traverse_module_state->__pyx_n_s_ClusteringGenerator);
  Py_VISIT(traverse_module_state->__pyx_n_s_ClusteringGenerator___reduce_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_ClusteringGenerator___setstate_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_ClusteringGenerator_makeContinuo);
  Py_VISIT(traverse_module_state->__pyx_n_s_ClusteringGenerator_makeNonconti);
  Py_VISIT(traverse_module_state->__pyx_n_s_ClusteringGenerator_makeOneClust);
  Py_VISIT(traverse_module_state->__pyx_n_s_ClusteringGenerator_makeRandomCl);
  Py_VISIT(traverse_module_state->__pyx_n_s_ClusteringGenerator_makeSingleto);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Communities_detected_in_5f_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_CommunityDetector);
  Py_VISIT(traverse_module_state->__pyx_n_s_CommunityDetector___reduce_cytho);
  Py_VISIT(traverse_module_state->__pyx_n_s_CommunityDetector___setstate_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_CommunityDetector_getPartition);
  Py_VISIT(traverse_module_state->__pyx_n_s_CoreDecomposition);
  Py_VISIT(traverse_module_state->__pyx_n_s_Cover);
  Py_VISIT(traverse_module_state->__pyx_n_s_CoverF1Similarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_CoverF1Similarity___reduce_cytho);
  Py_VISIT(traverse_module_state->__pyx_n_s_CoverF1Similarity___setstate_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_CoverHubDominance);
  Py_VISIT(traverse_module_state->__pyx_n_s_CoverHubDominance___reduce_cytho);
  Py_VISIT(traverse_module_state->__pyx_n_s_CoverHubDominance___setstate_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_Coverage);
  Py_VISIT(traverse_module_state->__pyx_n_s_Coverage___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Coverage___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Coverage_getQuality);
  Py_VISIT(traverse_module_state->__pyx_n_s_CutClustering);
  Py_VISIT(traverse_module_state->__pyx_n_s_CutClustering___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_CutClustering___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_CutClustering_getClusterHierarch);
  Py_VISIT(traverse_module_state->__pyx_n_s_DissimilarityMeasure);
  Py_VISIT(traverse_module_state->__pyx_n_s_DissimilarityMeasure___reduce_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_DissimilarityMeasure___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_EdgeCut);
  Py_VISIT(traverse_module_state->__pyx_n_s_EdgeCut___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_EdgeCut___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_EdgeCut_getQuality);
  Py_VISIT(traverse_module_state->__pyx_n_s_EdgeListPartitionReader);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_first_and_second_must_both);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_invalid_normalization_meth);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_object_not_properly_initia);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_you_may_not_use_CommunityD);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_you_may_not_use_LocalCommu);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_you_may_not_use_LocalCover);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_you_may_not_use_LocalParti);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_you_may_not_use_Overlappin);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Expected_at_least_d_argument_s_g);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Function_call_with_ambiguous_arg);
  Py_VISIT(traverse_module_state->__pyx_n_s_G);
  Py_VISIT(traverse_module_state->__pyx_n_s_GEOMETRIC_MEAN);
  Py_VISIT(traverse_module_state->__pyx_n_s_Gcoarse);
  Py_VISIT(traverse_module_state->__pyx_n_s_GeometricMean);
  Py_VISIT(traverse_module_state->__pyx_n_s_Gfine);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphClusteringTools);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphClusteringTools___reduce_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphClusteringTools___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphClusteringTools_communicati);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphClusteringTools_equalCluste);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphClusteringTools_getImbalanc);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphClusteringTools_isOneCluste);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphClusteringTools_isProperClu);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphClusteringTools_isSingleton);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphClusteringTools_weightedDeg);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphStructuralRandMeasure);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphStructuralRandMeasure___red);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphStructuralRandMeasure___set);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphStructuralRandMeasure_getDi);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphTools);
  Py_VISIT(traverse_module_state->__pyx_n_s_HubDominance);
  Py_VISIT(traverse_module_state->__pyx_n_s_HubDominance___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_HubDominance___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_HubDominance_getQuality);
  Py_VISIT(traverse_module_state->__pyx_n_s_IOError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_IntrapartitionDensity);
  Py_VISIT(traverse_module_state->__pyx_n_s_IntrapartitionDensity___reduce_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_IntrapartitionDensity___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_IntrapartitionDensity_getGlobal);
  Py_VISIT(traverse_module_state->__pyx_n_s_IsolatedInterpartitionConductanc);
  Py_VISIT(traverse_module_state->__pyx_n_s_IsolatedInterpartitionConductanc_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_IsolatedInterpartitionConductanc_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_IsolatedInterpartitionExpansion);
  Py_VISIT(traverse_module_state->__pyx_n_s_IsolatedInterpartitionExpansion_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_IsolatedInterpartitionExpansion_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_JOINT_ENTROPY);
  Py_VISIT(traverse_module_state->__pyx_n_s_JaccardMeasure);
  Py_VISIT(traverse_module_state->__pyx_n_s_JaccardMeasure___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_JaccardMeasure___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_JaccardMeasure_getDissimilarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_JointEntropy);
  Py_VISIT(traverse_module_state->__pyx_n_s_KeyError);
  Py_VISIT(traverse_module_state->__pyx_n_s_LFM);
  Py_VISIT(traverse_module_state->__pyx_n_s_LFM___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_LFM___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_LPDegreeOrdered);
  Py_VISIT(traverse_module_state->__pyx_n_s_LPDegreeOrdered___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_LPDegreeOrdered___setstate_cytho);
  Py_VISIT(traverse_module_state->__pyx_n_s_LPDegreeOrdered_numberOfIteratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_LocalCommunityEvaluation);
  Py_VISIT(traverse_module_state->__pyx_n_s_LocalCommunityEvaluation___reduc);
  Py_VISIT(traverse_module_state->__pyx_n_s_LocalCommunityEvaluation___setst);
  Py_VISIT(traverse_module_state->__pyx_n_s_LocalCommunityEvaluation_getMaxi);
  Py_VISIT(traverse_module_state->__pyx_n_s_LocalCommunityEvaluation_getMini);
  Py_VISIT(traverse_module_state->__pyx_n_s_LocalCommunityEvaluation_getUnwe);
  Py_VISIT(traverse_module_state->__pyx_n_s_LocalCommunityEvaluation_getValu);
  Py_VISIT(traverse_module_state->__pyx_n_s_LocalCommunityEvaluation_getValu_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_LocalCommunityEvaluation_getWeig);
  Py_VISIT(traverse_module_state->__pyx_n_s_LocalCommunityEvaluation_isSmall);
  Py_VISIT(traverse_module_state->__pyx_n_s_LocalCoverEvaluation);
  Py_VISIT(traverse_module_state->__pyx_n_s_LocalCoverEvaluation___reduce_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_LocalCoverEvaluation___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_LocalPartitionEvaluation);
  Py_VISIT(traverse_module_state->__pyx_n_s_LocalPartitionEvaluation___reduc);
  Py_VISIT(traverse_module_state->__pyx_n_s_LocalPartitionEvaluation___setst);
  Py_VISIT(traverse_module_state->__pyx_n_s_LouvainMapEquation);
  Py_VISIT(traverse_module_state->__pyx_n_s_LouvainMapEquation___reduce_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_LouvainMapEquation___setstate_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_MAX);
  Py_VISIT(traverse_module_state->__pyx_n_s_MIN);
  Py_VISIT(traverse_module_state->__pyx_n_s_Max);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Min);
  Py_VISIT(traverse_module_state->__pyx_n_s_MissingDependencyError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Modularity);
  Py_VISIT(traverse_module_state->__pyx_n_s_Modularity___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Modularity___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Modularity_getQuality);
  Py_VISIT(traverse_module_state->__pyx_n_s_NMIDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_NMIDistance___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_NMIDistance___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_NMIDistance_getDissimilarity);
  Py_VISIT(traverse_module_state->__pyx_kp_s_No_matching_signature_found);
  Py_VISIT(traverse_module_state->__pyx_n_s_NodeStructuralRandMeasure);
  Py_VISIT(traverse_module_state->__pyx_n_s_NodeStructuralRandMeasure___redu);
  Py_VISIT(traverse_module_state->__pyx_n_s_NodeStructuralRandMeasure___sets);
  Py_VISIT(traverse_module_state->__pyx_n_s_NodeStructuralRandMeasure_getDis);
  Py_VISIT(traverse_module_state->__pyx_n_s_Normalization);
  Py_VISIT(traverse_module_state->__pyx_n_s_NotImplementedError);
  Py_VISIT(traverse_module_state->__pyx_n_s_OverlappingCommunityDetector);
  Py_VISIT(traverse_module_state->__pyx_n_s_OverlappingCommunityDetector___r);
  Py_VISIT(traverse_module_state->__pyx_n_s_OverlappingCommunityDetector___s);
  Py_VISIT(traverse_module_state->__pyx_n_s_OverlappingCommunityDetector_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_OverlappingNMIDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_OverlappingNMIDistance___reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_OverlappingNMIDistance___setstat);
  Py_VISIT(traverse_module_state->__pyx_n_s_OverlappingNMIDistance__validate);
  Py_VISIT(traverse_module_state->__pyx_n_s_OverlappingNMIDistance_getDissim);
  Py_VISIT(traverse_module_state->__pyx_n_s_OverlappingNMIDistance_setNormal);
  Py_VISIT(traverse_module_state->__pyx_n_s_P);
  Py_VISIT(traverse_module_state->__pyx_n_s_PLM);
  Py_VISIT(traverse_module_state->__pyx_n_s_PLM___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PLM___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PLM_coarsen);
  Py_VISIT(traverse_module_state->__pyx_n_s_PLM_getTiming);
  Py_VISIT(traverse_module_state->__pyx_n_s_PLM_prolong);
  Py_VISIT(traverse_module_state->__pyx_n_s_PLP);
  Py_VISIT(traverse_module_state->__pyx_n_s_PLP___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PLP___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PLP_getTiming);
  Py_VISIT(traverse_module_state->__pyx_n_s_PLP_numberOfIterations);
  Py_VISIT(traverse_module_state->__pyx_n_s_ParallelLeiden);
  Py_VISIT(traverse_module_state->__pyx_n_s_ParallelLeiden___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ParallelLeiden___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ParallelPartitionCoarsening);
  Py_VISIT(traverse_module_state->__pyx_n_s_Partition);
  Py_VISIT(traverse_module_state->__pyx_n_s_PartitionFragmentation);
  Py_VISIT(traverse_module_state->__pyx_n_s_PartitionFragmentation___reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_PartitionFragmentation___setstat);
  Py_VISIT(traverse_module_state->__pyx_n_s_PartitionHubDominance);
  Py_VISIT(traverse_module_state->__pyx_n_s_PartitionHubDominance___reduce_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_PartitionHubDominance___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_PartitionIntersection);
  Py_VISIT(traverse_module_state->__pyx_n_s_PartitionIntersection___reduce_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_PartitionIntersection___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_PartitionIntersection_calculate);
  Py_VISIT(traverse_module_state->__pyx_n_s_PartitionReader);
  Py_VISIT(traverse_module_state->__pyx_n_s_PartitionWriter);
  Py_VISIT(traverse_module_state->__pyx_n_s_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_RuntimeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_SpectralPartitioner);
  Py_VISIT(traverse_module_state->__pyx_n_s_SpectralPartitioner___init);
  Py_VISIT(traverse_module_state->__pyx_n_s_SpectralPartitioner__bisect);
  Py_VISIT(traverse_module_state->__pyx_n_s_SpectralPartitioner__generatePar);
  Py_VISIT(traverse_module_state->__pyx_n_s_SpectralPartitioner__getMean);
  Py_VISIT(traverse_module_state->__pyx_n_s_SpectralPartitioner__getQuantile);
  Py_VISIT(traverse_module_state->__pyx_n_s_SpectralPartitioner__prepareSpec);
  Py_VISIT(traverse_module_state->__pyx_n_s_SpectralPartitioner__trisect);
  Py_VISIT(traverse_module_state->__pyx_n_s_SpectralPartitioner_getPartition);
  Py_VISIT(traverse_module_state->__pyx_kp_s_SpectralPartitioner_graph_count);
  Py_VISIT(traverse_module_state->__pyx_n_s_SpectralPartitioner_run);
  Py_VISIT(traverse_module_state->__pyx_n_s_StablePartitionNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_StablePartitionNodes___reduce_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_StablePartitionNodes___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_StablePartitionNodes_isStable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_TODO);
  Py_VISIT(traverse_module_state->__pyx_kp_u_There_is_no_core_for_the_specifi);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_kp_u__16);
  Py_VISIT(traverse_module_state->__pyx_kp_u__19);
  Py_VISIT(traverse_module_state->__pyx_n_s__207);
  Py_VISIT(traverse_module_state->__pyx_kp_u__22);
  Py_VISIT(traverse_module_state->__pyx_kp_u__32);
  Py_VISIT(traverse_module_state->__pyx_n_s__33);
  Py_VISIT(traverse_module_state->__pyx_kp_s__5);
  Py_VISIT(traverse_module_state->__pyx_kp_s__6);
  Py_VISIT(traverse_module_state->__pyx_kp_s__7);
  Py_VISIT(traverse_module_state->__pyx_kp_u__7);
  Py_VISIT(traverse_module_state->__pyx_n_s_addToSubset);
  Py_VISIT(traverse_module_state->__pyx_n_s_algebraic);
  Py_VISIT(traverse_module_state->__pyx_n_s_algo);
  Py_VISIT(traverse_module_state->__pyx_n_s_alpha);
  Py_VISIT(traverse_module_state->__pyx_n_s_append);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_kp_u_avg_community_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_balanced);
  Py_VISIT(traverse_module_state->__pyx_n_u_balanced);
  Py_VISIT(traverse_module_state->__pyx_n_s_baseClustering);
  Py_VISIT(traverse_module_state->__pyx_n_s_bisect);
  Py_VISIT(traverse_module_state->__pyx_n_s_calculate);
  Py_VISIT(traverse_module_state->__pyx_n_s_ceil);
  Py_VISIT(traverse_module_state->__pyx_n_s_centrality);
  Py_VISIT(traverse_module_state->__pyx_n_s_cg);
  Py_VISIT(traverse_module_state->__pyx_n_s_cid);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_coarsen);
  Py_VISIT(traverse_module_state->__pyx_n_s_coarsening);
  Py_VISIT(traverse_module_state->__pyx_n_s_commProps);
  Py_VISIT(traverse_module_state->__pyx_n_s_communicationGraph);
  Py_VISIT(traverse_module_state->__pyx_kp_u_communities);
  Py_VISIT(traverse_module_state->__pyx_n_s_communities_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_communityGraph);
  Py_VISIT(traverse_module_state->__pyx_n_s_communitySizes);
  Py_VISIT(traverse_module_state->__pyx_n_s_compareCommunities);
  Py_VISIT(traverse_module_state->__pyx_n_s_coreDec);
  Py_VISIT(traverse_module_state->__pyx_n_s_cores);
  Py_VISIT(traverse_module_state->__pyx_n_s_count);
  Py_VISIT(traverse_module_state->__pyx_n_s_cutoff);
  Py_VISIT(traverse_module_state->__pyx_n_u_default);
  Py_VISIT(traverse_module_state->__pyx_n_s_default_timer);
  Py_VISIT(traverse_module_state->__pyx_n_s_defaults);
  Py_VISIT(traverse_module_state->__pyx_n_s_detectCommunities);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_doc);
  Py_VISIT(traverse_module_state->__pyx_n_s_eCut);
  Py_VISIT(traverse_module_state->__pyx_kp_u_edge_cut);
  Py_VISIT(traverse_module_state->__pyx_kp_u_edge_cut_portion);
  Py_VISIT(traverse_module_state->__pyx_kp_u_edgelist_s0);
  Py_VISIT(traverse_module_state->__pyx_kp_u_edgelist_s1);
  Py_VISIT(traverse_module_state->__pyx_kp_u_edgelist_t0);
  Py_VISIT(traverse_module_state->__pyx_kp_u_edgelist_t1);
  Py_VISIT(traverse_module_state->__pyx_n_s_eigenvalues);
  Py_VISIT(traverse_module_state->__pyx_n_s_eigenvectors);
  Py_VISIT(traverse_module_state->__pyx_n_s_eigv);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_end);
  Py_VISIT(traverse_module_state->__pyx_n_s_enter);
  Py_VISIT(traverse_module_state->__pyx_n_s_equalClustering);
  Py_VISIT(traverse_module_state->__pyx_n_s_eta);
  Py_VISIT(traverse_module_state->__pyx_n_s_evalCommunityDetection);
  Py_VISIT(traverse_module_state->__pyx_n_s_exit);
  Py_VISIT(traverse_module_state->__pyx_n_s_expanduser);
  Py_VISIT(traverse_module_state->__pyx_n_s_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_first);
  Py_VISIT(traverse_module_state->__pyx_n_s_firstItem);
  Py_VISIT(traverse_module_state->__pyx_n_s_floor);
  Py_VISIT(traverse_module_state->__pyx_n_s_format);
  Py_VISIT(traverse_module_state->__pyx_n_s_fused_sigindex);
  Py_VISIT(traverse_module_state->__pyx_n_s_gamma);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_generatePartition);
  Py_VISIT(traverse_module_state->__pyx_n_s_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_getClusterHierarchy);
  Py_VISIT(traverse_module_state->__pyx_n_s_getCoarseGraph);
  Py_VISIT(traverse_module_state->__pyx_n_s_getCover);
  Py_VISIT(traverse_module_state->__pyx_n_s_getDissimilarity);
  Py_VISIT(traverse_module_state->__pyx_n_s_getGlobal);
  Py_VISIT(traverse_module_state->__pyx_n_s_getImbalance);
  Py_VISIT(traverse_module_state->__pyx_n_s_getMaximumValue);
  Py_VISIT(traverse_module_state->__pyx_n_s_getMean);
  Py_VISIT(traverse_module_state->__pyx_n_s_getMembers);
  Py_VISIT(traverse_module_state->__pyx_n_s_getMinimumValue);
  Py_VISIT(traverse_module_state->__pyx_n_s_getPartition);
  Py_VISIT(traverse_module_state->__pyx_n_s_getQuality);
  Py_VISIT(traverse_module_state->__pyx_n_s_getQuantiles);
  Py_VISIT(traverse_module_state->__pyx_n_s_getTiming);
  Py_VISIT(traverse_module_state->__pyx_n_s_getUnweightedAverage);
  Py_VISIT(traverse_module_state->__pyx_n_s_getValue);
  Py_VISIT(traverse_module_state->__pyx_n_s_getValues);
  Py_VISIT(traverse_module_state->__pyx_n_s_getWeightedAverage);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_graph);
  Py_VISIT(traverse_module_state->__pyx_n_s_graphio);
  Py_VISIT(traverse_module_state->__pyx_n_s_graphtools);
  Py_VISIT(traverse_module_state->__pyx_n_s_have_tabulate);
  Py_VISIT(traverse_module_state->__pyx_n_s_helpers);
  Py_VISIT(traverse_module_state->__pyx_n_s_hierarchical);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_imbalance);
  Py_VISIT(traverse_module_state->__pyx_n_u_imbalance);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_init);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_subclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_inspect);
  Py_VISIT(traverse_module_state->__pyx_n_s_inspectCommunities);
  Py_VISIT(traverse_module_state->__pyx_n_s_isOneClustering);
  Py_VISIT(traverse_module_state->__pyx_n_s_isProperClustering);
  Py_VISIT(traverse_module_state->__pyx_n_s_isSingletonClustering);
  Py_VISIT(traverse_module_state->__pyx_n_s_isSmallBetter);
  Py_VISIT(traverse_module_state->__pyx_n_s_isStable);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_isfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_iterNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_iteration);
  Py_VISIT(traverse_module_state->__pyx_n_s_iterations);
  Py_VISIT(traverse_module_state->__pyx_n_s_k);
  Py_VISIT(traverse_module_state->__pyx_n_s_kCore);
  Py_VISIT(traverse_module_state->__pyx_n_s_kCoreCommunityDetection);
  Py_VISIT(traverse_module_state->__pyx_n_s_kwargs);
  Py_VISIT(traverse_module_state->__pyx_n_s_laplacianEigenvectors);
  Py_VISIT(traverse_module_state->__pyx_n_s_log);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_makeContinuousBalancedClustering);
  Py_VISIT(traverse_module_state->__pyx_n_s_makeNoncontinuousBalancedCluster);
  Py_VISIT(traverse_module_state->__pyx_n_s_makeOneClustering);
  Py_VISIT(traverse_module_state->__pyx_n_s_makeRandomClustering);
  Py_VISIT(traverse_module_state->__pyx_n_s_makeSingletonClustering);
  Py_VISIT(traverse_module_state->__pyx_n_s_math);
  Py_VISIT(traverse_module_state->__pyx_n_s_max);
  Py_VISIT(traverse_module_state->__pyx_n_s_maxIter);
  Py_VISIT(traverse_module_state->__pyx_n_s_maxIterations);
  Py_VISIT(traverse_module_state->__pyx_kp_u_max_community_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_mean);
  Py_VISIT(traverse_module_state->__pyx_n_s_metaclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_min);
  Py_VISIT(traverse_module_state->__pyx_kp_u_min_community_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_mod);
  Py_VISIT(traverse_module_state->__pyx_n_u_modularity);
  Py_VISIT(traverse_module_state->__pyx_n_s_module);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_networkit_community);
  Py_VISIT(traverse_module_state->__pyx_kp_s_networkit_community_pyx);
  Py_VISIT(traverse_module_state->__pyx_kp_s_networkit_structures);
  Py_VISIT(traverse_module_state->__pyx_n_s_new);
  Py_VISIT(traverse_module_state->__pyx_n_s_nextCount);
  Py_VISIT(traverse_module_state->__pyx_n_s_nextPartition);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_nodeToMetaNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_none);
  Py_VISIT(traverse_module_state->__pyx_n_s_normalization);
  Py_VISIT(traverse_module_state->__pyx_n_s_np);
  Py_VISIT(traverse_module_state->__pyx_n_s_numberOfEdges);
  Py_VISIT(traverse_module_state->__pyx_n_s_numberOfIterations);
  Py_VISIT(traverse_module_state->__pyx_n_s_numberOfNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_numberOfSubsets);
  Py_VISIT(traverse_module_state->__pyx_n_s_numpy);
  Py_VISIT(traverse_module_state->__pyx_n_s_open);
  Py_VISIT(traverse_module_state->__pyx_n_s_os);
  Py_VISIT(traverse_module_state->__pyx_n_s_par);
  Py_VISIT(traverse_module_state->__pyx_n_s_parallel);
  Py_VISIT(traverse_module_state->__pyx_n_s_parallelizationStrategy);
  Py_VISIT(traverse_module_state->__pyx_n_s_partA);
  Py_VISIT(traverse_module_state->__pyx_n_s_partB);
  Py_VISIT(traverse_module_state->__pyx_n_s_partC);
  Py_VISIT(traverse_module_state->__pyx_n_s_partIndex);
  Py_VISIT(traverse_module_state->__pyx_n_s_partition);
  Py_VISIT(traverse_module_state->__pyx_n_s_partitions);
  Py_VISIT(traverse_module_state->__pyx_n_s_path);
  Py_VISIT(traverse_module_state->__pyx_kp_u_path_expanded_to_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_pickle);
  Py_VISIT(traverse_module_state->__pyx_n_s_prepare);
  Py_VISIT(traverse_module_state->__pyx_n_s_prepareSpectrum);
  Py_VISIT(traverse_module_state->__pyx_n_s_print);
  Py_VISIT(traverse_module_state->__pyx_n_s_prolong);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyResult);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_checksum);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_DissimilarityMeas);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_GraphClusteringTo);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_qualname);
  Py_VISIT(traverse_module_state->__pyx_n_s_quantile);
  Py_VISIT(traverse_module_state->__pyx_n_s_quantiles);
  Py_VISIT(traverse_module_state->__pyx_n_u_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_random);
  Py_VISIT(traverse_module_state->__pyx_n_s_randomize);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_read);
  Py_VISIT(traverse_module_state->__pyx_n_s_readCommunities);
  Py_VISIT(traverse_module_state->__pyx_kp_u_read_communities_from_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_reader);
  Py_VISIT(traverse_module_state->__pyx_n_s_readers);
  Py_VISIT(traverse_module_state->__pyx_n_s_recurse);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_reference);
  Py_VISIT(traverse_module_state->__pyx_n_s_refine);
  Py_VISIT(traverse_module_state->__pyx_n_u_relaxmap);
  Py_VISIT(traverse_module_state->__pyx_n_s_res);
  Py_VISIT(traverse_module_state->__pyx_n_s_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_results);
  Py_VISIT(traverse_module_state->__pyx_n_s_ret);
  Py_VISIT(traverse_module_state->__pyx_n_s_reverse);
  Py_VISIT(traverse_module_state->__pyx_n_s_run);
  Py_VISIT(traverse_module_state->__pyx_n_s_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_scd);
  Py_VISIT(traverse_module_state->__pyx_n_s_scores);
  Py_VISIT(traverse_module_state->__pyx_n_s_second);
  Py_VISIT(traverse_module_state->__pyx_n_s_sections);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__this_cannot_be_converted_t);
  Py_VISIT(traverse_module_state->__pyx_n_s_setNormalization);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_size);
  Py_VISIT(traverse_module_state->__pyx_kp_u_solution_properties);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_spectrum);
  Py_VISIT(traverse_module_state->__pyx_n_s_split);
  Py_VISIT(traverse_module_state->__pyx_n_s_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_staticmethod);
  Py_VISIT(traverse_module_state->__pyx_n_s_stdstring);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_strip);
  Py_VISIT(traverse_module_state->__pyx_n_s_subgraphFromNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_subprocess);
  Py_VISIT(traverse_module_state->__pyx_n_s_subsetID);
  Py_VISIT(traverse_module_state->__pyx_n_s_subsetSizes);
  Py_VISIT(traverse_module_state->__pyx_n_s_sum);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_s_support);
  Py_VISIT(traverse_module_state->__pyx_n_s_tabulate);
  Py_VISIT(traverse_module_state->__pyx_n_u_tabulate);
  Py_VISIT(traverse_module_state->__pyx_n_s_tempfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_kp_u_time_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_timeit);
  Py_VISIT(traverse_module_state->__pyx_n_s_toSingleton);
  Py_VISIT(traverse_module_state->__pyx_n_s_trisect);
  Py_VISIT(traverse_module_state->__pyx_n_s_turbo);
  Py_VISIT(traverse_module_state->__pyx_n_s_u);
  Py_VISIT(traverse_module_state->__pyx_kp_u_unrecognized_format_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_updateThreshold);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_validateNormalization);
  Py_VISIT(traverse_module_state->__pyx_n_s_values);
  Py_VISIT(traverse_module_state->__pyx_n_s_vertex);
  Py_VISIT(traverse_module_state->__pyx_n_s_vertices);
  Py_VISIT(traverse_module_state->__pyx_n_s_warnings);
  Py_VISIT(traverse_module_state->__pyx_n_s_weightedDegreeWithCluster);
  Py_VISIT(traverse_module_state->__pyx_n_s_write);
  Py_VISIT(traverse_module_state->__pyx_n_s_writeCommunities);
  Py_VISIT(traverse_module_state->__pyx_kp_u_wrote_communities_to_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_zeta);
  Py_VISIT(traverse_module_state->__pyx_n_s_zeta1);
  Py_VISIT(traverse_module_state->__pyx_n_s_zeta2);
  Py_VISIT(traverse_module_state->__pyx_n_s_zetaCoarse);
  Py_VISIT(traverse_module_state->__pyx_float_1_0);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_2);
  Py_VISIT(traverse_module_state->__pyx_int_3);
  Py_VISIT(traverse_module_state->__pyx_int_4);
  Py_VISIT(traverse_module_state->__pyx_int_32);
  Py_VISIT(traverse_module_state->__pyx_int_222419149);
  Py_VISIT(traverse_module_state->__pyx_int_228825662);
  Py_VISIT(traverse_module_state->__pyx_int_238750788);
  Py_VISIT(traverse_module_state->__pyx_k__4);
  Py_VISIT(traverse_module_state->__pyx_k__26);
  Py_VISIT(traverse_module_state->__pyx_k__27);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_slice__30);
  Py_VISIT(traverse_module_state->__pyx_tuple__12);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__23);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__28);
  Py_VISIT(traverse_module_state->__pyx_tuple__29);
  Py_VISIT(traverse_module_state->__pyx_tuple__31);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__37);
  Py_VISIT(traverse_module_state->__pyx_tuple__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__45);
  Py_VISIT(traverse_module_state->__pyx_tuple__51);
  Py_VISIT(traverse_module_state->__pyx_tuple__53);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__56);
  Py_VISIT(traverse_module_state->__pyx_tuple__58);
  Py_VISIT(traverse_module_state->__pyx_tuple__62);
  Py_VISIT(traverse_module_state->__pyx_tuple__64);
  Py_VISIT(traverse_module_state->__pyx_tuple__67);
  Py_VISIT(traverse_module_state->__pyx_tuple__71);
  Py_VISIT(traverse_module_state->__pyx_tuple__78);
  Py_VISIT(traverse_module_state->__pyx_tuple__86);
  Py_VISIT(traverse_module_state->__pyx_tuple__88);
  Py_VISIT(traverse_module_state->__pyx_tuple__89);
  Py_VISIT(traverse_module_state->__pyx_tuple__106);
  Py_VISIT(traverse_module_state->__pyx_tuple__112);
  Py_VISIT(traverse_module_state->__pyx_tuple__132);
  Py_VISIT(traverse_module_state->__pyx_tuple__155);
  Py_VISIT(traverse_module_state->__pyx_tuple__161);
  Py_VISIT(traverse_module_state->__pyx_tuple__163);
  Py_VISIT(traverse_module_state->__pyx_tuple__164);
  Py_VISIT(traverse_module_state->__pyx_tuple__166);
  Py_VISIT(traverse_module_state->__pyx_tuple__168);
  Py_VISIT(traverse_module_state->__pyx_tuple__170);
  Py_VISIT(traverse_module_state->__pyx_tuple__172);
  Py_VISIT(traverse_module_state->__pyx_tuple__173);
  Py_VISIT(traverse_module_state->__pyx_tuple__175);
  Py_VISIT(traverse_module_state->__pyx_tuple__177);
  Py_VISIT(traverse_module_state->__pyx_tuple__179);
  Py_VISIT(traverse_module_state->__pyx_tuple__185);
  Py_VISIT(traverse_module_state->__pyx_tuple__187);
  Py_VISIT(traverse_module_state->__pyx_tuple__188);
  Py_VISIT(traverse_module_state->__pyx_tuple__190);
  Py_VISIT(traverse_module_state->__pyx_tuple__192);
  Py_VISIT(traverse_module_state->__pyx_tuple__193);
  Py_VISIT(traverse_module_state->__pyx_tuple__195);
  Py_VISIT(traverse_module_state->__pyx_tuple__197);
  Py_VISIT(traverse_module_state->__pyx_tuple__198);
  Py_VISIT(traverse_module_state->__pyx_tuple__200);
  Py_VISIT(traverse_module_state->__pyx_tuple__204);
  Py_VISIT(traverse_module_state->__pyx_codeobj__35);
  Py_VISIT(traverse_module_state->__pyx_codeobj__36);
  Py_VISIT(traverse_module_state->__pyx_codeobj__38);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__40);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__43);
  Py_VISIT(traverse_module_state->__pyx_codeobj__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__46);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__48);
  Py_VISIT(traverse_module_state->__pyx_codeobj__49);
  Py_VISIT(traverse_module_state->__pyx_codeobj__50);
  Py_VISIT(traverse_module_state->__pyx_codeobj__52);
  Py_VISIT(traverse_module_state->__pyx_codeobj__55);
  Py_VISIT(traverse_module_state->__pyx_codeobj__57);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__60);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  Py_VISIT(traverse_module_state->__pyx_codeobj__63);
  Py_VISIT(traverse_module_state->__pyx_codeobj__65);
  Py_VISIT(traverse_module_state->__pyx_codeobj__66);
  Py_VISIT(traverse_module_state->__pyx_codeobj__68);
  Py_VISIT(traverse_module_state->__pyx_codeobj__69);
  Py_VISIT(traverse_module_state->__pyx_codeobj__70);
  Py_VISIT(traverse_module_state->__pyx_codeobj__72);
  Py_VISIT(traverse_module_state->__pyx_codeobj__73);
  Py_VISIT(traverse_module_state->__pyx_codeobj__74);
  Py_VISIT(traverse_module_state->__pyx_codeobj__75);
  Py_VISIT(traverse_module_state->__pyx_codeobj__76);
  Py_VISIT(traverse_module_state->__pyx_codeobj__77);
  Py_VISIT(traverse_module_state->__pyx_codeobj__79);
  Py_VISIT(traverse_module_state->__pyx_codeobj__80);
  Py_VISIT(traverse_module_state->__pyx_codeobj__81);
  Py_VISIT(traverse_module_state->__pyx_codeobj__82);
  Py_VISIT(traverse_module_state->__pyx_codeobj__83);
  Py_VISIT(traverse_module_state->__pyx_codeobj__84);
  Py_VISIT(traverse_module_state->__pyx_codeobj__85);
  Py_VISIT(traverse_module_state->__pyx_codeobj__87);
  Py_VISIT(traverse_module_state->__pyx_codeobj__90);
  Py_VISIT(traverse_module_state->__pyx_codeobj__91);
  Py_VISIT(traverse_module_state->__pyx_codeobj__92);
  Py_VISIT(traverse_module_state->__pyx_codeobj__93);
  Py_VISIT(traverse_module_state->__pyx_codeobj__94);
  Py_VISIT(traverse_module_state->__pyx_codeobj__95);
  Py_VISIT(traverse_module_state->__pyx_codeobj__96);
  Py_VISIT(traverse_module_state->__pyx_codeobj__97);
  Py_VISIT(traverse_module_state->__pyx_codeobj__98);
  Py_VISIT(traverse_module_state->__pyx_codeobj__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__100);
  Py_VISIT(traverse_module_state->__pyx_codeobj__101);
  Py_VISIT(traverse_module_state->__pyx_codeobj__102);
  Py_VISIT(traverse_module_state->__pyx_codeobj__103);
  Py_VISIT(traverse_module_state->__pyx_codeobj__104);
  Py_VISIT(traverse_module_state->__pyx_codeobj__105);
  Py_VISIT(traverse_module_state->__pyx_codeobj__107);
  Py_VISIT(traverse_module_state->__pyx_codeobj__108);
  Py_VISIT(traverse_module_state->__pyx_codeobj__109);
  Py_VISIT(traverse_module_state->__pyx_codeobj__110);
  Py_VISIT(traverse_module_state->__pyx_codeobj__111);
  Py_VISIT(traverse_module_state->__pyx_codeobj__113);
  Py_VISIT(traverse_module_state->__pyx_codeobj__114);
  Py_VISIT(traverse_module_state->__pyx_codeobj__115);
  Py_VISIT(traverse_module_state->__pyx_codeobj__116);
  Py_VISIT(traverse_module_state->__pyx_codeobj__117);
  Py_VISIT(traverse_module_state->__pyx_codeobj__118);
  Py_VISIT(traverse_module_state->__pyx_codeobj__119);
  Py_VISIT(traverse_module_state->__pyx_codeobj__120);
  Py_VISIT(traverse_module_state->__pyx_codeobj__121);
  Py_VISIT(traverse_module_state->__pyx_codeobj__122);
  Py_VISIT(traverse_module_state->__pyx_codeobj__123);
  Py_VISIT(traverse_module_state->__pyx_codeobj__124);
  Py_VISIT(traverse_module_state->__pyx_codeobj__125);
  Py_VISIT(traverse_module_state->__pyx_codeobj__126);
  Py_VISIT(traverse_module_state->__pyx_codeobj__127);
  Py_VISIT(traverse_module_state->__pyx_codeobj__128);
  Py_VISIT(traverse_module_state->__pyx_codeobj__129);
  Py_VISIT(traverse_module_state->__pyx_codeobj__130);
  Py_VISIT(traverse_module_state->__pyx_codeobj__131);
  Py_VISIT(traverse_module_state->__pyx_codeobj__133);
  Py_VISIT(traverse_module_state->__pyx_codeobj__134);
  Py_VISIT(traverse_module_state->__pyx_codeobj__135);
  Py_VISIT(traverse_module_state->__pyx_codeobj__136);
  Py_VISIT(traverse_module_state->__pyx_codeobj__137);
  Py_VISIT(traverse_module_state->__pyx_codeobj__138);
  Py_VISIT(traverse_module_state->__pyx_codeobj__139);
  Py_VISIT(traverse_module_state->__pyx_codeobj__140);
  Py_VISIT(traverse_module_state->__pyx_codeobj__141);
  Py_VISIT(traverse_module_state->__pyx_codeobj__142);
  Py_VISIT(traverse_module_state->__pyx_codeobj__143);
  Py_VISIT(traverse_module_state->__pyx_codeobj__144);
  Py_VISIT(traverse_module_state->__pyx_codeobj__145);
  Py_VISIT(traverse_module_state->__pyx_codeobj__146);
  Py_VISIT(traverse_module_state->__pyx_codeobj__147);
  Py_VISIT(traverse_module_state->__pyx_codeobj__148);
  Py_VISIT(traverse_module_state->__pyx_codeobj__149);
  Py_VISIT(traverse_module_state->__pyx_codeobj__150);
  Py_VISIT(traverse_module_state->__pyx_codeobj__151);
  Py_VISIT(traverse_module_state->__pyx_codeobj__152);
  Py_VISIT(traverse_module_state->__pyx_codeobj__153);
  Py_VISIT(traverse_module_state->__pyx_codeobj__154);
  Py_VISIT(traverse_module_state->__pyx_codeobj__156);
  Py_VISIT(traverse_module_state->__pyx_codeobj__157);
  Py_VISIT(traverse_module_state->__pyx_codeobj__158);
  Py_VISIT(traverse_module_state->__pyx_codeobj__159);
  Py_VISIT(traverse_module_state->__pyx_codeobj__160);
  Py_VISIT(traverse_module_state->__pyx_codeobj__162);
  Py_VISIT(traverse_module_state->__pyx_codeobj__165);
  Py_VISIT(traverse_module_state->__pyx_codeobj__167);
  Py_VISIT(traverse_module_state->__pyx_codeobj__169);
  Py_VISIT(traverse_module_state->__pyx_codeobj__171);
  Py_VISIT(traverse_module_state->__pyx_codeobj__174);
  Py_VISIT(traverse_module_state->__pyx_codeobj__176);
  Py_VISIT(traverse_module_state->__pyx_codeobj__178);
  Py_VISIT(traverse_module_state->__pyx_codeobj__180);
  Py_VISIT(traverse_module_state->__pyx_codeobj__181);
  Py_VISIT(traverse_module_state->__pyx_codeobj__182);
  Py_VISIT(traverse_module_state->__pyx_codeobj__183);
  Py_VISIT(traverse_module_state->__pyx_codeobj__184);
  Py_VISIT(traverse_module_state->__pyx_codeobj__186);
  Py_VISIT(traverse_module_state->__pyx_codeobj__189);
  Py_VISIT(traverse_module_state->__pyx_codeobj__191);
  Py_VISIT(traverse_module_state->__pyx_codeobj__194);
  Py_VISIT(traverse_module_state->__pyx_codeobj__196);
  Py_VISIT(traverse_module_state->__pyx_codeobj__199);
  Py_VISIT(traverse_module_state->__pyx_codeobj__201);
  Py_VISIT(traverse_module_state->__pyx_codeobj__202);
  Py_VISIT(traverse_module_state->__pyx_codeobj__203);
  Py_VISIT(traverse_module_state->__pyx_codeobj__205);
  Py_VISIT(traverse_module_state->__pyx_codeobj__206);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_9networkit_4base__CythonParentClass __pyx_mstate_global->__pyx_ptype_9networkit_4base__CythonParentClass
#define __pyx_ptype_9networkit_4base_Algorithm __pyx_mstate_global->__pyx_ptype_9networkit_4base_Algorithm
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_9networkit_10structures_Cover __pyx_mstate_global->__pyx_ptype_9networkit_10structures_Cover
#define __pyx_ptype_9networkit_10structures_Partition __pyx_mstate_global->__pyx_ptype_9networkit_10structures_Partition
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_9networkit_5graph_Graph __pyx_mstate_global->__pyx_ptype_9networkit_5graph_Graph
#define __pyx_ptype_9networkit_5graph_NodeIntAttribute __pyx_mstate_global->__pyx_ptype_9networkit_5graph_NodeIntAttribute
#define __pyx_ptype_9networkit_5graph_NodeDoubleAttribute __pyx_mstate_global->__pyx_ptype_9networkit_5graph_NodeDoubleAttribute
#define __pyx_ptype_9networkit_5graph_NodeStringAttribute __pyx_mstate_global->__pyx_ptype_9networkit_5graph_NodeStringAttribute
#define __pyx_ptype_9networkit_5graph_EdgeIntAttribute __pyx_mstate_global->__pyx_ptype_9networkit_5graph_EdgeIntAttribute
#define __pyx_ptype_9networkit_5graph_EdgeDoubleAttribute __pyx_mstate_global->__pyx_ptype_9networkit_5graph_EdgeDoubleAttribute
#define __pyx_ptype_9networkit_5graph_EdgeStringAttribute __pyx_mstate_global->__pyx_ptype_9networkit_5graph_EdgeStringAttribute
#define __pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest __pyx_mstate_global->__pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest
#define __pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest __pyx_mstate_global->__pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_9networkit_3scd_SelectiveCommunityDetector __pyx_mstate_global->__pyx_ptype_9networkit_3scd_SelectiveCommunityDetector
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_9networkit_9community_CommunityDetector __pyx_mstate_global->__pyx_type_9networkit_9community_CommunityDetector
#define __pyx_type_9networkit_9community_OverlappingCommunityDetector __pyx_mstate_global->__pyx_type_9networkit_9community_OverlappingCommunityDetector
#define __pyx_type_9networkit_9community_ClusteringGenerator __pyx_mstate_global->__pyx_type_9networkit_9community_ClusteringGenerator
#define __pyx_type_9networkit_9community_GraphClusteringTools __pyx_mstate_global->__pyx_type_9networkit_9community_GraphClusteringTools
#define __pyx_type_9networkit_9community_PartitionIntersection __pyx_mstate_global->__pyx_type_9networkit_9community_PartitionIntersection
#define __pyx_type_9networkit_9community_Coverage __pyx_mstate_global->__pyx_type_9networkit_9community_Coverage
#define __pyx_type_9networkit_9community_EdgeCut __pyx_mstate_global->__pyx_type_9networkit_9community_EdgeCut
#define __pyx_type_9networkit_9community_Modularity __pyx_mstate_global->__pyx_type_9networkit_9community_Modularity
#define __pyx_type_9networkit_9community_HubDominance __pyx_mstate_global->__pyx_type_9networkit_9community_HubDominance
#define __pyx_type_9networkit_9community_PLM __pyx_mstate_global->__pyx_type_9networkit_9community_PLM
#define __pyx_type_9networkit_9community_ParallelLeiden __pyx_mstate_global->__pyx_type_9networkit_9community_ParallelLeiden
#define __pyx_type_9networkit_9community_LouvainMapEquation __pyx_mstate_global->__pyx_type_9networkit_9community_LouvainMapEquation
#define __pyx_type_9networkit_9community_PLP __pyx_mstate_global->__pyx_type_9networkit_9community_PLP
#define __pyx_type_9networkit_9community_LFM __pyx_mstate_global->__pyx_type_9networkit_9community_LFM
#define __pyx_type_9networkit_9community_LPDegreeOrdered __pyx_mstate_global->__pyx_type_9networkit_9community_LPDegreeOrdered
#define __pyx_type_9networkit_9community_CutClustering __pyx_mstate_global->__pyx_type_9networkit_9community_CutClustering
#define __pyx_type_9networkit_9community_DissimilarityMeasure __pyx_mstate_global->__pyx_type_9networkit_9community_DissimilarityMeasure
#define __pyx_type_9networkit_9community_NodeStructuralRandMeasure __pyx_mstate_global->__pyx_type_9networkit_9community_NodeStructuralRandMeasure
#define __pyx_type_9networkit_9community_GraphStructuralRandMeasure __pyx_mstate_global->__pyx_type_9networkit_9community_GraphStructuralRandMeasure
#define __pyx_type_9networkit_9community_JaccardMeasure __pyx_mstate_global->__pyx_type_9networkit_9community_JaccardMeasure
#define __pyx_type_9networkit_9community_NMIDistance __pyx_mstate_global->__pyx_type_9networkit_9community_NMIDistance
#define __pyx_type_9networkit_9community_AdjustedRandMeasure __pyx_mstate_global->__pyx_type_9networkit_9community_AdjustedRandMeasure
#define __pyx_type_9networkit_9community_LocalCommunityEvaluation __pyx_mstate_global->__pyx_type_9networkit_9community_LocalCommunityEvaluation
#define __pyx_type_9networkit_9community_LocalPartitionEvaluation __pyx_mstate_global->__pyx_type_9networkit_9community_LocalPartitionEvaluation
#define __pyx_type_9networkit_9community_LocalCoverEvaluation __pyx_mstate_global->__pyx_type_9networkit_9community_LocalCoverEvaluation
#define __pyx_type_9networkit_9community_IntrapartitionDensity __pyx_mstate_global->__pyx_type_9networkit_9community_IntrapartitionDensity
#define __pyx_type_9networkit_9community_IsolatedInterpartitionConductance __pyx_mstate_global->__pyx_type_9networkit_9community_IsolatedInterpartitionConductance
#define __pyx_type_9networkit_9community_IsolatedInterpartitionExpansion __pyx_mstate_global->__pyx_type_9networkit_9community_IsolatedInterpartitionExpansion
#define __pyx_type_9networkit_9community_CoverHubDominance __pyx_mstate_global->__pyx_type_9networkit_9community_CoverHubDominance
#define __pyx_type_9networkit_9community_PartitionHubDominance __pyx_mstate_global->__pyx_type_9networkit_9community_PartitionHubDominance
#define __pyx_type_9networkit_9community_PartitionFragmentation __pyx_mstate_global->__pyx_type_9networkit_9community_PartitionFragmentation
#define __pyx_type_9networkit_9community_StablePartitionNodes __pyx_mstate_global->__pyx_type_9networkit_9community_StablePartitionNodes
#define __pyx_type_9networkit_9community_CoverF1Similarity __pyx_mstate_global->__pyx_type_9networkit_9community_CoverF1Similarity
#define __pyx_type_9networkit_9community_OverlappingNMIDistance __pyx_mstate_global->__pyx_type_9networkit_9community_OverlappingNMIDistance
#endif
#define __pyx_ptype_9networkit_9community_CommunityDetector __pyx_mstate_global->__pyx_ptype_9networkit_9community_CommunityDetector
#define __pyx_ptype_9networkit_9community_OverlappingCommunityDetector __pyx_mstate_global->__pyx_ptype_9networkit_9community_OverlappingCommunityDetector
#define __pyx_ptype_9networkit_9community_ClusteringGenerator __pyx_mstate_global->__pyx_ptype_9networkit_9community_ClusteringGenerator
#define __pyx_ptype_9networkit_9community_GraphClusteringTools __pyx_mstate_global->__pyx_ptype_9networkit_9community_GraphClusteringTools
#define __pyx_ptype_9networkit_9community_PartitionIntersection __pyx_mstate_global->__pyx_ptype_9networkit_9community_PartitionIntersection
#define __pyx_ptype_9networkit_9community_Coverage __pyx_mstate_global->__pyx_ptype_9networkit_9community_Coverage
#define __pyx_ptype_9networkit_9community_EdgeCut __pyx_mstate_global->__pyx_ptype_9networkit_9community_EdgeCut
#define __pyx_ptype_9networkit_9community_Modularity __pyx_mstate_global->__pyx_ptype_9networkit_9community_Modularity
#define __pyx_ptype_9networkit_9community_HubDominance __pyx_mstate_global->__pyx_ptype_9networkit_9community_HubDominance
#define __pyx_ptype_9networkit_9community_PLM __pyx_mstate_global->__pyx_ptype_9networkit_9community_PLM
#define __pyx_ptype_9networkit_9community_ParallelLeiden __pyx_mstate_global->__pyx_ptype_9networkit_9community_ParallelLeiden
#define __pyx_ptype_9networkit_9community_LouvainMapEquation __pyx_mstate_global->__pyx_ptype_9networkit_9community_LouvainMapEquation
#define __pyx_ptype_9networkit_9community_PLP __pyx_mstate_global->__pyx_ptype_9networkit_9community_PLP
#define __pyx_ptype_9networkit_9community_LFM __pyx_mstate_global->__pyx_ptype_9networkit_9community_LFM
#define __pyx_ptype_9networkit_9community_LPDegreeOrdered __pyx_mstate_global->__pyx_ptype_9networkit_9community_LPDegreeOrdered
#define __pyx_ptype_9networkit_9community_CutClustering __pyx_mstate_global->__pyx_ptype_9networkit_9community_CutClustering
#define __pyx_ptype_9networkit_9community_DissimilarityMeasure __pyx_mstate_global->__pyx_ptype_9networkit_9community_DissimilarityMeasure
#define __pyx_ptype_9networkit_9community_NodeStructuralRandMeasure __pyx_mstate_global->__pyx_ptype_9networkit_9community_NodeStructuralRandMeasure
#define __pyx_ptype_9networkit_9community_GraphStructuralRandMeasure __pyx_mstate_global->__pyx_ptype_9networkit_9community_GraphStructuralRandMeasure
#define __pyx_ptype_9networkit_9community_JaccardMeasure __pyx_mstate_global->__pyx_ptype_9networkit_9community_JaccardMeasure
#define __pyx_ptype_9networkit_9community_NMIDistance __pyx_mstate_global->__pyx_ptype_9networkit_9community_NMIDistance
#define __pyx_ptype_9networkit_9community_AdjustedRandMeasure __pyx_mstate_global->__pyx_ptype_9networkit_9community_AdjustedRandMeasure
#define __pyx_ptype_9networkit_9community_LocalCommunityEvaluation __pyx_mstate_global->__pyx_ptype_9networkit_9community_LocalCommunityEvaluation
#define __pyx_ptype_9networkit_9community_LocalPartitionEvaluation __pyx_mstate_global->__pyx_ptype_9networkit_9community_LocalPartitionEvaluation
#define __pyx_ptype_9networkit_9community_LocalCoverEvaluation __pyx_mstate_global->__pyx_ptype_9networkit_9community_LocalCoverEvaluation
#define __pyx_ptype_9networkit_9community_IntrapartitionDensity __pyx_mstate_global->__pyx_ptype_9networkit_9community_IntrapartitionDensity
#define __pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance __pyx_mstate_global->__pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance
#define __pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion __pyx_mstate_global->__pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion
#define __pyx_ptype_9networkit_9community_CoverHubDominance __pyx_mstate_global->__pyx_ptype_9networkit_9community_CoverHubDominance
#define __pyx_ptype_9networkit_9community_PartitionHubDominance __pyx_mstate_global->__pyx_ptype_9networkit_9community_PartitionHubDominance
#define __pyx_ptype_9networkit_9community_PartitionFragmentation __pyx_mstate_global->__pyx_ptype_9networkit_9community_PartitionFragmentation
#define __pyx_ptype_9networkit_9community_StablePartitionNodes __pyx_mstate_global->__pyx_ptype_9networkit_9community_StablePartitionNodes
#define __pyx_ptype_9networkit_9community_CoverF1Similarity __pyx_mstate_global->__pyx_ptype_9networkit_9community_CoverF1Similarity
#define __pyx_ptype_9networkit_9community_OverlappingNMIDistance __pyx_mstate_global->__pyx_ptype_9networkit_9community_OverlappingNMIDistance
#define __pyx_kp_u_0_is_not_a_file __pyx_mstate_global->__pyx_kp_u_0_is_not_a_file
#define __pyx_n_s_ARITHMETIC_MEAN __pyx_mstate_global->__pyx_n_s_ARITHMETIC_MEAN
#define __pyx_n_s_AdjustedRandMeasure __pyx_mstate_global->__pyx_n_s_AdjustedRandMeasure
#define __pyx_n_s_AdjustedRandMeasure___reduce_cyt __pyx_mstate_global->__pyx_n_s_AdjustedRandMeasure___reduce_cyt
#define __pyx_n_s_AdjustedRandMeasure___setstate_c __pyx_mstate_global->__pyx_n_s_AdjustedRandMeasure___setstate_c
#define __pyx_n_s_AdjustedRandMeasure_getDissimila __pyx_mstate_global->__pyx_n_s_AdjustedRandMeasure_getDissimila
#define __pyx_n_s_ArithmeticMean __pyx_mstate_global->__pyx_n_s_ArithmeticMean
#define __pyx_n_s_AssertionError __pyx_mstate_global->__pyx_n_s_AssertionError
#define __pyx_n_s_BinaryEdgeListPartitionReader __pyx_mstate_global->__pyx_n_s_BinaryEdgeListPartitionReader
#define __pyx_n_s_BinaryEdgeListPartitionWriter __pyx_mstate_global->__pyx_n_s_BinaryEdgeListPartitionWriter
#define __pyx_n_s_BinaryPartitionReader __pyx_mstate_global->__pyx_n_s_BinaryPartitionReader
#define __pyx_n_s_BinaryPartitionWriter __pyx_mstate_global->__pyx_n_s_BinaryPartitionWriter
#define __pyx_n_s_C __pyx_mstate_global->__pyx_n_s_C
#define __pyx_n_s_ClusteringGenerator __pyx_mstate_global->__pyx_n_s_ClusteringGenerator
#define __pyx_n_s_ClusteringGenerator___reduce_cyt __pyx_mstate_global->__pyx_n_s_ClusteringGenerator___reduce_cyt
#define __pyx_n_s_ClusteringGenerator___setstate_c __pyx_mstate_global->__pyx_n_s_ClusteringGenerator___setstate_c
#define __pyx_n_s_ClusteringGenerator_makeContinuo __pyx_mstate_global->__pyx_n_s_ClusteringGenerator_makeContinuo
#define __pyx_n_s_ClusteringGenerator_makeNonconti __pyx_mstate_global->__pyx_n_s_ClusteringGenerator_makeNonconti
#define __pyx_n_s_ClusteringGenerator_makeOneClust __pyx_mstate_global->__pyx_n_s_ClusteringGenerator_makeOneClust
#define __pyx_n_s_ClusteringGenerator_makeRandomCl __pyx_mstate_global->__pyx_n_s_ClusteringGenerator_makeRandomCl
#define __pyx_n_s_ClusteringGenerator_makeSingleto __pyx_mstate_global->__pyx_n_s_ClusteringGenerator_makeSingleto
#define __pyx_kp_u_Communities_detected_in_5f_s __pyx_mstate_global->__pyx_kp_u_Communities_detected_in_5f_s
#define __pyx_n_s_CommunityDetector __pyx_mstate_global->__pyx_n_s_CommunityDetector
#define __pyx_n_s_CommunityDetector___reduce_cytho __pyx_mstate_global->__pyx_n_s_CommunityDetector___reduce_cytho
#define __pyx_n_s_CommunityDetector___setstate_cyt __pyx_mstate_global->__pyx_n_s_CommunityDetector___setstate_cyt
#define __pyx_n_s_CommunityDetector_getPartition __pyx_mstate_global->__pyx_n_s_CommunityDetector_getPartition
#define __pyx_n_s_CoreDecomposition __pyx_mstate_global->__pyx_n_s_CoreDecomposition
#define __pyx_n_s_Cover __pyx_mstate_global->__pyx_n_s_Cover
#define __pyx_n_s_CoverF1Similarity __pyx_mstate_global->__pyx_n_s_CoverF1Similarity
#define __pyx_n_s_CoverF1Similarity___reduce_cytho __pyx_mstate_global->__pyx_n_s_CoverF1Similarity___reduce_cytho
#define __pyx_n_s_CoverF1Similarity___setstate_cyt __pyx_mstate_global->__pyx_n_s_CoverF1Similarity___setstate_cyt
#define __pyx_n_s_CoverHubDominance __pyx_mstate_global->__pyx_n_s_CoverHubDominance
#define __pyx_n_s_CoverHubDominance___reduce_cytho __pyx_mstate_global->__pyx_n_s_CoverHubDominance___reduce_cytho
#define __pyx_n_s_CoverHubDominance___setstate_cyt __pyx_mstate_global->__pyx_n_s_CoverHubDominance___setstate_cyt
#define __pyx_n_s_Coverage __pyx_mstate_global->__pyx_n_s_Coverage
#define __pyx_n_s_Coverage___reduce_cython __pyx_mstate_global->__pyx_n_s_Coverage___reduce_cython
#define __pyx_n_s_Coverage___setstate_cython __pyx_mstate_global->__pyx_n_s_Coverage___setstate_cython
#define __pyx_n_s_Coverage_getQuality __pyx_mstate_global->__pyx_n_s_Coverage_getQuality
#define __pyx_n_s_CutClustering __pyx_mstate_global->__pyx_n_s_CutClustering
#define __pyx_n_s_CutClustering___reduce_cython __pyx_mstate_global->__pyx_n_s_CutClustering___reduce_cython
#define __pyx_n_s_CutClustering___setstate_cython __pyx_mstate_global->__pyx_n_s_CutClustering___setstate_cython
#define __pyx_n_s_CutClustering_getClusterHierarch __pyx_mstate_global->__pyx_n_s_CutClustering_getClusterHierarch
#define __pyx_n_s_DissimilarityMeasure __pyx_mstate_global->__pyx_n_s_DissimilarityMeasure
#define __pyx_n_s_DissimilarityMeasure___reduce_cy __pyx_mstate_global->__pyx_n_s_DissimilarityMeasure___reduce_cy
#define __pyx_n_s_DissimilarityMeasure___setstate __pyx_mstate_global->__pyx_n_s_DissimilarityMeasure___setstate
#define __pyx_n_s_EdgeCut __pyx_mstate_global->__pyx_n_s_EdgeCut
#define __pyx_n_s_EdgeCut___reduce_cython __pyx_mstate_global->__pyx_n_s_EdgeCut___reduce_cython
#define __pyx_n_s_EdgeCut___setstate_cython __pyx_mstate_global->__pyx_n_s_EdgeCut___setstate_cython
#define __pyx_n_s_EdgeCut_getQuality __pyx_mstate_global->__pyx_n_s_EdgeCut_getQuality
#define __pyx_n_s_EdgeListPartitionReader __pyx_mstate_global->__pyx_n_s_EdgeListPartitionReader
#define __pyx_kp_u_Error_first_and_second_must_both __pyx_mstate_global->__pyx_kp_u_Error_first_and_second_must_both
#define __pyx_kp_u_Error_invalid_normalization_meth __pyx_mstate_global->__pyx_kp_u_Error_invalid_normalization_meth
#define __pyx_kp_u_Error_object_not_properly_initia __pyx_mstate_global->__pyx_kp_u_Error_object_not_properly_initia
#define __pyx_kp_u_Error_you_may_not_use_CommunityD __pyx_mstate_global->__pyx_kp_u_Error_you_may_not_use_CommunityD
#define __pyx_kp_u_Error_you_may_not_use_LocalCommu __pyx_mstate_global->__pyx_kp_u_Error_you_may_not_use_LocalCommu
#define __pyx_kp_u_Error_you_may_not_use_LocalCover __pyx_mstate_global->__pyx_kp_u_Error_you_may_not_use_LocalCover
#define __pyx_kp_u_Error_you_may_not_use_LocalParti __pyx_mstate_global->__pyx_kp_u_Error_you_may_not_use_LocalParti
#define __pyx_kp_u_Error_you_may_not_use_Overlappin __pyx_mstate_global->__pyx_kp_u_Error_you_may_not_use_Overlappin
#define __pyx_kp_s_Expected_at_least_d_argument_s_g __pyx_mstate_global->__pyx_kp_s_Expected_at_least_d_argument_s_g
#define __pyx_kp_s_Function_call_with_ambiguous_arg __pyx_mstate_global->__pyx_kp_s_Function_call_with_ambiguous_arg
#define __pyx_n_s_G __pyx_mstate_global->__pyx_n_s_G
#define __pyx_n_s_GEOMETRIC_MEAN __pyx_mstate_global->__pyx_n_s_GEOMETRIC_MEAN
#define __pyx_n_s_Gcoarse __pyx_mstate_global->__pyx_n_s_Gcoarse
#define __pyx_n_s_GeometricMean __pyx_mstate_global->__pyx_n_s_GeometricMean
#define __pyx_n_s_Gfine __pyx_mstate_global->__pyx_n_s_Gfine
#define __pyx_n_s_GraphClusteringTools __pyx_mstate_global->__pyx_n_s_GraphClusteringTools
#define __pyx_n_s_GraphClusteringTools___reduce_cy __pyx_mstate_global->__pyx_n_s_GraphClusteringTools___reduce_cy
#define __pyx_n_s_GraphClusteringTools___setstate __pyx_mstate_global->__pyx_n_s_GraphClusteringTools___setstate
#define __pyx_n_s_GraphClusteringTools_communicati __pyx_mstate_global->__pyx_n_s_GraphClusteringTools_communicati
#define __pyx_n_s_GraphClusteringTools_equalCluste __pyx_mstate_global->__pyx_n_s_GraphClusteringTools_equalCluste
#define __pyx_n_s_GraphClusteringTools_getImbalanc __pyx_mstate_global->__pyx_n_s_GraphClusteringTools_getImbalanc
#define __pyx_n_s_GraphClusteringTools_isOneCluste __pyx_mstate_global->__pyx_n_s_GraphClusteringTools_isOneCluste
#define __pyx_n_s_GraphClusteringTools_isProperClu __pyx_mstate_global->__pyx_n_s_GraphClusteringTools_isProperClu
#define __pyx_n_s_GraphClusteringTools_isSingleton __pyx_mstate_global->__pyx_n_s_GraphClusteringTools_isSingleton
#define __pyx_n_s_GraphClusteringTools_weightedDeg __pyx_mstate_global->__pyx_n_s_GraphClusteringTools_weightedDeg
#define __pyx_n_s_GraphStructuralRandMeasure __pyx_mstate_global->__pyx_n_s_GraphStructuralRandMeasure
#define __pyx_n_s_GraphStructuralRandMeasure___red __pyx_mstate_global->__pyx_n_s_GraphStructuralRandMeasure___red
#define __pyx_n_s_GraphStructuralRandMeasure___set __pyx_mstate_global->__pyx_n_s_GraphStructuralRandMeasure___set
#define __pyx_n_s_GraphStructuralRandMeasure_getDi __pyx_mstate_global->__pyx_n_s_GraphStructuralRandMeasure_getDi
#define __pyx_n_s_GraphTools __pyx_mstate_global->__pyx_n_s_GraphTools
#define __pyx_n_s_HubDominance __pyx_mstate_global->__pyx_n_s_HubDominance
#define __pyx_n_s_HubDominance___reduce_cython __pyx_mstate_global->__pyx_n_s_HubDominance___reduce_cython
#define __pyx_n_s_HubDominance___setstate_cython __pyx_mstate_global->__pyx_n_s_HubDominance___setstate_cython
#define __pyx_n_s_HubDominance_getQuality __pyx_mstate_global->__pyx_n_s_HubDominance_getQuality
#define __pyx_n_s_IOError __pyx_mstate_global->__pyx_n_s_IOError
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0
#define __pyx_n_s_IntrapartitionDensity __pyx_mstate_global->__pyx_n_s_IntrapartitionDensity
#define __pyx_n_s_IntrapartitionDensity___reduce_c __pyx_mstate_global->__pyx_n_s_IntrapartitionDensity___reduce_c
#define __pyx_n_s_IntrapartitionDensity___setstate __pyx_mstate_global->__pyx_n_s_IntrapartitionDensity___setstate
#define __pyx_n_s_IntrapartitionDensity_getGlobal __pyx_mstate_global->__pyx_n_s_IntrapartitionDensity_getGlobal
#define __pyx_n_s_IsolatedInterpartitionConductanc __pyx_mstate_global->__pyx_n_s_IsolatedInterpartitionConductanc
#define __pyx_n_s_IsolatedInterpartitionConductanc_2 __pyx_mstate_global->__pyx_n_s_IsolatedInterpartitionConductanc_2
#define __pyx_n_s_IsolatedInterpartitionConductanc_3 __pyx_mstate_global->__pyx_n_s_IsolatedInterpartitionConductanc_3
#define __pyx_n_s_IsolatedInterpartitionExpansion __pyx_mstate_global->__pyx_n_s_IsolatedInterpartitionExpansion
#define __pyx_n_s_IsolatedInterpartitionExpansion_2 __pyx_mstate_global->__pyx_n_s_IsolatedInterpartitionExpansion_2
#define __pyx_n_s_IsolatedInterpartitionExpansion_3 __pyx_mstate_global->__pyx_n_s_IsolatedInterpartitionExpansion_3
#define __pyx_n_s_JOINT_ENTROPY __pyx_mstate_global->__pyx_n_s_JOINT_ENTROPY
#define __pyx_n_s_JaccardMeasure __pyx_mstate_global->__pyx_n_s_JaccardMeasure
#define __pyx_n_s_JaccardMeasure___reduce_cython __pyx_mstate_global->__pyx_n_s_JaccardMeasure___reduce_cython
#define __pyx_n_s_JaccardMeasure___setstate_cython __pyx_mstate_global->__pyx_n_s_JaccardMeasure___setstate_cython
#define __pyx_n_s_JaccardMeasure_getDissimilarity __pyx_mstate_global->__pyx_n_s_JaccardMeasure_getDissimilarity
#define __pyx_n_s_JointEntropy __pyx_mstate_global->__pyx_n_s_JointEntropy
#define __pyx_n_s_KeyError __pyx_mstate_global->__pyx_n_s_KeyError
#define __pyx_n_s_LFM __pyx_mstate_global->__pyx_n_s_LFM
#define __pyx_n_s_LFM___reduce_cython __pyx_mstate_global->__pyx_n_s_LFM___reduce_cython
#define __pyx_n_s_LFM___setstate_cython __pyx_mstate_global->__pyx_n_s_LFM___setstate_cython
#define __pyx_n_s_LPDegreeOrdered __pyx_mstate_global->__pyx_n_s_LPDegreeOrdered
#define __pyx_n_s_LPDegreeOrdered___reduce_cython __pyx_mstate_global->__pyx_n_s_LPDegreeOrdered___reduce_cython
#define __pyx_n_s_LPDegreeOrdered___setstate_cytho __pyx_mstate_global->__pyx_n_s_LPDegreeOrdered___setstate_cytho
#define __pyx_n_s_LPDegreeOrdered_numberOfIteratio __pyx_mstate_global->__pyx_n_s_LPDegreeOrdered_numberOfIteratio
#define __pyx_n_s_LocalCommunityEvaluation __pyx_mstate_global->__pyx_n_s_LocalCommunityEvaluation
#define __pyx_n_s_LocalCommunityEvaluation___reduc __pyx_mstate_global->__pyx_n_s_LocalCommunityEvaluation___reduc
#define __pyx_n_s_LocalCommunityEvaluation___setst __pyx_mstate_global->__pyx_n_s_LocalCommunityEvaluation___setst
#define __pyx_n_s_LocalCommunityEvaluation_getMaxi __pyx_mstate_global->__pyx_n_s_LocalCommunityEvaluation_getMaxi
#define __pyx_n_s_LocalCommunityEvaluation_getMini __pyx_mstate_global->__pyx_n_s_LocalCommunityEvaluation_getMini
#define __pyx_n_s_LocalCommunityEvaluation_getUnwe __pyx_mstate_global->__pyx_n_s_LocalCommunityEvaluation_getUnwe
#define __pyx_n_s_LocalCommunityEvaluation_getValu __pyx_mstate_global->__pyx_n_s_LocalCommunityEvaluation_getValu
#define __pyx_n_s_LocalCommunityEvaluation_getValu_2 __pyx_mstate_global->__pyx_n_s_LocalCommunityEvaluation_getValu_2
#define __pyx_n_s_LocalCommunityEvaluation_getWeig __pyx_mstate_global->__pyx_n_s_LocalCommunityEvaluation_getWeig
#define __pyx_n_s_LocalCommunityEvaluation_isSmall __pyx_mstate_global->__pyx_n_s_LocalCommunityEvaluation_isSmall
#define __pyx_n_s_LocalCoverEvaluation __pyx_mstate_global->__pyx_n_s_LocalCoverEvaluation
#define __pyx_n_s_LocalCoverEvaluation___reduce_cy __pyx_mstate_global->__pyx_n_s_LocalCoverEvaluation___reduce_cy
#define __pyx_n_s_LocalCoverEvaluation___setstate __pyx_mstate_global->__pyx_n_s_LocalCoverEvaluation___setstate
#define __pyx_n_s_LocalPartitionEvaluation __pyx_mstate_global->__pyx_n_s_LocalPartitionEvaluation
#define __pyx_n_s_LocalPartitionEvaluation___reduc __pyx_mstate_global->__pyx_n_s_LocalPartitionEvaluation___reduc
#define __pyx_n_s_LocalPartitionEvaluation___setst __pyx_mstate_global->__pyx_n_s_LocalPartitionEvaluation___setst
#define __pyx_n_s_LouvainMapEquation __pyx_mstate_global->__pyx_n_s_LouvainMapEquation
#define __pyx_n_s_LouvainMapEquation___reduce_cyth __pyx_mstate_global->__pyx_n_s_LouvainMapEquation___reduce_cyth
#define __pyx_n_s_LouvainMapEquation___setstate_cy __pyx_mstate_global->__pyx_n_s_LouvainMapEquation___setstate_cy
#define __pyx_n_s_MAX __pyx_mstate_global->__pyx_n_s_MAX
#define __pyx_n_s_MIN __pyx_mstate_global->__pyx_n_s_MIN
#define __pyx_n_s_Max __pyx_mstate_global->__pyx_n_s_Max
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_n_s_Min __pyx_mstate_global->__pyx_n_s_Min
#define __pyx_n_s_MissingDependencyError __pyx_mstate_global->__pyx_n_s_MissingDependencyError
#define __pyx_n_s_Modularity __pyx_mstate_global->__pyx_n_s_Modularity
#define __pyx_n_s_Modularity___reduce_cython __pyx_mstate_global->__pyx_n_s_Modularity___reduce_cython
#define __pyx_n_s_Modularity___setstate_cython __pyx_mstate_global->__pyx_n_s_Modularity___setstate_cython
#define __pyx_n_s_Modularity_getQuality __pyx_mstate_global->__pyx_n_s_Modularity_getQuality
#define __pyx_n_s_NMIDistance __pyx_mstate_global->__pyx_n_s_NMIDistance
#define __pyx_n_s_NMIDistance___reduce_cython __pyx_mstate_global->__pyx_n_s_NMIDistance___reduce_cython
#define __pyx_n_s_NMIDistance___setstate_cython __pyx_mstate_global->__pyx_n_s_NMIDistance___setstate_cython
#define __pyx_n_s_NMIDistance_getDissimilarity __pyx_mstate_global->__pyx_n_s_NMIDistance_getDissimilarity
#define __pyx_kp_s_No_matching_signature_found __pyx_mstate_global->__pyx_kp_s_No_matching_signature_found
#define __pyx_n_s_NodeStructuralRandMeasure __pyx_mstate_global->__pyx_n_s_NodeStructuralRandMeasure
#define __pyx_n_s_NodeStructuralRandMeasure___redu __pyx_mstate_global->__pyx_n_s_NodeStructuralRandMeasure___redu
#define __pyx_n_s_NodeStructuralRandMeasure___sets __pyx_mstate_global->__pyx_n_s_NodeStructuralRandMeasure___sets
#define __pyx_n_s_NodeStructuralRandMeasure_getDis __pyx_mstate_global->__pyx_n_s_NodeStructuralRandMeasure_getDis
#define __pyx_n_s_Normalization __pyx_mstate_global->__pyx_n_s_Normalization
#define __pyx_n_s_NotImplementedError __pyx_mstate_global->__pyx_n_s_NotImplementedError
#define __pyx_n_s_OverlappingCommunityDetector __pyx_mstate_global->__pyx_n_s_OverlappingCommunityDetector
#define __pyx_n_s_OverlappingCommunityDetector___r __pyx_mstate_global->__pyx_n_s_OverlappingCommunityDetector___r
#define __pyx_n_s_OverlappingCommunityDetector___s __pyx_mstate_global->__pyx_n_s_OverlappingCommunityDetector___s
#define __pyx_n_s_OverlappingCommunityDetector_get __pyx_mstate_global->__pyx_n_s_OverlappingCommunityDetector_get
#define __pyx_n_s_OverlappingNMIDistance __pyx_mstate_global->__pyx_n_s_OverlappingNMIDistance
#define __pyx_n_s_OverlappingNMIDistance___reduce __pyx_mstate_global->__pyx_n_s_OverlappingNMIDistance___reduce
#define __pyx_n_s_OverlappingNMIDistance___setstat __pyx_mstate_global->__pyx_n_s_OverlappingNMIDistance___setstat
#define __pyx_n_s_OverlappingNMIDistance__validate __pyx_mstate_global->__pyx_n_s_OverlappingNMIDistance__validate
#define __pyx_n_s_OverlappingNMIDistance_getDissim __pyx_mstate_global->__pyx_n_s_OverlappingNMIDistance_getDissim
#define __pyx_n_s_OverlappingNMIDistance_setNormal __pyx_mstate_global->__pyx_n_s_OverlappingNMIDistance_setNormal
#define __pyx_n_s_P __pyx_mstate_global->__pyx_n_s_P
#define __pyx_n_s_PLM __pyx_mstate_global->__pyx_n_s_PLM
#define __pyx_n_s_PLM___reduce_cython __pyx_mstate_global->__pyx_n_s_PLM___reduce_cython
#define __pyx_n_s_PLM___setstate_cython __pyx_mstate_global->__pyx_n_s_PLM___setstate_cython
#define __pyx_n_s_PLM_coarsen __pyx_mstate_global->__pyx_n_s_PLM_coarsen
#define __pyx_n_s_PLM_getTiming __pyx_mstate_global->__pyx_n_s_PLM_getTiming
#define __pyx_n_s_PLM_prolong __pyx_mstate_global->__pyx_n_s_PLM_prolong
#define __pyx_n_s_PLP __pyx_mstate_global->__pyx_n_s_PLP
#define __pyx_n_s_PLP___reduce_cython __pyx_mstate_global->__pyx_n_s_PLP___reduce_cython
#define __pyx_n_s_PLP___setstate_cython __pyx_mstate_global->__pyx_n_s_PLP___setstate_cython
#define __pyx_n_s_PLP_getTiming __pyx_mstate_global->__pyx_n_s_PLP_getTiming
#define __pyx_n_s_PLP_numberOfIterations __pyx_mstate_global->__pyx_n_s_PLP_numberOfIterations
#define __pyx_n_s_ParallelLeiden __pyx_mstate_global->__pyx_n_s_ParallelLeiden
#define __pyx_n_s_ParallelLeiden___reduce_cython __pyx_mstate_global->__pyx_n_s_ParallelLeiden___reduce_cython
#define __pyx_n_s_ParallelLeiden___setstate_cython __pyx_mstate_global->__pyx_n_s_ParallelLeiden___setstate_cython
#define __pyx_n_s_ParallelPartitionCoarsening __pyx_mstate_global->__pyx_n_s_ParallelPartitionCoarsening
#define __pyx_n_s_Partition __pyx_mstate_global->__pyx_n_s_Partition
#define __pyx_n_s_PartitionFragmentation __pyx_mstate_global->__pyx_n_s_PartitionFragmentation
#define __pyx_n_s_PartitionFragmentation___reduce __pyx_mstate_global->__pyx_n_s_PartitionFragmentation___reduce
#define __pyx_n_s_PartitionFragmentation___setstat __pyx_mstate_global->__pyx_n_s_PartitionFragmentation___setstat
#define __pyx_n_s_PartitionHubDominance __pyx_mstate_global->__pyx_n_s_PartitionHubDominance
#define __pyx_n_s_PartitionHubDominance___reduce_c __pyx_mstate_global->__pyx_n_s_PartitionHubDominance___reduce_c
#define __pyx_n_s_PartitionHubDominance___setstate __pyx_mstate_global->__pyx_n_s_PartitionHubDominance___setstate
#define __pyx_n_s_PartitionIntersection __pyx_mstate_global->__pyx_n_s_PartitionIntersection
#define __pyx_n_s_PartitionIntersection___reduce_c __pyx_mstate_global->__pyx_n_s_PartitionIntersection___reduce_c
#define __pyx_n_s_PartitionIntersection___setstate __pyx_mstate_global->__pyx_n_s_PartitionIntersection___setstate
#define __pyx_n_s_PartitionIntersection_calculate __pyx_mstate_global->__pyx_n_s_PartitionIntersection_calculate
#define __pyx_n_s_PartitionReader __pyx_mstate_global->__pyx_n_s_PartitionReader
#define __pyx_n_s_PartitionWriter __pyx_mstate_global->__pyx_n_s_PartitionWriter
#define __pyx_n_s_PickleError __pyx_mstate_global->__pyx_n_s_PickleError
#define __pyx_n_s_RuntimeError __pyx_mstate_global->__pyx_n_s_RuntimeError
#define __pyx_n_s_SpectralPartitioner __pyx_mstate_global->__pyx_n_s_SpectralPartitioner
#define __pyx_n_s_SpectralPartitioner___init __pyx_mstate_global->__pyx_n_s_SpectralPartitioner___init
#define __pyx_n_s_SpectralPartitioner__bisect __pyx_mstate_global->__pyx_n_s_SpectralPartitioner__bisect
#define __pyx_n_s_SpectralPartitioner__generatePar __pyx_mstate_global->__pyx_n_s_SpectralPartitioner__generatePar
#define __pyx_n_s_SpectralPartitioner__getMean __pyx_mstate_global->__pyx_n_s_SpectralPartitioner__getMean
#define __pyx_n_s_SpectralPartitioner__getQuantile __pyx_mstate_global->__pyx_n_s_SpectralPartitioner__getQuantile
#define __pyx_n_s_SpectralPartitioner__prepareSpec __pyx_mstate_global->__pyx_n_s_SpectralPartitioner__prepareSpec
#define __pyx_n_s_SpectralPartitioner__trisect __pyx_mstate_global->__pyx_n_s_SpectralPartitioner__trisect
#define __pyx_n_s_SpectralPartitioner_getPartition __pyx_mstate_global->__pyx_n_s_SpectralPartitioner_getPartition
#define __pyx_kp_s_SpectralPartitioner_graph_count __pyx_mstate_global->__pyx_kp_s_SpectralPartitioner_graph_count
#define __pyx_n_s_SpectralPartitioner_run __pyx_mstate_global->__pyx_n_s_SpectralPartitioner_run
#define __pyx_n_s_StablePartitionNodes __pyx_mstate_global->__pyx_n_s_StablePartitionNodes
#define __pyx_n_s_StablePartitionNodes___reduce_cy __pyx_mstate_global->__pyx_n_s_StablePartitionNodes___reduce_cy
#define __pyx_n_s_StablePartitionNodes___setstate __pyx_mstate_global->__pyx_n_s_StablePartitionNodes___setstate
#define __pyx_n_s_StablePartitionNodes_isStable __pyx_mstate_global->__pyx_n_s_StablePartitionNodes_isStable
#define __pyx_kp_u_TODO __pyx_mstate_global->__pyx_kp_u_TODO
#define __pyx_kp_u_There_is_no_core_for_the_specifi __pyx_mstate_global->__pyx_kp_u_There_is_no_core_for_the_specifi
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_kp_u__16 __pyx_mstate_global->__pyx_kp_u__16
#define __pyx_kp_u__19 __pyx_mstate_global->__pyx_kp_u__19
#define __pyx_n_s__207 __pyx_mstate_global->__pyx_n_s__207
#define __pyx_kp_u__22 __pyx_mstate_global->__pyx_kp_u__22
#define __pyx_kp_u__32 __pyx_mstate_global->__pyx_kp_u__32
#define __pyx_n_s__33 __pyx_mstate_global->__pyx_n_s__33
#define __pyx_kp_s__5 __pyx_mstate_global->__pyx_kp_s__5
#define __pyx_kp_s__6 __pyx_mstate_global->__pyx_kp_s__6
#define __pyx_kp_s__7 __pyx_mstate_global->__pyx_kp_s__7
#define __pyx_kp_u__7 __pyx_mstate_global->__pyx_kp_u__7
#define __pyx_n_s_addToSubset __pyx_mstate_global->__pyx_n_s_addToSubset
#define __pyx_n_s_algebraic __pyx_mstate_global->__pyx_n_s_algebraic
#define __pyx_n_s_algo __pyx_mstate_global->__pyx_n_s_algo
#define __pyx_n_s_alpha __pyx_mstate_global->__pyx_n_s_alpha
#define __pyx_n_s_append __pyx_mstate_global->__pyx_n_s_append
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_kp_u_avg_community_size __pyx_mstate_global->__pyx_kp_u_avg_community_size
#define __pyx_n_s_balanced __pyx_mstate_global->__pyx_n_s_balanced
#define __pyx_n_u_balanced __pyx_mstate_global->__pyx_n_u_balanced
#define __pyx_n_s_baseClustering __pyx_mstate_global->__pyx_n_s_baseClustering
#define __pyx_n_s_bisect __pyx_mstate_global->__pyx_n_s_bisect
#define __pyx_n_s_calculate __pyx_mstate_global->__pyx_n_s_calculate
#define __pyx_n_s_ceil __pyx_mstate_global->__pyx_n_s_ceil
#define __pyx_n_s_centrality __pyx_mstate_global->__pyx_n_s_centrality
#define __pyx_n_s_cg __pyx_mstate_global->__pyx_n_s_cg
#define __pyx_n_s_cid __pyx_mstate_global->__pyx_n_s_cid
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_coarsen __pyx_mstate_global->__pyx_n_s_coarsen
#define __pyx_n_s_coarsening __pyx_mstate_global->__pyx_n_s_coarsening
#define __pyx_n_s_commProps __pyx_mstate_global->__pyx_n_s_commProps
#define __pyx_n_s_communicationGraph __pyx_mstate_global->__pyx_n_s_communicationGraph
#define __pyx_kp_u_communities __pyx_mstate_global->__pyx_kp_u_communities
#define __pyx_n_s_communities_2 __pyx_mstate_global->__pyx_n_s_communities_2
#define __pyx_n_s_communityGraph __pyx_mstate_global->__pyx_n_s_communityGraph
#define __pyx_n_s_communitySizes __pyx_mstate_global->__pyx_n_s_communitySizes
#define __pyx_n_s_compareCommunities __pyx_mstate_global->__pyx_n_s_compareCommunities
#define __pyx_n_s_coreDec __pyx_mstate_global->__pyx_n_s_coreDec
#define __pyx_n_s_cores __pyx_mstate_global->__pyx_n_s_cores
#define __pyx_n_s_count __pyx_mstate_global->__pyx_n_s_count
#define __pyx_n_s_cutoff __pyx_mstate_global->__pyx_n_s_cutoff
#define __pyx_n_u_default __pyx_mstate_global->__pyx_n_u_default
#define __pyx_n_s_default_timer __pyx_mstate_global->__pyx_n_s_default_timer
#define __pyx_n_s_defaults __pyx_mstate_global->__pyx_n_s_defaults
#define __pyx_n_s_detectCommunities __pyx_mstate_global->__pyx_n_s_detectCommunities
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_dict_2 __pyx_mstate_global->__pyx_n_s_dict_2
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_doc __pyx_mstate_global->__pyx_n_s_doc
#define __pyx_n_s_eCut __pyx_mstate_global->__pyx_n_s_eCut
#define __pyx_kp_u_edge_cut __pyx_mstate_global->__pyx_kp_u_edge_cut
#define __pyx_kp_u_edge_cut_portion __pyx_mstate_global->__pyx_kp_u_edge_cut_portion
#define __pyx_kp_u_edgelist_s0 __pyx_mstate_global->__pyx_kp_u_edgelist_s0
#define __pyx_kp_u_edgelist_s1 __pyx_mstate_global->__pyx_kp_u_edgelist_s1
#define __pyx_kp_u_edgelist_t0 __pyx_mstate_global->__pyx_kp_u_edgelist_t0
#define __pyx_kp_u_edgelist_t1 __pyx_mstate_global->__pyx_kp_u_edgelist_t1
#define __pyx_n_s_eigenvalues __pyx_mstate_global->__pyx_n_s_eigenvalues
#define __pyx_n_s_eigenvectors __pyx_mstate_global->__pyx_n_s_eigenvectors
#define __pyx_n_s_eigv __pyx_mstate_global->__pyx_n_s_eigv
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_end __pyx_mstate_global->__pyx_n_s_end
#define __pyx_n_s_enter __pyx_mstate_global->__pyx_n_s_enter
#define __pyx_n_s_equalClustering __pyx_mstate_global->__pyx_n_s_equalClustering
#define __pyx_n_s_eta __pyx_mstate_global->__pyx_n_s_eta
#define __pyx_n_s_evalCommunityDetection __pyx_mstate_global->__pyx_n_s_evalCommunityDetection
#define __pyx_n_s_exit __pyx_mstate_global->__pyx_n_s_exit
#define __pyx_n_s_expanduser __pyx_mstate_global->__pyx_n_s_expanduser
#define __pyx_n_s_file __pyx_mstate_global->__pyx_n_s_file
#define __pyx_n_s_first __pyx_mstate_global->__pyx_n_s_first
#define __pyx_n_s_firstItem __pyx_mstate_global->__pyx_n_s_firstItem
#define __pyx_n_s_floor __pyx_mstate_global->__pyx_n_s_floor
#define __pyx_n_s_format __pyx_mstate_global->__pyx_n_s_format
#define __pyx_n_s_fused_sigindex __pyx_mstate_global->__pyx_n_s_fused_sigindex
#define __pyx_n_s_gamma __pyx_mstate_global->__pyx_n_s_gamma
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_generatePartition __pyx_mstate_global->__pyx_n_s_generatePartition
#define __pyx_n_s_get __pyx_mstate_global->__pyx_n_s_get
#define __pyx_n_s_getClusterHierarchy __pyx_mstate_global->__pyx_n_s_getClusterHierarchy
#define __pyx_n_s_getCoarseGraph __pyx_mstate_global->__pyx_n_s_getCoarseGraph
#define __pyx_n_s_getCover __pyx_mstate_global->__pyx_n_s_getCover
#define __pyx_n_s_getDissimilarity __pyx_mstate_global->__pyx_n_s_getDissimilarity
#define __pyx_n_s_getGlobal __pyx_mstate_global->__pyx_n_s_getGlobal
#define __pyx_n_s_getImbalance __pyx_mstate_global->__pyx_n_s_getImbalance
#define __pyx_n_s_getMaximumValue __pyx_mstate_global->__pyx_n_s_getMaximumValue
#define __pyx_n_s_getMean __pyx_mstate_global->__pyx_n_s_getMean
#define __pyx_n_s_getMembers __pyx_mstate_global->__pyx_n_s_getMembers
#define __pyx_n_s_getMinimumValue __pyx_mstate_global->__pyx_n_s_getMinimumValue
#define __pyx_n_s_getPartition __pyx_mstate_global->__pyx_n_s_getPartition
#define __pyx_n_s_getQuality __pyx_mstate_global->__pyx_n_s_getQuality
#define __pyx_n_s_getQuantiles __pyx_mstate_global->__pyx_n_s_getQuantiles
#define __pyx_n_s_getTiming __pyx_mstate_global->__pyx_n_s_getTiming
#define __pyx_n_s_getUnweightedAverage __pyx_mstate_global->__pyx_n_s_getUnweightedAverage
#define __pyx_n_s_getValue __pyx_mstate_global->__pyx_n_s_getValue
#define __pyx_n_s_getValues __pyx_mstate_global->__pyx_n_s_getValues
#define __pyx_n_s_getWeightedAverage __pyx_mstate_global->__pyx_n_s_getWeightedAverage
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_graph __pyx_mstate_global->__pyx_n_s_graph
#define __pyx_n_s_graphio __pyx_mstate_global->__pyx_n_s_graphio
#define __pyx_n_s_graphtools __pyx_mstate_global->__pyx_n_s_graphtools
#define __pyx_n_s_have_tabulate __pyx_mstate_global->__pyx_n_s_have_tabulate
#define __pyx_n_s_helpers __pyx_mstate_global->__pyx_n_s_helpers
#define __pyx_n_s_hierarchical __pyx_mstate_global->__pyx_n_s_hierarchical
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_imbalance __pyx_mstate_global->__pyx_n_s_imbalance
#define __pyx_n_u_imbalance __pyx_mstate_global->__pyx_n_u_imbalance
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_init __pyx_mstate_global->__pyx_n_s_init
#define __pyx_n_s_init_subclass __pyx_mstate_global->__pyx_n_s_init_subclass
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_inspect __pyx_mstate_global->__pyx_n_s_inspect
#define __pyx_n_s_inspectCommunities __pyx_mstate_global->__pyx_n_s_inspectCommunities
#define __pyx_n_s_isOneClustering __pyx_mstate_global->__pyx_n_s_isOneClustering
#define __pyx_n_s_isProperClustering __pyx_mstate_global->__pyx_n_s_isProperClustering
#define __pyx_n_s_isSingletonClustering __pyx_mstate_global->__pyx_n_s_isSingletonClustering
#define __pyx_n_s_isSmallBetter __pyx_mstate_global->__pyx_n_s_isSmallBetter
#define __pyx_n_s_isStable __pyx_mstate_global->__pyx_n_s_isStable
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_isfile __pyx_mstate_global->__pyx_n_s_isfile
#define __pyx_n_s_iterNodes __pyx_mstate_global->__pyx_n_s_iterNodes
#define __pyx_n_s_iteration __pyx_mstate_global->__pyx_n_s_iteration
#define __pyx_n_s_iterations __pyx_mstate_global->__pyx_n_s_iterations
#define __pyx_n_s_k __pyx_mstate_global->__pyx_n_s_k
#define __pyx_n_s_kCore __pyx_mstate_global->__pyx_n_s_kCore
#define __pyx_n_s_kCoreCommunityDetection __pyx_mstate_global->__pyx_n_s_kCoreCommunityDetection
#define __pyx_n_s_kwargs __pyx_mstate_global->__pyx_n_s_kwargs
#define __pyx_n_s_laplacianEigenvectors __pyx_mstate_global->__pyx_n_s_laplacianEigenvectors
#define __pyx_n_s_log __pyx_mstate_global->__pyx_n_s_log
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_makeContinuousBalancedClustering __pyx_mstate_global->__pyx_n_s_makeContinuousBalancedClustering
#define __pyx_n_s_makeNoncontinuousBalancedCluster __pyx_mstate_global->__pyx_n_s_makeNoncontinuousBalancedCluster
#define __pyx_n_s_makeOneClustering __pyx_mstate_global->__pyx_n_s_makeOneClustering
#define __pyx_n_s_makeRandomClustering __pyx_mstate_global->__pyx_n_s_makeRandomClustering
#define __pyx_n_s_makeSingletonClustering __pyx_mstate_global->__pyx_n_s_makeSingletonClustering
#define __pyx_n_s_math __pyx_mstate_global->__pyx_n_s_math
#define __pyx_n_s_max __pyx_mstate_global->__pyx_n_s_max
#define __pyx_n_s_maxIter __pyx_mstate_global->__pyx_n_s_maxIter
#define __pyx_n_s_maxIterations __pyx_mstate_global->__pyx_n_s_maxIterations
#define __pyx_kp_u_max_community_size __pyx_mstate_global->__pyx_kp_u_max_community_size
#define __pyx_n_s_mean __pyx_mstate_global->__pyx_n_s_mean
#define __pyx_n_s_metaclass __pyx_mstate_global->__pyx_n_s_metaclass
#define __pyx_n_s_min __pyx_mstate_global->__pyx_n_s_min
#define __pyx_kp_u_min_community_size __pyx_mstate_global->__pyx_kp_u_min_community_size
#define __pyx_n_s_mod __pyx_mstate_global->__pyx_n_s_mod
#define __pyx_n_u_modularity __pyx_mstate_global->__pyx_n_u_modularity
#define __pyx_n_s_module __pyx_mstate_global->__pyx_n_s_module
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_networkit_community __pyx_mstate_global->__pyx_n_s_networkit_community
#define __pyx_kp_s_networkit_community_pyx __pyx_mstate_global->__pyx_kp_s_networkit_community_pyx
#define __pyx_kp_s_networkit_structures __pyx_mstate_global->__pyx_kp_s_networkit_structures
#define __pyx_n_s_new __pyx_mstate_global->__pyx_n_s_new
#define __pyx_n_s_nextCount __pyx_mstate_global->__pyx_n_s_nextCount
#define __pyx_n_s_nextPartition __pyx_mstate_global->__pyx_n_s_nextPartition
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_s_nodeToMetaNode __pyx_mstate_global->__pyx_n_s_nodeToMetaNode
#define __pyx_n_s_none __pyx_mstate_global->__pyx_n_s_none
#define __pyx_n_s_normalization __pyx_mstate_global->__pyx_n_s_normalization
#define __pyx_n_s_np __pyx_mstate_global->__pyx_n_s_np
#define __pyx_n_s_numberOfEdges __pyx_mstate_global->__pyx_n_s_numberOfEdges
#define __pyx_n_s_numberOfIterations __pyx_mstate_global->__pyx_n_s_numberOfIterations
#define __pyx_n_s_numberOfNodes __pyx_mstate_global->__pyx_n_s_numberOfNodes
#define __pyx_n_s_numberOfSubsets __pyx_mstate_global->__pyx_n_s_numberOfSubsets
#define __pyx_n_s_numpy __pyx_mstate_global->__pyx_n_s_numpy
#define __pyx_n_s_open __pyx_mstate_global->__pyx_n_s_open
#define __pyx_n_s_os __pyx_mstate_global->__pyx_n_s_os
#define __pyx_n_s_par __pyx_mstate_global->__pyx_n_s_par
#define __pyx_n_s_parallel __pyx_mstate_global->__pyx_n_s_parallel
#define __pyx_n_s_parallelizationStrategy __pyx_mstate_global->__pyx_n_s_parallelizationStrategy
#define __pyx_n_s_partA __pyx_mstate_global->__pyx_n_s_partA
#define __pyx_n_s_partB __pyx_mstate_global->__pyx_n_s_partB
#define __pyx_n_s_partC __pyx_mstate_global->__pyx_n_s_partC
#define __pyx_n_s_partIndex __pyx_mstate_global->__pyx_n_s_partIndex
#define __pyx_n_s_partition __pyx_mstate_global->__pyx_n_s_partition
#define __pyx_n_s_partitions __pyx_mstate_global->__pyx_n_s_partitions
#define __pyx_n_s_path __pyx_mstate_global->__pyx_n_s_path
#define __pyx_kp_u_path_expanded_to_0 __pyx_mstate_global->__pyx_kp_u_path_expanded_to_0
#define __pyx_n_s_pickle __pyx_mstate_global->__pyx_n_s_pickle
#define __pyx_n_s_prepare __pyx_mstate_global->__pyx_n_s_prepare
#define __pyx_n_s_prepareSpectrum __pyx_mstate_global->__pyx_n_s_prepareSpectrum
#define __pyx_n_s_print __pyx_mstate_global->__pyx_n_s_print
#define __pyx_n_s_prolong __pyx_mstate_global->__pyx_n_s_prolong
#define __pyx_n_s_pyResult __pyx_mstate_global->__pyx_n_s_pyResult
#define __pyx_n_s_pyx_PickleError __pyx_mstate_global->__pyx_n_s_pyx_PickleError
#define __pyx_n_s_pyx_checksum __pyx_mstate_global->__pyx_n_s_pyx_checksum
#define __pyx_n_s_pyx_result __pyx_mstate_global->__pyx_n_s_pyx_result
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_type __pyx_mstate_global->__pyx_n_s_pyx_type
#define __pyx_n_s_pyx_unpickle_DissimilarityMeas __pyx_mstate_global->__pyx_n_s_pyx_unpickle_DissimilarityMeas
#define __pyx_n_s_pyx_unpickle_GraphClusteringTo __pyx_mstate_global->__pyx_n_s_pyx_unpickle_GraphClusteringTo
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_qualname __pyx_mstate_global->__pyx_n_s_qualname
#define __pyx_n_s_quantile __pyx_mstate_global->__pyx_n_s_quantile
#define __pyx_n_s_quantiles __pyx_mstate_global->__pyx_n_s_quantiles
#define __pyx_n_u_r __pyx_mstate_global->__pyx_n_u_r
#define __pyx_n_s_random __pyx_mstate_global->__pyx_n_s_random
#define __pyx_n_s_randomize __pyx_mstate_global->__pyx_n_s_randomize
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_read __pyx_mstate_global->__pyx_n_s_read
#define __pyx_n_s_readCommunities __pyx_mstate_global->__pyx_n_s_readCommunities
#define __pyx_kp_u_read_communities_from_0 __pyx_mstate_global->__pyx_kp_u_read_communities_from_0
#define __pyx_n_s_reader __pyx_mstate_global->__pyx_n_s_reader
#define __pyx_n_s_readers __pyx_mstate_global->__pyx_n_s_readers
#define __pyx_n_s_recurse __pyx_mstate_global->__pyx_n_s_recurse
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_reference __pyx_mstate_global->__pyx_n_s_reference
#define __pyx_n_s_refine __pyx_mstate_global->__pyx_n_s_refine
#define __pyx_n_u_relaxmap __pyx_mstate_global->__pyx_n_u_relaxmap
#define __pyx_n_s_res __pyx_mstate_global->__pyx_n_s_res
#define __pyx_n_s_result __pyx_mstate_global->__pyx_n_s_result
#define __pyx_n_s_results __pyx_mstate_global->__pyx_n_s_results
#define __pyx_n_s_ret __pyx_mstate_global->__pyx_n_s_ret
#define __pyx_n_s_reverse __pyx_mstate_global->__pyx_n_s_reverse
#define __pyx_n_s_run __pyx_mstate_global->__pyx_n_s_run
#define __pyx_n_s_s __pyx_mstate_global->__pyx_n_s_s
#define __pyx_n_s_scd __pyx_mstate_global->__pyx_n_s_scd
#define __pyx_n_s_scores __pyx_mstate_global->__pyx_n_s_scores
#define __pyx_n_s_second __pyx_mstate_global->__pyx_n_s_second
#define __pyx_n_s_sections __pyx_mstate_global->__pyx_n_s_sections
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self__this_cannot_be_converted_t __pyx_mstate_global->__pyx_kp_s_self__this_cannot_be_converted_t
#define __pyx_n_s_setNormalization __pyx_mstate_global->__pyx_n_s_setNormalization
#define __pyx_n_s_set_name __pyx_mstate_global->__pyx_n_s_set_name
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_size __pyx_mstate_global->__pyx_n_s_size
#define __pyx_kp_u_solution_properties __pyx_mstate_global->__pyx_kp_u_solution_properties
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_spectrum __pyx_mstate_global->__pyx_n_s_spectrum
#define __pyx_n_s_split __pyx_mstate_global->__pyx_n_s_split
#define __pyx_n_s_start __pyx_mstate_global->__pyx_n_s_start
#define __pyx_n_s_state __pyx_mstate_global->__pyx_n_s_state
#define __pyx_n_s_staticmethod __pyx_mstate_global->__pyx_n_s_staticmethod
#define __pyx_n_s_stdstring __pyx_mstate_global->__pyx_n_s_stdstring
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_strip __pyx_mstate_global->__pyx_n_s_strip
#define __pyx_n_s_subgraphFromNodes __pyx_mstate_global->__pyx_n_s_subgraphFromNodes
#define __pyx_n_s_subprocess __pyx_mstate_global->__pyx_n_s_subprocess
#define __pyx_n_s_subsetID __pyx_mstate_global->__pyx_n_s_subsetID
#define __pyx_n_s_subsetSizes __pyx_mstate_global->__pyx_n_s_subsetSizes
#define __pyx_n_s_sum __pyx_mstate_global->__pyx_n_s_sum
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_s_support __pyx_mstate_global->__pyx_n_s_support
#define __pyx_n_s_tabulate __pyx_mstate_global->__pyx_n_s_tabulate
#define __pyx_n_u_tabulate __pyx_mstate_global->__pyx_n_u_tabulate
#define __pyx_n_s_tempfile __pyx_mstate_global->__pyx_n_s_tempfile
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_kp_u_time_s __pyx_mstate_global->__pyx_kp_u_time_s
#define __pyx_n_s_timeit __pyx_mstate_global->__pyx_n_s_timeit
#define __pyx_n_s_toSingleton __pyx_mstate_global->__pyx_n_s_toSingleton
#define __pyx_n_s_trisect __pyx_mstate_global->__pyx_n_s_trisect
#define __pyx_n_s_turbo __pyx_mstate_global->__pyx_n_s_turbo
#define __pyx_n_s_u __pyx_mstate_global->__pyx_n_s_u
#define __pyx_kp_u_unrecognized_format_0 __pyx_mstate_global->__pyx_kp_u_unrecognized_format_0
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_updateThreshold __pyx_mstate_global->__pyx_n_s_updateThreshold
#define __pyx_n_s_use_setstate __pyx_mstate_global->__pyx_n_s_use_setstate
#define __pyx_n_s_validateNormalization __pyx_mstate_global->__pyx_n_s_validateNormalization
#define __pyx_n_s_values __pyx_mstate_global->__pyx_n_s_values
#define __pyx_n_s_vertex __pyx_mstate_global->__pyx_n_s_vertex
#define __pyx_n_s_vertices __pyx_mstate_global->__pyx_n_s_vertices
#define __pyx_n_s_warnings __pyx_mstate_global->__pyx_n_s_warnings
#define __pyx_n_s_weightedDegreeWithCluster __pyx_mstate_global->__pyx_n_s_weightedDegreeWithCluster
#define __pyx_n_s_write __pyx_mstate_global->__pyx_n_s_write
#define __pyx_n_s_writeCommunities __pyx_mstate_global->__pyx_n_s_writeCommunities
#define __pyx_kp_u_wrote_communities_to_0 __pyx_mstate_global->__pyx_kp_u_wrote_communities_to_0
#define __pyx_n_s_zeta __pyx_mstate_global->__pyx_n_s_zeta
#define __pyx_n_s_zeta1 __pyx_mstate_global->__pyx_n_s_zeta1
#define __pyx_n_s_zeta2 __pyx_mstate_global->__pyx_n_s_zeta2
#define __pyx_n_s_zetaCoarse __pyx_mstate_global->__pyx_n_s_zetaCoarse
#define __pyx_float_1_0 __pyx_mstate_global->__pyx_float_1_0
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_2 __pyx_mstate_global->__pyx_int_2
#define __pyx_int_3 __pyx_mstate_global->__pyx_int_3
#define __pyx_int_4 __pyx_mstate_global->__pyx_int_4
#define __pyx_int_32 __pyx_mstate_global->__pyx_int_32
#define __pyx_int_222419149 __pyx_mstate_global->__pyx_int_222419149
#define __pyx_int_228825662 __pyx_mstate_global->__pyx_int_228825662
#define __pyx_int_238750788 __pyx_mstate_global->__pyx_int_238750788
#define __pyx_k__4 __pyx_mstate_global->__pyx_k__4
#define __pyx_k__10 __pyx_mstate_global->__pyx_k__10
#define __pyx_k__11 __pyx_mstate_global->__pyx_k__11
#define __pyx_k__26 __pyx_mstate_global->__pyx_k__26
#define __pyx_k__27 __pyx_mstate_global->__pyx_k__27
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_slice__30 __pyx_mstate_global->__pyx_slice__30
#define __pyx_tuple__12 __pyx_mstate_global->__pyx_tuple__12
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__23 __pyx_mstate_global->__pyx_tuple__23
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__28 __pyx_mstate_global->__pyx_tuple__28
#define __pyx_tuple__29 __pyx_mstate_global->__pyx_tuple__29
#define __pyx_tuple__31 __pyx_mstate_global->__pyx_tuple__31
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__37 __pyx_mstate_global->__pyx_tuple__37
#define __pyx_tuple__42 __pyx_mstate_global->__pyx_tuple__42
#define __pyx_tuple__45 __pyx_mstate_global->__pyx_tuple__45
#define __pyx_tuple__51 __pyx_mstate_global->__pyx_tuple__51
#define __pyx_tuple__53 __pyx_mstate_global->__pyx_tuple__53
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__56 __pyx_mstate_global->__pyx_tuple__56
#define __pyx_tuple__58 __pyx_mstate_global->__pyx_tuple__58
#define __pyx_tuple__62 __pyx_mstate_global->__pyx_tuple__62
#define __pyx_tuple__64 __pyx_mstate_global->__pyx_tuple__64
#define __pyx_tuple__67 __pyx_mstate_global->__pyx_tuple__67
#define __pyx_tuple__71 __pyx_mstate_global->__pyx_tuple__71
#define __pyx_tuple__78 __pyx_mstate_global->__pyx_tuple__78
#define __pyx_tuple__86 __pyx_mstate_global->__pyx_tuple__86
#define __pyx_tuple__88 __pyx_mstate_global->__pyx_tuple__88
#define __pyx_tuple__89 __pyx_mstate_global->__pyx_tuple__89
#define __pyx_tuple__106 __pyx_mstate_global->__pyx_tuple__106
#define __pyx_tuple__112 __pyx_mstate_global->__pyx_tuple__112
#define __pyx_tuple__132 __pyx_mstate_global->__pyx_tuple__132
#define __pyx_tuple__155 __pyx_mstate_global->__pyx_tuple__155
#define __pyx_tuple__161 __pyx_mstate_global->__pyx_tuple__161
#define __pyx_tuple__163 __pyx_mstate_global->__pyx_tuple__163
#define __pyx_tuple__164 __pyx_mstate_global->__pyx_tuple__164
#define __pyx_tuple__166 __pyx_mstate_global->__pyx_tuple__166
#define __pyx_tuple__168 __pyx_mstate_global->__pyx_tuple__168
#define __pyx_tuple__170 __pyx_mstate_global->__pyx_tuple__170
#define __pyx_tuple__172 __pyx_mstate_global->__pyx_tuple__172
#define __pyx_tuple__173 __pyx_mstate_global->__pyx_tuple__173
#define __pyx_tuple__175 __pyx_mstate_global->__pyx_tuple__175
#define __pyx_tuple__177 __pyx_mstate_global->__pyx_tuple__177
#define __pyx_tuple__179 __pyx_mstate_global->__pyx_tuple__179
#define __pyx_tuple__185 __pyx_mstate_global->__pyx_tuple__185
#define __pyx_tuple__187 __pyx_mstate_global->__pyx_tuple__187
#define __pyx_tuple__188 __pyx_mstate_global->__pyx_tuple__188
#define __pyx_tuple__190 __pyx_mstate_global->__pyx_tuple__190
#define __pyx_tuple__192 __pyx_mstate_global->__pyx_tuple__192
#define __pyx_tuple__193 __pyx_mstate_global->__pyx_tuple__193
#define __pyx_tuple__195 __pyx_mstate_global->__pyx_tuple__195
#define __pyx_tuple__197 __pyx_mstate_global->__pyx_tuple__197
#define __pyx_tuple__198 __pyx_mstate_global->__pyx_tuple__198
#define __pyx_tuple__200 __pyx_mstate_global->__pyx_tuple__200
#define __pyx_tuple__204 __pyx_mstate_global->__pyx_tuple__204
#define __pyx_codeobj__35 __pyx_mstate_global->__pyx_codeobj__35
#define __pyx_codeobj__36 __pyx_mstate_global->__pyx_codeobj__36
#define __pyx_codeobj__38 __pyx_mstate_global->__pyx_codeobj__38
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__40 __pyx_mstate_global->__pyx_codeobj__40
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__43 __pyx_mstate_global->__pyx_codeobj__43
#define __pyx_codeobj__44 __pyx_mstate_global->__pyx_codeobj__44
#define __pyx_codeobj__46 __pyx_mstate_global->__pyx_codeobj__46
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__48 __pyx_mstate_global->__pyx_codeobj__48
#define __pyx_codeobj__49 __pyx_mstate_global->__pyx_codeobj__49
#define __pyx_codeobj__50 __pyx_mstate_global->__pyx_codeobj__50
#define __pyx_codeobj__52 __pyx_mstate_global->__pyx_codeobj__52
#define __pyx_codeobj__55 __pyx_mstate_global->__pyx_codeobj__55
#define __pyx_codeobj__57 __pyx_mstate_global->__pyx_codeobj__57
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__60 __pyx_mstate_global->__pyx_codeobj__60
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
#define __pyx_codeobj__63 __pyx_mstate_global->__pyx_codeobj__63
#define __pyx_codeobj__65 __pyx_mstate_global->__pyx_codeobj__65
#define __pyx_codeobj__66 __pyx_mstate_global->__pyx_codeobj__66
#define __pyx_codeobj__68 __pyx_mstate_global->__pyx_codeobj__68
#define __pyx_codeobj__69 __pyx_mstate_global->__pyx_codeobj__69
#define __pyx_codeobj__70 __pyx_mstate_global->__pyx_codeobj__70
#define __pyx_codeobj__72 __pyx_mstate_global->__pyx_codeobj__72
#define __pyx_codeobj__73 __pyx_mstate_global->__pyx_codeobj__73
#define __pyx_codeobj__74 __pyx_mstate_global->__pyx_codeobj__74
#define __pyx_codeobj__75 __pyx_mstate_global->__pyx_codeobj__75
#define __pyx_codeobj__76 __pyx_mstate_global->__pyx_codeobj__76
#define __pyx_codeobj__77 __pyx_mstate_global->__pyx_codeobj__77
#define __pyx_codeobj__79 __pyx_mstate_global->__pyx_codeobj__79
#define __pyx_codeobj__80 __pyx_mstate_global->__pyx_codeobj__80
#define __pyx_codeobj__81 __pyx_mstate_global->__pyx_codeobj__81
#define __pyx_codeobj__82 __pyx_mstate_global->__pyx_codeobj__82
#define __pyx_codeobj__83 __pyx_mstate_global->__pyx_codeobj__83
#define __pyx_codeobj__84 __pyx_mstate_global->__pyx_codeobj__84
#define __pyx_codeobj__85 __pyx_mstate_global->__pyx_codeobj__85
#define __pyx_codeobj__87 __pyx_mstate_global->__pyx_codeobj__87
#define __pyx_codeobj__90 __pyx_mstate_global->__pyx_codeobj__90
#define __pyx_codeobj__91 __pyx_mstate_global->__pyx_codeobj__91
#define __pyx_codeobj__92 __pyx_mstate_global->__pyx_codeobj__92
#define __pyx_codeobj__93 __pyx_mstate_global->__pyx_codeobj__93
#define __pyx_codeobj__94 __pyx_mstate_global->__pyx_codeobj__94
#define __pyx_codeobj__95 __pyx_mstate_global->__pyx_codeobj__95
#define __pyx_codeobj__96 __pyx_mstate_global->__pyx_codeobj__96
#define __pyx_codeobj__97 __pyx_mstate_global->__pyx_codeobj__97
#define __pyx_codeobj__98 __pyx_mstate_global->__pyx_codeobj__98
#define __pyx_codeobj__99 __pyx_mstate_global->__pyx_codeobj__99
#define __pyx_codeobj__100 __pyx_mstate_global->__pyx_codeobj__100
#define __pyx_codeobj__101 __pyx_mstate_global->__pyx_codeobj__101
#define __pyx_codeobj__102 __pyx_mstate_global->__pyx_codeobj__102
#define __pyx_codeobj__103 __pyx_mstate_global->__pyx_codeobj__103
#define __pyx_codeobj__104 __pyx_mstate_global->__pyx_codeobj__104
#define __pyx_codeobj__105 __pyx_mstate_global->__pyx_codeobj__105
#define __pyx_codeobj__107 __pyx_mstate_global->__pyx_codeobj__107
#define __pyx_codeobj__108 __pyx_mstate_global->__pyx_codeobj__108
#define __pyx_codeobj__109 __pyx_mstate_global->__pyx_codeobj__109
#define __pyx_codeobj__110 __pyx_mstate_global->__pyx_codeobj__110
#define __pyx_codeobj__111 __pyx_mstate_global->__pyx_codeobj__111
#define __pyx_codeobj__113 __pyx_mstate_global->__pyx_codeobj__113
#define __pyx_codeobj__114 __pyx_mstate_global->__pyx_codeobj__114
#define __pyx_codeobj__115 __pyx_mstate_global->__pyx_codeobj__115
#define __pyx_codeobj__116 __pyx_mstate_global->__pyx_codeobj__116
#define __pyx_codeobj__117 __pyx_mstate_global->__pyx_codeobj__117
#define __pyx_codeobj__118 __pyx_mstate_global->__pyx_codeobj__118
#define __pyx_codeobj__119 __pyx_mstate_global->__pyx_codeobj__119
#define __pyx_codeobj__120 __pyx_mstate_global->__pyx_codeobj__120
#define __pyx_codeobj__121 __pyx_mstate_global->__pyx_codeobj__121
#define __pyx_codeobj__122 __pyx_mstate_global->__pyx_codeobj__122
#define __pyx_codeobj__123 __pyx_mstate_global->__pyx_codeobj__123
#define __pyx_codeobj__124 __pyx_mstate_global->__pyx_codeobj__124
#define __pyx_codeobj__125 __pyx_mstate_global->__pyx_codeobj__125
#define __pyx_codeobj__126 __pyx_mstate_global->__pyx_codeobj__126
#define __pyx_codeobj__127 __pyx_mstate_global->__pyx_codeobj__127
#define __pyx_codeobj__128 __pyx_mstate_global->__pyx_codeobj__128
#define __pyx_codeobj__129 __pyx_mstate_global->__pyx_codeobj__129
#define __pyx_codeobj__130 __pyx_mstate_global->__pyx_codeobj__130
#define __pyx_codeobj__131 __pyx_mstate_global->__pyx_codeobj__131
#define __pyx_codeobj__133 __pyx_mstate_global->__pyx_codeobj__133
#define __pyx_codeobj__134 __pyx_mstate_global->__pyx_codeobj__134
#define __pyx_codeobj__135 __pyx_mstate_global->__pyx_codeobj__135
#define __pyx_codeobj__136 __pyx_mstate_global->__pyx_codeobj__136
#define __pyx_codeobj__137 __pyx_mstate_global->__pyx_codeobj__137
#define __pyx_codeobj__138 __pyx_mstate_global->__pyx_codeobj__138
#define __pyx_codeobj__139 __pyx_mstate_global->__pyx_codeobj__139
#define __pyx_codeobj__140 __pyx_mstate_global->__pyx_codeobj__140
#define __pyx_codeobj__141 __pyx_mstate_global->__pyx_codeobj__141
#define __pyx_codeobj__142 __pyx_mstate_global->__pyx_codeobj__142
#define __pyx_codeobj__143 __pyx_mstate_global->__pyx_codeobj__143
#define __pyx_codeobj__144 __pyx_mstate_global->__pyx_codeobj__144
#define __pyx_codeobj__145 __pyx_mstate_global->__pyx_codeobj__145
#define __pyx_codeobj__146 __pyx_mstate_global->__pyx_codeobj__146
#define __pyx_codeobj__147 __pyx_mstate_global->__pyx_codeobj__147
#define __pyx_codeobj__148 __pyx_mstate_global->__pyx_codeobj__148
#define __pyx_codeobj__149 __pyx_mstate_global->__pyx_codeobj__149
#define __pyx_codeobj__150 __pyx_mstate_global->__pyx_codeobj__150
#define __pyx_codeobj__151 __pyx_mstate_global->__pyx_codeobj__151
#define __pyx_codeobj__152 __pyx_mstate_global->__pyx_codeobj__152
#define __pyx_codeobj__153 __pyx_mstate_global->__pyx_codeobj__153
#define __pyx_codeobj__154 __pyx_mstate_global->__pyx_codeobj__154
#define __pyx_codeobj__156 __pyx_mstate_global->__pyx_codeobj__156
#define __pyx_codeobj__157 __pyx_mstate_global->__pyx_codeobj__157
#define __pyx_codeobj__158 __pyx_mstate_global->__pyx_codeobj__158
#define __pyx_codeobj__159 __pyx_mstate_global->__pyx_codeobj__159
#define __pyx_codeobj__160 __pyx_mstate_global->__pyx_codeobj__160
#define __pyx_codeobj__162 __pyx_mstate_global->__pyx_codeobj__162
#define __pyx_codeobj__165 __pyx_mstate_global->__pyx_codeobj__165
#define __pyx_codeobj__167 __pyx_mstate_global->__pyx_codeobj__167
#define __pyx_codeobj__169 __pyx_mstate_global->__pyx_codeobj__169
#define __pyx_codeobj__171 __pyx_mstate_global->__pyx_codeobj__171
#define __pyx_codeobj__174 __pyx_mstate_global->__pyx_codeobj__174
#define __pyx_codeobj__176 __pyx_mstate_global->__pyx_codeobj__176
#define __pyx_codeobj__178 __pyx_mstate_global->__pyx_codeobj__178
#define __pyx_codeobj__180 __pyx_mstate_global->__pyx_codeobj__180
#define __pyx_codeobj__181 __pyx_mstate_global->__pyx_codeobj__181
#define __pyx_codeobj__182 __pyx_mstate_global->__pyx_codeobj__182
#define __pyx_codeobj__183 __pyx_mstate_global->__pyx_codeobj__183
#define __pyx_codeobj__184 __pyx_mstate_global->__pyx_codeobj__184
#define __pyx_codeobj__186 __pyx_mstate_global->__pyx_codeobj__186
#define __pyx_codeobj__189 __pyx_mstate_global->__pyx_codeobj__189
#define __pyx_codeobj__191 __pyx_mstate_global->__pyx_codeobj__191
#define __pyx_codeobj__194 __pyx_mstate_global->__pyx_codeobj__194
#define __pyx_codeobj__196 __pyx_mstate_global->__pyx_codeobj__196
#define __pyx_codeobj__199 __pyx_mstate_global->__pyx_codeobj__199
#define __pyx_codeobj__201 __pyx_mstate_global->__pyx_codeobj__201
#define __pyx_codeobj__202 __pyx_mstate_global->__pyx_codeobj__202
#define __pyx_codeobj__203 __pyx_mstate_global->__pyx_codeobj__203
#define __pyx_codeobj__205 __pyx_mstate_global->__pyx_codeobj__205
#define __pyx_codeobj__206 __pyx_mstate_global->__pyx_codeobj__206
/* #### Code section: module_code ### */

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<__pyx_t_9networkit_10structures_node>  __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(PyObject *__pyx_v_o) {
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_9networkit_10structures_node __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node", 1);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_uint64_t(__pyx_v_item); if (unlikely((__pyx_t_5 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(((__pyx_t_9networkit_10structures_node)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 48, __pyx_L1_error)
    }

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  char const *__pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_2 = std::string(__pyx_v_data, __pyx_v_length);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 16, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 1);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 1);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 1);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 1);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 1);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(std::vector<__pyx_t_9networkit_10structures_count>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __Pyx_PyInt_From_uint64_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.to_py":237
 * 
 * @cname("__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c___pyx_t_9networkit_10structures_count_3e___")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c___pyx_t_9networkit_10structures_count_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

static PyObject *__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c___pyx_t_9networkit_10structures_count_3e___(std::map<std::string,std::vector<__pyx_t_9networkit_10structures_count> >  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::map<std::string,std::vector<__pyx_t_9networkit_10structures_count> > ::value_type const *__pyx_v_key_value;
  std::map<std::string,std::vector<__pyx_t_9networkit_10structures_count> > ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c___pyx_t_9networkit_10structures_count_3e___", 1);

  /* "map.to_py":238
 * @cname("__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c___pyx_t_9networkit_10structures_count_3e___")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c___pyx_t_9networkit_10structures_count_3e___(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":240
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":241
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_iter != __pyx_v_s.end());
    if (!__pyx_t_2) break;

    /* "map.to_py":242
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":243
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0))) __PYX_ERR(1, 243, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":244
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "map.to_py":245
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":237
 * 
 * @cname("__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c___pyx_t_9networkit_10structures_count_3e___")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c___pyx_t_9networkit_10structures_count_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c___pyx_t_9networkit_10structures_count_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(std::vector<__pyx_t_9networkit_10structures_node>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __Pyx_PyInt_From_uint64_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_double(std::vector<double>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_double", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_double(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":63
 * 
 * 	cdef Graph _G
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == CommunityDetector:
 * 			raise RuntimeError("Error, you may not use CommunityDetector directly, use a sub-class instead")
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_17CommunityDetector_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_17CommunityDetector_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_namedargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_9networkit_9community_17CommunityDetector___init__(((struct __pyx_obj_9networkit_9community_CommunityDetector *)__pyx_v_self), __pyx_v_args, __pyx_v_namedargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_namedargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_17CommunityDetector___init__(struct __pyx_obj_9networkit_9community_CommunityDetector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "networkit/community.pyx":64
 * 	cdef Graph _G
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == CommunityDetector:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use CommunityDetector directly, use a sub-class instead")
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), ((PyObject *)__pyx_ptype_9networkit_9community_CommunityDetector), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "networkit/community.pyx":65
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == CommunityDetector:
 * 			raise RuntimeError("Error, you may not use CommunityDetector directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def getPartition(self):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 65, __pyx_L1_error)

    /* "networkit/community.pyx":64
 * 	cdef Graph _G
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == CommunityDetector:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use CommunityDetector directly, use a sub-class instead")
 * 
 */
  }

  /* "networkit/community.pyx":63
 * 
 * 	cdef Graph _G
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == CommunityDetector:
 * 			raise RuntimeError("Error, you may not use CommunityDetector directly, use a sub-class instead")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.community.CommunityDetector.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":67
 * 			raise RuntimeError("Error, you may not use CommunityDetector directly, use a sub-class instead")
 * 
 * 	def getPartition(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPartition()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_17CommunityDetector_3getPartition(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_17CommunityDetector_2getPartition, "  \n\t\tgetPartition()\n\t\t\n\t\tReturns a partition of the clustering.\n\n\t\tReturns\n\t\t-------\n\t\tnetworkit.Partition\n\t\t\tA Partition of the clustering.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_17CommunityDetector_3getPartition = {"getPartition", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_17CommunityDetector_3getPartition, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_17CommunityDetector_2getPartition};
static PyObject *__pyx_pw_9networkit_9community_17CommunityDetector_3getPartition(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPartition (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getPartition", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getPartition", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_17CommunityDetector_2getPartition(((struct __pyx_obj_9networkit_9community_CommunityDetector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_17CommunityDetector_2getPartition(struct __pyx_obj_9networkit_9community_CommunityDetector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_FakeReference<NetworKit::Partition> __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPartition", 1);

  /* "networkit/community.pyx":78
 * 			A Partition of the clustering.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return Partition().setThis((<_CommunityDetectionAlgorithm*>(self._this)).getPartition())
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.__pyx_base._this == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "networkit/community.pyx":79
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return Partition().setThis((<_CommunityDetectionAlgorithm*>(self._this)).getPartition())
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 79, __pyx_L1_error)

    /* "networkit/community.pyx":78
 * 			A Partition of the clustering.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return Partition().setThis((<_CommunityDetectionAlgorithm*>(self._this)).getPartition())
 */
  }

  /* "networkit/community.pyx":80
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return Partition().setThis((<_CommunityDetectionAlgorithm*>(self._this)).getPartition())             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/OverlappingCommunityDetectionAlgorithm.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_10structures_Partition)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_t_3 = ((NetworKit::CommunityDetectionAlgorithm *)__pyx_v_self->__pyx_base.__pyx_base._this)->getPartition();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 80, __pyx_L1_error)
  }
  __pyx_t_4 = ((struct __pyx_vtabstruct_9networkit_10structures_Partition *)((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_2)->__pyx_vtab)->setThis(((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_2), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":67
 * 			raise RuntimeError("Error, you may not use CommunityDetector directly, use a sub-class instead")
 * 
 * 	def getPartition(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPartition()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.community.CommunityDetector.getPartition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_17CommunityDetector_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_17CommunityDetector_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_17CommunityDetector_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_17CommunityDetector_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_17CommunityDetector_4__reduce_cython__(((struct __pyx_obj_9networkit_9community_CommunityDetector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_17CommunityDetector_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_CommunityDetector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.CommunityDetector.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_17CommunityDetector_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_17CommunityDetector_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_17CommunityDetector_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_17CommunityDetector_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.CommunityDetector.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_17CommunityDetector_6__setstate_cython__(((struct __pyx_obj_9networkit_9community_CommunityDetector *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_17CommunityDetector_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_CommunityDetector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.CommunityDetector.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":96
 * 
 * 	cdef Graph _G
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == OverlappingCommunityDetector:
 * 			raise RuntimeError("Error, you may not use OverlappingCommunityDetector directly, use a sub-class instead")
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_28OverlappingCommunityDetector_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_28OverlappingCommunityDetector_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_namedargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_9networkit_9community_28OverlappingCommunityDetector___init__(((struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *)__pyx_v_self), __pyx_v_args, __pyx_v_namedargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_namedargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_28OverlappingCommunityDetector___init__(struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "networkit/community.pyx":97
 * 	cdef Graph _G
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == OverlappingCommunityDetector:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use OverlappingCommunityDetector directly, use a sub-class instead")
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), ((PyObject *)__pyx_ptype_9networkit_9community_OverlappingCommunityDetector), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "networkit/community.pyx":98
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == OverlappingCommunityDetector:
 * 			raise RuntimeError("Error, you may not use OverlappingCommunityDetector directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def getCover(self):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 98, __pyx_L1_error)

    /* "networkit/community.pyx":97
 * 	cdef Graph _G
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == OverlappingCommunityDetector:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use OverlappingCommunityDetector directly, use a sub-class instead")
 * 
 */
  }

  /* "networkit/community.pyx":96
 * 
 * 	cdef Graph _G
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == OverlappingCommunityDetector:
 * 			raise RuntimeError("Error, you may not use OverlappingCommunityDetector directly, use a sub-class instead")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.community.OverlappingCommunityDetector.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":100
 * 			raise RuntimeError("Error, you may not use OverlappingCommunityDetector directly, use a sub-class instead")
 * 
 * 	def getCover(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getCover()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_28OverlappingCommunityDetector_3getCover(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_28OverlappingCommunityDetector_2getCover, "  \n\t\tgetCover()\n\n\t\tReturns a cover of the clustering.\n\n\t\tReturns\n\t\t-------\n\t\tnetworkit.Cover\n\t\t\tA Cover of the clustering.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_28OverlappingCommunityDetector_3getCover = {"getCover", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_28OverlappingCommunityDetector_3getCover, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_28OverlappingCommunityDetector_2getCover};
static PyObject *__pyx_pw_9networkit_9community_28OverlappingCommunityDetector_3getCover(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getCover (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getCover", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getCover", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_28OverlappingCommunityDetector_2getCover(((struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_28OverlappingCommunityDetector_2getCover(struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  NetworKit::Cover __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getCover", 1);

  /* "networkit/community.pyx":111
 * 			A Cover of the clustering.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return Cover().setThis((<_OverlappingCommunityDetectionAlgorithm*>(self._this)).getCover())
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.__pyx_base._this == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "networkit/community.pyx":112
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return Cover().setThis((<_OverlappingCommunityDetectionAlgorithm*>(self._this)).getCover())
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 112, __pyx_L1_error)

    /* "networkit/community.pyx":111
 * 			A Cover of the clustering.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return Cover().setThis((<_OverlappingCommunityDetectionAlgorithm*>(self._this)).getCover())
 */
  }

  /* "networkit/community.pyx":113
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return Cover().setThis((<_OverlappingCommunityDetectionAlgorithm*>(self._this)).getCover())             # <<<<<<<<<<<<<<
 * 
 * # Fused type for methods that accept both a partition and a cover
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_10structures_Cover)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_t_3 = ((NetworKit::OverlappingCommunityDetectionAlgorithm *)__pyx_v_self->__pyx_base.__pyx_base._this)->getCover();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 113, __pyx_L1_error)
  }
  __pyx_t_4 = ((struct __pyx_vtabstruct_9networkit_10structures_Cover *)((struct __pyx_obj_9networkit_10structures_Cover *)__pyx_t_2)->__pyx_vtab)->setThis(((struct __pyx_obj_9networkit_10structures_Cover *)__pyx_t_2), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":100
 * 			raise RuntimeError("Error, you may not use OverlappingCommunityDetector directly, use a sub-class instead")
 * 
 * 	def getCover(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getCover()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.community.OverlappingCommunityDetector.getCover", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_28OverlappingCommunityDetector_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_28OverlappingCommunityDetector_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_28OverlappingCommunityDetector_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_28OverlappingCommunityDetector_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_28OverlappingCommunityDetector_4__reduce_cython__(((struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_28OverlappingCommunityDetector_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.OverlappingCommunityDetector.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_28OverlappingCommunityDetector_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_28OverlappingCommunityDetector_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_28OverlappingCommunityDetector_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_28OverlappingCommunityDetector_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.OverlappingCommunityDetector.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_28OverlappingCommunityDetector_6__setstate_cython__(((struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_28OverlappingCommunityDetector_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.OverlappingCommunityDetector.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":133
 * 	""" Generators for various clusterings """
 * 	cdef _ClusteringGenerator _this
 * 	def makeSingletonClustering(self, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeSingletonClustering(G)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19ClusteringGenerator_1makeSingletonClustering(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_19ClusteringGenerator_makeSingletonClustering, "  \n\t\tmakeSingletonClustering(G)\n\n\t\tGenerate a clustering where each node has its own cluster\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tThe graph for which the clustering shall be generated.\n\n\t\tReturns\n\t\t-------\n\t\tnetworkit.Partition\n\t\t\tThe generated partition.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_19ClusteringGenerator_1makeSingletonClustering = {"makeSingletonClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19ClusteringGenerator_1makeSingletonClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_19ClusteringGenerator_makeSingletonClustering};
static PyObject *__pyx_pw_9networkit_9community_19ClusteringGenerator_1makeSingletonClustering(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("makeSingletonClustering (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "makeSingletonClustering") < 0)) __PYX_ERR(0, 133, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("makeSingletonClustering", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 133, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.ClusteringGenerator.makeSingletonClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 133, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_19ClusteringGenerator_makeSingletonClustering(((struct __pyx_obj_9networkit_9community_ClusteringGenerator *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19ClusteringGenerator_makeSingletonClustering(struct __pyx_obj_9networkit_9community_ClusteringGenerator *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  NetworKit::Partition __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("makeSingletonClustering", 1);

  /* "networkit/community.pyx":149
 * 			The generated partition.
 * 		"""
 * 		return Partition().setThis(self._this.makeSingletonClustering(G._this))             # <<<<<<<<<<<<<<
 * 	def makeOneClustering(self, Graph G):
 * 		"""
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_10structures_Partition)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = __pyx_v_self->_this.makeSingletonClustering(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 149, __pyx_L1_error)
  }
  __pyx_t_3 = ((struct __pyx_vtabstruct_9networkit_10structures_Partition *)((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_1)->__pyx_vtab)->setThis(((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_1), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":133
 * 	""" Generators for various clusterings """
 * 	cdef _ClusteringGenerator _this
 * 	def makeSingletonClustering(self, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeSingletonClustering(G)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.community.ClusteringGenerator.makeSingletonClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":150
 * 		"""
 * 		return Partition().setThis(self._this.makeSingletonClustering(G._this))
 * 	def makeOneClustering(self, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeOneClustering(G)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19ClusteringGenerator_3makeOneClustering(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_19ClusteringGenerator_2makeOneClustering, "  \n\t\tmakeOneClustering(G)\n\n\t\tGenerate a clustering with one cluster consisting of all nodes.\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tThe graph for which the clustering shall be generated.\n\n\t\tReturns\n\t\t-------\n\t\tnetworkit.Partition\n\t\t\tThe generated partition.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_19ClusteringGenerator_3makeOneClustering = {"makeOneClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19ClusteringGenerator_3makeOneClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_19ClusteringGenerator_2makeOneClustering};
static PyObject *__pyx_pw_9networkit_9community_19ClusteringGenerator_3makeOneClustering(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("makeOneClustering (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 150, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "makeOneClustering") < 0)) __PYX_ERR(0, 150, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("makeOneClustering", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 150, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.ClusteringGenerator.makeOneClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 150, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_19ClusteringGenerator_2makeOneClustering(((struct __pyx_obj_9networkit_9community_ClusteringGenerator *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19ClusteringGenerator_2makeOneClustering(struct __pyx_obj_9networkit_9community_ClusteringGenerator *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  NetworKit::Partition __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("makeOneClustering", 1);

  /* "networkit/community.pyx":166
 * 			The generated partition.
 * 		"""
 * 		return Partition().setThis(self._this.makeOneClustering(G._this))             # <<<<<<<<<<<<<<
 * 	def makeRandomClustering(self, Graph G, count k):
 * 		"""
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_10structures_Partition)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = __pyx_v_self->_this.makeOneClustering(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 166, __pyx_L1_error)
  }
  __pyx_t_3 = ((struct __pyx_vtabstruct_9networkit_10structures_Partition *)((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_1)->__pyx_vtab)->setThis(((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_1), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":150
 * 		"""
 * 		return Partition().setThis(self._this.makeSingletonClustering(G._this))
 * 	def makeOneClustering(self, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeOneClustering(G)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.community.ClusteringGenerator.makeOneClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":167
 * 		"""
 * 		return Partition().setThis(self._this.makeOneClustering(G._this))
 * 	def makeRandomClustering(self, Graph G, count k):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeRandomClustering(G, k)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19ClusteringGenerator_5makeRandomClustering(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_19ClusteringGenerator_4makeRandomClustering, "  \n\t\tmakeRandomClustering(G, k)\n\t\t\n\t\tGenerate a clustering with `k` clusters to which nodes are assigned randomly.\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tThe graph for which the clustering shall be generated.\n\t\tk : int\n\t\t\tThe number of clusters that shall be generated.\n\n\t\tReturns\n\t\t-------\n\t\tnetworkit.Partition\n\t\t\tThe generated partition.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_19ClusteringGenerator_5makeRandomClustering = {"makeRandomClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19ClusteringGenerator_5makeRandomClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_19ClusteringGenerator_4makeRandomClustering};
static PyObject *__pyx_pw_9networkit_9community_19ClusteringGenerator_5makeRandomClustering(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  __pyx_t_9networkit_10structures_count __pyx_v_k;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("makeRandomClustering (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_k,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 167, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 167, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("makeRandomClustering", 1, 2, 2, 1); __PYX_ERR(0, 167, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "makeRandomClustering") < 0)) __PYX_ERR(0, 167, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_k = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_k == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 167, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("makeRandomClustering", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 167, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.ClusteringGenerator.makeRandomClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 167, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_19ClusteringGenerator_4makeRandomClustering(((struct __pyx_obj_9networkit_9community_ClusteringGenerator *)__pyx_v_self), __pyx_v_G, __pyx_v_k);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19ClusteringGenerator_4makeRandomClustering(struct __pyx_obj_9networkit_9community_ClusteringGenerator *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_count __pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  NetworKit::Partition __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("makeRandomClustering", 1);

  /* "networkit/community.pyx":185
 * 			The generated partition.
 * 		"""
 * 		return Partition().setThis(self._this.makeRandomClustering(G._this, k))             # <<<<<<<<<<<<<<
 * 	def makeContinuousBalancedClustering(self, Graph G, count k):
 * 		"""
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_10structures_Partition)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = __pyx_v_self->_this.makeRandomClustering(__pyx_v_G->_this, __pyx_v_k);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 185, __pyx_L1_error)
  }
  __pyx_t_3 = ((struct __pyx_vtabstruct_9networkit_10structures_Partition *)((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_1)->__pyx_vtab)->setThis(((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_1), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":167
 * 		"""
 * 		return Partition().setThis(self._this.makeOneClustering(G._this))
 * 	def makeRandomClustering(self, Graph G, count k):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeRandomClustering(G, k)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.community.ClusteringGenerator.makeRandomClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":186
 * 		"""
 * 		return Partition().setThis(self._this.makeRandomClustering(G._this, k))
 * 	def makeContinuousBalancedClustering(self, Graph G, count k):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeContinuousBalancedClustering(G, k)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19ClusteringGenerator_7makeContinuousBalancedClustering(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_19ClusteringGenerator_6makeContinuousBalancedClustering, "  \n\t\tmakeContinuousBalancedClustering(G, k)\n\t\t\n\t\tGenerate a clustering with `k` clusters to which nodes are assigned in continuous blocks\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tThe graph for which the clustering shall be generated.\n\t\tk : int\n\t\t\tThe number of clusters that shall be generated.\n\n\t\tReturns\n\t\t-------\n\t\tnetworkit.Partition\n\t\t\tThe generated partition.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_19ClusteringGenerator_7makeContinuousBalancedClustering = {"makeContinuousBalancedClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19ClusteringGenerator_7makeContinuousBalancedClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_19ClusteringGenerator_6makeContinuousBalancedClustering};
static PyObject *__pyx_pw_9networkit_9community_19ClusteringGenerator_7makeContinuousBalancedClustering(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  __pyx_t_9networkit_10structures_count __pyx_v_k;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("makeContinuousBalancedClustering (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_k,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 186, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 186, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("makeContinuousBalancedClustering", 1, 2, 2, 1); __PYX_ERR(0, 186, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "makeContinuousBalancedClustering") < 0)) __PYX_ERR(0, 186, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_k = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_k == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 186, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("makeContinuousBalancedClustering", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 186, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.ClusteringGenerator.makeContinuousBalancedClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 186, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_19ClusteringGenerator_6makeContinuousBalancedClustering(((struct __pyx_obj_9networkit_9community_ClusteringGenerator *)__pyx_v_self), __pyx_v_G, __pyx_v_k);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19ClusteringGenerator_6makeContinuousBalancedClustering(struct __pyx_obj_9networkit_9community_ClusteringGenerator *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_count __pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  NetworKit::Partition __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("makeContinuousBalancedClustering", 1);

  /* "networkit/community.pyx":204
 * 			The generated partition.
 * 		"""
 * 		return Partition().setThis(self._this.makeContinuousBalancedClustering(G._this, k))             # <<<<<<<<<<<<<<
 * 	def makeNoncontinuousBalancedClustering(self, Graph G, count k):
 * 		"""
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_10structures_Partition)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = __pyx_v_self->_this.makeContinuousBalancedClustering(__pyx_v_G->_this, __pyx_v_k);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 204, __pyx_L1_error)
  }
  __pyx_t_3 = ((struct __pyx_vtabstruct_9networkit_10structures_Partition *)((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_1)->__pyx_vtab)->setThis(((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_1), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":186
 * 		"""
 * 		return Partition().setThis(self._this.makeRandomClustering(G._this, k))
 * 	def makeContinuousBalancedClustering(self, Graph G, count k):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeContinuousBalancedClustering(G, k)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.community.ClusteringGenerator.makeContinuousBalancedClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":205
 * 		"""
 * 		return Partition().setThis(self._this.makeContinuousBalancedClustering(G._this, k))
 * 	def makeNoncontinuousBalancedClustering(self, Graph G, count k):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeNoncontinuousBalancedClustering(G, k)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19ClusteringGenerator_9makeNoncontinuousBalancedClustering(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_19ClusteringGenerator_8makeNoncontinuousBalancedClustering, "  \n\t\tmakeNoncontinuousBalancedClustering(G, k)\n\t\t\n\t\tGenerate a clustering with `k` clusters, the ith node is assigned to cluster i % k. This means that\n\t\tfor k**2 nodes, this clustering is complementary to the continuous clustering in the sense that no pair\n\t\tof nodes that is in the same cluster in one of the clusterings is in the same cluster in the other clustering.\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tThe graph for which the clustering shall be generated.\n\t\tk : int\n\t\t\tThe number of clusters that shall be generated.\n\n\t\tReturns\n\t\t-------\n\t\tnetworkit.Partition\n\t\t\tThe generated partition.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_19ClusteringGenerator_9makeNoncontinuousBalancedClustering = {"makeNoncontinuousBalancedClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19ClusteringGenerator_9makeNoncontinuousBalancedClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_19ClusteringGenerator_8makeNoncontinuousBalancedClustering};
static PyObject *__pyx_pw_9networkit_9community_19ClusteringGenerator_9makeNoncontinuousBalancedClustering(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  __pyx_t_9networkit_10structures_count __pyx_v_k;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("makeNoncontinuousBalancedClustering (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_k,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 205, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 205, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("makeNoncontinuousBalancedClustering", 1, 2, 2, 1); __PYX_ERR(0, 205, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "makeNoncontinuousBalancedClustering") < 0)) __PYX_ERR(0, 205, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_k = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_k == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 205, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("makeNoncontinuousBalancedClustering", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 205, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.ClusteringGenerator.makeNoncontinuousBalancedClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 205, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_19ClusteringGenerator_8makeNoncontinuousBalancedClustering(((struct __pyx_obj_9networkit_9community_ClusteringGenerator *)__pyx_v_self), __pyx_v_G, __pyx_v_k);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19ClusteringGenerator_8makeNoncontinuousBalancedClustering(struct __pyx_obj_9networkit_9community_ClusteringGenerator *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_count __pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  NetworKit::Partition __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("makeNoncontinuousBalancedClustering", 1);

  /* "networkit/community.pyx":225
 * 			The generated partition.
 * 		"""
 * 		return Partition().setThis(self._this.makeNoncontinuousBalancedClustering(G._this, k))             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/GraphClusteringTools.hpp>" namespace "NetworKit::GraphClusteringTools":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_10structures_Partition)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = __pyx_v_self->_this.makeNoncontinuousBalancedClustering(__pyx_v_G->_this, __pyx_v_k);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 225, __pyx_L1_error)
  }
  __pyx_t_3 = ((struct __pyx_vtabstruct_9networkit_10structures_Partition *)((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_1)->__pyx_vtab)->setThis(((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_1), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":205
 * 		"""
 * 		return Partition().setThis(self._this.makeContinuousBalancedClustering(G._this, k))
 * 	def makeNoncontinuousBalancedClustering(self, Graph G, count k):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeNoncontinuousBalancedClustering(G, k)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.community.ClusteringGenerator.makeNoncontinuousBalancedClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19ClusteringGenerator_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_19ClusteringGenerator_11__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19ClusteringGenerator_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_19ClusteringGenerator_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_19ClusteringGenerator_10__reduce_cython__(((struct __pyx_obj_9networkit_9community_ClusteringGenerator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19ClusteringGenerator_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_ClusteringGenerator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.ClusteringGenerator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19ClusteringGenerator_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_19ClusteringGenerator_13__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19ClusteringGenerator_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_19ClusteringGenerator_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.ClusteringGenerator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_19ClusteringGenerator_12__setstate_cython__(((struct __pyx_obj_9networkit_9community_ClusteringGenerator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19ClusteringGenerator_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_ClusteringGenerator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.ClusteringGenerator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":239
 * 
 * cdef class GraphClusteringTools:
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def getImbalance(Partition zeta, Graph G = None):
 * 		"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_1getImbalance(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_20GraphClusteringTools_getImbalance, "  \n\t\tgetImbalance(zeta, G)\n\n\t\tGet the imbalance of clusters in the given partition.\n\n\t\tParameters\n\t\t----------\n\t\tzeta : networkit.Partition\n\t\t\tThe first partition.\n\t\tG : networkit.Graph, optional\n\t\t\tThe input graph to compare the imbalance to. Default: None\n\n\t\tReturns\n\t\t-------\n\t\tint\n\t\t\tImbalance of the partition.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_20GraphClusteringTools_1getImbalance = {"getImbalance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_1getImbalance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_20GraphClusteringTools_getImbalance};
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_1getImbalance(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta = 0;
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getImbalance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zeta,&__pyx_n_s_G,0};

    /* "networkit/community.pyx":240
 * cdef class GraphClusteringTools:
 * 	@staticmethod
 * 	def getImbalance(Partition zeta, Graph G = None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getImbalance(zeta, G)
 */
    values[1] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((struct __pyx_obj_9networkit_5graph_Graph *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 239, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 239, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getImbalance") < 0)) __PYX_ERR(0, 239, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_zeta = ((struct __pyx_obj_9networkit_10structures_Partition *)values[0]);
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getImbalance", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 239, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.getImbalance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zeta), __pyx_ptype_9networkit_10structures_Partition, 1, "zeta", 0))) __PYX_ERR(0, 240, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 240, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_20GraphClusteringTools_getImbalance(__pyx_v_zeta, __pyx_v_G);

  /* "networkit/community.pyx":239
 * 
 * cdef class GraphClusteringTools:
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def getImbalance(Partition zeta, Graph G = None):
 * 		"""
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_getImbalance(struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  float __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getImbalance", 1);

  /* "networkit/community.pyx":258
 * 			Imbalance of the partition.
 * 		"""
 * 		if graph is not None:             # <<<<<<<<<<<<<<
 * 			return getImbalance(zeta._this, G._this)
 * 		else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_graph); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "networkit/community.pyx":259
 * 		"""
 * 		if graph is not None:
 * 			return getImbalance(zeta._this, G._this)             # <<<<<<<<<<<<<<
 * 		else:
 * 			return getImbalance(zeta._this)
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_3 = NetworKit::GraphClusteringTools::getImbalance(__pyx_v_zeta->_this, __pyx_v_G->_this);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 259, __pyx_L1_error)
    }
    __pyx_t_1 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "networkit/community.pyx":258
 * 			Imbalance of the partition.
 * 		"""
 * 		if graph is not None:             # <<<<<<<<<<<<<<
 * 			return getImbalance(zeta._this, G._this)
 * 		else:
 */
  }

  /* "networkit/community.pyx":261
 * 			return getImbalance(zeta._this, G._this)
 * 		else:
 * 			return getImbalance(zeta._this)             # <<<<<<<<<<<<<<
 * 
 * 	@staticmethod
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_3 = NetworKit::GraphClusteringTools::getImbalance(__pyx_v_zeta->_this);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 261, __pyx_L1_error)
    }
    __pyx_t_1 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "networkit/community.pyx":239
 * 
 * cdef class GraphClusteringTools:
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def getImbalance(Partition zeta, Graph G = None):
 * 		"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.getImbalance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":263
 * 			return getImbalance(zeta._this)
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def communicationGraph(Graph graph, Partition zeta):
 * 		"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_3communicationGraph(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_20GraphClusteringTools_2communicationGraph, "  \n\t\tcommunicationGraph(graph, zeta)\n\n\t\tGet the communication graph for a given graph and its partition.\n\t\tA communication graph consists of a number of nodes, which equal\n\t\tthe number of clusters in the partition. The edges between nodes \n\t\tin the communication graph account for the total edge weight for all \n\t\tedges between two clusters. For unweighted graphs, the edge weight in\n\t\tthe communication graph is equal to the number of edges between two\n\t\tclusters.\n\n\t\tParameters\n\t\t----------\n\t\tgraph : networkit.Graph\n\t\t\tThe input graph.\n\t\tzeta : networkit.Partition\n\t\t\tPartition, which contains information about clusters in the graph.\n\n\t\tReturns\n\t\t-------\n\t\tnetworkit.Graph\n\t\t\tCommunication graph given by the input graph and its partition.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_20GraphClusteringTools_3communicationGraph = {"communicationGraph", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_3communicationGraph, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_20GraphClusteringTools_2communicationGraph};
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_3communicationGraph(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_graph = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("communicationGraph (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_zeta,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_graph)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("communicationGraph", 1, 2, 2, 1); __PYX_ERR(0, 263, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "communicationGraph") < 0)) __PYX_ERR(0, 263, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_zeta = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("communicationGraph", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 263, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.communicationGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_9networkit_5graph_Graph, 1, "graph", 0))) __PYX_ERR(0, 264, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zeta), __pyx_ptype_9networkit_10structures_Partition, 1, "zeta", 0))) __PYX_ERR(0, 264, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_20GraphClusteringTools_2communicationGraph(__pyx_v_graph, __pyx_v_zeta);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_2communicationGraph(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_graph, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  NetworKit::Graph __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("communicationGraph", 1);

  /* "networkit/community.pyx":288
 * 			Communication graph given by the input graph and its partition.
 * 		"""
 * 		return Graph().setThis(communicationGraph(graph._this, zeta._this))             # <<<<<<<<<<<<<<
 * 	@staticmethod
 * 	def weightedDegreeWithCluster(Graph graph, Partition zeta, node u, index cid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_5graph_Graph)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = NetworKit::GraphClusteringTools::communicationGraph(__pyx_v_graph->_this, __pyx_v_zeta->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 288, __pyx_L1_error)
  }
  __pyx_t_3 = ((struct __pyx_vtabstruct_9networkit_5graph_Graph *)((struct __pyx_obj_9networkit_5graph_Graph *)__pyx_t_1)->__pyx_vtab)->setThis(((struct __pyx_obj_9networkit_5graph_Graph *)__pyx_t_1), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":263
 * 			return getImbalance(zeta._this)
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def communicationGraph(Graph graph, Partition zeta):
 * 		"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.communicationGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":289
 * 		"""
 * 		return Graph().setThis(communicationGraph(graph._this, zeta._this))
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def weightedDegreeWithCluster(Graph graph, Partition zeta, node u, index cid):
 * 		"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_5weightedDegreeWithCluster(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_20GraphClusteringTools_4weightedDegreeWithCluster, "  \n\t\tweightedDegreeWithCluster(graph, zeta, u, cid)\n\n\t\tGet weightedDegree of node u for a cluster (represented by a partition) of index cid.\n\n\t\tParameters\n\t\t----------\n\t\tgraph : networkit.Graph\n\t\t\tThe input graph.\n\t\tzeta : networkit.Partition\n\t\t\tPartition, which contains information about clusters in the graph.\n\t\tu : int\n\t\t\tThe input node.\n\t\tcid : int\n\t\t\tIndex of cluster.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tweighted degree of node u for cluster index cid.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_20GraphClusteringTools_5weightedDegreeWithCluster = {"weightedDegreeWithCluster", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_5weightedDegreeWithCluster, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_20GraphClusteringTools_4weightedDegreeWithCluster};
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_5weightedDegreeWithCluster(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_graph = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta = 0;
  __pyx_t_9networkit_10structures_node __pyx_v_u;
  __pyx_t_9networkit_10structures_index __pyx_v_cid;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("weightedDegreeWithCluster (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_zeta,&__pyx_n_s_u,&__pyx_n_s_cid,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_graph)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightedDegreeWithCluster", 1, 4, 4, 1); __PYX_ERR(0, 289, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_u)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightedDegreeWithCluster", 1, 4, 4, 2); __PYX_ERR(0, 289, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cid)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("weightedDegreeWithCluster", 1, 4, 4, 3); __PYX_ERR(0, 289, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "weightedDegreeWithCluster") < 0)) __PYX_ERR(0, 289, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_graph = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_zeta = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
    __pyx_v_u = __Pyx_PyInt_As_uint64_t(values[2]); if (unlikely((__pyx_v_u == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L3_error)
    __pyx_v_cid = __Pyx_PyInt_As_uint64_t(values[3]); if (unlikely((__pyx_v_cid == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("weightedDegreeWithCluster", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 289, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.weightedDegreeWithCluster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_9networkit_5graph_Graph, 1, "graph", 0))) __PYX_ERR(0, 290, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zeta), __pyx_ptype_9networkit_10structures_Partition, 1, "zeta", 0))) __PYX_ERR(0, 290, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_20GraphClusteringTools_4weightedDegreeWithCluster(__pyx_v_graph, __pyx_v_zeta, __pyx_v_u, __pyx_v_cid);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_4weightedDegreeWithCluster(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_graph, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, __pyx_t_9networkit_10structures_node __pyx_v_u, __pyx_t_9networkit_10structures_index __pyx_v_cid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("weightedDegreeWithCluster", 1);

  /* "networkit/community.pyx":312
 * 			weighted degree of node u for cluster index cid.
 * 		"""
 * 		return weightedDegreeWithCluster(graph._this, zeta._this, u, cid)             # <<<<<<<<<<<<<<
 * 	@staticmethod
 * 	def isProperClustering(Graph G, Partition zeta):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(NetworKit::GraphClusteringTools::weightedDegreeWithCluster(__pyx_v_graph->_this, __pyx_v_zeta->_this, __pyx_v_u, __pyx_v_cid)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":289
 * 		"""
 * 		return Graph().setThis(communicationGraph(graph._this, zeta._this))
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def weightedDegreeWithCluster(Graph graph, Partition zeta, node u, index cid):
 * 		"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.weightedDegreeWithCluster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":313
 * 		"""
 * 		return weightedDegreeWithCluster(graph._this, zeta._this, u, cid)
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def isProperClustering(Graph G, Partition zeta):
 * 		"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_7isProperClustering(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_20GraphClusteringTools_6isProperClustering, "  \n\t\tisProperClustering(G, zeta)\n\n\t\tCheck whether a partition is a proper clustering for a given graph.\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tThe input graph.\n\t\tzeta : networkit.Partition\n\t\t\tThe first partition.\n\n\t\tReturns\n\t\t-------\n\t\tbool\n\t\t\tTrue if the partition is a proper clustering, False if not.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_20GraphClusteringTools_7isProperClustering = {"isProperClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_7isProperClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_20GraphClusteringTools_6isProperClustering};
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_7isProperClustering(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isProperClustering (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_zeta,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 313, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 313, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("isProperClustering", 1, 2, 2, 1); __PYX_ERR(0, 313, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "isProperClustering") < 0)) __PYX_ERR(0, 313, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_zeta = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isProperClustering", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 313, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.isProperClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 314, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zeta), __pyx_ptype_9networkit_10structures_Partition, 1, "zeta", 0))) __PYX_ERR(0, 314, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_20GraphClusteringTools_6isProperClustering(__pyx_v_G, __pyx_v_zeta);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_6isProperClustering(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isProperClustering", 1);

  /* "networkit/community.pyx":332
 * 			True if the partition is a proper clustering, False if not.
 * 		"""
 * 		return isProperClustering(G._this, zeta._this)             # <<<<<<<<<<<<<<
 * 	@staticmethod
 * 	def isSingletonClustering(Graph G, Partition zeta):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(NetworKit::GraphClusteringTools::isProperClustering(__pyx_v_G->_this, __pyx_v_zeta->_this)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":313
 * 		"""
 * 		return weightedDegreeWithCluster(graph._this, zeta._this, u, cid)
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def isProperClustering(Graph G, Partition zeta):
 * 		"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.isProperClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":333
 * 		"""
 * 		return isProperClustering(G._this, zeta._this)
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def isSingletonClustering(Graph G, Partition zeta):
 * 		"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_9isSingletonClustering(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_20GraphClusteringTools_8isSingletonClustering, "  \n\t\tisSingletonClustering(G, zeta)\n\n\t\tCheck whether a partition is a singleton clustering for a given graph.\n\n\t\tParameters\n\t\t----------\n\t\tG: networkit.Graph\n\t\t\tThe input graph.\n\t\tzeta: networkit.Partition\n\t\t\tThe first partition.\n\n\t\tReturns\n\t\t-------\n\t\tbool\n\t\t\tTrue if the partition is a singleton clustering, False if not.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_20GraphClusteringTools_9isSingletonClustering = {"isSingletonClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_9isSingletonClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_20GraphClusteringTools_8isSingletonClustering};
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_9isSingletonClustering(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isSingletonClustering (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_zeta,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 333, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 333, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("isSingletonClustering", 1, 2, 2, 1); __PYX_ERR(0, 333, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "isSingletonClustering") < 0)) __PYX_ERR(0, 333, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_zeta = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isSingletonClustering", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 333, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.isSingletonClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 334, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zeta), __pyx_ptype_9networkit_10structures_Partition, 1, "zeta", 0))) __PYX_ERR(0, 334, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_20GraphClusteringTools_8isSingletonClustering(__pyx_v_G, __pyx_v_zeta);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_8isSingletonClustering(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isSingletonClustering", 1);

  /* "networkit/community.pyx":352
 * 			True if the partition is a singleton clustering, False if not.
 * 		"""
 * 		return isSingletonClustering(G._this, zeta._this)             # <<<<<<<<<<<<<<
 * 	@staticmethod
 * 	def isOneClustering(Graph G, Partition zeta):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(NetworKit::GraphClusteringTools::isSingletonClustering(__pyx_v_G->_this, __pyx_v_zeta->_this)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":333
 * 		"""
 * 		return isProperClustering(G._this, zeta._this)
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def isSingletonClustering(Graph G, Partition zeta):
 * 		"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.isSingletonClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":353
 * 		"""
 * 		return isSingletonClustering(G._this, zeta._this)
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def isOneClustering(Graph G, Partition zeta):
 * 		"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_11isOneClustering(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_20GraphClusteringTools_10isOneClustering, "  \n\t\tisOneClusteringClustering(G, zeta)\n\n\t\tCheck whether a partition is a one clustering for a given graph.\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tThe input graph.\n\t\tzeta : networkit.Partition\n\t\t\tThe first partition.\n\n\t\tReturns\n\t\t-------\n\t\tbool\n\t\t\tTrue if the partition is a one clustering, False if not.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_20GraphClusteringTools_11isOneClustering = {"isOneClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_11isOneClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_20GraphClusteringTools_10isOneClustering};
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_11isOneClustering(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isOneClustering (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_zeta,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 353, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 353, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("isOneClustering", 1, 2, 2, 1); __PYX_ERR(0, 353, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "isOneClustering") < 0)) __PYX_ERR(0, 353, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_zeta = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isOneClustering", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 353, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.isOneClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 354, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zeta), __pyx_ptype_9networkit_10structures_Partition, 1, "zeta", 0))) __PYX_ERR(0, 354, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_20GraphClusteringTools_10isOneClustering(__pyx_v_G, __pyx_v_zeta);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_10isOneClustering(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isOneClustering", 1);

  /* "networkit/community.pyx":372
 * 			True if the partition is a one clustering, False if not.
 * 		"""
 * 		return isOneClustering(G._this, zeta._this)             # <<<<<<<<<<<<<<
 * 	@staticmethod
 * 	def equalClustering(Partition zeta, Partition eta, Graph G):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(NetworKit::GraphClusteringTools::isOneClustering(__pyx_v_G->_this, __pyx_v_zeta->_this)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":353
 * 		"""
 * 		return isSingletonClustering(G._this, zeta._this)
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def isOneClustering(Graph G, Partition zeta):
 * 		"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.isOneClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":373
 * 		"""
 * 		return isOneClustering(G._this, zeta._this)
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def equalClustering(Partition zeta, Partition eta, Graph G):
 * 		"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_13equalClustering(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_20GraphClusteringTools_12equalClustering, "  \n\t\tequalClusteringClustering(zeta, eta, G)\n\n\t\tCheck whether two paritions are equal for a given graph.\n\n\t\tParameters\n\t\t----------\n\t\tzeta : networkit.Partition\n\t\t\tThe first partition.\n\t\teta : networkit.Partition\n\t\t\tThe second partition.\n\t\tG : networkit.Graph\n\t\t\tThe input graph.\n\n\t\tReturns\n\t\t-------\n\t\tbool\n\t\t\tTrue if both partitions are the same, False if not.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_20GraphClusteringTools_13equalClustering = {"equalClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_13equalClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_20GraphClusteringTools_12equalClustering};
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_13equalClustering(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_eta = 0;
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("equalClustering (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zeta,&__pyx_n_s_eta,&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_eta)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("equalClustering", 1, 3, 3, 1); __PYX_ERR(0, 373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("equalClustering", 1, 3, 3, 2); __PYX_ERR(0, 373, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "equalClustering") < 0)) __PYX_ERR(0, 373, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_zeta = ((struct __pyx_obj_9networkit_10structures_Partition *)values[0]);
    __pyx_v_eta = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("equalClustering", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 373, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.equalClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zeta), __pyx_ptype_9networkit_10structures_Partition, 1, "zeta", 0))) __PYX_ERR(0, 374, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eta), __pyx_ptype_9networkit_10structures_Partition, 1, "eta", 0))) __PYX_ERR(0, 374, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 374, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_20GraphClusteringTools_12equalClustering(__pyx_v_zeta, __pyx_v_eta, __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_12equalClustering(struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_eta, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("equalClustering", 1);

  /* "networkit/community.pyx":394
 * 			True if both partitions are the same, False if not.
 * 		"""
 * 		return equalClusterings(zeta._this, eta._this, G._this)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/PartitionIntersection.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(NetworKit::GraphClusteringTools::equalClusterings(__pyx_v_zeta->_this, __pyx_v_eta->_this, __pyx_v_G->_this)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":373
 * 		"""
 * 		return isOneClustering(G._this, zeta._this)
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def equalClustering(Partition zeta, Partition eta, Graph G):
 * 		"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.equalClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_15__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_20GraphClusteringTools_15__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_15__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_15__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_20GraphClusteringTools_14__reduce_cython__(((struct __pyx_obj_9networkit_9community_GraphClusteringTools *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_14__reduce_cython__(struct __pyx_obj_9networkit_9community_GraphClusteringTools *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_GraphClusteringTools, (type(self), 0xe3b0c44, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_GraphClusteringTools, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_GraphClusteringTools, (type(self), 0xe3b0c44, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_GraphClusteringTools, (type(self), 0xe3b0c44, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_GraphClusteringTo); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_GraphClusteringTools, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_GraphClusteringTools, (type(self), 0xe3b0c44, None), state
 *     else:
 *         return __pyx_unpickle_GraphClusteringTools, (type(self), 0xe3b0c44, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_GraphClusteringTools__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_GraphClusteringTo); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_GraphClusteringTools, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_GraphClusteringTools__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_17__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_20GraphClusteringTools_17__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_17__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_20GraphClusteringTools_17__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_20GraphClusteringTools_16__setstate_cython__(((struct __pyx_obj_9networkit_9community_GraphClusteringTools *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_20GraphClusteringTools_16__setstate_cython__(struct __pyx_obj_9networkit_9community_GraphClusteringTools *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_GraphClusteringTools, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_GraphClusteringTools__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9networkit_9community___pyx_unpickle_GraphClusteringTools__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_GraphClusteringTools, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_GraphClusteringTools__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.community.GraphClusteringTools.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":410
 * 	"""
 * 	cdef _PartitionIntersection _this
 * 	def calculate(self, Partition zeta, Partition eta):             # <<<<<<<<<<<<<<
 * 		"""
 * 		calculate(zeta, eta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_21PartitionIntersection_1calculate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_21PartitionIntersection_calculate, "  \n\t\tcalculate(zeta, eta)\n\t\t\n\t\tCalculate the intersection of two partitions `zeta` and `eta`.\n\n\t\tParameters\n\t\t----------\n\t\tzeta : networkit.Partition\n\t\t\tThe first partition.\n\t\teta : networkit.Partition\n\t\t\tThe second partition.\n\n\t\tReturns\n\t\t-------\n\t\tnetworkit.Partition\n\t\t\tThe intersection of zeta and eta.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_21PartitionIntersection_1calculate = {"calculate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_21PartitionIntersection_1calculate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_21PartitionIntersection_calculate};
static PyObject *__pyx_pw_9networkit_9community_21PartitionIntersection_1calculate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_eta = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zeta,&__pyx_n_s_eta,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_eta)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("calculate", 1, 2, 2, 1); __PYX_ERR(0, 410, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "calculate") < 0)) __PYX_ERR(0, 410, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_zeta = ((struct __pyx_obj_9networkit_10structures_Partition *)values[0]);
    __pyx_v_eta = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calculate", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 410, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.PartitionIntersection.calculate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zeta), __pyx_ptype_9networkit_10structures_Partition, 1, "zeta", 0))) __PYX_ERR(0, 410, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eta), __pyx_ptype_9networkit_10structures_Partition, 1, "eta", 0))) __PYX_ERR(0, 410, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_21PartitionIntersection_calculate(((struct __pyx_obj_9networkit_9community_PartitionIntersection *)__pyx_v_self), __pyx_v_zeta, __pyx_v_eta);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_21PartitionIntersection_calculate(struct __pyx_obj_9networkit_9community_PartitionIntersection *__pyx_v_self, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_eta) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  NetworKit::Partition __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate", 1);

  /* "networkit/community.pyx":428
 * 			The intersection of zeta and eta.
 * 		"""
 * 		return Partition().setThis(self._this.calculate(zeta._this, eta._this))             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/Coverage.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_10structures_Partition)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = __pyx_v_self->_this.calculate(__pyx_v_zeta->_this, __pyx_v_eta->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 428, __pyx_L1_error)
  }
  __pyx_t_3 = ((struct __pyx_vtabstruct_9networkit_10structures_Partition *)((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_1)->__pyx_vtab)->setThis(((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_1), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":410
 * 	"""
 * 	cdef _PartitionIntersection _this
 * 	def calculate(self, Partition zeta, Partition eta):             # <<<<<<<<<<<<<<
 * 		"""
 * 		calculate(zeta, eta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.community.PartitionIntersection.calculate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_21PartitionIntersection_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_21PartitionIntersection_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_21PartitionIntersection_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_21PartitionIntersection_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_21PartitionIntersection_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_PartitionIntersection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_21PartitionIntersection_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PartitionIntersection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.PartitionIntersection.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_21PartitionIntersection_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_21PartitionIntersection_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_21PartitionIntersection_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_21PartitionIntersection_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.PartitionIntersection.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_21PartitionIntersection_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_PartitionIntersection *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_21PartitionIntersection_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PartitionIntersection *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.PartitionIntersection.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":443
 * 	cdef _Coverage _this
 * 
 * 	def getQuality(self, Partition zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(Partition zeta, Graph G)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_8Coverage_1getQuality(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_8Coverage_getQuality, "\n\t\tgetQuality(Partition zeta, Graph G)\n\n\t\tCalculates the coverage in the given Partition of the given\n\t\tGraph.\n\n\t\tParameters\n\t\t----------\n\t\tzeta : networkit.Partition\n\t\t\tThe Partition for which the coverage shall be calculated.\n\t\tG : networkit.Graph\n\t\t\tThe Graph to which zeta belongs.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tThe coverage in the given Partition.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_8Coverage_1getQuality = {"getQuality", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_8Coverage_1getQuality, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_8Coverage_getQuality};
static PyObject *__pyx_pw_9networkit_9community_8Coverage_1getQuality(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta = 0;
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getQuality (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zeta,&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getQuality", 1, 2, 2, 1); __PYX_ERR(0, 443, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getQuality") < 0)) __PYX_ERR(0, 443, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_zeta = ((struct __pyx_obj_9networkit_10structures_Partition *)values[0]);
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getQuality", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 443, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.Coverage.getQuality", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zeta), __pyx_ptype_9networkit_10structures_Partition, 1, "zeta", 0))) __PYX_ERR(0, 443, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 443, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_8Coverage_getQuality(((struct __pyx_obj_9networkit_9community_Coverage *)__pyx_v_self), __pyx_v_zeta, __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_8Coverage_getQuality(struct __pyx_obj_9networkit_9community_Coverage *__pyx_v_self, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getQuality", 1);

  /* "networkit/community.pyx":462
 * 			The coverage in the given Partition.
 * 		"""
 * 		return self._this.getQuality(zeta._this, G._this)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_this.getQuality(__pyx_v_zeta->_this, __pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 462, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":443
 * 	cdef _Coverage _this
 * 
 * 	def getQuality(self, Partition zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(Partition zeta, Graph G)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.Coverage.getQuality", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_8Coverage_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_8Coverage_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_8Coverage_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_8Coverage_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_8Coverage_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_Coverage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_8Coverage_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_Coverage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.Coverage.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_8Coverage_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_8Coverage_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_8Coverage_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_8Coverage_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.Coverage.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_8Coverage_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_Coverage *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_8Coverage_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_Coverage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.Coverage.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":478
 * 	cdef _EdgeCut _this
 * 
 * 	def getQuality(self, Partition zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(zeta, G)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_7EdgeCut_1getQuality(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_7EdgeCut_getQuality, "\n\t\tgetQuality(zeta, G)\n\n\t\tCalculates the edgeCut in the given Partition of the given\n\t\tGraph.\n\n\t\tParameters\n\t\t----------\n\t\tzeta : networkit.Partition\n\t\t\tThe Partition for which the edgeCut shall be calculated.\n\t\tG : networkit.Graph\n\t\t\tThe Graph to which zeta belongs.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tThe edgeCut in the given Partition.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_7EdgeCut_1getQuality = {"getQuality", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_7EdgeCut_1getQuality, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_7EdgeCut_getQuality};
static PyObject *__pyx_pw_9networkit_9community_7EdgeCut_1getQuality(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta = 0;
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getQuality (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zeta,&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 478, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 478, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getQuality", 1, 2, 2, 1); __PYX_ERR(0, 478, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getQuality") < 0)) __PYX_ERR(0, 478, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_zeta = ((struct __pyx_obj_9networkit_10structures_Partition *)values[0]);
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getQuality", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 478, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.EdgeCut.getQuality", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zeta), __pyx_ptype_9networkit_10structures_Partition, 1, "zeta", 0))) __PYX_ERR(0, 478, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 478, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_7EdgeCut_getQuality(((struct __pyx_obj_9networkit_9community_EdgeCut *)__pyx_v_self), __pyx_v_zeta, __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_7EdgeCut_getQuality(struct __pyx_obj_9networkit_9community_EdgeCut *__pyx_v_self, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getQuality", 1);

  /* "networkit/community.pyx":497
 * 			The edgeCut in the given Partition.
 * 		"""
 * 		return self._this.getQuality(zeta._this, G._this)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_this.getQuality(__pyx_v_zeta->_this, __pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 497, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":478
 * 	cdef _EdgeCut _this
 * 
 * 	def getQuality(self, Partition zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(zeta, G)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.EdgeCut.getQuality", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_7EdgeCut_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_7EdgeCut_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_7EdgeCut_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_7EdgeCut_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_7EdgeCut_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_EdgeCut *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_7EdgeCut_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_EdgeCut *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.EdgeCut.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_7EdgeCut_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_7EdgeCut_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_7EdgeCut_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_7EdgeCut_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.EdgeCut.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_7EdgeCut_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_EdgeCut *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_7EdgeCut_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_EdgeCut *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.EdgeCut.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":524
 * 	cdef _Modularity _this
 * 
 * 	def getQuality(self, Partition zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(zeta,  G)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_10Modularity_1getQuality(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_10Modularity_getQuality, "\n\t\tgetQuality(zeta,  G)\n\n\t\tCalculates the modularity in the given Partition of the given\n\t\tGraph.\n\n\t\tParameters\n\t\t----------\n\t\tzeta : networkit.Partition\n\t\t\tThe Partition for which the modularity shall be calculated\n\t\tG : networkit.Graph\n\t\t\tThe Graph to which zeta belongs\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tThe modularity in the given Partition\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_10Modularity_1getQuality = {"getQuality", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_10Modularity_1getQuality, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_10Modularity_getQuality};
static PyObject *__pyx_pw_9networkit_9community_10Modularity_1getQuality(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta = 0;
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getQuality (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zeta,&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getQuality", 1, 2, 2, 1); __PYX_ERR(0, 524, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getQuality") < 0)) __PYX_ERR(0, 524, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_zeta = ((struct __pyx_obj_9networkit_10structures_Partition *)values[0]);
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getQuality", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 524, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.Modularity.getQuality", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zeta), __pyx_ptype_9networkit_10structures_Partition, 1, "zeta", 0))) __PYX_ERR(0, 524, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 524, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_10Modularity_getQuality(((struct __pyx_obj_9networkit_9community_Modularity *)__pyx_v_self), __pyx_v_zeta, __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_10Modularity_getQuality(struct __pyx_obj_9networkit_9community_Modularity *__pyx_v_self, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  double __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getQuality", 1);

  /* "networkit/community.pyx":544
 * 		"""
 * 		cdef double ret
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			ret = self._this.getQuality(zeta._this, G._this)
 * 		return ret
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "networkit/community.pyx":545
 * 		cdef double ret
 * 		with nogil:
 * 			ret = self._this.getQuality(zeta._this, G._this)             # <<<<<<<<<<<<<<
 * 		return ret
 * 
 */
        try {
          __pyx_t_1 = __pyx_v_self->_this.getQuality(__pyx_v_zeta->_this, __pyx_v_G->_this);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 545, __pyx_L4_error)
        }
        __pyx_v_ret = __pyx_t_1;
      }

      /* "networkit/community.pyx":544
 * 		"""
 * 		cdef double ret
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			ret = self._this.getQuality(zeta._this, G._this)
 * 		return ret
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "networkit/community.pyx":546
 * 		with nogil:
 * 			ret = self._this.getQuality(zeta._this, G._this)
 * 		return ret             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/HubDominance.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":524
 * 	cdef _Modularity _this
 * 
 * 	def getQuality(self, Partition zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(zeta,  G)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.Modularity.getQuality", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_10Modularity_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_10Modularity_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_10Modularity_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_10Modularity_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_10Modularity_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_Modularity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_10Modularity_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_Modularity *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.Modularity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_10Modularity_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_10Modularity_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_10Modularity_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_10Modularity_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.Modularity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_10Modularity_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_Modularity *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_10Modularity_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_Modularity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.Modularity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":574
 * 	cdef _HubDominance _this
 * 
 * 	def getQuality(self, PartitionCover zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(zeta, G)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_12HubDominance_1getQuality(PyObject *__pyx_v_signatures, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_12HubDominance_getQuality, "\n\t\tgetQuality(zeta, G)\n\n\t\tCalculates the dominance of hubs in the given Partition or Cover of the given\n\t\tGraph.\n\n\t\tParameters\n\t\t----------\n\t\tzeta : networkit.Partition or networkit.Cover\n\t\t\tThe Partition or Cover for which the hub dominance shall be calculated.\n\t\tG : networkit.Graph\n\t\t\tThe Graph to which zeta belongs.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tThe average hub dominance in the given Partition or Cover.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_12HubDominance_1getQuality = {"getQuality", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_9community_12HubDominance_1getQuality, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_9community_12HubDominance_getQuality};
static PyObject *__pyx_pw_9networkit_9community_12HubDominance_1getQuality(PyObject *__pyx_v_signatures, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED PyObject *__pyx_v_defaults = 0;
  PyObject *__pyx_v__fused_sigindex = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_fused_cpdef (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_args,&__pyx_n_s_kwargs,&__pyx_n_s_defaults,&__pyx_n_s_fused_sigindex,0};
    values[3] = __Pyx_Arg_NewRef_VARARGS(__pyx_k__4);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_args)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_kwargs)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 0, 3, 4, 1); __PYX_ERR(0, 574, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_defaults)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 0, 3, 4, 2); __PYX_ERR(0, 574, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fused_sigindex);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_fused_cpdef") < 0)) __PYX_ERR(0, 574, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_args = values[0];
    __pyx_v_kwargs = values[1];
    __pyx_v_defaults = values[2];
    __pyx_v__fused_sigindex = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 574, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.HubDominance.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_12HubDominance_getQuality(((struct __pyx_obj_9networkit_9community_HubDominance *)__pyx_v_signatures), __pyx_v_args, __pyx_v_kwargs, __pyx_v_defaults, __pyx_v__fused_sigindex);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_12HubDominance_getQuality(struct __pyx_obj_9networkit_9community_HubDominance *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults, PyObject *__pyx_v__fused_sigindex) {
  PyObject *__pyx_v_search_list = 0;
  PyObject *__pyx_v_sigindex_node = 0;
  PyObject *__pyx_v_dest_sig = NULL;
  PyObject *__pyx_v_arg = NULL;
  PyObject *__pyx_v_sig = NULL;
  PyObject *__pyx_v_sig_series = NULL;
  PyObject *__pyx_v_last_type = NULL;
  PyObject *__pyx_v_sig_type = NULL;
  PyObject *__pyx_v_sigindex_matches = NULL;
  PyObject *__pyx_v_sigindex_candidates = NULL;
  PyObject *__pyx_v_dst_type = NULL;
  PyObject *__pyx_v_found_matches = NULL;
  PyObject *__pyx_v_found_candidates = NULL;
  PyObject *__pyx_v_sn = NULL;
  PyObject *__pyx_v_type_match = NULL;
  PyObject *__pyx_v_candidates = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getQuality", 0);
  __Pyx_INCREF(__pyx_v_kwargs);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, Py_None)) __PYX_ERR(0, 574, __pyx_L1_error);
  __pyx_v_dest_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_kwargs != Py_None);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
  __pyx_t_4 = (!__pyx_t_3);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_kwargs, Py_None);
  }
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 574, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 574, __pyx_L1_error)
  __pyx_t_2 = (1 < __pyx_t_5);
  if (__pyx_t_2) {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 574, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(((PyObject*)__pyx_v_args), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  __pyx_t_4 = (__pyx_v_kwargs != Py_None);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 574, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_zeta, ((PyObject*)__pyx_v_kwargs), Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_4;
  __pyx_L7_bool_binop_done:;
  if (likely(__pyx_t_2)) {
    if (unlikely(__pyx_v_kwargs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 574, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_kwargs), __pyx_n_s_zeta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  /*else*/ {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 574, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 574, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_int_3)) __PYX_ERR(0, 574, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_s);
    __Pyx_GIVEREF(__pyx_n_s_s);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_n_s_s)) __PYX_ERR(0, 574, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Expected_at_least_d_argument_s_g, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 574, __pyx_L1_error)
  }
  __pyx_L6:;
  while (1) {
    __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_kp_s__5);
    __Pyx_GIVEREF(__pyx_kp_s__5);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_kp_s__5)) __PYX_ERR(0, 574, __pyx_L1_error);
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_kp_s_networkit_structures);
    __Pyx_GIVEREF(__pyx_kp_s_networkit_structures);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_networkit_structures)) __PYX_ERR(0, 574, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, Py_None)) __PYX_ERR(0, 574, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(0, 574, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin___import__, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_Partition); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_arg, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {
      if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_Partition, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
      goto __pyx_L10_break;
    }
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_kp_s__5);
    __Pyx_GIVEREF(__pyx_kp_s__5);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s__5)) __PYX_ERR(0, 574, __pyx_L1_error);
    __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_kp_s_networkit_structures);
    __Pyx_GIVEREF(__pyx_kp_s_networkit_structures);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_s_networkit_structures)) __PYX_ERR(0, 574, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, Py_None)) __PYX_ERR(0, 574, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 2, Py_None)) __PYX_ERR(0, 574, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin___import__, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Cover); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_arg, __pyx_t_6); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_2) {
      if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_Cover, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
      goto __pyx_L10_break;
    }
    if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, Py_None, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
    goto __pyx_L10_break;
  }
  __pyx_L10_break:;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v__fused_sigindex); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
  __pyx_t_4 = (!__pyx_t_2);
  if (__pyx_t_4) {
    __pyx_t_5 = 0;
    if (unlikely(((PyObject *)__pyx_v_signatures) == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 574, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_dict_iterator(((PyObject*)__pyx_v_signatures), 1, ((PyObject *)NULL), (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_1;
    __pyx_t_1 = 0;
    while (1) {
      __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_6, __pyx_t_7, &__pyx_t_5, &__pyx_t_1, NULL, NULL, __pyx_t_8);
      if (unlikely(__pyx_t_9 == 0)) break;
      if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_sig, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_v__fused_sigindex;
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_sigindex_node, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_sig, __pyx_n_s_strip); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = NULL;
      __pyx_t_9 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_9 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_kp_s__6};
        __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 574, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_split); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      __pyx_t_9 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_9 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_kp_s__7};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_t_11 = __Pyx_PySequence_ListKeepNew(__pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_13 = PyList_GET_SIZE(__pyx_t_11);
      if (unlikely(__pyx_t_13 < 1)) {
        __Pyx_RaiseNeedMoreValuesError(0+__pyx_t_13); __PYX_ERR(0, 574, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_10 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_13-1); 
      ((PyVarObject*)__pyx_t_11)->ob_size--;
      #else
      __pyx_t_10 = PySequence_ITEM(__pyx_t_11, __pyx_t_13-1); 
      #endif
      __Pyx_GOTREF(__pyx_t_10);
      #if !CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_12 = PySequence_GetSlice(__pyx_t_11, 0, __pyx_t_13-1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11);
      __pyx_t_11 = __pyx_t_12; __pyx_t_12 = NULL;
      #else
      CYTHON_UNUSED_VAR(__pyx_t_12);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_sig_series, ((PyObject*)__pyx_t_11));
      __pyx_t_11 = 0;
      __Pyx_XDECREF_SET(__pyx_v_last_type, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_1 = __pyx_v_sig_series; __Pyx_INCREF(__pyx_t_1);
      __pyx_t_13 = 0;
      for (;;) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
          #endif
          if (__pyx_t_13 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_10 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_13); __Pyx_INCREF(__pyx_t_10); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
        #else
        __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 574, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
        __Pyx_XDECREF_SET(__pyx_v_sig_type, __pyx_t_10);
        __pyx_t_10 = 0;
        if (unlikely(__pyx_v_sigindex_node == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
          __PYX_ERR(0, 574, __pyx_L1_error)
        }
        __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_v_sig_type, __pyx_v_sigindex_node, Py_NE)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
        if (__pyx_t_4) {
          __pyx_t_10 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 574, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          if (unlikely(__pyx_v_sigindex_node == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 574, __pyx_L1_error)
          }
          if (unlikely((PyDict_SetItem(__pyx_v_sigindex_node, __pyx_v_sig_type, __pyx_t_10) < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_DECREF_SET(__pyx_v_sigindex_node, __pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          goto __pyx_L18;
        }
        /*else*/ {
          if (unlikely(__pyx_v_sigindex_node == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 574, __pyx_L1_error)
          }
          __pyx_t_10 = __Pyx_PyDict_GetItem(__pyx_v_sigindex_node, __pyx_v_sig_type); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 574, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = __pyx_t_10;
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF_SET(__pyx_v_sigindex_node, ((PyObject*)__pyx_t_11));
          __pyx_t_11 = 0;
        }
        __pyx_L18:;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(__pyx_v_sigindex_node == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 574, __pyx_L1_error)
      }
      if (unlikely((PyDict_SetItem(__pyx_v_sigindex_node, __pyx_v_last_type, __pyx_v_sig) < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_sigindex_matches = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v__fused_sigindex);
  __Pyx_GIVEREF(__pyx_v__fused_sigindex);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v__fused_sigindex)) __PYX_ERR(0, 574, __pyx_L1_error);
  __pyx_v_sigindex_candidates = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __pyx_v_dest_sig; __Pyx_INCREF(__pyx_t_6);
  __pyx_t_7 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_6);
      #if !CYTHON_ASSUME_SAFE_MACROS
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
      #endif
      if (__pyx_t_7 >= __pyx_temp) break;
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
    #else
    __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_dst_type, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_found_matches, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_found_candidates, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_4 = (__pyx_v_dst_type == Py_None);
    if (__pyx_t_4) {
      __pyx_t_1 = __pyx_v_sigindex_matches; __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = 0;
      for (;;) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_11 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_11); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
        #else
        __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 574, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
        __Pyx_XDECREF_SET(__pyx_v_sn, __pyx_t_11);
        __pyx_t_11 = 0;
        if (unlikely(__pyx_v_sn == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
          __PYX_ERR(0, 574, __pyx_L1_error)
        }
        __pyx_t_11 = __Pyx_PyDict_Values(((PyObject*)__pyx_v_sn)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 574, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_14 = __Pyx_PyList_Extend(__pyx_v_found_matches, __pyx_t_11); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 574, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_v_sigindex_candidates; __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = 0;
      for (;;) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_11 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_11); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
        #else
        __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 574, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
        __Pyx_XDECREF_SET(__pyx_v_sn, __pyx_t_11);
        __pyx_t_11 = 0;
        if (unlikely(__pyx_v_sn == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
          __PYX_ERR(0, 574, __pyx_L1_error)
        }
        __pyx_t_11 = __Pyx_PyDict_Values(((PyObject*)__pyx_v_sn)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 574, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_14 = __Pyx_PyList_Extend(__pyx_v_found_candidates, __pyx_t_11); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 574, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L22;
    }
    /*else*/ {
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_sigindex_matches);
      __Pyx_GIVEREF(__pyx_v_sigindex_matches);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_sigindex_matches)) __PYX_ERR(0, 574, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_sigindex_candidates);
      __Pyx_GIVEREF(__pyx_v_sigindex_candidates);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_sigindex_candidates)) __PYX_ERR(0, 574, __pyx_L1_error);
      __pyx_t_11 = __pyx_t_1; __Pyx_INCREF(__pyx_t_11);
      __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (__pyx_t_5 >= 2) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
        __Pyx_XDECREF_SET(__pyx_v_search_list, ((PyObject*)__pyx_t_1));
        __pyx_t_1 = 0;
        if (unlikely(__pyx_v_search_list == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
          __PYX_ERR(0, 574, __pyx_L1_error)
        }
        __pyx_t_1 = __pyx_v_search_list; __Pyx_INCREF(__pyx_t_1);
        __pyx_t_13 = 0;
        for (;;) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
            #endif
            if (__pyx_t_13 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_13); __Pyx_INCREF(__pyx_t_10); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
          #else
          __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 574, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
          __Pyx_XDECREF_SET(__pyx_v_sn, __pyx_t_10);
          __pyx_t_10 = 0;
          if (unlikely(__pyx_v_sn == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
            __PYX_ERR(0, 574, __pyx_L1_error)
          }
          __pyx_t_10 = __Pyx_PyDict_GetItemDefault(((PyObject*)__pyx_v_sn), __pyx_v_dst_type, Py_None); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 574, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_XDECREF_SET(__pyx_v_type_match, __pyx_t_10);
          __pyx_t_10 = 0;
          __pyx_t_4 = (__pyx_v_type_match != Py_None);
          if (__pyx_t_4) {
            __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_found_matches, __pyx_v_type_match); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 574, __pyx_L1_error)
          }
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __pyx_L22:;
    __Pyx_INCREF(__pyx_v_found_matches);
    __Pyx_DECREF_SET(__pyx_v_sigindex_matches, __pyx_v_found_matches);
    __Pyx_INCREF(__pyx_v_found_candidates);
    __Pyx_DECREF_SET(__pyx_v_sigindex_candidates, __pyx_v_found_candidates);
    __pyx_t_2 = (PyList_GET_SIZE(__pyx_v_found_matches) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_4 = __pyx_t_2;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_2 = (PyList_GET_SIZE(__pyx_v_found_candidates) != 0);
    __pyx_t_4 = __pyx_t_2;
    __pyx_L37_bool_binop_done:;
    __pyx_t_2 = (!__pyx_t_4);
    if (__pyx_t_2) {
      goto __pyx_L21_break;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  goto __pyx_L39_for_end;
  __pyx_L21_break:;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  goto __pyx_L39_for_end;
  __pyx_L39_for_end:;
  __Pyx_INCREF(__pyx_v_sigindex_matches);
  __pyx_v_candidates = __pyx_v_sigindex_matches;
  __pyx_t_2 = (PyList_GET_SIZE(__pyx_v_candidates) != 0);
  __pyx_t_4 = (!__pyx_t_2);
  if (unlikely(__pyx_t_4)) {
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 574, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyList_GET_SIZE(__pyx_v_candidates); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 574, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_7 > 1);
  if (unlikely(__pyx_t_4)) {
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 574, __pyx_L1_error)
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(((PyObject *)__pyx_v_signatures) == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 574, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_candidates, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_signatures), __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_11;
    __pyx_t_11 = 0;
    goto __pyx_L0;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("networkit.community.HubDominance.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_search_list);
  __Pyx_XDECREF(__pyx_v_sigindex_node);
  __Pyx_XDECREF(__pyx_v_dest_sig);
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_sig);
  __Pyx_XDECREF(__pyx_v_sig_series);
  __Pyx_XDECREF(__pyx_v_last_type);
  __Pyx_XDECREF(__pyx_v_sig_type);
  __Pyx_XDECREF(__pyx_v_sigindex_matches);
  __Pyx_XDECREF(__pyx_v_sigindex_candidates);
  __Pyx_XDECREF(__pyx_v_dst_type);
  __Pyx_XDECREF(__pyx_v_found_matches);
  __Pyx_XDECREF(__pyx_v_found_candidates);
  __Pyx_XDECREF(__pyx_v_sn);
  __Pyx_XDECREF(__pyx_v_type_match);
  __Pyx_XDECREF(__pyx_v_candidates);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_0__pyx_pw_9networkit_9community_12HubDominance_3getQuality(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_0__pyx_mdef_9networkit_9community_12HubDominance_3getQuality = {"__pyx_fuse_0getQuality", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_fuse_0__pyx_pw_9networkit_9community_12HubDominance_3getQuality, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_9community_12HubDominance_getQuality};
static PyObject *__pyx_fuse_0__pyx_pw_9networkit_9community_12HubDominance_3getQuality(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta = 0;
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getQuality (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zeta,&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getQuality", 1, 2, 2, 1); __PYX_ERR(0, 574, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getQuality") < 0)) __PYX_ERR(0, 574, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_zeta = ((struct __pyx_obj_9networkit_10structures_Partition *)values[0]);
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getQuality", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 574, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.HubDominance.getQuality", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zeta), __pyx_ptype_9networkit_10structures_Partition, 1, "zeta", 0))) __PYX_ERR(0, 574, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 574, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_12HubDominance_2getQuality(((struct __pyx_obj_9networkit_9community_HubDominance *)__pyx_v_self), __pyx_v_zeta, __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_12HubDominance_2getQuality(struct __pyx_obj_9networkit_9community_HubDominance *__pyx_v_self, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0getQuality", 1);

  /* "networkit/community.pyx":593
 * 			The average hub dominance in the given Partition or Cover.
 * 		"""
 * 		return self._this.getQuality(zeta._this, G._this)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/PLM.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_this.getQuality(__pyx_v_zeta->_this, __pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 593, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":574
 * 	cdef _HubDominance _this
 * 
 * 	def getQuality(self, PartitionCover zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(zeta, G)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.HubDominance.getQuality", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_1__pyx_pw_9networkit_9community_12HubDominance_5getQuality(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_1__pyx_mdef_9networkit_9community_12HubDominance_5getQuality = {"__pyx_fuse_1getQuality", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_fuse_1__pyx_pw_9networkit_9community_12HubDominance_5getQuality, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_9community_12HubDominance_getQuality};
static PyObject *__pyx_fuse_1__pyx_pw_9networkit_9community_12HubDominance_5getQuality(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_zeta = 0;
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getQuality (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zeta,&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getQuality", 1, 2, 2, 1); __PYX_ERR(0, 574, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getQuality") < 0)) __PYX_ERR(0, 574, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_zeta = ((struct __pyx_obj_9networkit_10structures_Cover *)values[0]);
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getQuality", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 574, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.HubDominance.getQuality", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zeta), __pyx_ptype_9networkit_10structures_Cover, 1, "zeta", 0))) __PYX_ERR(0, 574, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 574, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_12HubDominance_4getQuality(((struct __pyx_obj_9networkit_9community_HubDominance *)__pyx_v_self), __pyx_v_zeta, __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_12HubDominance_4getQuality(struct __pyx_obj_9networkit_9community_HubDominance *__pyx_v_self, struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_zeta, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1getQuality", 1);

  /* "networkit/community.pyx":593
 * 			The average hub dominance in the given Partition or Cover.
 * 		"""
 * 		return self._this.getQuality(zeta._this, G._this)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/PLM.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_this.getQuality(__pyx_v_zeta->_this, __pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 593, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":574
 * 	cdef _HubDominance _this
 * 
 * 	def getQuality(self, PartitionCover zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(zeta, G)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.HubDominance.getQuality", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_12HubDominance_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_12HubDominance_9__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_12HubDominance_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_12HubDominance_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_12HubDominance_8__reduce_cython__(((struct __pyx_obj_9networkit_9community_HubDominance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_12HubDominance_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_HubDominance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.HubDominance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_12HubDominance_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_12HubDominance_11__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_12HubDominance_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_12HubDominance_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.HubDominance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_12HubDominance_10__setstate_cython__(((struct __pyx_obj_9networkit_9community_HubDominance *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_12HubDominance_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_HubDominance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.HubDominance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":634
 * 	"""
 * 
 * 	def __cinit__(self, Graph G not None, refine=False, gamma=1.0, par="balanced", maxIter=32, turbo=True, recurse=True):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _PLM(G._this, refine, gamma, stdstring(par), maxIter, turbo, recurse)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_3PLM_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_3PLM_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_refine = 0;
  PyObject *__pyx_v_gamma = 0;
  PyObject *__pyx_v_par = 0;
  PyObject *__pyx_v_maxIter = 0;
  PyObject *__pyx_v_turbo = 0;
  PyObject *__pyx_v_recurse = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[7] = {0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_refine,&__pyx_n_s_gamma,&__pyx_n_s_par,&__pyx_n_s_maxIter,&__pyx_n_s_turbo,&__pyx_n_s_recurse,0};
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_False));
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_float_1_0));
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_n_u_balanced));
    values[4] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_32));
    values[5] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_True));
    values[6] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_VARARGS(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_refine);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_gamma);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_par);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxIter);
          if (value) { values[4] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_turbo);
          if (value) { values[5] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_recurse);
          if (value) { values[6] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 634, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_VARARGS(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_refine = values[1];
    __pyx_v_gamma = values[2];
    __pyx_v_par = values[3];
    __pyx_v_maxIter = values[4];
    __pyx_v_turbo = values[5];
    __pyx_v_recurse = values[6];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 7, __pyx_nargs); __PYX_ERR(0, 634, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.PLM.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 634, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_3PLM___cinit__(((struct __pyx_obj_9networkit_9community_PLM *)__pyx_v_self), __pyx_v_G, __pyx_v_refine, __pyx_v_gamma, __pyx_v_par, __pyx_v_maxIter, __pyx_v_turbo, __pyx_v_recurse);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_3PLM___cinit__(struct __pyx_obj_9networkit_9community_PLM *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_refine, PyObject *__pyx_v_gamma, PyObject *__pyx_v_par, PyObject *__pyx_v_maxIter, PyObject *__pyx_v_turbo, PyObject *__pyx_v_recurse) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  std::string __pyx_t_7;
  __pyx_t_9networkit_10structures_count __pyx_t_8;
  bool __pyx_t_9;
  bool __pyx_t_10;
  NetworKit::PLM *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/community.pyx":635
 * 
 * 	def __cinit__(self, Graph G not None, refine=False, gamma=1.0, par="balanced", maxIter=32, turbo=True, recurse=True):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _PLM(G._this, refine, gamma, stdstring(par), maxIter, turbo, recurse)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/community.pyx":636
 * 	def __cinit__(self, Graph G not None, refine=False, gamma=1.0, par="balanced", maxIter=32, turbo=True, recurse=True):
 * 		self._G = G
 * 		self._this = new _PLM(G._this, refine, gamma, stdstring(par), maxIter, turbo, recurse)             # <<<<<<<<<<<<<<
 * 
 * 	def getTiming(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_refine); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_gamma); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_stdstring); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_par};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_uint64_t(__pyx_v_maxIter); if (unlikely((__pyx_t_8 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_turbo); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_recurse); if (unlikely((__pyx_t_10 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L1_error)
  try {
    __pyx_t_11 = new NetworKit::PLM(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 636, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_11;

  /* "networkit/community.pyx":634
 * 	"""
 * 
 * 	def __cinit__(self, Graph G not None, refine=False, gamma=1.0, par="balanced", maxIter=32, turbo=True, recurse=True):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _PLM(G._this, refine, gamma, stdstring(par), maxIter, turbo, recurse)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.community.PLM.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":638
 * 		self._this = new _PLM(G._this, refine, gamma, stdstring(par), maxIter, turbo, recurse)
 * 
 * 	def getTiming(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getTiming()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_3PLM_3getTiming(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_3PLM_2getTiming, "  \n\t\tgetTiming()\n\t\t\n\t\tGet detailed time measurements.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tTime for computing PLM.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_3PLM_3getTiming = {"getTiming", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLM_3getTiming, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_3PLM_2getTiming};
static PyObject *__pyx_pw_9networkit_9community_3PLM_3getTiming(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTiming (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getTiming", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getTiming", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_3PLM_2getTiming(((struct __pyx_obj_9networkit_9community_PLM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_3PLM_2getTiming(struct __pyx_obj_9networkit_9community_PLM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::map<std::string,std::vector<__pyx_t_9networkit_10structures_count> > > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTiming", 1);

  /* "networkit/community.pyx":649
 * 			Time for computing PLM.
 * 		"""
 * 		return (<_PLM*>(self._this)).getTiming()             # <<<<<<<<<<<<<<
 * 
 * 	@staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::PLM *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this)->getTiming();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 649, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c___pyx_t_9networkit_10structures_count_3e___(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":638
 * 		self._this = new _PLM(G._this, refine, gamma, stdstring(par), maxIter, turbo, recurse)
 * 
 * 	def getTiming(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getTiming()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.PLM.getTiming", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":651
 * 		return (<_PLM*>(self._this)).getTiming()
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def coarsen(Graph G, Partition zeta, bool_t parallel = False):
 * 		"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_3PLM_5coarsen(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_3PLM_4coarsen, "\n\t\tcoarsen(G, zeta, parallel=False)\n\n\t\tCoarsens a graph based on a given partition and returns both the coarsened graph and a mapping \n\t\tfor the nodes from fine to coarse.\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tThe input graph.\n\t\tzeta : networkit.Partition\n\t\t\tPartition of the graph, which represents the desired state of the coarsened graph.\n\t\tparallel : bool, optional\n\t\t\tDo the coarsening in parallel. Default: False\n\n\t\tReturns\n\t\t-------\n\t\tnetworkit.Graph\n\t\t\tPair of coarsened graph and node-mappings from fine to coarse graph.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_3PLM_5coarsen = {"coarsen", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLM_5coarsen, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_3PLM_4coarsen};
static PyObject *__pyx_pw_9networkit_9community_3PLM_5coarsen(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta = 0;
  CYTHON_UNUSED bool __pyx_v_parallel;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("coarsen (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_zeta,&__pyx_n_s_parallel,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 651, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 651, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("coarsen", 0, 2, 3, 1); __PYX_ERR(0, 651, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_parallel);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 651, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "coarsen") < 0)) __PYX_ERR(0, 651, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_zeta = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
    if (values[2]) {
      __pyx_v_parallel = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_parallel == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 652, __pyx_L3_error)
    } else {

      /* "networkit/community.pyx":652
 * 
 * 	@staticmethod
 * 	def coarsen(Graph G, Partition zeta, bool_t parallel = False):             # <<<<<<<<<<<<<<
 * 		"""
 * 		coarsen(G, zeta, parallel=False)
 */
      __pyx_v_parallel = ((bool)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("coarsen", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 651, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.PLM.coarsen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 652, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zeta), __pyx_ptype_9networkit_10structures_Partition, 1, "zeta", 0))) __PYX_ERR(0, 652, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_3PLM_4coarsen(__pyx_v_G, __pyx_v_zeta, __pyx_v_parallel);

  /* "networkit/community.pyx":651
 * 		return (<_PLM*>(self._this)).getTiming()
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def coarsen(Graph G, Partition zeta, bool_t parallel = False):
 * 		"""
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_3PLM_4coarsen(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zeta, CYTHON_UNUSED bool __pyx_v_parallel) {
  std::pair<NetworKit::Graph,std::vector<__pyx_t_9networkit_10structures_node> >  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::pair<NetworKit::Graph,std::vector<__pyx_t_9networkit_10structures_node> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("coarsen", 1);

  /* "networkit/community.pyx":673
 * 			Pair of coarsened graph and node-mappings from fine to coarse graph.
 * 		"""
 * 		cdef pair[_Graph, vector[node]] result = move(PLM_coarsen(G._this, zeta._this))             # <<<<<<<<<<<<<<
 * 		return (Graph().setThis(result.first), result.second)
 * 
 */
  try {
    __pyx_t_1 = NetworKit::PLM::coarsen(__pyx_v_G->_this, __pyx_v_zeta->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 673, __pyx_L1_error)
  }
  __pyx_v_result = std::move(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1));

  /* "networkit/community.pyx":674
 * 		"""
 * 		cdef pair[_Graph, vector[node]] result = move(PLM_coarsen(G._this, zeta._this))
 * 		return (Graph().setThis(result.first), result.second)             # <<<<<<<<<<<<<<
 * 
 * 	@staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_5graph_Graph)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_vtabstruct_9networkit_5graph_Graph *)((struct __pyx_obj_9networkit_5graph_Graph *)__pyx_t_2)->__pyx_vtab)->setThis(((struct __pyx_obj_9networkit_5graph_Graph *)__pyx_t_2), __pyx_v_result.first); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(__pyx_v_result.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(0, 674, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":651
 * 		return (<_PLM*>(self._this)).getTiming()
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def coarsen(Graph G, Partition zeta, bool_t parallel = False):
 * 		"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.community.PLM.coarsen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":676
 * 		return (Graph().setThis(result.first), result.second)
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def prolong(Graph Gcoarse, Partition zetaCoarse, Graph Gfine, vector[node] nodeToMetaNode):
 * 		"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_3PLM_7prolong(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_3PLM_6prolong, "\n\t\tprolong(Gcoarse, zetaCoarse, Gfine, nodeToMetaNode)\n\n\t\tCalculates a partition containing the mapping of node-id from a fine graph \n\t\tto a cluster-id from partition based on a coarse graph.\n\n\t\tParameters\n\t\t----------\n\t\tGcoarse : networkit.Graph\n\t\t\tA coarse graph.\n\t\tzetaCoarse : networkit.Partition\n\t\t\tThe first partition.\n\t\tGfine : networkit.Graph\n\t\t\tA fine graph.\n\t\tnodeToMetaNode : list(int)\n\t\t\tPartition, which contains the cluster-id in the coarse graph for every node from the fine graph.\n\n\t\tReturns\n\t\t-------\n\t\tnetworkit.Partition\n\t\t\tOutput partition.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_3PLM_7prolong = {"prolong", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLM_7prolong, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_3PLM_6prolong};
static PyObject *__pyx_pw_9networkit_9community_3PLM_7prolong(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_Gcoarse = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zetaCoarse = 0;
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_Gfine = 0;
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_nodeToMetaNode;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prolong (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Gcoarse,&__pyx_n_s_zetaCoarse,&__pyx_n_s_Gfine,&__pyx_n_s_nodeToMetaNode,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Gcoarse)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 676, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zetaCoarse)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 676, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("prolong", 1, 4, 4, 1); __PYX_ERR(0, 676, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Gfine)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 676, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("prolong", 1, 4, 4, 2); __PYX_ERR(0, 676, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_nodeToMetaNode)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 676, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("prolong", 1, 4, 4, 3); __PYX_ERR(0, 676, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "prolong") < 0)) __PYX_ERR(0, 676, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_Gcoarse = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_zetaCoarse = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
    __pyx_v_Gfine = ((struct __pyx_obj_9networkit_5graph_Graph *)values[2]);
    __pyx_v_nodeToMetaNode = __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(values[3]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 677, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prolong", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 676, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.PLM.prolong", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Gcoarse), __pyx_ptype_9networkit_5graph_Graph, 1, "Gcoarse", 0))) __PYX_ERR(0, 677, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_zetaCoarse), __pyx_ptype_9networkit_10structures_Partition, 1, "zetaCoarse", 0))) __PYX_ERR(0, 677, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Gfine), __pyx_ptype_9networkit_5graph_Graph, 1, "Gfine", 0))) __PYX_ERR(0, 677, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_3PLM_6prolong(__pyx_v_Gcoarse, __pyx_v_zetaCoarse, __pyx_v_Gfine, __PYX_STD_MOVE_IF_SUPPORTED(__pyx_v_nodeToMetaNode));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_3PLM_6prolong(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_Gcoarse, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_zetaCoarse, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_Gfine, std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_nodeToMetaNode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  NetworKit::Partition __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prolong", 1);

  /* "networkit/community.pyx":700
 * 			Output partition.
 * 		"""
 * 		return Partition().setThis(PLM_prolong(Gcoarse._this, zetaCoarse._this, Gfine._this, nodeToMetaNode))             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/ParallelLeiden.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_10structures_Partition)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = NetworKit::PLM::prolong(__pyx_v_Gcoarse->_this, __pyx_v_zetaCoarse->_this, __pyx_v_Gfine->_this, __pyx_v_nodeToMetaNode);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 700, __pyx_L1_error)
  }
  __pyx_t_3 = ((struct __pyx_vtabstruct_9networkit_10structures_Partition *)((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_1)->__pyx_vtab)->setThis(((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_1), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":676
 * 		return (Graph().setThis(result.first), result.second)
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def prolong(Graph Gcoarse, Partition zetaCoarse, Graph Gfine, vector[node] nodeToMetaNode):
 * 		"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.community.PLM.prolong", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_3PLM_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_3PLM_9__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLM_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_3PLM_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_3PLM_8__reduce_cython__(((struct __pyx_obj_9networkit_9community_PLM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_3PLM_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PLM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.PLM.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_3PLM_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_3PLM_11__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLM_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_3PLM_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.PLM.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_3PLM_10__setstate_cython__(((struct __pyx_obj_9networkit_9community_PLM *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_3PLM_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PLM *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.PLM.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":726
 * 	"""
 * 
 * 	def __cinit__(self, Graph G not None, int iterations = 3, bool_t randomize = True, double gamma = 1):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ParallelLeiden(G._this,iterations,randomize,gamma)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_14ParallelLeiden_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_14ParallelLeiden_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  int __pyx_v_iterations;
  bool __pyx_v_randomize;
  double __pyx_v_gamma;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_iterations,&__pyx_n_s_randomize,&__pyx_n_s_gamma,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_iterations);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_randomize);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_gamma);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 726, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_iterations = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_iterations == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
    } else {
      __pyx_v_iterations = ((int)3);
    }
    if (values[2]) {
      __pyx_v_randomize = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_randomize == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
    } else {
      __pyx_v_randomize = ((bool)1);
    }
    if (values[3]) {
      __pyx_v_gamma = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_gamma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
    } else {
      __pyx_v_gamma = ((double)1.0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, __pyx_nargs); __PYX_ERR(0, 726, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.ParallelLeiden.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 726, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_14ParallelLeiden___cinit__(((struct __pyx_obj_9networkit_9community_ParallelLeiden *)__pyx_v_self), __pyx_v_G, __pyx_v_iterations, __pyx_v_randomize, __pyx_v_gamma);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_14ParallelLeiden___cinit__(struct __pyx_obj_9networkit_9community_ParallelLeiden *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, int __pyx_v_iterations, bool __pyx_v_randomize, double __pyx_v_gamma) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::ParallelLeiden *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/community.pyx":727
 * 
 * 	def __cinit__(self, Graph G not None, int iterations = 3, bool_t randomize = True, double gamma = 1):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _ParallelLeiden(G._this,iterations,randomize,gamma)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/community.pyx":728
 * 	def __cinit__(self, Graph G not None, int iterations = 3, bool_t randomize = True, double gamma = 1):
 * 		self._G = G
 * 		self._this = new _ParallelLeiden(G._this,iterations,randomize,gamma)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/LouvainMapEquation.hpp>":
 */
  try {
    __pyx_t_1 = new NetworKit::ParallelLeiden(__pyx_v_G->_this, __pyx_v_iterations, __pyx_v_randomize, __pyx_v_gamma);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 728, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/community.pyx":726
 * 	"""
 * 
 * 	def __cinit__(self, Graph G not None, int iterations = 3, bool_t randomize = True, double gamma = 1):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ParallelLeiden(G._this,iterations,randomize,gamma)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.ParallelLeiden.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_14ParallelLeiden_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_14ParallelLeiden_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_14ParallelLeiden_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_14ParallelLeiden_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_14ParallelLeiden_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_ParallelLeiden *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_14ParallelLeiden_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_ParallelLeiden *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.ParallelLeiden.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_14ParallelLeiden_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_14ParallelLeiden_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_14ParallelLeiden_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_14ParallelLeiden_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.ParallelLeiden.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_14ParallelLeiden_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_ParallelLeiden *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_14ParallelLeiden_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_ParallelLeiden *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.ParallelLeiden.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":752
 * 	"""
 * 
 * 	def __cinit__(self, Graph G not None, hierarchical = False, maxIterations = 32, parallelizationStrategy = "relaxmap"):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _LouvainMapEquation(G._this, hierarchical, maxIterations, stdstring(parallelizationStrategy))
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_18LouvainMapEquation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_18LouvainMapEquation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_hierarchical = 0;
  PyObject *__pyx_v_maxIterations = 0;
  PyObject *__pyx_v_parallelizationStrategy = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_hierarchical,&__pyx_n_s_maxIterations,&__pyx_n_s_parallelizationStrategy,0};
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_False));
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_32));
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_n_u_relaxmap));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 752, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hierarchical);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 752, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxIterations);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 752, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_parallelizationStrategy);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 752, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 752, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_hierarchical = values[1];
    __pyx_v_maxIterations = values[2];
    __pyx_v_parallelizationStrategy = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, __pyx_nargs); __PYX_ERR(0, 752, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.LouvainMapEquation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 752, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_18LouvainMapEquation___cinit__(((struct __pyx_obj_9networkit_9community_LouvainMapEquation *)__pyx_v_self), __pyx_v_G, __pyx_v_hierarchical, __pyx_v_maxIterations, __pyx_v_parallelizationStrategy);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_18LouvainMapEquation___cinit__(struct __pyx_obj_9networkit_9community_LouvainMapEquation *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_hierarchical, PyObject *__pyx_v_maxIterations, PyObject *__pyx_v_parallelizationStrategy) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_count __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  std::string __pyx_t_6;
  NetworKit::LouvainMapEquation *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/community.pyx":753
 * 
 * 	def __cinit__(self, Graph G not None, hierarchical = False, maxIterations = 32, parallelizationStrategy = "relaxmap"):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _LouvainMapEquation(G._this, hierarchical, maxIterations, stdstring(parallelizationStrategy))
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/community.pyx":754
 * 	def __cinit__(self, Graph G not None, hierarchical = False, maxIterations = 32, parallelizationStrategy = "relaxmap"):
 * 		self._G = G
 * 		self._this = new _LouvainMapEquation(G._this, hierarchical, maxIterations, stdstring(parallelizationStrategy))             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/PLP.hpp>":
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_maxIterations); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_stdstring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_parallelizationStrategy};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  try {
    __pyx_t_7 = new NetworKit::LouvainMapEquation(__pyx_v_G->_this, __pyx_v_hierarchical, __pyx_t_1, __pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 754, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_7;

  /* "networkit/community.pyx":752
 * 	"""
 * 
 * 	def __cinit__(self, Graph G not None, hierarchical = False, maxIterations = 32, parallelizationStrategy = "relaxmap"):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _LouvainMapEquation(G._this, hierarchical, maxIterations, stdstring(parallelizationStrategy))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.community.LouvainMapEquation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_18LouvainMapEquation_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_18LouvainMapEquation_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_18LouvainMapEquation_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_18LouvainMapEquation_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_18LouvainMapEquation_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_LouvainMapEquation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_18LouvainMapEquation_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LouvainMapEquation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.LouvainMapEquation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_18LouvainMapEquation_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_18LouvainMapEquation_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_18LouvainMapEquation_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_18LouvainMapEquation_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.LouvainMapEquation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_18LouvainMapEquation_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_LouvainMapEquation *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_18LouvainMapEquation_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LouvainMapEquation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.LouvainMapEquation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":794
 * 	"""
 * 
 * 	def __cinit__(self, Graph G not None, count updateThreshold=none, count maxIterations=none, Partition baseClustering=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Constructor to the Parallel label propagation community detection algorithm.
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_3PLP_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_3PLP_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  __pyx_t_9networkit_10structures_count __pyx_v_updateThreshold;
  __pyx_t_9networkit_10structures_count __pyx_v_maxIterations;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_baseClustering = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_updateThreshold,&__pyx_n_s_maxIterations,&__pyx_n_s_baseClustering,0};
    values[3] = __Pyx_Arg_NewRef_VARARGS((PyObject *)((struct __pyx_obj_9networkit_10structures_Partition *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_updateThreshold);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxIterations);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_baseClustering);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 794, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_updateThreshold = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_updateThreshold == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L3_error)
    } else {
      __pyx_v_updateThreshold = __pyx_k__10;
    }
    if (values[2]) {
      __pyx_v_maxIterations = __Pyx_PyInt_As_uint64_t(values[2]); if (unlikely((__pyx_v_maxIterations == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L3_error)
    } else {
      __pyx_v_maxIterations = __pyx_k__11;
    }
    __pyx_v_baseClustering = ((struct __pyx_obj_9networkit_10structures_Partition *)values[3]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, __pyx_nargs); __PYX_ERR(0, 794, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.PLP.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 794, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_baseClustering), __pyx_ptype_9networkit_10structures_Partition, 1, "baseClustering", 0))) __PYX_ERR(0, 794, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_3PLP___cinit__(((struct __pyx_obj_9networkit_9community_PLP *)__pyx_v_self), __pyx_v_G, __pyx_v_updateThreshold, __pyx_v_maxIterations, __pyx_v_baseClustering);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_3PLP___cinit__(struct __pyx_obj_9networkit_9community_PLP *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_count __pyx_v_updateThreshold, __pyx_t_9networkit_10structures_count __pyx_v_maxIterations, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_baseClustering) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  NetworKit::PLP *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/community.pyx":799
 * 
 * 		"""
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/community.pyx":802
 * 
 * 
 * 		if baseClustering is None:             # <<<<<<<<<<<<<<
 * 			self._this = new _PLP(G._this, updateThreshold, maxIterations)
 * 		else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_baseClustering) == Py_None);
  if (__pyx_t_1) {

    /* "networkit/community.pyx":803
 * 
 * 		if baseClustering is None:
 * 			self._this = new _PLP(G._this, updateThreshold, maxIterations)             # <<<<<<<<<<<<<<
 * 		else:
 * 			self._this = new _PLP(G._this, baseClustering._this, updateThreshold)
 */
    try {
      __pyx_t_2 = new NetworKit::PLP(__pyx_v_G->_this, __pyx_v_updateThreshold, __pyx_v_maxIterations);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 803, __pyx_L1_error)
    }
    __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_2;

    /* "networkit/community.pyx":802
 * 
 * 
 * 		if baseClustering is None:             # <<<<<<<<<<<<<<
 * 			self._this = new _PLP(G._this, updateThreshold, maxIterations)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "networkit/community.pyx":805
 * 			self._this = new _PLP(G._this, updateThreshold, maxIterations)
 * 		else:
 * 			self._this = new _PLP(G._this, baseClustering._this, updateThreshold)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    try {
      __pyx_t_2 = new NetworKit::PLP(__pyx_v_G->_this, __pyx_v_baseClustering->_this, __pyx_v_updateThreshold);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 805, __pyx_L1_error)
    }
    __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_2;
  }
  __pyx_L3:;

  /* "networkit/community.pyx":794
 * 	"""
 * 
 * 	def __cinit__(self, Graph G not None, count updateThreshold=none, count maxIterations=none, Partition baseClustering=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Constructor to the Parallel label propagation community detection algorithm.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.PLP.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":808
 * 
 * 
 * 	def numberOfIterations(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		numberOfIterations()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_3PLP_3numberOfIterations(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_3PLP_2numberOfIterations, " \n\t\tnumberOfIterations()\n\n\t\tGet number of iterations in last run.\n\n\t\tReturns\n\t\t-------\n\t\tint\n\t\t\tThe number of iterations.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_3PLP_3numberOfIterations = {"numberOfIterations", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLP_3numberOfIterations, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_3PLP_2numberOfIterations};
static PyObject *__pyx_pw_9networkit_9community_3PLP_3numberOfIterations(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("numberOfIterations (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("numberOfIterations", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "numberOfIterations", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_3PLP_2numberOfIterations(((struct __pyx_obj_9networkit_9community_PLP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_3PLP_2numberOfIterations(struct __pyx_obj_9networkit_9community_PLP *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_count __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("numberOfIterations", 1);

  /* "networkit/community.pyx":819
 * 			The number of iterations.
 * 		"""
 * 		return (<_PLP*>(self._this)).numberOfIterations()             # <<<<<<<<<<<<<<
 * 
 * 	def getTiming(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::PLP *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this)->numberOfIterations();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 819, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":808
 * 
 * 
 * 	def numberOfIterations(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		numberOfIterations()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.PLP.numberOfIterations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":821
 * 		return (<_PLP*>(self._this)).numberOfIterations()
 * 
 * 	def getTiming(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getTiming()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_3PLP_5getTiming(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_3PLP_4getTiming, " \n\t\tgetTiming()\n\n\t\tGet list of running times for each iteration.\n\n\t\tReturns\n\t\t-------\n\t\tint\n\t\t\tThe list of running times in milliseconds.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_3PLP_5getTiming = {"getTiming", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLP_5getTiming, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_3PLP_4getTiming};
static PyObject *__pyx_pw_9networkit_9community_3PLP_5getTiming(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTiming (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getTiming", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getTiming", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_3PLP_4getTiming(((struct __pyx_obj_9networkit_9community_PLP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_3PLP_4getTiming(struct __pyx_obj_9networkit_9community_PLP *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::vector<__pyx_t_9networkit_10structures_count> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTiming", 1);

  /* "networkit/community.pyx":832
 * 			The list of running times in milliseconds.
 * 		"""
 * 		return (<_PLP*>(self._this)).getTiming()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/LFM.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::PLP *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this)->getTiming();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 832, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":821
 * 		return (<_PLP*>(self._this)).numberOfIterations()
 * 
 * 	def getTiming(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getTiming()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.PLP.getTiming", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_3PLP_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_3PLP_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLP_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_3PLP_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_3PLP_6__reduce_cython__(((struct __pyx_obj_9networkit_9community_PLP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_3PLP_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PLP *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.PLP.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_3PLP_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_3PLP_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLP_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_3PLP_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.PLP.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_3PLP_8__setstate_cython__(((struct __pyx_obj_9networkit_9community_PLP *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_3PLP_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PLP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.PLP.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":868
 * 	cdef SelectiveCommunityDetector _scd
 * 
 * 	def __cinit__(self, Graph G not None, SelectiveCommunityDetector scd not None):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._scd = scd
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_3LFM_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_3LFM_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_3scd_SelectiveCommunityDetector *__pyx_v_scd = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_scd,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 868, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_scd)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 868, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 868, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 868, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_scd = ((struct __pyx_obj_9networkit_3scd_SelectiveCommunityDetector *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 868, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.LFM.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 868, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_scd), __pyx_ptype_9networkit_3scd_SelectiveCommunityDetector, 0, "scd", 0))) __PYX_ERR(0, 868, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_3LFM___cinit__(((struct __pyx_obj_9networkit_9community_LFM *)__pyx_v_self), __pyx_v_G, __pyx_v_scd);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_3LFM___cinit__(struct __pyx_obj_9networkit_9community_LFM *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_3scd_SelectiveCommunityDetector *__pyx_v_scd) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::LFM *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/community.pyx":869
 * 
 * 	def __cinit__(self, Graph G not None, SelectiveCommunityDetector scd not None):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._scd = scd
 * 		self._this = new _LFM(G._this, dereference(scd._this))
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/community.pyx":870
 * 	def __cinit__(self, Graph G not None, SelectiveCommunityDetector scd not None):
 * 		self._G = G
 * 		self._scd = scd             # <<<<<<<<<<<<<<
 * 		self._this = new _LFM(G._this, dereference(scd._this))
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_scd);
  __Pyx_GIVEREF((PyObject *)__pyx_v_scd);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_scd);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_scd);
  __pyx_v_self->_scd = __pyx_v_scd;

  /* "networkit/community.pyx":871
 * 		self._G = G
 * 		self._scd = scd
 * 		self._this = new _LFM(G._this, dereference(scd._this))             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/LPDegreeOrdered.hpp>":
 */
  try {
    __pyx_t_1 = new NetworKit::LFM(__pyx_v_G->_this, (*__pyx_v_scd->_this));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 871, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/community.pyx":868
 * 	cdef SelectiveCommunityDetector _scd
 * 
 * 	def __cinit__(self, Graph G not None, SelectiveCommunityDetector scd not None):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._scd = scd
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.LFM.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_3LFM_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_3LFM_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3LFM_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_3LFM_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_3LFM_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_LFM *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_3LFM_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LFM *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.LFM.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_3LFM_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_3LFM_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3LFM_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_3LFM_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.LFM.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_3LFM_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_LFM *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_3LFM_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LFM *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.LFM.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":885
 * 	Label propagation-based community detection algorithm which processes nodes in increasing order of node degree.	"""
 * 
 * 	def __cinit__(self, Graph G not None):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _LPDegreeOrdered(G._this)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_15LPDegreeOrdered_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_15LPDegreeOrdered_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 885, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 885, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 885, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.LPDegreeOrdered.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 885, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_15LPDegreeOrdered___cinit__(((struct __pyx_obj_9networkit_9community_LPDegreeOrdered *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_15LPDegreeOrdered___cinit__(struct __pyx_obj_9networkit_9community_LPDegreeOrdered *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::LPDegreeOrdered *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/community.pyx":886
 * 
 * 	def __cinit__(self, Graph G not None):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _LPDegreeOrdered(G._this)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/community.pyx":887
 * 	def __cinit__(self, Graph G not None):
 * 		self._G = G
 * 		self._this = new _LPDegreeOrdered(G._this)             # <<<<<<<<<<<<<<
 * 
 * 	def numberOfIterations(self):
 */
  try {
    __pyx_t_1 = new NetworKit::LPDegreeOrdered(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 887, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/community.pyx":885
 * 	Label propagation-based community detection algorithm which processes nodes in increasing order of node degree.	"""
 * 
 * 	def __cinit__(self, Graph G not None):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _LPDegreeOrdered(G._this)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.LPDegreeOrdered.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":889
 * 		self._this = new _LPDegreeOrdered(G._this)
 * 
 * 	def numberOfIterations(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		numberOfIterations()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_15LPDegreeOrdered_3numberOfIterations(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_15LPDegreeOrdered_2numberOfIterations, " \n\t\tnumberOfIterations()\n\t\t\n\t\tGet number of iterations in last run.\n\n\t\tReturns\n\t\t-------\n\t\tint\n\t\t\tNumber of iterations.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_15LPDegreeOrdered_3numberOfIterations = {"numberOfIterations", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_15LPDegreeOrdered_3numberOfIterations, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_15LPDegreeOrdered_2numberOfIterations};
static PyObject *__pyx_pw_9networkit_9community_15LPDegreeOrdered_3numberOfIterations(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("numberOfIterations (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("numberOfIterations", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "numberOfIterations", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_15LPDegreeOrdered_2numberOfIterations(((struct __pyx_obj_9networkit_9community_LPDegreeOrdered *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_15LPDegreeOrdered_2numberOfIterations(struct __pyx_obj_9networkit_9community_LPDegreeOrdered *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("numberOfIterations", 1);

  /* "networkit/community.pyx":900
 * 			Number of iterations.
 * 		"""
 * 		return (<_LPDegreeOrdered*>(self._this)).numberOfIterations()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/CutClustering.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(((NetworKit::LPDegreeOrdered *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this)->numberOfIterations()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":889
 * 		self._this = new _LPDegreeOrdered(G._this)
 * 
 * 	def numberOfIterations(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		numberOfIterations()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.community.LPDegreeOrdered.numberOfIterations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_15LPDegreeOrdered_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_15LPDegreeOrdered_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_15LPDegreeOrdered_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_15LPDegreeOrdered_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_15LPDegreeOrdered_4__reduce_cython__(((struct __pyx_obj_9networkit_9community_LPDegreeOrdered *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_15LPDegreeOrdered_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LPDegreeOrdered *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.LPDegreeOrdered.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_15LPDegreeOrdered_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_15LPDegreeOrdered_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_15LPDegreeOrdered_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_15LPDegreeOrdered_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.LPDegreeOrdered.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_15LPDegreeOrdered_6__setstate_cython__(((struct __pyx_obj_9networkit_9community_LPDegreeOrdered *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_15LPDegreeOrdered_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LPDegreeOrdered *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.LPDegreeOrdered.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":928
 * 		The parameter for the cut clustering algorithm.
 * 	"""
 * 	def __cinit__(self, Graph G not None,  edgeweight alpha):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _CutClustering(G._this, alpha)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_13CutClustering_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_13CutClustering_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  __pyx_t_9networkit_10structures_edgeweight __pyx_v_alpha;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_alpha,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 928, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_alpha)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 928, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 928, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 928, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 928, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 928, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.CutClustering.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 928, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_13CutClustering___cinit__(((struct __pyx_obj_9networkit_9community_CutClustering *)__pyx_v_self), __pyx_v_G, __pyx_v_alpha);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_13CutClustering___cinit__(struct __pyx_obj_9networkit_9community_CutClustering *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_edgeweight __pyx_v_alpha) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::CutClustering *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/community.pyx":929
 * 	"""
 * 	def __cinit__(self, Graph G not None,  edgeweight alpha):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _CutClustering(G._this, alpha)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/community.pyx":930
 * 	def __cinit__(self, Graph G not None,  edgeweight alpha):
 * 		self._G = G
 * 		self._this = new _CutClustering(G._this, alpha)             # <<<<<<<<<<<<<<
 * 
 * 	@staticmethod
 */
  try {
    __pyx_t_1 = new NetworKit::CutClustering(__pyx_v_G->_this, __pyx_v_alpha);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 930, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/community.pyx":928
 * 		The parameter for the cut clustering algorithm.
 * 	"""
 * 	def __cinit__(self, Graph G not None,  edgeweight alpha):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _CutClustering(G._this, alpha)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.CutClustering.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":932
 * 		self._this = new _CutClustering(G._this, alpha)
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def getClusterHierarchy(Graph G not None):
 * 		"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_13CutClustering_3getClusterHierarchy(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_13CutClustering_2getClusterHierarchy, " \n\t\tgetClusterHierarchy(G)\n\t\t\n\t\tGet the complete hierarchy with all possible parameter values.\n\n\t\tEach reported parameter value is the lower bound for the range in which the corresponding clustering is calculated by the cut clustering algorithm.\n\n\t\tWarning: all reported parameter values are slightly too high in order to avoid wrong clusterings because of numerical inaccuracies.\n\t\tFurthermore the completeness of the hierarchy cannot be guaranteed because of these inaccuracies.\n\t\tThis implementation hasn't been optimized for performance.\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tThe input graph.\n\n\t\tReturns\n\t\t-------\n\t\tdict(str ``:`` networkit.Partition)\n\t\t\tA dictionary with the parameter values as keys and the corresponding Partition instances as values.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_13CutClustering_3getClusterHierarchy = {"getClusterHierarchy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_13CutClustering_3getClusterHierarchy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_13CutClustering_2getClusterHierarchy};
static PyObject *__pyx_pw_9networkit_9community_13CutClustering_3getClusterHierarchy(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClusterHierarchy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getClusterHierarchy") < 0)) __PYX_ERR(0, 932, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getClusterHierarchy", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 932, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.CutClustering.getClusterHierarchy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 933, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_13CutClustering_2getClusterHierarchy(__pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_13CutClustering_2getClusterHierarchy(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  std::map<double,NetworKit::Partition>  __pyx_v_result;
  PyObject *__pyx_v_pyResult = NULL;
  std::pair<double,NetworKit::Partition>  __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::map<double,NetworKit::Partition>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::map<double,NetworKit::Partition> ::iterator __pyx_t_3;
  std::pair<double,NetworKit::Partition>  __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getClusterHierarchy", 1);

  /* "networkit/community.pyx":957
 * 		cdef map[double, _Partition] result
 * 		# FIXME: this probably copies the whole hierarchy because of exception handling, using move might fix this
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			result = CutClustering_getClusterHierarchy(G._this)
 * 		pyResult = {}
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "networkit/community.pyx":958
 * 		# FIXME: this probably copies the whole hierarchy because of exception handling, using move might fix this
 * 		with nogil:
 * 			result = CutClustering_getClusterHierarchy(G._this)             # <<<<<<<<<<<<<<
 * 		pyResult = {}
 * 		# FIXME: this code copies the partitions a lot!
 */
        try {
          __pyx_t_1 = NetworKit::CutClustering::getClusterHierarchy(__pyx_v_G->_this);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 958, __pyx_L4_error)
        }
        __pyx_v_result = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);
      }

      /* "networkit/community.pyx":957
 * 		cdef map[double, _Partition] result
 * 		# FIXME: this probably copies the whole hierarchy because of exception handling, using move might fix this
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			result = CutClustering_getClusterHierarchy(G._this)
 * 		pyResult = {}
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "networkit/community.pyx":959
 * 		with nogil:
 * 			result = CutClustering_getClusterHierarchy(G._this)
 * 		pyResult = {}             # <<<<<<<<<<<<<<
 * 		# FIXME: this code copies the partitions a lot!
 * 		for res in result:
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_pyResult = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/community.pyx":961
 * 		pyResult = {}
 * 		# FIXME: this code copies the partitions a lot!
 * 		for res in result:             # <<<<<<<<<<<<<<
 * 			pyResult[res.first] = Partition().setThis(res.second)
 * 		return pyResult
 */
  __pyx_t_3 = __pyx_v_result.begin();
  for (;;) {
    if (!(__pyx_t_3 != __pyx_v_result.end())) break;
    __pyx_t_4 = *__pyx_t_3;
    ++__pyx_t_3;
    __pyx_v_res = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

    /* "networkit/community.pyx":962
 * 		# FIXME: this code copies the partitions a lot!
 * 		for res in result:
 * 			pyResult[res.first] = Partition().setThis(res.second)             # <<<<<<<<<<<<<<
 * 		return pyResult
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_10structures_Partition)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 962, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = ((struct __pyx_vtabstruct_9networkit_10structures_Partition *)((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_2)->__pyx_vtab)->setThis(((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_2), __pyx_v_res.second); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 962, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_res.first); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 962, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely((PyDict_SetItem(__pyx_v_pyResult, __pyx_t_2, __pyx_t_5) < 0))) __PYX_ERR(0, 962, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "networkit/community.pyx":961
 * 		pyResult = {}
 * 		# FIXME: this code copies the partitions a lot!
 * 		for res in result:             # <<<<<<<<<<<<<<
 * 			pyResult[res.first] = Partition().setThis(res.second)
 * 		return pyResult
 */
  }

  /* "networkit/community.pyx":963
 * 		for res in result:
 * 			pyResult[res.first] = Partition().setThis(res.second)
 * 		return pyResult             # <<<<<<<<<<<<<<
 * 
 * cdef class DissimilarityMeasure:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyResult);
  __pyx_r = __pyx_v_pyResult;
  goto __pyx_L0;

  /* "networkit/community.pyx":932
 * 		self._this = new _CutClustering(G._this, alpha)
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def getClusterHierarchy(Graph G not None):
 * 		"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.community.CutClustering.getClusterHierarchy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyResult);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_13CutClustering_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_13CutClustering_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_13CutClustering_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_13CutClustering_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_13CutClustering_4__reduce_cython__(((struct __pyx_obj_9networkit_9community_CutClustering *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_13CutClustering_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_CutClustering *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.CutClustering.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_13CutClustering_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_13CutClustering_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_13CutClustering_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_13CutClustering_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.CutClustering.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_13CutClustering_6__setstate_cython__(((struct __pyx_obj_9networkit_9community_CutClustering *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_13CutClustering_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_CutClustering *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.CutClustering.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_20DissimilarityMeasure_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_20DissimilarityMeasure_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20DissimilarityMeasure_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_20DissimilarityMeasure_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_20DissimilarityMeasure___reduce_cython__(((struct __pyx_obj_9networkit_9community_DissimilarityMeasure *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_20DissimilarityMeasure___reduce_cython__(struct __pyx_obj_9networkit_9community_DissimilarityMeasure *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_DissimilarityMeasure, (type(self), 0xe3b0c44, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_DissimilarityMeasure, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_DissimilarityMeasure, (type(self), 0xe3b0c44, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_DissimilarityMeasure, (type(self), 0xe3b0c44, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_DissimilarityMeas); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_DissimilarityMeasure, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_DissimilarityMeasure, (type(self), 0xe3b0c44, None), state
 *     else:
 *         return __pyx_unpickle_DissimilarityMeasure, (type(self), 0xe3b0c44, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_DissimilarityMeasure__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_DissimilarityMeas); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.community.DissimilarityMeasure.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_DissimilarityMeasure, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_DissimilarityMeasure__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_20DissimilarityMeasure_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_20DissimilarityMeasure_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20DissimilarityMeasure_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_20DissimilarityMeasure_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.DissimilarityMeasure.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_20DissimilarityMeasure_2__setstate_cython__(((struct __pyx_obj_9networkit_9community_DissimilarityMeasure *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_20DissimilarityMeasure_2__setstate_cython__(struct __pyx_obj_9networkit_9community_DissimilarityMeasure *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_DissimilarityMeasure, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_DissimilarityMeasure__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9networkit_9community___pyx_unpickle_DissimilarityMeasure__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_DissimilarityMeasure, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_DissimilarityMeasure__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.community.DissimilarityMeasure.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":985
 * 	cdef _NodeStructuralRandMeasure _this
 * 
 * 	def getDissimilarity(self, Graph G, Partition first, Partition second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_25NodeStructuralRandMeasure_1getDissimilarity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_25NodeStructuralRandMeasure_getDissimilarity, " \n\t\tgetDissimilarity(G, first, second)\n\n\t\tReturns dissimilarity between two partitions.\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tThe input graph.\n\t\tfirst : networkit.Partition\n\t\t\tThe first partition.\n\t\tsecond : networkit.Partition\n\t\t\tThe second partition.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tDissimilarity between partition first and second.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_25NodeStructuralRandMeasure_1getDissimilarity = {"getDissimilarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_25NodeStructuralRandMeasure_1getDissimilarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_25NodeStructuralRandMeasure_getDissimilarity};
static PyObject *__pyx_pw_9networkit_9community_25NodeStructuralRandMeasure_1getDissimilarity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDissimilarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_first,&__pyx_n_s_second,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 985, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_first)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 985, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, 1); __PYX_ERR(0, 985, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_second)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 985, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, 2); __PYX_ERR(0, 985, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getDissimilarity") < 0)) __PYX_ERR(0, 985, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_first = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
    __pyx_v_second = ((struct __pyx_obj_9networkit_10structures_Partition *)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 985, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.NodeStructuralRandMeasure.getDissimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 985, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_first), __pyx_ptype_9networkit_10structures_Partition, 1, "first", 0))) __PYX_ERR(0, 985, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_second), __pyx_ptype_9networkit_10structures_Partition, 1, "second", 0))) __PYX_ERR(0, 985, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_25NodeStructuralRandMeasure_getDissimilarity(((struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure *)__pyx_v_self), __pyx_v_G, __pyx_v_first, __pyx_v_second);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_25NodeStructuralRandMeasure_getDissimilarity(struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second) {
  double __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDissimilarity", 1);

  /* "networkit/community.pyx":1006
 * 		"""
 * 		cdef double ret
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)
 * 		return ret
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "networkit/community.pyx":1007
 * 		cdef double ret
 * 		with nogil:
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)             # <<<<<<<<<<<<<<
 * 		return ret
 * 
 */
        try {
          __pyx_t_1 = __pyx_v_self->_this.getDissimilarity(__pyx_v_G->_this, __pyx_v_first->_this, __pyx_v_second->_this);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1007, __pyx_L4_error)
        }
        __pyx_v_ret = __pyx_t_1;
      }

      /* "networkit/community.pyx":1006
 * 		"""
 * 		cdef double ret
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)
 * 		return ret
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "networkit/community.pyx":1008
 * 		with nogil:
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)
 * 		return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":985
 * 	cdef _NodeStructuralRandMeasure _this
 * 
 * 	def getDissimilarity(self, Graph G, Partition first, Partition second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.NodeStructuralRandMeasure.getDissimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_25NodeStructuralRandMeasure_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_25NodeStructuralRandMeasure_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_25NodeStructuralRandMeasure_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_25NodeStructuralRandMeasure_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_25NodeStructuralRandMeasure_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_25NodeStructuralRandMeasure_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.NodeStructuralRandMeasure.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_25NodeStructuralRandMeasure_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_25NodeStructuralRandMeasure_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_25NodeStructuralRandMeasure_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_25NodeStructuralRandMeasure_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.NodeStructuralRandMeasure.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_25NodeStructuralRandMeasure_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_25NodeStructuralRandMeasure_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.NodeStructuralRandMeasure.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1026
 * 	cdef _GraphStructuralRandMeasure _this
 * 
 * 	def getDissimilarity(self, Graph G, Partition first, Partition second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_26GraphStructuralRandMeasure_1getDissimilarity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_26GraphStructuralRandMeasure_getDissimilarity, " \n\t\tgetDissimilarity(G, first, second)\n\n\t\tReturns dissimilarity between two partitions.\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tThe graph.\n\t\tfirst : networkit.Partition\n\t\t\tThe first partition.\n\t\tsecond : networkit.Partition\n\t\t\tThe second partition.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tDissimilarity between partition first and second.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_26GraphStructuralRandMeasure_1getDissimilarity = {"getDissimilarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_26GraphStructuralRandMeasure_1getDissimilarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_26GraphStructuralRandMeasure_getDissimilarity};
static PyObject *__pyx_pw_9networkit_9community_26GraphStructuralRandMeasure_1getDissimilarity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDissimilarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_first,&__pyx_n_s_second,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1026, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_first)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1026, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, 1); __PYX_ERR(0, 1026, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_second)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1026, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, 2); __PYX_ERR(0, 1026, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getDissimilarity") < 0)) __PYX_ERR(0, 1026, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_first = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
    __pyx_v_second = ((struct __pyx_obj_9networkit_10structures_Partition *)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1026, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.GraphStructuralRandMeasure.getDissimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1026, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_first), __pyx_ptype_9networkit_10structures_Partition, 1, "first", 0))) __PYX_ERR(0, 1026, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_second), __pyx_ptype_9networkit_10structures_Partition, 1, "second", 0))) __PYX_ERR(0, 1026, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_26GraphStructuralRandMeasure_getDissimilarity(((struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure *)__pyx_v_self), __pyx_v_G, __pyx_v_first, __pyx_v_second);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_26GraphStructuralRandMeasure_getDissimilarity(struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second) {
  double __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDissimilarity", 1);

  /* "networkit/community.pyx":1047
 * 		"""
 * 		cdef double ret
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)
 * 		return ret
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "networkit/community.pyx":1048
 * 		cdef double ret
 * 		with nogil:
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)             # <<<<<<<<<<<<<<
 * 		return ret
 * 
 */
        try {
          __pyx_t_1 = __pyx_v_self->_this.getDissimilarity(__pyx_v_G->_this, __pyx_v_first->_this, __pyx_v_second->_this);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1048, __pyx_L4_error)
        }
        __pyx_v_ret = __pyx_t_1;
      }

      /* "networkit/community.pyx":1047
 * 		"""
 * 		cdef double ret
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)
 * 		return ret
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "networkit/community.pyx":1049
 * 		with nogil:
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)
 * 		return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1026
 * 	cdef _GraphStructuralRandMeasure _this
 * 
 * 	def getDissimilarity(self, Graph G, Partition first, Partition second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.GraphStructuralRandMeasure.getDissimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_26GraphStructuralRandMeasure_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_26GraphStructuralRandMeasure_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_26GraphStructuralRandMeasure_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_26GraphStructuralRandMeasure_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_26GraphStructuralRandMeasure_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_26GraphStructuralRandMeasure_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.GraphStructuralRandMeasure.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_26GraphStructuralRandMeasure_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_26GraphStructuralRandMeasure_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_26GraphStructuralRandMeasure_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_26GraphStructuralRandMeasure_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.GraphStructuralRandMeasure.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_26GraphStructuralRandMeasure_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_26GraphStructuralRandMeasure_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.GraphStructuralRandMeasure.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1064
 * 	cdef _JaccardMeasure _this
 * 
 * 	def getDissimilarity(self, Graph G, Partition first, Partition second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_14JaccardMeasure_1getDissimilarity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_14JaccardMeasure_getDissimilarity, " \n\t\tgetDissimilarity(G, first, second)\n\n\t\tReturns dissimilarity between two partitions.\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tThe input graph.\n\t\tfirst : networkit.Partition\n\t\t\tThe first partition.\n\t\tsecond : networkit.Partition\n\t\t\tThe second partition.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tDissimilarity between partition first and second.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_14JaccardMeasure_1getDissimilarity = {"getDissimilarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_14JaccardMeasure_1getDissimilarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_14JaccardMeasure_getDissimilarity};
static PyObject *__pyx_pw_9networkit_9community_14JaccardMeasure_1getDissimilarity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDissimilarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_first,&__pyx_n_s_second,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1064, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_first)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1064, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, 1); __PYX_ERR(0, 1064, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_second)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1064, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, 2); __PYX_ERR(0, 1064, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getDissimilarity") < 0)) __PYX_ERR(0, 1064, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_first = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
    __pyx_v_second = ((struct __pyx_obj_9networkit_10structures_Partition *)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1064, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.JaccardMeasure.getDissimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1064, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_first), __pyx_ptype_9networkit_10structures_Partition, 1, "first", 0))) __PYX_ERR(0, 1064, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_second), __pyx_ptype_9networkit_10structures_Partition, 1, "second", 0))) __PYX_ERR(0, 1064, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_14JaccardMeasure_getDissimilarity(((struct __pyx_obj_9networkit_9community_JaccardMeasure *)__pyx_v_self), __pyx_v_G, __pyx_v_first, __pyx_v_second);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_14JaccardMeasure_getDissimilarity(struct __pyx_obj_9networkit_9community_JaccardMeasure *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second) {
  double __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDissimilarity", 1);

  /* "networkit/community.pyx":1085
 * 		"""
 * 		cdef double ret
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)
 * 		return ret
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "networkit/community.pyx":1086
 * 		cdef double ret
 * 		with nogil:
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)             # <<<<<<<<<<<<<<
 * 		return ret
 * 
 */
        try {
          __pyx_t_1 = __pyx_v_self->_this.getDissimilarity(__pyx_v_G->_this, __pyx_v_first->_this, __pyx_v_second->_this);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1086, __pyx_L4_error)
        }
        __pyx_v_ret = __pyx_t_1;
      }

      /* "networkit/community.pyx":1085
 * 		"""
 * 		cdef double ret
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)
 * 		return ret
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "networkit/community.pyx":1087
 * 		with nogil:
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)
 * 		return ret             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/NMIDistance.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1064
 * 	cdef _JaccardMeasure _this
 * 
 * 	def getDissimilarity(self, Graph G, Partition first, Partition second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.JaccardMeasure.getDissimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_14JaccardMeasure_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_14JaccardMeasure_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_14JaccardMeasure_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_14JaccardMeasure_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_14JaccardMeasure_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_JaccardMeasure *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_14JaccardMeasure_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_JaccardMeasure *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.JaccardMeasure.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_14JaccardMeasure_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_14JaccardMeasure_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_14JaccardMeasure_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_14JaccardMeasure_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.JaccardMeasure.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_14JaccardMeasure_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_JaccardMeasure *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_14JaccardMeasure_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_JaccardMeasure *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.JaccardMeasure.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1104
 * 	cdef _NMIDistance _this
 * 
 * 	def getDissimilarity(self, Graph G, Partition first, Partition second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_11NMIDistance_1getDissimilarity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_11NMIDistance_getDissimilarity, " \n\t\tgetDissimilarity(G, first, second)\n\n\t\tReturns dissimilarity between two partitions.\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tThe graph.\n\t\tfirst : networkit.Partition\n\t\t\tThe first partition.\n\t\tsecond : networkit.Partition\n\t\t\tThe second partition.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tDissimilarity between partition first and second.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_11NMIDistance_1getDissimilarity = {"getDissimilarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_11NMIDistance_1getDissimilarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_11NMIDistance_getDissimilarity};
static PyObject *__pyx_pw_9networkit_9community_11NMIDistance_1getDissimilarity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDissimilarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_first,&__pyx_n_s_second,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1104, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_first)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1104, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, 1); __PYX_ERR(0, 1104, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_second)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1104, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, 2); __PYX_ERR(0, 1104, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getDissimilarity") < 0)) __PYX_ERR(0, 1104, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_first = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
    __pyx_v_second = ((struct __pyx_obj_9networkit_10structures_Partition *)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1104, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.NMIDistance.getDissimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1104, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_first), __pyx_ptype_9networkit_10structures_Partition, 1, "first", 0))) __PYX_ERR(0, 1104, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_second), __pyx_ptype_9networkit_10structures_Partition, 1, "second", 0))) __PYX_ERR(0, 1104, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_11NMIDistance_getDissimilarity(((struct __pyx_obj_9networkit_9community_NMIDistance *)__pyx_v_self), __pyx_v_G, __pyx_v_first, __pyx_v_second);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_11NMIDistance_getDissimilarity(struct __pyx_obj_9networkit_9community_NMIDistance *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second) {
  double __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDissimilarity", 1);

  /* "networkit/community.pyx":1125
 * 		"""
 * 		cdef double ret
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)
 * 		return ret
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "networkit/community.pyx":1126
 * 		cdef double ret
 * 		with nogil:
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)             # <<<<<<<<<<<<<<
 * 		return ret
 * 
 */
        try {
          __pyx_t_1 = __pyx_v_self->_this.getDissimilarity(__pyx_v_G->_this, __pyx_v_first->_this, __pyx_v_second->_this);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1126, __pyx_L4_error)
        }
        __pyx_v_ret = __pyx_t_1;
      }

      /* "networkit/community.pyx":1125
 * 		"""
 * 		cdef double ret
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)
 * 		return ret
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "networkit/community.pyx":1127
 * 		with nogil:
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)
 * 		return ret             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/AdjustedRandMeasure.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1104
 * 	cdef _NMIDistance _this
 * 
 * 	def getDissimilarity(self, Graph G, Partition first, Partition second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.NMIDistance.getDissimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_11NMIDistance_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_11NMIDistance_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_11NMIDistance_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_11NMIDistance_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_11NMIDistance_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_NMIDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_11NMIDistance_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_NMIDistance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.NMIDistance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_11NMIDistance_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_11NMIDistance_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_11NMIDistance_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_11NMIDistance_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.NMIDistance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_11NMIDistance_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_NMIDistance *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_11NMIDistance_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_NMIDistance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.NMIDistance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1142
 * 	cdef _AdjustedRandMeasure _this
 * 
 * 	def getDissimilarity(self, Graph G not None, Partition first not None, Partition second not None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19AdjustedRandMeasure_1getDissimilarity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_19AdjustedRandMeasure_getDissimilarity, " \n\t\tgetDissimilarity(G, first, second)\n\n\t\tReturns dissimilarity between two partitions.\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tThe input graph.\n\t\tfirst: networkit.Partition\n\t\t\tThe first partition.\n\t\tsecond: networkit.Partition\n\t\t\tThe second partition.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tDissimilarity between partition first and second.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_19AdjustedRandMeasure_1getDissimilarity = {"getDissimilarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19AdjustedRandMeasure_1getDissimilarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_19AdjustedRandMeasure_getDissimilarity};
static PyObject *__pyx_pw_9networkit_9community_19AdjustedRandMeasure_1getDissimilarity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDissimilarity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_first,&__pyx_n_s_second,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1142, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_first)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1142, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, 1); __PYX_ERR(0, 1142, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_second)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1142, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, 2); __PYX_ERR(0, 1142, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getDissimilarity") < 0)) __PYX_ERR(0, 1142, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_first = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
    __pyx_v_second = ((struct __pyx_obj_9networkit_10structures_Partition *)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1142, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.AdjustedRandMeasure.getDissimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 1142, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_first), __pyx_ptype_9networkit_10structures_Partition, 0, "first", 0))) __PYX_ERR(0, 1142, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_second), __pyx_ptype_9networkit_10structures_Partition, 0, "second", 0))) __PYX_ERR(0, 1142, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_19AdjustedRandMeasure_getDissimilarity(((struct __pyx_obj_9networkit_9community_AdjustedRandMeasure *)__pyx_v_self), __pyx_v_G, __pyx_v_first, __pyx_v_second);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19AdjustedRandMeasure_getDissimilarity(struct __pyx_obj_9networkit_9community_AdjustedRandMeasure *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second) {
  double __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDissimilarity", 1);

  /* "networkit/community.pyx":1163
 * 		"""
 * 		cdef double ret
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)
 * 		return ret
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "networkit/community.pyx":1164
 * 		cdef double ret
 * 		with nogil:
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)             # <<<<<<<<<<<<<<
 * 		return ret
 * 
 */
        try {
          __pyx_t_1 = __pyx_v_self->_this.getDissimilarity(__pyx_v_G->_this, __pyx_v_first->_this, __pyx_v_second->_this);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1164, __pyx_L4_error)
        }
        __pyx_v_ret = __pyx_t_1;
      }

      /* "networkit/community.pyx":1163
 * 		"""
 * 		cdef double ret
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)
 * 		return ret
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "networkit/community.pyx":1165
 * 		with nogil:
 * 			ret = self._this.getDissimilarity(G._this, first._this, second._this)
 * 		return ret             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/LocalCommunityEvaluation.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1142
 * 	cdef _AdjustedRandMeasure _this
 * 
 * 	def getDissimilarity(self, Graph G not None, Partition first not None, Partition second not None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.AdjustedRandMeasure.getDissimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19AdjustedRandMeasure_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_19AdjustedRandMeasure_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19AdjustedRandMeasure_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_19AdjustedRandMeasure_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_19AdjustedRandMeasure_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_AdjustedRandMeasure *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19AdjustedRandMeasure_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_AdjustedRandMeasure *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.AdjustedRandMeasure.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19AdjustedRandMeasure_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_19AdjustedRandMeasure_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19AdjustedRandMeasure_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_19AdjustedRandMeasure_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.AdjustedRandMeasure.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_19AdjustedRandMeasure_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_AdjustedRandMeasure *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19AdjustedRandMeasure_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_AdjustedRandMeasure *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.AdjustedRandMeasure.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1185
 * 	This is the base class both for Partitions as well as for Covers.
 * 	"""
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == LocalCommunityEvaluation:
 * 			raise RuntimeError("Error, you may not use LocalCommunityEvaluation directly, use a sub-class instead")
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_24LocalCommunityEvaluation_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_24LocalCommunityEvaluation_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_namedargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_9networkit_9community_24LocalCommunityEvaluation___init__(((struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *)__pyx_v_self), __pyx_v_args, __pyx_v_namedargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_namedargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_24LocalCommunityEvaluation___init__(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "networkit/community.pyx":1186
 * 	"""
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == LocalCommunityEvaluation:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use LocalCommunityEvaluation directly, use a sub-class instead")
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), ((PyObject *)__pyx_ptype_9networkit_9community_LocalCommunityEvaluation), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "networkit/community.pyx":1187
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == LocalCommunityEvaluation:
 * 			raise RuntimeError("Error, you may not use LocalCommunityEvaluation directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def getWeightedAverage(self):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1187, __pyx_L1_error)

    /* "networkit/community.pyx":1186
 * 	"""
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == LocalCommunityEvaluation:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use LocalCommunityEvaluation directly, use a sub-class instead")
 * 
 */
  }

  /* "networkit/community.pyx":1185
 * 	This is the base class both for Partitions as well as for Covers.
 * 	"""
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == LocalCommunityEvaluation:
 * 			raise RuntimeError("Error, you may not use LocalCommunityEvaluation directly, use a sub-class instead")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.community.LocalCommunityEvaluation.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1189
 * 			raise RuntimeError("Error, you may not use LocalCommunityEvaluation directly, use a sub-class instead")
 * 
 * 	def getWeightedAverage(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getWeightedAverage()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_3getWeightedAverage(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_24LocalCommunityEvaluation_2getWeightedAverage, " \n\t\tgetWeightedAverage()\n\n\t\tGet the average value weighted by cluster size.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tThe weighted average value.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_3getWeightedAverage = {"getWeightedAverage", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_3getWeightedAverage, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_24LocalCommunityEvaluation_2getWeightedAverage};
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_3getWeightedAverage(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getWeightedAverage (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getWeightedAverage", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getWeightedAverage", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_24LocalCommunityEvaluation_2getWeightedAverage(((struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_2getWeightedAverage(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getWeightedAverage", 1);

  /* "networkit/community.pyx":1200
 * 			The weighted average value.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getWeightedAverage()
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.__pyx_base._this == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "networkit/community.pyx":1201
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getWeightedAverage()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1201, __pyx_L1_error)

    /* "networkit/community.pyx":1200
 * 			The weighted average value.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getWeightedAverage()
 */
  }

  /* "networkit/community.pyx":1202
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getWeightedAverage()             # <<<<<<<<<<<<<<
 * 
 * 	def getUnweightedAverage(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = ((NetworKit::LocalCommunityEvaluation *)__pyx_v_self->__pyx_base.__pyx_base._this)->getWeightedAverage();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1202, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1189
 * 			raise RuntimeError("Error, you may not use LocalCommunityEvaluation directly, use a sub-class instead")
 * 
 * 	def getWeightedAverage(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getWeightedAverage()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.LocalCommunityEvaluation.getWeightedAverage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1204
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getWeightedAverage()
 * 
 * 	def getUnweightedAverage(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getUnweightedAverage()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_5getUnweightedAverage(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_24LocalCommunityEvaluation_4getUnweightedAverage, " \n\t\tgetUnweightedAverage()\n\t\t\n\t\tGet the (unweighted) average value of all clusters.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tThe unweighted average value.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_5getUnweightedAverage = {"getUnweightedAverage", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_5getUnweightedAverage, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_24LocalCommunityEvaluation_4getUnweightedAverage};
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_5getUnweightedAverage(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getUnweightedAverage (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getUnweightedAverage", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getUnweightedAverage", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_24LocalCommunityEvaluation_4getUnweightedAverage(((struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_4getUnweightedAverage(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getUnweightedAverage", 1);

  /* "networkit/community.pyx":1215
 * 			The unweighted average value.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getUnweightedAverage()
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.__pyx_base._this == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "networkit/community.pyx":1216
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getUnweightedAverage()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1216, __pyx_L1_error)

    /* "networkit/community.pyx":1215
 * 			The unweighted average value.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getUnweightedAverage()
 */
  }

  /* "networkit/community.pyx":1217
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getUnweightedAverage()             # <<<<<<<<<<<<<<
 * 
 * 	def getMaximumValue(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = ((NetworKit::LocalCommunityEvaluation *)__pyx_v_self->__pyx_base.__pyx_base._this)->getUnweightedAverage();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1217, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1204
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getWeightedAverage()
 * 
 * 	def getUnweightedAverage(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getUnweightedAverage()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.LocalCommunityEvaluation.getUnweightedAverage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1219
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getUnweightedAverage()
 * 
 * 	def getMaximumValue(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getMaximumValue()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_7getMaximumValue(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_24LocalCommunityEvaluation_6getMaximumValue, " \n\t\tgetMaximumValue()\n\n\t\tGet the maximum value of all clusters.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tThe maximum value.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_7getMaximumValue = {"getMaximumValue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_7getMaximumValue, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_24LocalCommunityEvaluation_6getMaximumValue};
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_7getMaximumValue(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMaximumValue (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getMaximumValue", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getMaximumValue", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_24LocalCommunityEvaluation_6getMaximumValue(((struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_6getMaximumValue(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMaximumValue", 1);

  /* "networkit/community.pyx":1230
 * 			The maximum value.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getMaximumValue()
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.__pyx_base._this == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "networkit/community.pyx":1231
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getMaximumValue()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1231, __pyx_L1_error)

    /* "networkit/community.pyx":1230
 * 			The maximum value.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getMaximumValue()
 */
  }

  /* "networkit/community.pyx":1232
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getMaximumValue()             # <<<<<<<<<<<<<<
 * 
 * 	def getMinimumValue(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = ((NetworKit::LocalCommunityEvaluation *)__pyx_v_self->__pyx_base.__pyx_base._this)->getMaximumValue();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1232, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1219
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getUnweightedAverage()
 * 
 * 	def getMaximumValue(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getMaximumValue()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.LocalCommunityEvaluation.getMaximumValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1234
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getMaximumValue()
 * 
 * 	def getMinimumValue(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getMinimumValue()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_9getMinimumValue(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_24LocalCommunityEvaluation_8getMinimumValue, " \n\t\tgetMinimumValue()\n\n\t\tGet the minimum value of all clusters.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tThe minimum value.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_9getMinimumValue = {"getMinimumValue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_9getMinimumValue, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_24LocalCommunityEvaluation_8getMinimumValue};
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_9getMinimumValue(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMinimumValue (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getMinimumValue", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getMinimumValue", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_24LocalCommunityEvaluation_8getMinimumValue(((struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_8getMinimumValue(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMinimumValue", 1);

  /* "networkit/community.pyx":1245
 * 			The minimum value.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getMinimumValue()
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.__pyx_base._this == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "networkit/community.pyx":1246
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getMinimumValue()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1246, __pyx_L1_error)

    /* "networkit/community.pyx":1245
 * 			The minimum value.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getMinimumValue()
 */
  }

  /* "networkit/community.pyx":1247
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getMinimumValue()             # <<<<<<<<<<<<<<
 * 
 * 	def getValue(self, index i):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = ((NetworKit::LocalCommunityEvaluation *)__pyx_v_self->__pyx_base.__pyx_base._this)->getMinimumValue();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1247, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1234
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getMaximumValue()
 * 
 * 	def getMinimumValue(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getMinimumValue()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.LocalCommunityEvaluation.getMinimumValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1249
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getMinimumValue()
 * 
 * 	def getValue(self, index i):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getValue(index i)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_11getValue(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_24LocalCommunityEvaluation_10getValue, " \n\t\tgetValue(index i)\n\t\t\n\t\tGet the value of the specified cluster.\n\n\t\tParameters\n\t\t----------\n\t\ti : int\n\t\t\tThe cluster to get the value for.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tThe value of cluster i.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_11getValue = {"getValue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_11getValue, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_24LocalCommunityEvaluation_10getValue};
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_11getValue(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __pyx_t_9networkit_10structures_index __pyx_v_i;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValue (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_i)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1249, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getValue") < 0)) __PYX_ERR(0, 1249, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_i = __Pyx_PyInt_As_uint64_t(values[0]); if (unlikely((__pyx_v_i == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1249, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValue", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1249, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.LocalCommunityEvaluation.getValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_24LocalCommunityEvaluation_10getValue(((struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *)__pyx_v_self), __pyx_v_i);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_10getValue(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self, __pyx_t_9networkit_10structures_index __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValue", 1);

  /* "networkit/community.pyx":1265
 * 			The value of cluster i.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getValue(i)
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.__pyx_base._this == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "networkit/community.pyx":1266
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getValue(i)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1266, __pyx_L1_error)

    /* "networkit/community.pyx":1265
 * 			The value of cluster i.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getValue(i)
 */
  }

  /* "networkit/community.pyx":1267
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getValue(i)             # <<<<<<<<<<<<<<
 * 
 * 	def getValues(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = ((NetworKit::LocalCommunityEvaluation *)__pyx_v_self->__pyx_base.__pyx_base._this)->getValue(__pyx_v_i);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1267, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1249
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getMinimumValue()
 * 
 * 	def getValue(self, index i):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getValue(index i)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.LocalCommunityEvaluation.getValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1269
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getValue(i)
 * 
 * 	def getValues(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getValues()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_13getValues(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_24LocalCommunityEvaluation_12getValues, " \n\t\tgetValues()\n\t\t\n\t\tGet the values of all clusters.\n\n\t\tReturns\n\t\t-------\n\t\tlist(float)\n\t\t\tThe values of all clusters.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_13getValues = {"getValues", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_13getValues, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_24LocalCommunityEvaluation_12getValues};
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_13getValues(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValues (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getValues", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getValues", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_24LocalCommunityEvaluation_12getValues(((struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_12getValues(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<double>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValues", 1);

  /* "networkit/community.pyx":1280
 * 			The values of all clusters.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getValues()
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.__pyx_base._this == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "networkit/community.pyx":1281
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getValues()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1281, __pyx_L1_error)

    /* "networkit/community.pyx":1280
 * 			The values of all clusters.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getValues()
 */
  }

  /* "networkit/community.pyx":1282
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getValues()             # <<<<<<<<<<<<<<
 * 
 * 	def isSmallBetter(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = ((NetworKit::LocalCommunityEvaluation *)__pyx_v_self->__pyx_base.__pyx_base._this)->getValues();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1282, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1269
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getValue(i)
 * 
 * 	def getValues(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getValues()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.LocalCommunityEvaluation.getValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1284
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getValues()
 * 
 * 	def isSmallBetter(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		isSmallBetter()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_15isSmallBetter(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_24LocalCommunityEvaluation_14isSmallBetter, " \n\t\tisSmallBetter()\n\n\t\tIf small values are better (otherwise large values are better).\n\n\t\tReturns\n\t\t-------\n\t\tbool\n\t\t\tIf small values are better.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_15isSmallBetter = {"isSmallBetter", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_15isSmallBetter, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_24LocalCommunityEvaluation_14isSmallBetter};
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_15isSmallBetter(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isSmallBetter (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("isSmallBetter", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "isSmallBetter", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_24LocalCommunityEvaluation_14isSmallBetter(((struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_14isSmallBetter(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isSmallBetter", 1);

  /* "networkit/community.pyx":1295
 * 			If small values are better.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).isSmallBetter()
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.__pyx_base._this == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "networkit/community.pyx":1296
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return (<_LocalCommunityEvaluation*>(self._this)).isSmallBetter()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1296, __pyx_L1_error)

    /* "networkit/community.pyx":1295
 * 			If small values are better.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).isSmallBetter()
 */
  }

  /* "networkit/community.pyx":1297
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_LocalCommunityEvaluation*>(self._this)).isSmallBetter()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/LocalPartitionEvaluation.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = ((NetworKit::LocalCommunityEvaluation *)__pyx_v_self->__pyx_base.__pyx_base._this)->isSmallBetter();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1297, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1284
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getValues()
 * 
 * 	def isSmallBetter(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		isSmallBetter()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.LocalCommunityEvaluation.isSmallBetter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_17__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_17__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_17__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_17__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_24LocalCommunityEvaluation_16__reduce_cython__(((struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.LocalCommunityEvaluation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_19__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_19__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_19__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_19__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.LocalCommunityEvaluation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_24LocalCommunityEvaluation_18__setstate_cython__(((struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_24LocalCommunityEvaluation_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.LocalCommunityEvaluation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1314
 * 	cdef Partition _P
 * 
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == LocalPartitionEvaluation:
 * 			raise RuntimeError("Error, you may not use LocalPartitionEvaluation directly, use a sub-class instead")
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_24LocalPartitionEvaluation_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_24LocalPartitionEvaluation_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_namedargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_9networkit_9community_24LocalPartitionEvaluation___init__(((struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *)__pyx_v_self), __pyx_v_args, __pyx_v_namedargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_namedargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_24LocalPartitionEvaluation___init__(struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "networkit/community.pyx":1315
 * 
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == LocalPartitionEvaluation:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use LocalPartitionEvaluation directly, use a sub-class instead")
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), ((PyObject *)__pyx_ptype_9networkit_9community_LocalPartitionEvaluation), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1315, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "networkit/community.pyx":1316
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == LocalPartitionEvaluation:
 * 			raise RuntimeError("Error, you may not use LocalPartitionEvaluation directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def __cinit__(self, Graph G not None, Partition P not None, *args, **namedargs):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1316, __pyx_L1_error)

    /* "networkit/community.pyx":1315
 * 
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == LocalPartitionEvaluation:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use LocalPartitionEvaluation directly, use a sub-class instead")
 * 
 */
  }

  /* "networkit/community.pyx":1314
 * 	cdef Partition _P
 * 
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == LocalPartitionEvaluation:
 * 			raise RuntimeError("Error, you may not use LocalPartitionEvaluation directly, use a sub-class instead")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.community.LocalPartitionEvaluation.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1318
 * 			raise RuntimeError("Error, you may not use LocalPartitionEvaluation directly, use a sub-class instead")
 * 
 * 	def __cinit__(self, Graph G not None, Partition P not None, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._P = P
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_24LocalPartitionEvaluation_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_24LocalPartitionEvaluation_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_P = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_namedargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_v_namedargs = PyDict_New(); if (unlikely(!__pyx_v_namedargs)) return -1;
  __Pyx_GOTREF(__pyx_v_namedargs);
  __pyx_v_args = __Pyx_ArgsSlice_VARARGS(__pyx_args, 2, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_DECREF(__pyx_v_namedargs); __pyx_v_namedargs = 0;
    __Pyx_RefNannyFinishContext();
    return -1;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_P,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1318, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_P)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1318, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 2, 1); __PYX_ERR(0, 1318, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 2) ? kwd_pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_namedargs, values + 0, used_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1318, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs < 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_P = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 2, __pyx_nargs); __PYX_ERR(0, 1318, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_namedargs); __pyx_v_namedargs = 0;
  __Pyx_AddTraceback("networkit.community.LocalPartitionEvaluation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 1318, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_P), __pyx_ptype_9networkit_10structures_Partition, 0, "P", 0))) __PYX_ERR(0, 1318, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_24LocalPartitionEvaluation_2__cinit__(((struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *)__pyx_v_self), __pyx_v_G, __pyx_v_P, __pyx_v_args, __pyx_v_namedargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_namedargs);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_24LocalPartitionEvaluation_2__cinit__(struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_P, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/community.pyx":1319
 * 
 * 	def __cinit__(self, Graph G not None, Partition P not None, *args, **namedargs):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._P = P
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/community.pyx":1320
 * 	def __cinit__(self, Graph G not None, Partition P not None, *args, **namedargs):
 * 		self._G = G
 * 		self._P = P             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  __Pyx_INCREF((PyObject *)__pyx_v_P);
  __Pyx_GIVEREF((PyObject *)__pyx_v_P);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_P);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_P);
  __pyx_v_self->_P = __pyx_v_P;

  /* "networkit/community.pyx":1318
 * 			raise RuntimeError("Error, you may not use LocalPartitionEvaluation directly, use a sub-class instead")
 * 
 * 	def __cinit__(self, Graph G not None, Partition P not None, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._P = P
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1322
 * 		self._P = P
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		# Just to be sure that everything is properly deleted
 * 		self._G = None
 */

/* Python wrapper */
static void __pyx_pw_9networkit_9community_24LocalPartitionEvaluation_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_9community_24LocalPartitionEvaluation_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_9networkit_9community_24LocalPartitionEvaluation_4__dealloc__(((struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_9community_24LocalPartitionEvaluation_4__dealloc__(struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 1);

  /* "networkit/community.pyx":1324
 * 	def __dealloc__(self):
 * 		# Just to be sure that everything is properly deleted
 * 		self._G = None             # <<<<<<<<<<<<<<
 * 		self._P = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None);

  /* "networkit/community.pyx":1325
 * 		# Just to be sure that everything is properly deleted
 * 		self._G = None
 * 		self._P = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_P);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_P);
  __pyx_v_self->_P = ((struct __pyx_obj_9networkit_10structures_Partition *)Py_None);

  /* "networkit/community.pyx":1322
 * 		self._P = P
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		# Just to be sure that everything is properly deleted
 * 		self._G = None
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_24LocalPartitionEvaluation_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_24LocalPartitionEvaluation_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalPartitionEvaluation_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_24LocalPartitionEvaluation_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_24LocalPartitionEvaluation_6__reduce_cython__(((struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_24LocalPartitionEvaluation_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.LocalPartitionEvaluation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_24LocalPartitionEvaluation_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_24LocalPartitionEvaluation_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalPartitionEvaluation_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_24LocalPartitionEvaluation_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.LocalPartitionEvaluation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_24LocalPartitionEvaluation_8__setstate_cython__(((struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_24LocalPartitionEvaluation_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.LocalPartitionEvaluation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1344
 * 	cdef Cover _C
 * 
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == LocalCoverEvaluation:
 * 			raise RuntimeError("Error, you may not use LocalCoverEvaluation directly, use a sub-class instead")
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_20LocalCoverEvaluation_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_20LocalCoverEvaluation_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_namedargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_9networkit_9community_20LocalCoverEvaluation___init__(((struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *)__pyx_v_self), __pyx_v_args, __pyx_v_namedargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_namedargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_20LocalCoverEvaluation___init__(struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "networkit/community.pyx":1345
 * 
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == LocalCoverEvaluation:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use LocalCoverEvaluation directly, use a sub-class instead")
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), ((PyObject *)__pyx_ptype_9networkit_9community_LocalCoverEvaluation), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1345, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1345, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "networkit/community.pyx":1346
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == LocalCoverEvaluation:
 * 			raise RuntimeError("Error, you may not use LocalCoverEvaluation directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def __cinit__(self, Graph G not None, Cover C not None, *args, **namedargs):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1346, __pyx_L1_error)

    /* "networkit/community.pyx":1345
 * 
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == LocalCoverEvaluation:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use LocalCoverEvaluation directly, use a sub-class instead")
 * 
 */
  }

  /* "networkit/community.pyx":1344
 * 	cdef Cover _C
 * 
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == LocalCoverEvaluation:
 * 			raise RuntimeError("Error, you may not use LocalCoverEvaluation directly, use a sub-class instead")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.community.LocalCoverEvaluation.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1348
 * 			raise RuntimeError("Error, you may not use LocalCoverEvaluation directly, use a sub-class instead")
 * 
 * 	def __cinit__(self, Graph G not None, Cover C not None, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._C = C
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_20LocalCoverEvaluation_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_20LocalCoverEvaluation_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_C = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_namedargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_v_namedargs = PyDict_New(); if (unlikely(!__pyx_v_namedargs)) return -1;
  __Pyx_GOTREF(__pyx_v_namedargs);
  __pyx_v_args = __Pyx_ArgsSlice_VARARGS(__pyx_args, 2, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_DECREF(__pyx_v_namedargs); __pyx_v_namedargs = 0;
    __Pyx_RefNannyFinishContext();
    return -1;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_C,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1348, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_C)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1348, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 2, 1); __PYX_ERR(0, 1348, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 2) ? kwd_pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_namedargs, values + 0, used_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1348, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs < 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_C = ((struct __pyx_obj_9networkit_10structures_Cover *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 2, __pyx_nargs); __PYX_ERR(0, 1348, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_namedargs); __pyx_v_namedargs = 0;
  __Pyx_AddTraceback("networkit.community.LocalCoverEvaluation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 1348, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_C), __pyx_ptype_9networkit_10structures_Cover, 0, "C", 0))) __PYX_ERR(0, 1348, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_20LocalCoverEvaluation_2__cinit__(((struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *)__pyx_v_self), __pyx_v_G, __pyx_v_C, __pyx_v_args, __pyx_v_namedargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_namedargs);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_20LocalCoverEvaluation_2__cinit__(struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_C, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/community.pyx":1349
 * 
 * 	def __cinit__(self, Graph G not None, Cover C not None, *args, **namedargs):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._C = C
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/community.pyx":1350
 * 	def __cinit__(self, Graph G not None, Cover C not None, *args, **namedargs):
 * 		self._G = G
 * 		self._C = C             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  __Pyx_INCREF((PyObject *)__pyx_v_C);
  __Pyx_GIVEREF((PyObject *)__pyx_v_C);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_C);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_C);
  __pyx_v_self->_C = __pyx_v_C;

  /* "networkit/community.pyx":1348
 * 			raise RuntimeError("Error, you may not use LocalCoverEvaluation directly, use a sub-class instead")
 * 
 * 	def __cinit__(self, Graph G not None, Cover C not None, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._C = C
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1352
 * 		self._C = C
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		# Just to be sure that everything is properly deleted
 * 		self._G = None
 */

/* Python wrapper */
static void __pyx_pw_9networkit_9community_20LocalCoverEvaluation_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_9community_20LocalCoverEvaluation_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_9networkit_9community_20LocalCoverEvaluation_4__dealloc__(((struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_9community_20LocalCoverEvaluation_4__dealloc__(struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 1);

  /* "networkit/community.pyx":1354
 * 	def __dealloc__(self):
 * 		# Just to be sure that everything is properly deleted
 * 		self._G = None             # <<<<<<<<<<<<<<
 * 		self._C = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None);

  /* "networkit/community.pyx":1355
 * 		# Just to be sure that everything is properly deleted
 * 		self._G = None
 * 		self._C = None             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/IntrapartitionDensity.hpp>":
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_C);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_C);
  __pyx_v_self->_C = ((struct __pyx_obj_9networkit_10structures_Cover *)Py_None);

  /* "networkit/community.pyx":1352
 * 		self._C = C
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		# Just to be sure that everything is properly deleted
 * 		self._G = None
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_20LocalCoverEvaluation_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_20LocalCoverEvaluation_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20LocalCoverEvaluation_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_20LocalCoverEvaluation_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_20LocalCoverEvaluation_6__reduce_cython__(((struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_20LocalCoverEvaluation_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.LocalCoverEvaluation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_20LocalCoverEvaluation_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_20LocalCoverEvaluation_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20LocalCoverEvaluation_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_20LocalCoverEvaluation_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.LocalCoverEvaluation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_20LocalCoverEvaluation_8__setstate_cython__(((struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_20LocalCoverEvaluation_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.LocalCoverEvaluation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1377
 * 		The partition that shall be evaluated.
 * 	"""
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._this = new _IntrapartitionDensity(self._G._this, self._P._this)
 * 
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_21IntrapartitionDensity_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_21IntrapartitionDensity_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_9networkit_9community_21IntrapartitionDensity___cinit__(((struct __pyx_obj_9networkit_9community_IntrapartitionDensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_21IntrapartitionDensity___cinit__(struct __pyx_obj_9networkit_9community_IntrapartitionDensity *__pyx_v_self) {
  int __pyx_r;
  NetworKit::IntrapartitionDensity *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "networkit/community.pyx":1378
 * 	"""
 * 	def __cinit__(self):
 * 		self._this = new _IntrapartitionDensity(self._G._this, self._P._this)             # <<<<<<<<<<<<<<
 * 
 * 	def getGlobal(self):
 */
  try {
    __pyx_t_1 = new NetworKit::IntrapartitionDensity(__pyx_v_self->__pyx_base._G->_this, __pyx_v_self->__pyx_base._P->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1378, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/community.pyx":1377
 * 		The partition that shall be evaluated.
 * 	"""
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._this = new _IntrapartitionDensity(self._G._this, self._P._this)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.IntrapartitionDensity.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "networkit/community.pyx":1380
 * 		self._this = new _IntrapartitionDensity(self._G._this, self._P._this)
 * 
 * 	def getGlobal(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getGlobal()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_21IntrapartitionDensity_3getGlobal(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_21IntrapartitionDensity_2getGlobal, " \n\t\tgetGlobal()\n\n\t\tGet the global intra-cluster density.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tThe global intra-cluster density.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_21IntrapartitionDensity_3getGlobal = {"getGlobal", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_21IntrapartitionDensity_3getGlobal, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_21IntrapartitionDensity_2getGlobal};
static PyObject *__pyx_pw_9networkit_9community_21IntrapartitionDensity_3getGlobal(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getGlobal (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getGlobal", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getGlobal", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_21IntrapartitionDensity_2getGlobal(((struct __pyx_obj_9networkit_9community_IntrapartitionDensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_21IntrapartitionDensity_2getGlobal(struct __pyx_obj_9networkit_9community_IntrapartitionDensity *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getGlobal", 1);

  /* "networkit/community.pyx":1391
 * 			The global intra-cluster density.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_IntrapartitionDensity*>(self._this)).getGlobal()
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._this == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "networkit/community.pyx":1392
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return (<_IntrapartitionDensity*>(self._this)).getGlobal()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1392, __pyx_L1_error)

    /* "networkit/community.pyx":1391
 * 			The global intra-cluster density.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_IntrapartitionDensity*>(self._this)).getGlobal()
 */
  }

  /* "networkit/community.pyx":1393
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_IntrapartitionDensity*>(self._this)).getGlobal()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = ((NetworKit::IntrapartitionDensity *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._this)->getGlobal();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1393, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1380
 * 		self._this = new _IntrapartitionDensity(self._G._this, self._P._this)
 * 
 * 	def getGlobal(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getGlobal()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.IntrapartitionDensity.getGlobal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_21IntrapartitionDensity_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_21IntrapartitionDensity_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_21IntrapartitionDensity_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_21IntrapartitionDensity_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_21IntrapartitionDensity_4__reduce_cython__(((struct __pyx_obj_9networkit_9community_IntrapartitionDensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_21IntrapartitionDensity_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_IntrapartitionDensity *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.IntrapartitionDensity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_21IntrapartitionDensity_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_21IntrapartitionDensity_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_21IntrapartitionDensity_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_21IntrapartitionDensity_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.IntrapartitionDensity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_21IntrapartitionDensity_6__setstate_cython__(((struct __pyx_obj_9networkit_9community_IntrapartitionDensity *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_21IntrapartitionDensity_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_IntrapartitionDensity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.IntrapartitionDensity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1426
 * 		The partition that shall be evaluated.
 * 	"""
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._this = new _IsolatedInterpartitionConductance(self._G._this, self._P._this)
 * 
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_33IsolatedInterpartitionConductance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_33IsolatedInterpartitionConductance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_9networkit_9community_33IsolatedInterpartitionConductance___cinit__(((struct __pyx_obj_9networkit_9community_IsolatedInterpartitionConductance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_33IsolatedInterpartitionConductance___cinit__(struct __pyx_obj_9networkit_9community_IsolatedInterpartitionConductance *__pyx_v_self) {
  int __pyx_r;
  NetworKit::IsolatedInterpartitionConductance *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "networkit/community.pyx":1427
 * 	"""
 * 	def __cinit__(self):
 * 		self._this = new _IsolatedInterpartitionConductance(self._G._this, self._P._this)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/IsolatedInterpartitionExpansion.hpp>":
 */
  try {
    __pyx_t_1 = new NetworKit::IsolatedInterpartitionConductance(__pyx_v_self->__pyx_base._G->_this, __pyx_v_self->__pyx_base._P->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1427, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/community.pyx":1426
 * 		The partition that shall be evaluated.
 * 	"""
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._this = new _IsolatedInterpartitionConductance(self._G._this, self._P._this)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.IsolatedInterpartitionConductance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_33IsolatedInterpartitionConductance_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_33IsolatedInterpartitionConductance_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_33IsolatedInterpartitionConductance_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_33IsolatedInterpartitionConductance_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_33IsolatedInterpartitionConductance_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_IsolatedInterpartitionConductance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_33IsolatedInterpartitionConductance_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_IsolatedInterpartitionConductance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.IsolatedInterpartitionConductance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_33IsolatedInterpartitionConductance_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_33IsolatedInterpartitionConductance_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_33IsolatedInterpartitionConductance_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_33IsolatedInterpartitionConductance_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.IsolatedInterpartitionConductance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_33IsolatedInterpartitionConductance_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_IsolatedInterpartitionConductance *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_33IsolatedInterpartitionConductance_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_IsolatedInterpartitionConductance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.IsolatedInterpartitionConductance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1459
 * 		The partition that shall be evaluated.
 * 	"""
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._this = new _IsolatedInterpartitionExpansion(self._G._this, self._P._this)
 * 
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_31IsolatedInterpartitionExpansion_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_31IsolatedInterpartitionExpansion_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_9networkit_9community_31IsolatedInterpartitionExpansion___cinit__(((struct __pyx_obj_9networkit_9community_IsolatedInterpartitionExpansion *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_31IsolatedInterpartitionExpansion___cinit__(struct __pyx_obj_9networkit_9community_IsolatedInterpartitionExpansion *__pyx_v_self) {
  int __pyx_r;
  NetworKit::IsolatedInterpartitionExpansion *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "networkit/community.pyx":1460
 * 	"""
 * 	def __cinit__(self):
 * 		self._this = new _IsolatedInterpartitionExpansion(self._G._this, self._P._this)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/CoverHubDominance.hpp>":
 */
  try {
    __pyx_t_1 = new NetworKit::IsolatedInterpartitionExpansion(__pyx_v_self->__pyx_base._G->_this, __pyx_v_self->__pyx_base._P->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1460, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/community.pyx":1459
 * 		The partition that shall be evaluated.
 * 	"""
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._this = new _IsolatedInterpartitionExpansion(self._G._this, self._P._this)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.IsolatedInterpartitionExpansion.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_31IsolatedInterpartitionExpansion_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_31IsolatedInterpartitionExpansion_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_31IsolatedInterpartitionExpansion_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_31IsolatedInterpartitionExpansion_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_31IsolatedInterpartitionExpansion_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_IsolatedInterpartitionExpansion *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_31IsolatedInterpartitionExpansion_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_IsolatedInterpartitionExpansion *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.IsolatedInterpartitionExpansion.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_31IsolatedInterpartitionExpansion_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_31IsolatedInterpartitionExpansion_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_31IsolatedInterpartitionExpansion_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_31IsolatedInterpartitionExpansion_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.IsolatedInterpartitionExpansion.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_31IsolatedInterpartitionExpansion_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_IsolatedInterpartitionExpansion *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_31IsolatedInterpartitionExpansion_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_IsolatedInterpartitionExpansion *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.IsolatedInterpartitionExpansion.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1490
 * 		The cover that shall be evaluated.
 * 	"""
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._this = new _CoverHubDominance(self._G._this, self._C._this)
 * 
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_17CoverHubDominance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_17CoverHubDominance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_9networkit_9community_17CoverHubDominance___cinit__(((struct __pyx_obj_9networkit_9community_CoverHubDominance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_17CoverHubDominance___cinit__(struct __pyx_obj_9networkit_9community_CoverHubDominance *__pyx_v_self) {
  int __pyx_r;
  NetworKit::CoverHubDominance *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "networkit/community.pyx":1491
 * 	"""
 * 	def __cinit__(self):
 * 		self._this = new _CoverHubDominance(self._G._this, self._C._this)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/PartitionHubDominance.hpp>":
 */
  try {
    __pyx_t_1 = new NetworKit::CoverHubDominance(__pyx_v_self->__pyx_base._G->_this, __pyx_v_self->__pyx_base._C->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1491, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/community.pyx":1490
 * 		The cover that shall be evaluated.
 * 	"""
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._this = new _CoverHubDominance(self._G._this, self._C._this)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.CoverHubDominance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_17CoverHubDominance_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_17CoverHubDominance_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_17CoverHubDominance_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_17CoverHubDominance_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_17CoverHubDominance_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_CoverHubDominance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_17CoverHubDominance_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_CoverHubDominance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.CoverHubDominance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_17CoverHubDominance_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_17CoverHubDominance_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_17CoverHubDominance_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_17CoverHubDominance_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.CoverHubDominance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_17CoverHubDominance_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_CoverHubDominance *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_17CoverHubDominance_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_CoverHubDominance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.CoverHubDominance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1520
 * 		The partition that shall be evaluated.
 * 	"""
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._this = new _PartitionHubDominance(self._G._this, self._P._this)
 * 
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_21PartitionHubDominance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_21PartitionHubDominance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_9networkit_9community_21PartitionHubDominance___cinit__(((struct __pyx_obj_9networkit_9community_PartitionHubDominance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_21PartitionHubDominance___cinit__(struct __pyx_obj_9networkit_9community_PartitionHubDominance *__pyx_v_self) {
  int __pyx_r;
  NetworKit::PartitionHubDominance *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "networkit/community.pyx":1521
 * 	"""
 * 	def __cinit__(self):
 * 		self._this = new _PartitionHubDominance(self._G._this, self._P._this)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/PartitionFragmentation.hpp>":
 */
  try {
    __pyx_t_1 = new NetworKit::PartitionHubDominance(__pyx_v_self->__pyx_base._G->_this, __pyx_v_self->__pyx_base._P->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1521, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/community.pyx":1520
 * 		The partition that shall be evaluated.
 * 	"""
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._this = new _PartitionHubDominance(self._G._this, self._P._this)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.PartitionHubDominance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_21PartitionHubDominance_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_21PartitionHubDominance_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_21PartitionHubDominance_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_21PartitionHubDominance_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_21PartitionHubDominance_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_PartitionHubDominance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_21PartitionHubDominance_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PartitionHubDominance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.PartitionHubDominance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_21PartitionHubDominance_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_21PartitionHubDominance_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_21PartitionHubDominance_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_21PartitionHubDominance_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.PartitionHubDominance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_21PartitionHubDominance_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_PartitionHubDominance *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_21PartitionHubDominance_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PartitionHubDominance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.PartitionHubDominance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1542
 * 		The partition that shall be evaluated.
 * 	"""
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._this = new _PartitionFragmentation(self._G._this, self._P._this)
 * 
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_22PartitionFragmentation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_22PartitionFragmentation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_9networkit_9community_22PartitionFragmentation___cinit__(((struct __pyx_obj_9networkit_9community_PartitionFragmentation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_22PartitionFragmentation___cinit__(struct __pyx_obj_9networkit_9community_PartitionFragmentation *__pyx_v_self) {
  int __pyx_r;
  NetworKit::PartitionFragmentation *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "networkit/community.pyx":1543
 * 	"""
 * 	def __cinit__(self):
 * 		self._this = new _PartitionFragmentation(self._G._this, self._P._this)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/StablePartitionNodes.hpp>":
 */
  try {
    __pyx_t_1 = new NetworKit::PartitionFragmentation(__pyx_v_self->__pyx_base._G->_this, __pyx_v_self->__pyx_base._P->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1543, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/community.pyx":1542
 * 		The partition that shall be evaluated.
 * 	"""
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._this = new _PartitionFragmentation(self._G._this, self._P._this)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.PartitionFragmentation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_22PartitionFragmentation_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_22PartitionFragmentation_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_22PartitionFragmentation_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_22PartitionFragmentation_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_22PartitionFragmentation_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_PartitionFragmentation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_22PartitionFragmentation_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PartitionFragmentation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.PartitionFragmentation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_22PartitionFragmentation_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_22PartitionFragmentation_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_22PartitionFragmentation_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_22PartitionFragmentation_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.PartitionFragmentation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_22PartitionFragmentation_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_PartitionFragmentation *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_22PartitionFragmentation_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_PartitionFragmentation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.PartitionFragmentation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1567
 * 		The partition that shall be evaluated.
 * 	"""
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._this = new _StablePartitionNodes(self._G._this, self._P._this)
 * 
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_20StablePartitionNodes_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_20StablePartitionNodes_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_9networkit_9community_20StablePartitionNodes___cinit__(((struct __pyx_obj_9networkit_9community_StablePartitionNodes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_20StablePartitionNodes___cinit__(struct __pyx_obj_9networkit_9community_StablePartitionNodes *__pyx_v_self) {
  int __pyx_r;
  NetworKit::StablePartitionNodes *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "networkit/community.pyx":1568
 * 	"""
 * 	def __cinit__(self):
 * 		self._this = new _StablePartitionNodes(self._G._this, self._P._this)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = new NetworKit::StablePartitionNodes(__pyx_v_self->__pyx_base._G->_this, __pyx_v_self->__pyx_base._P->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1568, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/community.pyx":1567
 * 		The partition that shall be evaluated.
 * 	"""
 * 	def __cinit__(self):             # <<<<<<<<<<<<<<
 * 		self._this = new _StablePartitionNodes(self._G._this, self._P._this)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.StablePartitionNodes.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "networkit/community.pyx":1571
 * 
 * 
 * 	def isStable(self, node u):             # <<<<<<<<<<<<<<
 * 		"""
 * 		isStable(u)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_20StablePartitionNodes_3isStable(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_20StablePartitionNodes_2isStable, "\n\t\tisStable(u)\n\t\t\n\t\tCheck if a given node is stable, i.e. more connected to its own partition than to other partitions.\n\n\t\tParameters\n\t\t----------\n\t\tu : int\n\t\t\tThe node to check.\n\n\t\tReturns\n\t\t-------\n\t\tbool\n\t\t\tIf the node u is stable.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_20StablePartitionNodes_3isStable = {"isStable", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20StablePartitionNodes_3isStable, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_20StablePartitionNodes_2isStable};
static PyObject *__pyx_pw_9networkit_9community_20StablePartitionNodes_3isStable(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __pyx_t_9networkit_10structures_node __pyx_v_u;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isStable (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_u)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1571, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "isStable") < 0)) __PYX_ERR(0, 1571, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_u = __Pyx_PyInt_As_uint64_t(values[0]); if (unlikely((__pyx_v_u == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1571, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isStable", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1571, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.StablePartitionNodes.isStable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_20StablePartitionNodes_2isStable(((struct __pyx_obj_9networkit_9community_StablePartitionNodes *)__pyx_v_self), __pyx_v_u);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_20StablePartitionNodes_2isStable(struct __pyx_obj_9networkit_9community_StablePartitionNodes *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_u) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isStable", 1);

  /* "networkit/community.pyx":1587
 * 			If the node u is stable.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_StablePartitionNodes*>(self._this)).isStable(u)
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._this == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "networkit/community.pyx":1588
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return (<_StablePartitionNodes*>(self._this)).isStable(u)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1588, __pyx_L1_error)

    /* "networkit/community.pyx":1587
 * 			If the node u is stable.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_StablePartitionNodes*>(self._this)).isStable(u)
 */
  }

  /* "networkit/community.pyx":1589
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_StablePartitionNodes*>(self._this)).isStable(u)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = ((NetworKit::StablePartitionNodes *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._this)->isStable(__pyx_v_u);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1589, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1571
 * 
 * 
 * 	def isStable(self, node u):             # <<<<<<<<<<<<<<
 * 		"""
 * 		isStable(u)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.StablePartitionNodes.isStable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_20StablePartitionNodes_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_20StablePartitionNodes_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20StablePartitionNodes_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_20StablePartitionNodes_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_20StablePartitionNodes_4__reduce_cython__(((struct __pyx_obj_9networkit_9community_StablePartitionNodes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_20StablePartitionNodes_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_StablePartitionNodes *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.StablePartitionNodes.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_20StablePartitionNodes_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_20StablePartitionNodes_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20StablePartitionNodes_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_20StablePartitionNodes_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.StablePartitionNodes.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_20StablePartitionNodes_6__setstate_cython__(((struct __pyx_obj_9networkit_9community_StablePartitionNodes *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_20StablePartitionNodes_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_StablePartitionNodes *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.StablePartitionNodes.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1627
 * 	"""
 * 	cdef Cover _reference
 * 	def __cinit__(self, Graph G not None, Cover C not None, Cover reference not None):             # <<<<<<<<<<<<<<
 * 		self._this = new _CoverF1Similarity(G._this, C._this, reference._this)
 * 		self._reference = reference
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_17CoverF1Similarity_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_17CoverF1Similarity_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_C = 0;
  struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_reference = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_C,&__pyx_n_s_reference,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1627, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_C)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1627, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 1627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_reference)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1627, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 1627, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1627, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
      values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_C = ((struct __pyx_obj_9networkit_10structures_Cover *)values[1]);
    __pyx_v_reference = ((struct __pyx_obj_9networkit_10structures_Cover *)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1627, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.CoverF1Similarity.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 1627, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_C), __pyx_ptype_9networkit_10structures_Cover, 0, "C", 0))) __PYX_ERR(0, 1627, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reference), __pyx_ptype_9networkit_10structures_Cover, 0, "reference", 0))) __PYX_ERR(0, 1627, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_17CoverF1Similarity___cinit__(((struct __pyx_obj_9networkit_9community_CoverF1Similarity *)__pyx_v_self), __pyx_v_G, __pyx_v_C, __pyx_v_reference);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_17CoverF1Similarity___cinit__(struct __pyx_obj_9networkit_9community_CoverF1Similarity *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_C, struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_reference) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::CoverF1Similarity *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/community.pyx":1628
 * 	cdef Cover _reference
 * 	def __cinit__(self, Graph G not None, Cover C not None, Cover reference not None):
 * 		self._this = new _CoverF1Similarity(G._this, C._this, reference._this)             # <<<<<<<<<<<<<<
 * 		self._reference = reference
 * 		assert(self._G == G)
 */
  try {
    __pyx_t_1 = new NetworKit::CoverF1Similarity(__pyx_v_G->_this, __pyx_v_C->_this, __pyx_v_reference->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1628, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/community.pyx":1629
 * 	def __cinit__(self, Graph G not None, Cover C not None, Cover reference not None):
 * 		self._this = new _CoverF1Similarity(G._this, C._this, reference._this)
 * 		self._reference = reference             # <<<<<<<<<<<<<<
 * 		assert(self._G == G)
 * 		assert(self._C == C)
 */
  __Pyx_INCREF((PyObject *)__pyx_v_reference);
  __Pyx_GIVEREF((PyObject *)__pyx_v_reference);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_reference);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_reference);
  __pyx_v_self->_reference = __pyx_v_reference;

  /* "networkit/community.pyx":1630
 * 		self._this = new _CoverF1Similarity(G._this, C._this, reference._this)
 * 		self._reference = reference
 * 		assert(self._G == G)             # <<<<<<<<<<<<<<
 * 		assert(self._C == C)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->__pyx_base._G), ((PyObject *)__pyx_v_G), Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1630, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1630, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 1630, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1630, __pyx_L1_error)
  #endif

  /* "networkit/community.pyx":1631
 * 		self._reference = reference
 * 		assert(self._G == G)
 * 		assert(self._C == C)             # <<<<<<<<<<<<<<
 * 
 * def detectCommunities(G, algo=None, inspect=True):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_self->__pyx_base._C), ((PyObject *)__pyx_v_C), Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1631, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1631, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 1631, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1631, __pyx_L1_error)
  #endif

  /* "networkit/community.pyx":1627
 * 	"""
 * 	cdef Cover _reference
 * 	def __cinit__(self, Graph G not None, Cover C not None, Cover reference not None):             # <<<<<<<<<<<<<<
 * 		self._this = new _CoverF1Similarity(G._this, C._this, reference._this)
 * 		self._reference = reference
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.community.CoverF1Similarity.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_17CoverF1Similarity_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_17CoverF1Similarity_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_17CoverF1Similarity_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_17CoverF1Similarity_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_17CoverF1Similarity_2__reduce_cython__(((struct __pyx_obj_9networkit_9community_CoverF1Similarity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_17CoverF1Similarity_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_CoverF1Similarity *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.CoverF1Similarity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_17CoverF1Similarity_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_17CoverF1Similarity_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_17CoverF1Similarity_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_17CoverF1Similarity_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.CoverF1Similarity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_17CoverF1Similarity_4__setstate_cython__(((struct __pyx_obj_9networkit_9community_CoverF1Similarity *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_17CoverF1Similarity_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_CoverF1Similarity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.CoverF1Similarity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1633
 * 		assert(self._C == C)
 * 
 * def detectCommunities(G, algo=None, inspect=True):             # <<<<<<<<<<<<<<
 * 	"""
 * 	detectCommunities(G, algo=None, inspect=True)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_1detectCommunities(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_detectCommunities, " \n\tdetectCommunities(G, algo=None, inspect=True)\n\n\tPerform high-performance community detection on the graph.\n\t\n\tParameters\n\t----------\n\tG : Graph\n\t\tThe graph on which the evaluation is performed.\n\talgo : networkit.community.CommunityDetector\n\t\tCommunity detection algorithm instance. Default: None\n\tinspect: bool, optional\n\t\tPrint properties of the found solution. Default: True\n\n\tReturns\n\t-------\n\tnetworkit.Partition\n\t\tReturn communities (as type Partition).\n\t\n\t");
static PyMethodDef __pyx_mdef_9networkit_9community_1detectCommunities = {"detectCommunities", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_1detectCommunities, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_detectCommunities};
static PyObject *__pyx_pw_9networkit_9community_1detectCommunities(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_algo = 0;
  PyObject *__pyx_v_inspect = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("detectCommunities (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_algo,&__pyx_n_s_inspect,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_True)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1633, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_algo);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1633, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_inspect);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1633, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "detectCommunities") < 0)) __PYX_ERR(0, 1633, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = values[0];
    __pyx_v_algo = values[1];
    __pyx_v_inspect = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("detectCommunities", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 1633, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.detectCommunities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_detectCommunities(__pyx_self, __pyx_v_G, __pyx_v_algo, __pyx_v_inspect);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_detectCommunities(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_G, PyObject *__pyx_v_algo, PyObject *__pyx_v_inspect) {
  PyObject *__pyx_v_start = NULL;
  PyObject *__pyx_v_zeta = NULL;
  PyObject *__pyx_v_end = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("detectCommunities", 0);
  __Pyx_INCREF(__pyx_v_algo);

  /* "networkit/community.pyx":1654
 * 
 * 	"""
 * 	if algo is None:             # <<<<<<<<<<<<<<
 * 		algo = PLM(G, refine=False)
 * 	start = timeit.default_timer()
 */
  __pyx_t_1 = (__pyx_v_algo == Py_None);
  if (__pyx_t_1) {

    /* "networkit/community.pyx":1655
 * 	"""
 * 	if algo is None:
 * 		algo = PLM(G, refine=False)             # <<<<<<<<<<<<<<
 * 	start = timeit.default_timer()
 * 	algo.run()
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_G);
    __Pyx_GIVEREF(__pyx_v_G);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_G)) __PYX_ERR(0, 1655, __pyx_L1_error);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_refine, Py_False) < 0) __PYX_ERR(0, 1655, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_9community_PLM), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_algo, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "networkit/community.pyx":1654
 * 
 * 	"""
 * 	if algo is None:             # <<<<<<<<<<<<<<
 * 		algo = PLM(G, refine=False)
 * 	start = timeit.default_timer()
 */
  }

  /* "networkit/community.pyx":1656
 * 	if algo is None:
 * 		algo = PLM(G, refine=False)
 * 	start = timeit.default_timer()             # <<<<<<<<<<<<<<
 * 	algo.run()
 * 	zeta = algo.getPartition()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_timeit); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_default_timer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_start = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/community.pyx":1657
 * 		algo = PLM(G, refine=False)
 * 	start = timeit.default_timer()
 * 	algo.run()             # <<<<<<<<<<<<<<
 * 	zeta = algo.getPartition()
 * 	end = timeit.default_timer()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_algo, __pyx_n_s_run); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/community.pyx":1658
 * 	start = timeit.default_timer()
 * 	algo.run()
 * 	zeta = algo.getPartition()             # <<<<<<<<<<<<<<
 * 	end = timeit.default_timer()
 * 	print("Communities detected in {:.5f} [s]".format(end - start))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_algo, __pyx_n_s_getPartition); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_zeta = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/community.pyx":1659
 * 	algo.run()
 * 	zeta = algo.getPartition()
 * 	end = timeit.default_timer()             # <<<<<<<<<<<<<<
 * 	print("Communities detected in {:.5f} [s]".format(end - start))
 * 	if inspect:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_timeit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_default_timer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1659, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_end = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/community.pyx":1660
 * 	zeta = algo.getPartition()
 * 	end = timeit.default_timer()
 * 	print("Communities detected in {:.5f} [s]".format(end - start))             # <<<<<<<<<<<<<<
 * 	if inspect:
 * 		print ("solution properties:")
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Communities_detected_in_5f_s, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Subtract(__pyx_v_end, __pyx_v_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_2};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/community.pyx":1661
 * 	end = timeit.default_timer()
 * 	print("Communities detected in {:.5f} [s]".format(end - start))
 * 	if inspect:             # <<<<<<<<<<<<<<
 * 		print ("solution properties:")
 * 		inspectCommunities(zeta, G)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_inspect); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1661, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "networkit/community.pyx":1662
 * 	print("Communities detected in {:.5f} [s]".format(end - start))
 * 	if inspect:
 * 		print ("solution properties:")             # <<<<<<<<<<<<<<
 * 		inspectCommunities(zeta, G)
 * 	return zeta
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "networkit/community.pyx":1663
 * 	if inspect:
 * 		print ("solution properties:")
 * 		inspectCommunities(zeta, G)             # <<<<<<<<<<<<<<
 * 	return zeta
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_inspectCommunities); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_zeta, __pyx_v_G};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1663, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "networkit/community.pyx":1661
 * 	end = timeit.default_timer()
 * 	print("Communities detected in {:.5f} [s]".format(end - start))
 * 	if inspect:             # <<<<<<<<<<<<<<
 * 		print ("solution properties:")
 * 		inspectCommunities(zeta, G)
 */
  }

  /* "networkit/community.pyx":1664
 * 		print ("solution properties:")
 * 		inspectCommunities(zeta, G)
 * 	return zeta             # <<<<<<<<<<<<<<
 * 
 * def inspectCommunities(zeta, G):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_zeta);
  __pyx_r = __pyx_v_zeta;
  goto __pyx_L0;

  /* "networkit/community.pyx":1633
 * 		assert(self._C == C)
 * 
 * def detectCommunities(G, algo=None, inspect=True):             # <<<<<<<<<<<<<<
 * 	"""
 * 	detectCommunities(G, algo=None, inspect=True)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("networkit.community.detectCommunities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_start);
  __Pyx_XDECREF(__pyx_v_zeta);
  __Pyx_XDECREF(__pyx_v_end);
  __Pyx_XDECREF(__pyx_v_algo);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1666
 * 	return zeta
 * 
 * def inspectCommunities(zeta, G):             # <<<<<<<<<<<<<<
 * 	"""
 * 	inspectCommunities(zeta, G)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_3inspectCommunities(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_2inspectCommunities, " \n\tinspectCommunities(zeta, G)\n\t\n\tDisplay information about communities.\n\n\tParameters\n\t----------\n\tzeta : networkit.Partition\n\t\tThe input Partition.\n\tG : networkit.Graph\n\t\tThe graph on which the evaluation is performed.\n\n\tReturns\n\t-------\n\ttabulate.tabulate\n\t\tinspection of communities (needs external tabulate-module)\n\t");
static PyMethodDef __pyx_mdef_9networkit_9community_3inspectCommunities = {"inspectCommunities", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3inspectCommunities, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_2inspectCommunities};
static PyObject *__pyx_pw_9networkit_9community_3inspectCommunities(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_zeta = 0;
  PyObject *__pyx_v_G = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inspectCommunities (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_zeta,&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1666, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1666, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("inspectCommunities", 1, 2, 2, 1); __PYX_ERR(0, 1666, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "inspectCommunities") < 0)) __PYX_ERR(0, 1666, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_zeta = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inspectCommunities", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1666, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.inspectCommunities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_2inspectCommunities(__pyx_self, __pyx_v_zeta, __pyx_v_G);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_2inspectCommunities(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_zeta, PyObject *__pyx_v_G) {
  PyObject *__pyx_v_communitySizes = NULL;
  PyObject *__pyx_v_mod = NULL;
  PyObject *__pyx_v_eCut = NULL;
  PyObject *__pyx_v_imbalance = NULL;
  PyObject *__pyx_v_commProps = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inspectCommunities", 1);

  /* "networkit/community.pyx":1684
 * 		inspection of communities (needs external tabulate-module)
 * 	"""
 * 	if not have_tabulate:             # <<<<<<<<<<<<<<
 * 		raise MissingDependencyError("tabulate")
 * 	communitySizes = zeta.subsetSizes()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_have_tabulate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1684, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (!__pyx_t_2);
  if (unlikely(__pyx_t_3)) {

    /* "networkit/community.pyx":1685
 * 	"""
 * 	if not have_tabulate:
 * 		raise MissingDependencyError("tabulate")             # <<<<<<<<<<<<<<
 * 	communitySizes = zeta.subsetSizes()
 * 	mod = Modularity().getQuality(zeta, G)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_MissingDependencyError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1685, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_n_u_tabulate};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1685, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1685, __pyx_L1_error)

    /* "networkit/community.pyx":1684
 * 		inspection of communities (needs external tabulate-module)
 * 	"""
 * 	if not have_tabulate:             # <<<<<<<<<<<<<<
 * 		raise MissingDependencyError("tabulate")
 * 	communitySizes = zeta.subsetSizes()
 */
  }

  /* "networkit/community.pyx":1686
 * 	if not have_tabulate:
 * 		raise MissingDependencyError("tabulate")
 * 	communitySizes = zeta.subsetSizes()             # <<<<<<<<<<<<<<
 * 	mod = Modularity().getQuality(zeta, G)
 * 	eCut = EdgeCut().getQuality(zeta, G)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_zeta, __pyx_n_s_subsetSizes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_communitySizes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1687
 * 		raise MissingDependencyError("tabulate")
 * 	communitySizes = zeta.subsetSizes()
 * 	mod = Modularity().getQuality(zeta, G)             # <<<<<<<<<<<<<<
 * 	eCut = EdgeCut().getQuality(zeta, G)
 * 	imbalance = GraphClusteringTools.getImbalance(zeta, G)
 */
  __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_9community_Modularity)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_getQuality); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_zeta, __pyx_v_G};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_v_mod = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1688
 * 	communitySizes = zeta.subsetSizes()
 * 	mod = Modularity().getQuality(zeta, G)
 * 	eCut = EdgeCut().getQuality(zeta, G)             # <<<<<<<<<<<<<<
 * 	imbalance = GraphClusteringTools.getImbalance(zeta, G)
 * 	commProps = [
 */
  __pyx_t_5 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_9community_EdgeCut)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_getQuality); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_v_zeta, __pyx_v_G};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_eCut = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1689
 * 	mod = Modularity().getQuality(zeta, G)
 * 	eCut = EdgeCut().getQuality(zeta, G)
 * 	imbalance = GraphClusteringTools.getImbalance(zeta, G)             # <<<<<<<<<<<<<<
 * 	commProps = [
 * 		["# communities", zeta.numberOfSubsets()],
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools), __pyx_n_s_getImbalance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_v_zeta, __pyx_v_G};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_imbalance = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1691
 * 	imbalance = GraphClusteringTools.getImbalance(zeta, G)
 * 	commProps = [
 * 		["# communities", zeta.numberOfSubsets()],             # <<<<<<<<<<<<<<
 * 		["min community size", min(communitySizes)],
 * 		["max community size", max(communitySizes)],
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_zeta, __pyx_n_s_numberOfSubsets); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_kp_u_communities);
  __Pyx_GIVEREF(__pyx_kp_u_communities);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_communities)) __PYX_ERR(0, 1691, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(0, 1691, __pyx_L1_error);
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1692
 * 	commProps = [
 * 		["# communities", zeta.numberOfSubsets()],
 * 		["min community size", min(communitySizes)],             # <<<<<<<<<<<<<<
 * 		["max community size", max(communitySizes)],
 * 		["avg. community size", sum(communitySizes) / len(communitySizes)],
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_min, __pyx_v_communitySizes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_kp_u_min_community_size);
  __Pyx_GIVEREF(__pyx_kp_u_min_community_size);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_min_community_size)) __PYX_ERR(0, 1692, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_1)) __PYX_ERR(0, 1692, __pyx_L1_error);
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1693
 * 		["# communities", zeta.numberOfSubsets()],
 * 		["min community size", min(communitySizes)],
 * 		["max community size", max(communitySizes)],             # <<<<<<<<<<<<<<
 * 		["avg. community size", sum(communitySizes) / len(communitySizes)],
 * 		["imbalance", imbalance],
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_v_communitySizes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyList_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_kp_u_max_community_size);
  __Pyx_GIVEREF(__pyx_kp_u_max_community_size);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_max_community_size)) __PYX_ERR(0, 1693, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_1)) __PYX_ERR(0, 1693, __pyx_L1_error);
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1694
 * 		["min community size", min(communitySizes)],
 * 		["max community size", max(communitySizes)],
 * 		["avg. community size", sum(communitySizes) / len(communitySizes)],             # <<<<<<<<<<<<<<
 * 		["imbalance", imbalance],
 * 		["edge cut", eCut],
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_v_communitySizes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = PyObject_Length(__pyx_v_communitySizes); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1694, __pyx_L1_error)
  __pyx_t_9 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyList_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(__pyx_kp_u_avg_community_size);
  __Pyx_GIVEREF(__pyx_kp_u_avg_community_size);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_9, 0, __pyx_kp_u_avg_community_size)) __PYX_ERR(0, 1694, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_9, 1, __pyx_t_10)) __PYX_ERR(0, 1694, __pyx_L1_error);
  __pyx_t_10 = 0;

  /* "networkit/community.pyx":1695
 * 		["max community size", max(communitySizes)],
 * 		["avg. community size", sum(communitySizes) / len(communitySizes)],
 * 		["imbalance", imbalance],             # <<<<<<<<<<<<<<
 * 		["edge cut", eCut],
 * 		["edge cut (portion)", eCut / G.numberOfEdges() ],
 */
  __pyx_t_10 = PyList_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_n_u_imbalance);
  __Pyx_GIVEREF(__pyx_n_u_imbalance);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_n_u_imbalance)) __PYX_ERR(0, 1695, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_imbalance);
  __Pyx_GIVEREF(__pyx_v_imbalance);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_v_imbalance)) __PYX_ERR(0, 1695, __pyx_L1_error);

  /* "networkit/community.pyx":1696
 * 		["avg. community size", sum(communitySizes) / len(communitySizes)],
 * 		["imbalance", imbalance],
 * 		["edge cut", eCut],             # <<<<<<<<<<<<<<
 * 		["edge cut (portion)", eCut / G.numberOfEdges() ],
 * 		["modularity", mod],
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_kp_u_edge_cut);
  __Pyx_GIVEREF(__pyx_kp_u_edge_cut);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_edge_cut)) __PYX_ERR(0, 1696, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_eCut);
  __Pyx_GIVEREF(__pyx_v_eCut);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_v_eCut)) __PYX_ERR(0, 1696, __pyx_L1_error);

  /* "networkit/community.pyx":1697
 * 		["imbalance", imbalance],
 * 		["edge cut", eCut],
 * 		["edge cut (portion)", eCut / G.numberOfEdges() ],             # <<<<<<<<<<<<<<
 * 		["modularity", mod],
 * 	]
 */
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_G, __pyx_n_s_numberOfEdges); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_13, NULL};
    __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __pyx_t_12 = __Pyx_PyNumber_Divide(__pyx_v_eCut, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PyList_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(__pyx_kp_u_edge_cut_portion);
  __Pyx_GIVEREF(__pyx_kp_u_edge_cut_portion);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_kp_u_edge_cut_portion)) __PYX_ERR(0, 1697, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_12)) __PYX_ERR(0, 1697, __pyx_L1_error);
  __pyx_t_12 = 0;

  /* "networkit/community.pyx":1698
 * 		["edge cut", eCut],
 * 		["edge cut (portion)", eCut / G.numberOfEdges() ],
 * 		["modularity", mod],             # <<<<<<<<<<<<<<
 * 	]
 * 	print(tabulate.tabulate(commProps))
 */
  __pyx_t_12 = PyList_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_n_u_modularity);
  __Pyx_GIVEREF(__pyx_n_u_modularity);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_n_u_modularity)) __PYX_ERR(0, 1698, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_mod);
  __Pyx_GIVEREF(__pyx_v_mod);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_v_mod)) __PYX_ERR(0, 1698, __pyx_L1_error);

  /* "networkit/community.pyx":1690
 * 	eCut = EdgeCut().getQuality(zeta, G)
 * 	imbalance = GraphClusteringTools.getImbalance(zeta, G)
 * 	commProps = [             # <<<<<<<<<<<<<<
 * 		["# communities", zeta.numberOfSubsets()],
 * 		["min community size", min(communitySizes)],
 */
  __pyx_t_13 = PyList_New(8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 0, __pyx_t_4)) __PYX_ERR(0, 1690, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 1, __pyx_t_5)) __PYX_ERR(0, 1690, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 2, __pyx_t_7)) __PYX_ERR(0, 1690, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_9);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 3, __pyx_t_9)) __PYX_ERR(0, 1690, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 4, __pyx_t_10)) __PYX_ERR(0, 1690, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 5, __pyx_t_1)) __PYX_ERR(0, 1690, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 6, __pyx_t_11)) __PYX_ERR(0, 1690, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 7, __pyx_t_12)) __PYX_ERR(0, 1690, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_1 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_v_commProps = ((PyObject*)__pyx_t_13);
  __pyx_t_13 = 0;

  /* "networkit/community.pyx":1700
 * 		["modularity", mod],
 * 	]
 * 	print(tabulate.tabulate(commProps))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_tabulate); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_tabulate); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_v_commProps};
    __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_13); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "networkit/community.pyx":1666
 * 	return zeta
 * 
 * def inspectCommunities(zeta, G):             # <<<<<<<<<<<<<<
 * 	"""
 * 	inspectCommunities(zeta, G)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("networkit.community.inspectCommunities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_communitySizes);
  __Pyx_XDECREF(__pyx_v_mod);
  __Pyx_XDECREF(__pyx_v_eCut);
  __Pyx_XDECREF(__pyx_v_imbalance);
  __Pyx_XDECREF(__pyx_v_commProps);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1703
 * 
 * 
 * def communityGraph(G, zeta):             # <<<<<<<<<<<<<<
 * 	"""
 * 	communityGraph(G, P)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_5communityGraph(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_4communityGraph, " \n\tcommunityGraph(G, P)\n\t\n\tCreate a community graph, i.e. a graph in which one node represents a community and an edge represents the edges \n\tbetween communities, from a given graph and a community detection solution.\n\t\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the evaluation is performed.\t\n\tP : networkit.Partition\n\t\tThe input Partition.\n\t");
static PyMethodDef __pyx_mdef_9networkit_9community_5communityGraph = {"communityGraph", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_5communityGraph, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_4communityGraph};
static PyObject *__pyx_pw_9networkit_9community_5communityGraph(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_zeta = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("communityGraph (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_zeta,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1703, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1703, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("communityGraph", 1, 2, 2, 1); __PYX_ERR(0, 1703, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "communityGraph") < 0)) __PYX_ERR(0, 1703, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_G = values[0];
    __pyx_v_zeta = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("communityGraph", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1703, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.communityGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_4communityGraph(__pyx_self, __pyx_v_G, __pyx_v_zeta);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_4communityGraph(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_G, PyObject *__pyx_v_zeta) {
  PyObject *__pyx_v_cg = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("communityGraph", 1);

  /* "networkit/community.pyx":1717
 * 		The input Partition.
 * 	"""
 * 	cg = ParallelPartitionCoarsening(G, zeta)             # <<<<<<<<<<<<<<
 * 	cg.run()
 * 	return cg.getCoarseGraph()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ParallelPartitionCoarsening); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_G, __pyx_v_zeta};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_cg = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1718
 * 	"""
 * 	cg = ParallelPartitionCoarsening(G, zeta)
 * 	cg.run()             # <<<<<<<<<<<<<<
 * 	return cg.getCoarseGraph()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_cg, __pyx_n_s_run); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/community.pyx":1719
 * 	cg = ParallelPartitionCoarsening(G, zeta)
 * 	cg.run()
 * 	return cg.getCoarseGraph()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_cg, __pyx_n_s_getCoarseGraph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1703
 * 
 * 
 * def communityGraph(G, zeta):             # <<<<<<<<<<<<<<
 * 	"""
 * 	communityGraph(G, P)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.community.communityGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1722
 * 
 * 
 * def evalCommunityDetection(algo, G):             # <<<<<<<<<<<<<<
 * 	"""
 * 	evalCommunityDetection(algo, G)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_7evalCommunityDetection(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_6evalCommunityDetection, " \n\tevalCommunityDetection(algo, G)\n\n\tEvaluate a community detection algorithm \n\n\tParameters\n\t----------\n\talgo : networkit.community.CommunityDetector\n\t\tCommunity detection algorithm instance\n\tG : networkit.Graph\n\t\tThe graph on which the evaluation is performed.\n\n\tReturns\n\t-------\n\ttabulate.tabulate\n\t\tinspection of communities (needs external tabulate-module)\n\t");
static PyMethodDef __pyx_mdef_9networkit_9community_7evalCommunityDetection = {"evalCommunityDetection", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_7evalCommunityDetection, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_6evalCommunityDetection};
static PyObject *__pyx_pw_9networkit_9community_7evalCommunityDetection(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_algo = 0;
  PyObject *__pyx_v_G = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evalCommunityDetection (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_algo,&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_algo)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1722, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1722, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("evalCommunityDetection", 1, 2, 2, 1); __PYX_ERR(0, 1722, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "evalCommunityDetection") < 0)) __PYX_ERR(0, 1722, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_algo = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evalCommunityDetection", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1722, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.evalCommunityDetection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_6evalCommunityDetection(__pyx_self, __pyx_v_algo, __pyx_v_G);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_6evalCommunityDetection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_algo, PyObject *__pyx_v_G) {
  PyObject *__pyx_v_start = NULL;
  PyObject *__pyx_v_zeta = NULL;
  PyObject *__pyx_v_end = NULL;
  PyObject *__pyx_v_results = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("evalCommunityDetection", 1);

  /* "networkit/community.pyx":1741
 * 	"""
 * 
 * 	if not have_tabulate:             # <<<<<<<<<<<<<<
 * 		raise MissingDependencyError("tabulate")
 * 	start = timeit.default_timer()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_have_tabulate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (!__pyx_t_2);
  if (unlikely(__pyx_t_3)) {

    /* "networkit/community.pyx":1742
 * 
 * 	if not have_tabulate:
 * 		raise MissingDependencyError("tabulate")             # <<<<<<<<<<<<<<
 * 	start = timeit.default_timer()
 * 	algo.run()
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_MissingDependencyError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_n_u_tabulate};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1742, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1742, __pyx_L1_error)

    /* "networkit/community.pyx":1741
 * 	"""
 * 
 * 	if not have_tabulate:             # <<<<<<<<<<<<<<
 * 		raise MissingDependencyError("tabulate")
 * 	start = timeit.default_timer()
 */
  }

  /* "networkit/community.pyx":1743
 * 	if not have_tabulate:
 * 		raise MissingDependencyError("tabulate")
 * 	start = timeit.default_timer()             # <<<<<<<<<<<<<<
 * 	algo.run()
 * 	zeta = algo.getPartition()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_timeit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_default_timer); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_v_start = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1744
 * 		raise MissingDependencyError("tabulate")
 * 	start = timeit.default_timer()
 * 	algo.run()             # <<<<<<<<<<<<<<
 * 	zeta = algo.getPartition()
 * 	end = timeit.default_timer()
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_algo, __pyx_n_s_run); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/community.pyx":1745
 * 	start = timeit.default_timer()
 * 	algo.run()
 * 	zeta = algo.getPartition()             # <<<<<<<<<<<<<<
 * 	end = timeit.default_timer()
 * 	results = [
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_algo, __pyx_n_s_getPartition); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_v_zeta = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1746
 * 	algo.run()
 * 	zeta = algo.getPartition()
 * 	end = timeit.default_timer()             # <<<<<<<<<<<<<<
 * 	results = [
 * 		["time [s]", (end - start)],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_timeit); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_default_timer); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_end = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1748
 * 	end = timeit.default_timer()
 * 	results = [
 * 		["time [s]", (end - start)],             # <<<<<<<<<<<<<<
 * 		["# communities", zeta.numberOfSubsets()],
 * 		["modularity", Modularity().getQuality(zeta, G)]
 */
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_end, __pyx_v_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_kp_u_time_s);
  __Pyx_GIVEREF(__pyx_kp_u_time_s);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_time_s)) __PYX_ERR(0, 1748, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(0, 1748, __pyx_L1_error);
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1749
 * 	results = [
 * 		["time [s]", (end - start)],
 * 		["# communities", zeta.numberOfSubsets()],             # <<<<<<<<<<<<<<
 * 		["modularity", Modularity().getQuality(zeta, G)]
 * 	]
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_zeta, __pyx_n_s_numberOfSubsets); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_kp_u_communities);
  __Pyx_GIVEREF(__pyx_kp_u_communities);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_communities)) __PYX_ERR(0, 1749, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_1)) __PYX_ERR(0, 1749, __pyx_L1_error);
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1750
 * 		["time [s]", (end - start)],
 * 		["# communities", zeta.numberOfSubsets()],
 * 		["modularity", Modularity().getQuality(zeta, G)]             # <<<<<<<<<<<<<<
 * 	]
 * 	print(tabulate.tabulate(results))
 */
  __pyx_t_7 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_9community_Modularity)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_getQuality); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_v_zeta, __pyx_v_G};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __pyx_t_8 = PyList_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_n_u_modularity);
  __Pyx_GIVEREF(__pyx_n_u_modularity);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_8, 0, __pyx_n_u_modularity)) __PYX_ERR(0, 1750, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_1)) __PYX_ERR(0, 1750, __pyx_L1_error);
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1747
 * 	zeta = algo.getPartition()
 * 	end = timeit.default_timer()
 * 	results = [             # <<<<<<<<<<<<<<
 * 		["time [s]", (end - start)],
 * 		["# communities", zeta.numberOfSubsets()],
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_4)) __PYX_ERR(0, 1747, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_5)) __PYX_ERR(0, 1747, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_8);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_8)) __PYX_ERR(0, 1747, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_8 = 0;
  __pyx_v_results = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1752
 * 		["modularity", Modularity().getQuality(zeta, G)]
 * 	]
 * 	print(tabulate.tabulate(results))             # <<<<<<<<<<<<<<
 * 
 * def readCommunities(path, format="default"):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_tabulate); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_tabulate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_results};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1752, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/community.pyx":1722
 * 
 * 
 * def evalCommunityDetection(algo, G):             # <<<<<<<<<<<<<<
 * 	"""
 * 	evalCommunityDetection(algo, G)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("networkit.community.evalCommunityDetection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_start);
  __Pyx_XDECREF(__pyx_v_zeta);
  __Pyx_XDECREF(__pyx_v_end);
  __Pyx_XDECREF(__pyx_v_results);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1754
 * 	print(tabulate.tabulate(results))
 * 
 * def readCommunities(path, format="default"):             # <<<<<<<<<<<<<<
 * 	"""
 * 	readCommunities(path, format="default")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_9readCommunities(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_8readCommunities, " \n\treadCommunities(path, format=\"default\")\n\n\tRead a partition into communities from a file\n\n\tParameters\n\t----------\n\tpath : str\n\t\tPath to file, which contains information about communities.\n\tformat : str, optional\n\t\tFormat from file, possible values: \"default\", \"edgelist-t1\", \"edgelist-t0\", \"edgelist-s1\", \"edgelist-s0\". Default: \"default\"\n\t");
static PyMethodDef __pyx_mdef_9networkit_9community_9readCommunities = {"readCommunities", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_9readCommunities, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_8readCommunities};
static PyObject *__pyx_pw_9networkit_9community_9readCommunities(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_path = 0;
  PyObject *__pyx_v_format = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readCommunities (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_path,&__pyx_n_s_format,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject*)__pyx_n_u_default)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_path)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1754, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_format);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1754, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "readCommunities") < 0)) __PYX_ERR(0, 1754, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_path = values[0];
    __pyx_v_format = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readCommunities", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1754, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.readCommunities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_8readCommunities(__pyx_self, __pyx_v_path, __pyx_v_format);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_8readCommunities(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_path, PyObject *__pyx_v_format) {
  PyObject *__pyx_v_readers = NULL;
  PyObject *__pyx_v_reader = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_file = NULL;
  PyObject *__pyx_v_communities = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCommunities", 0);
  __Pyx_INCREF(__pyx_v_path);

  /* "networkit/community.pyx":1767
 * 		Format from file, possible values: "default", "edgelist-t1", "edgelist-t0", "edgelist-s1", "edgelist-s0". Default: "default"
 * 	"""
 * 	readers =  {"default": PartitionReader(),             # <<<<<<<<<<<<<<
 * 		"edgelist-t1": EdgeListPartitionReader(1, '\t'),
 * 		"edgelist-t0": EdgeListPartitionReader(0, '\t'),
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_PartitionReader); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_default, __pyx_t_2) < 0) __PYX_ERR(0, 1767, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/community.pyx":1768
 * 	"""
 * 	readers =  {"default": PartitionReader(),
 * 		"edgelist-t1": EdgeListPartitionReader(1, '\t'),             # <<<<<<<<<<<<<<
 * 		"edgelist-t0": EdgeListPartitionReader(0, '\t'),
 * 		"edgelist-s1": EdgeListPartitionReader(1, ' '),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_EdgeListPartitionReader); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_edgelist_t1, __pyx_t_3) < 0) __PYX_ERR(0, 1767, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/community.pyx":1769
 * 	readers =  {"default": PartitionReader(),
 * 		"edgelist-t1": EdgeListPartitionReader(1, '\t'),
 * 		"edgelist-t0": EdgeListPartitionReader(0, '\t'),             # <<<<<<<<<<<<<<
 * 		"edgelist-s1": EdgeListPartitionReader(1, ' '),
 * 		"edgelist-s0": EdgeListPartitionReader(0, ' '),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_EdgeListPartitionReader); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_edgelist_t0, __pyx_t_2) < 0) __PYX_ERR(0, 1767, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/community.pyx":1770
 * 		"edgelist-t1": EdgeListPartitionReader(1, '\t'),
 * 		"edgelist-t0": EdgeListPartitionReader(0, '\t'),
 * 		"edgelist-s1": EdgeListPartitionReader(1, ' '),             # <<<<<<<<<<<<<<
 * 		"edgelist-s0": EdgeListPartitionReader(0, ' '),
 * 		}
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_EdgeListPartitionReader); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_edgelist_s1, __pyx_t_3) < 0) __PYX_ERR(0, 1767, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/community.pyx":1771
 * 		"edgelist-t0": EdgeListPartitionReader(0, '\t'),
 * 		"edgelist-s1": EdgeListPartitionReader(1, ' '),
 * 		"edgelist-s0": EdgeListPartitionReader(0, ' '),             # <<<<<<<<<<<<<<
 * 		}
 * 	# get reader
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_EdgeListPartitionReader); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_edgelist_s0, __pyx_t_2) < 0) __PYX_ERR(0, 1767, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_readers = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1774
 * 		}
 * 	# get reader
 * 	try:             # <<<<<<<<<<<<<<
 * 		reader = readers[format]#(**kwargs)
 * 	except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_8);
    /*try:*/ {

      /* "networkit/community.pyx":1775
 * 	# get reader
 * 	try:
 * 		reader = readers[format]#(**kwargs)             # <<<<<<<<<<<<<<
 * 	except KeyError:
 * 		raise Exception("unrecognized format: {0}".format(format))
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_readers, __pyx_v_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1775, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_reader = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "networkit/community.pyx":1774
 * 		}
 * 	# get reader
 * 	try:             # <<<<<<<<<<<<<<
 * 		reader = readers[format]#(**kwargs)
 * 	except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "networkit/community.pyx":1776
 * 	try:
 * 		reader = readers[format]#(**kwargs)
 * 	except KeyError:             # <<<<<<<<<<<<<<
 * 		raise Exception("unrecognized format: {0}".format(format))
 * 
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("networkit.community.readCommunities", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 1776, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);

      /* "networkit/community.pyx":1777
 * 		reader = readers[format]#(**kwargs)
 * 	except KeyError:
 * 		raise Exception("unrecognized format: {0}".format(format))             # <<<<<<<<<<<<<<
 * 
 * 	# get proper file path
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_unrecognized_format_0, __pyx_n_s_format); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1777, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_v_format};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1777, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1777, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(0, 1777, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "networkit/community.pyx":1774
 * 		}
 * 	# get reader
 * 	try:             # <<<<<<<<<<<<<<
 * 		reader = readers[format]#(**kwargs)
 * 	except KeyError:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "networkit/community.pyx":1780
 * 
 * 	# get proper file path
 * 	if ("~" in path):             # <<<<<<<<<<<<<<
 * 		path = os.path.expanduser(path)
 * 		print("path expanded to: {0}".format(path))
 */
  __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_kp_u__22, __pyx_v_path, Py_EQ)); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 1780, __pyx_L1_error)
  if (__pyx_t_11) {

    /* "networkit/community.pyx":1781
 * 	# get proper file path
 * 	if ("~" in path):
 * 		path = os.path.expanduser(path)             # <<<<<<<<<<<<<<
 * 		print("path expanded to: {0}".format(path))
 * 	# check if file path leads to a valid file
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_expanduser); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_path};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1781, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_path, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "networkit/community.pyx":1782
 * 	if ("~" in path):
 * 		path = os.path.expanduser(path)
 * 		print("path expanded to: {0}".format(path))             # <<<<<<<<<<<<<<
 * 	# check if file path leads to a valid file
 * 	if not os.path.isfile(path):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_path_expanded_to_0, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_path};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "networkit/community.pyx":1780
 * 
 * 	# get proper file path
 * 	if ("~" in path):             # <<<<<<<<<<<<<<
 * 		path = os.path.expanduser(path)
 * 		print("path expanded to: {0}".format(path))
 */
  }

  /* "networkit/community.pyx":1784
 * 		print("path expanded to: {0}".format(path))
 * 	# check if file path leads to a valid file
 * 	if not os.path.isfile(path):             # <<<<<<<<<<<<<<
 * 		raise IOError("{0} is not a file".format(path))
 * 	else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_isfile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_path};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_12 = (!__pyx_t_11);
  if (unlikely(__pyx_t_12)) {

    /* "networkit/community.pyx":1785
 * 	# check if file path leads to a valid file
 * 	if not os.path.isfile(path):
 * 		raise IOError("{0} is not a file".format(path))             # <<<<<<<<<<<<<<
 * 	else:
 * 		with open(path, "r") as file:    # catch a wrong path before it crashes the interpreteri
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_0_is_not_a_file, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_path};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1785, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IOError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1785, __pyx_L1_error)

    /* "networkit/community.pyx":1784
 * 		print("path expanded to: {0}".format(path))
 * 	# check if file path leads to a valid file
 * 	if not os.path.isfile(path):             # <<<<<<<<<<<<<<
 * 		raise IOError("{0} is not a file".format(path))
 * 	else:
 */
  }

  /* "networkit/community.pyx":1787
 * 		raise IOError("{0} is not a file".format(path))
 * 	else:
 * 		with open(path, "r") as file:    # catch a wrong path before it crashes the interpreteri             # <<<<<<<<<<<<<<
 * 			print("read communities from: {0}".format(path))
 * 			communities = reader.read(path)
 */
  /*else*/ {
    /*with:*/ {
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1787, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_path);
      __Pyx_GIVEREF(__pyx_v_path);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_path)) __PYX_ERR(0, 1787, __pyx_L1_error);
      __Pyx_INCREF(__pyx_n_u_r);
      __Pyx_GIVEREF(__pyx_n_u_r);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_n_u_r)) __PYX_ERR(0, 1787, __pyx_L1_error);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1787, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1787, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1787, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1787, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_t_1 = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_6, &__pyx_t_13);
          __Pyx_XGOTREF(__pyx_t_7);
          __Pyx_XGOTREF(__pyx_t_6);
          __Pyx_XGOTREF(__pyx_t_13);
          /*try:*/ {
            __pyx_v_file = __pyx_t_1;
            __pyx_t_1 = 0;

            /* "networkit/community.pyx":1788
 * 	else:
 * 		with open(path, "r") as file:    # catch a wrong path before it crashes the interpreteri
 * 			print("read communities from: {0}".format(path))             # <<<<<<<<<<<<<<
 * 			communities = reader.read(path)
 * 			return communities
 */
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_read_communities_from_0, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1788, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_3 = NULL;
            __pyx_t_5 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
                __pyx_t_5 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_path};
              __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1788, __pyx_L17_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            }
            __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1788, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "networkit/community.pyx":1789
 * 		with open(path, "r") as file:    # catch a wrong path before it crashes the interpreteri
 * 			print("read communities from: {0}".format(path))
 * 			communities = reader.read(path)             # <<<<<<<<<<<<<<
 * 			return communities
 * 
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_reader, __pyx_n_s_read); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1789, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = NULL;
            __pyx_t_5 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
                __pyx_t_5 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_path};
              __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1789, __pyx_L17_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            }
            __pyx_v_communities = __pyx_t_2;
            __pyx_t_2 = 0;

            /* "networkit/community.pyx":1790
 * 			print("read communities from: {0}".format(path))
 * 			communities = reader.read(path)
 * 			return communities             # <<<<<<<<<<<<<<
 * 
 * 	return None
 */
            __Pyx_XDECREF(__pyx_r);
            __Pyx_INCREF(__pyx_v_communities);
            __pyx_r = __pyx_v_communities;
            goto __pyx_L21_try_return;

            /* "networkit/community.pyx":1787
 * 		raise IOError("{0} is not a file".format(path))
 * 	else:
 * 		with open(path, "r") as file:    # catch a wrong path before it crashes the interpreteri             # <<<<<<<<<<<<<<
 * 			print("read communities from: {0}".format(path))
 * 			communities = reader.read(path)
 */
          }
          __pyx_L17_error:;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("networkit.community.readCommunities", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_3) < 0) __PYX_ERR(0, 1787, __pyx_L19_except_error)
            __Pyx_XGOTREF(__pyx_t_2);
            __Pyx_XGOTREF(__pyx_t_1);
            __Pyx_XGOTREF(__pyx_t_3);
            __pyx_t_9 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1787, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1787, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            if (__pyx_t_12 < 0) __PYX_ERR(0, 1787, __pyx_L19_except_error)
            __pyx_t_11 = (!__pyx_t_12);
            if (unlikely(__pyx_t_11)) {
              __Pyx_GIVEREF(__pyx_t_2);
              __Pyx_GIVEREF(__pyx_t_1);
              __Pyx_XGIVEREF(__pyx_t_3);
              __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_1, __pyx_t_3);
              __pyx_t_2 = 0; __pyx_t_1 = 0; __pyx_t_3 = 0; 
              __PYX_ERR(0, 1787, __pyx_L19_except_error)
            }
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            goto __pyx_L18_exception_handled;
          }
          __pyx_L19_except_error:;
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_6);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_13);
          goto __pyx_L1_error;
          __pyx_L21_try_return:;
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_6);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_13);
          goto __pyx_L14_return;
          __pyx_L18_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_6);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_13);
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_8) {
            __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__23, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1787, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
          goto __pyx_L16;
        }
        __pyx_L14_return: {
          __pyx_t_13 = __pyx_r;
          __pyx_r = 0;
          if (__pyx_t_8) {
            __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__23, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1787, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          }
          __pyx_r = __pyx_t_13;
          __pyx_t_13 = 0;
          goto __pyx_L0;
        }
        __pyx_L16:;
      }
      goto __pyx_L26;
      __pyx_L13_error:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L1_error;
      __pyx_L26:;
    }
  }

  /* "networkit/community.pyx":1792
 * 			return communities
 * 
 * 	return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "networkit/community.pyx":1754
 * 	print(tabulate.tabulate(results))
 * 
 * def readCommunities(path, format="default"):             # <<<<<<<<<<<<<<
 * 	"""
 * 	readCommunities(path, format="default")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("networkit.community.readCommunities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_readers);
  __Pyx_XDECREF(__pyx_v_reader);
  __Pyx_XDECREF(__pyx_v_file);
  __Pyx_XDECREF(__pyx_v_communities);
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1795
 * 
 * 
 * def writeCommunities(communities, path):             # <<<<<<<<<<<<<<
 * 	"""
 * 	writeCommunities(communities, path)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_11writeCommunities(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_10writeCommunities, " \n\twriteCommunities(communities, path)\n\n\tWrite a partition into communities to a file\n\n\tParameters\n\t----------\n\tcommunities : networkit.Partition\n\t\tThe input communities.\n\tpath : str\n\t\tPath to write the file to.\n\t");
static PyMethodDef __pyx_mdef_9networkit_9community_11writeCommunities = {"writeCommunities", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_11writeCommunities, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_10writeCommunities};
static PyObject *__pyx_pw_9networkit_9community_11writeCommunities(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_communities = 0;
  PyObject *__pyx_v_path = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeCommunities (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_communities_2,&__pyx_n_s_path,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_communities_2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1795, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_path)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1795, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("writeCommunities", 1, 2, 2, 1); __PYX_ERR(0, 1795, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "writeCommunities") < 0)) __PYX_ERR(0, 1795, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_communities = values[0];
    __pyx_v_path = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeCommunities", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1795, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.writeCommunities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_10writeCommunities(__pyx_self, __pyx_v_communities, __pyx_v_path);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_10writeCommunities(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_communities, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeCommunities", 1);

  /* "networkit/community.pyx":1808
 * 		Path to write the file to.
 * 	"""
 * 	PartitionWriter().write(communities, path)             # <<<<<<<<<<<<<<
 * 	print("wrote communities to: {0}".format(path))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_PartitionWriter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1808, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_communities, __pyx_v_path};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1808, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/community.pyx":1809
 * 	"""
 * 	PartitionWriter().write(communities, path)
 * 	print("wrote communities to: {0}".format(path))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_wrote_communities_to_0, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_path};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/community.pyx":1795
 * 
 * 
 * def writeCommunities(communities, path):             # <<<<<<<<<<<<<<
 * 	"""
 * 	writeCommunities(communities, path)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.community.writeCommunities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1812
 * 
 * 
 * def compareCommunities(G, zeta1, zeta2):             # <<<<<<<<<<<<<<
 * 	"""
 * 	compareCommunities(G, zeta1, zeta2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_13compareCommunities(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_12compareCommunities, "\n\tcompareCommunities(G, zeta1, zeta2)\n\n\tCompare the partitions with respect to several (dis)similarity measures. \n\t\n\tNotes\n\t-----\n\tCurrently not implemented.\n\t");
static PyMethodDef __pyx_mdef_9networkit_9community_13compareCommunities = {"compareCommunities", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_13compareCommunities, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_12compareCommunities};
static PyObject *__pyx_pw_9networkit_9community_13compareCommunities(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_G = 0;
  CYTHON_UNUSED PyObject *__pyx_v_zeta1 = 0;
  CYTHON_UNUSED PyObject *__pyx_v_zeta2 = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compareCommunities (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_zeta1,&__pyx_n_s_zeta2,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1812, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1812, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("compareCommunities", 1, 3, 3, 1); __PYX_ERR(0, 1812, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_zeta2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1812, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("compareCommunities", 1, 3, 3, 2); __PYX_ERR(0, 1812, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "compareCommunities") < 0)) __PYX_ERR(0, 1812, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_G = values[0];
    __pyx_v_zeta1 = values[1];
    __pyx_v_zeta2 = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compareCommunities", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1812, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.compareCommunities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_12compareCommunities(__pyx_self, __pyx_v_G, __pyx_v_zeta1, __pyx_v_zeta2);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_12compareCommunities(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_G, CYTHON_UNUSED PyObject *__pyx_v_zeta1, CYTHON_UNUSED PyObject *__pyx_v_zeta2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compareCommunities", 1);

  /* "networkit/community.pyx":1822
 * 	Currently not implemented.
 * 	"""
 * 	raise NotImplementedError("TODO:")             # <<<<<<<<<<<<<<
 * 
 * def kCoreCommunityDetection(G, k, algo=None, inspect=True):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1822, __pyx_L1_error)

  /* "networkit/community.pyx":1812
 * 
 * 
 * def compareCommunities(G, zeta1, zeta2):             # <<<<<<<<<<<<<<
 * 	"""
 * 	compareCommunities(G, zeta1, zeta2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.community.compareCommunities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1824
 * 	raise NotImplementedError("TODO:")
 * 
 * def kCoreCommunityDetection(G, k, algo=None, inspect=True):             # <<<<<<<<<<<<<<
 * 	"""
 * 	kCoreCommunityDetection(G, k, algo=None, inspect=True)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_15kCoreCommunityDetection(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_14kCoreCommunityDetection, " \n\tkCoreCommunityDetection(G, k, algo=None, inspect=True)\n\t\n\tPerform community detection on the k-core of the graph, which possibly\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the evaluation is performed.\n\tk : float\n\t\tSet k as used in k-core.\n\talgo : networkit.community.CommunityDetector, optional\n\t\tCommunity detection algorithm instance. Default: None\n\tinspect: bool, optional\n\t\tPrint properties of the found solution. Default: True\n\tReturns\n\t-------\n\tnetworkit.Partition\n\t\tReturn communities (as type Partition).\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_15kCoreCommunityDetection = {"kCoreCommunityDetection", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_15kCoreCommunityDetection, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_14kCoreCommunityDetection};
static PyObject *__pyx_pw_9networkit_9community_15kCoreCommunityDetection(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_algo = 0;
  PyObject *__pyx_v_inspect = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("kCoreCommunityDetection (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_k,&__pyx_n_s_algo,&__pyx_n_s_inspect,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_True)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1824, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1824, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("kCoreCommunityDetection", 0, 2, 4, 1); __PYX_ERR(0, 1824, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_algo);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1824, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_inspect);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1824, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "kCoreCommunityDetection") < 0)) __PYX_ERR(0, 1824, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = values[0];
    __pyx_v_k = values[1];
    __pyx_v_algo = values[2];
    __pyx_v_inspect = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("kCoreCommunityDetection", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 1824, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.kCoreCommunityDetection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_14kCoreCommunityDetection(__pyx_self, __pyx_v_G, __pyx_v_k, __pyx_v_algo, __pyx_v_inspect);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_14kCoreCommunityDetection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_G, PyObject *__pyx_v_k, PyObject *__pyx_v_algo, PyObject *__pyx_v_inspect) {
  PyObject *__pyx_v_coreDec = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_cores = NULL;
  PyObject *__pyx_v_kCore = NULL;
  PyObject *__pyx_v_partition = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_C = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("kCoreCommunityDetection", 1);

  /* "networkit/community.pyx":1845
 * 		Return communities (as type Partition).
 * 		"""
 * 	coreDec = CoreDecomposition(G)             # <<<<<<<<<<<<<<
 * 	coreDec.run()
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_CoreDecomposition); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_G};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_coreDec = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1846
 * 		"""
 * 	coreDec = CoreDecomposition(G)
 * 	coreDec.run()             # <<<<<<<<<<<<<<
 * 
 * 	cores = coreDec.scores()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_coreDec, __pyx_n_s_run); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1846, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/community.pyx":1848
 * 	coreDec.run()
 * 
 * 	cores = coreDec.scores()             # <<<<<<<<<<<<<<
 * 
 * 	kCore = []
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_coreDec, __pyx_n_s_scores); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_cores = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1850
 * 	cores = coreDec.scores()
 * 
 * 	kCore = []             # <<<<<<<<<<<<<<
 * 	partition = coreDec.getPartition()
 * 	for i in range(k, partition.numberOfSubsets() + 1):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_kCore = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1851
 * 
 * 	kCore = []
 * 	partition = coreDec.getPartition()             # <<<<<<<<<<<<<<
 * 	for i in range(k, partition.numberOfSubsets() + 1):
 * 		kCore.extend(partition.getMembers(i))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_coreDec, __pyx_n_s_getPartition); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_partition = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1852
 * 	kCore = []
 * 	partition = coreDec.getPartition()
 * 	for i in range(k, partition.numberOfSubsets() + 1):             # <<<<<<<<<<<<<<
 * 		kCore.extend(partition.getMembers(i))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_partition, __pyx_n_s_numberOfSubsets); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_k);
  __Pyx_GIVEREF(__pyx_v_k);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_k)) __PYX_ERR(0, 1852, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2)) __PYX_ERR(0, 1852, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1852, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1852, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1852, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1852, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1852, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1852, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1852, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1852, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "networkit/community.pyx":1853
 * 	partition = coreDec.getPartition()
 * 	for i in range(k, partition.numberOfSubsets() + 1):
 * 		kCore.extend(partition.getMembers(i))             # <<<<<<<<<<<<<<
 * 
 * 	if len(kCore) == 0:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_partition, __pyx_n_s_getMembers); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_i};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_8 = __Pyx_PyList_Extend(__pyx_v_kCore, __pyx_t_2); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1853, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "networkit/community.pyx":1852
 * 	kCore = []
 * 	partition = coreDec.getPartition()
 * 	for i in range(k, partition.numberOfSubsets() + 1):             # <<<<<<<<<<<<<<
 * 		kCore.extend(partition.getMembers(i))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/community.pyx":1855
 * 		kCore.extend(partition.getMembers(i))
 * 
 * 	if len(kCore) == 0:             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("There is no core for the specified k")
 * 
 */
  __pyx_t_5 = __Pyx_PyList_GET_SIZE(__pyx_v_kCore); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1855, __pyx_L1_error)
  __pyx_t_9 = (__pyx_t_5 == 0);
  if (unlikely(__pyx_t_9)) {

    /* "networkit/community.pyx":1856
 * 
 * 	if len(kCore) == 0:
 * 		raise RuntimeError("There is no core for the specified k")             # <<<<<<<<<<<<<<
 * 
 * 	C = GraphTools.subgraphFromNodes(G, kCore)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1856, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1856, __pyx_L1_error)

    /* "networkit/community.pyx":1855
 * 		kCore.extend(partition.getMembers(i))
 * 
 * 	if len(kCore) == 0:             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("There is no core for the specified k")
 * 
 */
  }

  /* "networkit/community.pyx":1858
 * 		raise RuntimeError("There is no core for the specified k")
 * 
 * 	C = GraphTools.subgraphFromNodes(G, kCore)             # <<<<<<<<<<<<<<
 * 
 * 	#properties.overview(C)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_GraphTools); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_subgraphFromNodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_G, __pyx_v_kCore};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1858, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_C = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":1862
 * 	#properties.overview(C)
 * 
 * 	return detectCommunities(C, algo, inspect)             # <<<<<<<<<<<<<<
 * """
 * class InfomapAdapter:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_detectCommunities); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_2, __pyx_v_C, __pyx_v_algo, __pyx_v_inspect};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 3+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1824
 * 	raise NotImplementedError("TODO:")
 * 
 * def kCoreCommunityDetection(G, k, algo=None, inspect=True):             # <<<<<<<<<<<<<<
 * 	"""
 * 	kCoreCommunityDetection(G, k, algo=None, inspect=True)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("networkit.community.kCoreCommunityDetection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coreDec);
  __Pyx_XDECREF(__pyx_v_cores);
  __Pyx_XDECREF(__pyx_v_kCore);
  __Pyx_XDECREF(__pyx_v_partition);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_C);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1959
 * 	cdef _OverlappingNMIDistance _this
 * 
 * 	def __cinit__(self, normalization = Normalization.MAX):             # <<<<<<<<<<<<<<
 * 		self._validateNormalization(normalization)
 * 		self._this = _OverlappingNMIDistance(normalization)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_9community_22OverlappingNMIDistance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_9community_22OverlappingNMIDistance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_normalization = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_normalization,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(__pyx_k__26);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_normalization);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1959, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1959, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_normalization = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1959, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.OverlappingNMIDistance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_22OverlappingNMIDistance___cinit__(((struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *)__pyx_v_self), __pyx_v_normalization);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_9community_22OverlappingNMIDistance___cinit__(struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *__pyx_v_self, PyObject *__pyx_v_normalization) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  enum NetworKit::OverlappingNMIDistance::Normalization __pyx_t_5;
  NetworKit::OverlappingNMIDistance __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/community.pyx":1960
 * 
 * 	def __cinit__(self, normalization = Normalization.MAX):
 * 		self._validateNormalization(normalization)             # <<<<<<<<<<<<<<
 * 		self._this = _OverlappingNMIDistance(normalization)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_validateNormalization); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_normalization};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/community.pyx":1961
 * 	def __cinit__(self, normalization = Normalization.MAX):
 * 		self._validateNormalization(normalization)
 * 		self._this = _OverlappingNMIDistance(normalization)             # <<<<<<<<<<<<<<
 * 
 * 	def setNormalization(self, normalization):
 */
  __pyx_t_5 = ((enum NetworKit::OverlappingNMIDistance::Normalization)__Pyx_PyInt_As_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(__pyx_v_normalization)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1961, __pyx_L1_error)
  try {
    __pyx_t_6 = NetworKit::OverlappingNMIDistance(__pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1961, __pyx_L1_error)
  }
  __pyx_v_self->_this = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

  /* "networkit/community.pyx":1959
 * 	cdef _OverlappingNMIDistance _this
 * 
 * 	def __cinit__(self, normalization = Normalization.MAX):             # <<<<<<<<<<<<<<
 * 		self._validateNormalization(normalization)
 * 		self._this = _OverlappingNMIDistance(normalization)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.community.OverlappingNMIDistance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1963
 * 		self._this = _OverlappingNMIDistance(normalization)
 * 
 * 	def setNormalization(self, normalization):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setNormalization(self, normalization)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_22OverlappingNMIDistance_3setNormalization(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_22OverlappingNMIDistance_2setNormalization, "\n\t\tsetNormalization(self, normalization)\n\t\t\n\t\tSet the normalization method.\n\n\t\tParameter :code:`normalization` can be one of the following:\n\n\t\t- networkit.community.Normalization.MIN\n\t\t- networkit.community.Normalization.GEOMETRIC_MEAN\n\t\t- networkit.community.Normalization.ARITHMETIC_MEAN\n\t\t- networkit.community.Normalization.MAX\n\t\t- networkit.community.Normalization.JOINT_ENTROPY\n\n\t\tParameters\n\t\t----------\n\t\tnormalization : networkit.community.Normalization\n\t\t\tNormalization strategy for OverlappingNMIDistance.\n\n\t\tRaises\n\t\t------\n\t\tValueError\n\t\t    If `normalization` is not one of the available methods.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_22OverlappingNMIDistance_3setNormalization = {"setNormalization", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_22OverlappingNMIDistance_3setNormalization, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_22OverlappingNMIDistance_2setNormalization};
static PyObject *__pyx_pw_9networkit_9community_22OverlappingNMIDistance_3setNormalization(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_normalization = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNormalization (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_normalization,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_normalization)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1963, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setNormalization") < 0)) __PYX_ERR(0, 1963, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_normalization = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNormalization", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1963, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.OverlappingNMIDistance.setNormalization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_22OverlappingNMIDistance_2setNormalization(((struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *)__pyx_v_self), __pyx_v_normalization);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_22OverlappingNMIDistance_2setNormalization(struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *__pyx_v_self, PyObject *__pyx_v_normalization) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  enum NetworKit::OverlappingNMIDistance::Normalization __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setNormalization", 1);

  /* "networkit/community.pyx":1987
 * 		    If `normalization` is not one of the available methods.
 * 		"""
 * 		self._validateNormalization(normalization)             # <<<<<<<<<<<<<<
 * 		self._this.setNormalization(normalization)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_validateNormalization); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_normalization};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1987, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/community.pyx":1988
 * 		"""
 * 		self._validateNormalization(normalization)
 * 		self._this.setNormalization(normalization)             # <<<<<<<<<<<<<<
 * 
 * 	def getDissimilarity(self, Graph G, PartitionCover first, PartitionCover second):
 */
  __pyx_t_5 = ((enum NetworKit::OverlappingNMIDistance::Normalization)__Pyx_PyInt_As_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(__pyx_v_normalization)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1988, __pyx_L1_error)
  try {
    __pyx_v_self->_this.setNormalization(__pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1988, __pyx_L1_error)
  }

  /* "networkit/community.pyx":1963
 * 		self._this = _OverlappingNMIDistance(normalization)
 * 
 * 	def setNormalization(self, normalization):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setNormalization(self, normalization)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.community.OverlappingNMIDistance.setNormalization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":1990
 * 		self._this.setNormalization(normalization)
 * 
 * 	def getDissimilarity(self, Graph G, PartitionCover first, PartitionCover second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_22OverlappingNMIDistance_5getDissimilarity(PyObject *__pyx_v_signatures, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_22OverlappingNMIDistance_4getDissimilarity, "\n\t\tgetDissimilarity(G, first, second)\n\t\t\n\t\tCalculate the dissimilarity.\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tThe input graph.\n\t\tfirst : networkit.Partition or networkit.Cover\n\t\t\tThe first input partition/cover.\n\t\tsecond : networkit.Partition or networkit.Cover\n\t\t\tThe second input partition/cover. Must be the same type as `first`.\n\n\t\tRaises\n\t\t------\n\t\tTypeError\n\t\t    If `first` and `second` do not have the same type.\n\t\tValueError\n\t\t    If `G`, `first` and `second` do not have the matching number of nodes.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tResulting overlapping NMI distance.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_22OverlappingNMIDistance_5getDissimilarity = {"getDissimilarity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_9community_22OverlappingNMIDistance_5getDissimilarity, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_9community_22OverlappingNMIDistance_4getDissimilarity};
static PyObject *__pyx_pw_9networkit_9community_22OverlappingNMIDistance_5getDissimilarity(PyObject *__pyx_v_signatures, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED PyObject *__pyx_v_defaults = 0;
  PyObject *__pyx_v__fused_sigindex = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_fused_cpdef (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_args,&__pyx_n_s_kwargs,&__pyx_n_s_defaults,&__pyx_n_s_fused_sigindex,0};
    values[3] = __Pyx_Arg_NewRef_VARARGS(__pyx_k__27);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_args)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1990, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_kwargs)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1990, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 0, 3, 4, 1); __PYX_ERR(0, 1990, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_defaults)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1990, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 0, 3, 4, 2); __PYX_ERR(0, 1990, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fused_sigindex);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1990, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_fused_cpdef") < 0)) __PYX_ERR(0, 1990, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_args = values[0];
    __pyx_v_kwargs = values[1];
    __pyx_v_defaults = values[2];
    __pyx_v__fused_sigindex = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 1990, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.OverlappingNMIDistance.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_22OverlappingNMIDistance_4getDissimilarity(((struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *)__pyx_v_signatures), __pyx_v_args, __pyx_v_kwargs, __pyx_v_defaults, __pyx_v__fused_sigindex);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_22OverlappingNMIDistance_4getDissimilarity(struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults, PyObject *__pyx_v__fused_sigindex) {
  PyObject *__pyx_v_search_list = 0;
  PyObject *__pyx_v_sigindex_node = 0;
  PyObject *__pyx_v_dest_sig = NULL;
  PyObject *__pyx_v_arg = NULL;
  PyObject *__pyx_v_sig = NULL;
  PyObject *__pyx_v_sig_series = NULL;
  PyObject *__pyx_v_last_type = NULL;
  PyObject *__pyx_v_sig_type = NULL;
  PyObject *__pyx_v_sigindex_matches = NULL;
  PyObject *__pyx_v_sigindex_candidates = NULL;
  PyObject *__pyx_v_dst_type = NULL;
  PyObject *__pyx_v_found_matches = NULL;
  PyObject *__pyx_v_found_candidates = NULL;
  PyObject *__pyx_v_sn = NULL;
  PyObject *__pyx_v_type_match = NULL;
  PyObject *__pyx_v_candidates = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDissimilarity", 0);
  __Pyx_INCREF(__pyx_v_kwargs);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, Py_None)) __PYX_ERR(0, 1990, __pyx_L1_error);
  __pyx_v_dest_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_kwargs != Py_None);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
  __pyx_t_4 = (!__pyx_t_3);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_kwargs, Py_None);
  }
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1990, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1990, __pyx_L1_error)
  __pyx_t_2 = (2 < __pyx_t_5);
  if (__pyx_t_2) {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1990, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(((PyObject*)__pyx_v_args), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  __pyx_t_4 = (__pyx_v_kwargs != Py_None);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1990, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_first, ((PyObject*)__pyx_v_kwargs), Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_4;
  __pyx_L7_bool_binop_done:;
  if (likely(__pyx_t_2)) {
    if (unlikely(__pyx_v_kwargs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1990, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_kwargs), __pyx_n_s_first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  /*else*/ {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1990, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1990, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_int_4);
    __Pyx_GIVEREF(__pyx_int_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_int_4)) __PYX_ERR(0, 1990, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_s);
    __Pyx_GIVEREF(__pyx_n_s_s);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_n_s_s)) __PYX_ERR(0, 1990, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Expected_at_least_d_argument_s_g, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 1990, __pyx_L1_error)
  }
  __pyx_L6:;
  while (1) {
    __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_kp_s__5);
    __Pyx_GIVEREF(__pyx_kp_s__5);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_kp_s__5)) __PYX_ERR(0, 1990, __pyx_L1_error);
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_kp_s_networkit_structures);
    __Pyx_GIVEREF(__pyx_kp_s_networkit_structures);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_networkit_structures)) __PYX_ERR(0, 1990, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, Py_None)) __PYX_ERR(0, 1990, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(0, 1990, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6)) __PYX_ERR(0, 1990, __pyx_L1_error);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin___import__, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_Partition); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_arg, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {
      if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_Partition, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
      goto __pyx_L10_break;
    }
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_kp_s__5);
    __Pyx_GIVEREF(__pyx_kp_s__5);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s__5)) __PYX_ERR(0, 1990, __pyx_L1_error);
    __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_kp_s_networkit_structures);
    __Pyx_GIVEREF(__pyx_kp_s_networkit_structures);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_s_networkit_structures)) __PYX_ERR(0, 1990, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, Py_None)) __PYX_ERR(0, 1990, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 2, Py_None)) __PYX_ERR(0, 1990, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin___import__, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Cover); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_arg, __pyx_t_6); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_2) {
      if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_Cover, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
      goto __pyx_L10_break;
    }
    if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, Py_None, long, 1, __Pyx_PyInt_From_long, 1, 0, 1) < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
    goto __pyx_L10_break;
  }
  __pyx_L10_break:;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v__fused_sigindex); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
  __pyx_t_4 = (!__pyx_t_2);
  if (__pyx_t_4) {
    __pyx_t_5 = 0;
    if (unlikely(((PyObject *)__pyx_v_signatures) == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 1990, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_dict_iterator(((PyObject*)__pyx_v_signatures), 1, ((PyObject *)NULL), (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_1;
    __pyx_t_1 = 0;
    while (1) {
      __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_6, __pyx_t_7, &__pyx_t_5, &__pyx_t_1, NULL, NULL, __pyx_t_8);
      if (unlikely(__pyx_t_9 == 0)) break;
      if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 1990, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_sig, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_v__fused_sigindex;
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_sigindex_node, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_sig, __pyx_n_s_strip); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1990, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = NULL;
      __pyx_t_9 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_9 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_kp_s__6};
        __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1990, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_split); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1990, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      __pyx_t_9 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_9 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_kp_s__7};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_t_11 = __Pyx_PySequence_ListKeepNew(__pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1990, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_13 = PyList_GET_SIZE(__pyx_t_11);
      if (unlikely(__pyx_t_13 < 1)) {
        __Pyx_RaiseNeedMoreValuesError(0+__pyx_t_13); __PYX_ERR(0, 1990, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_10 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_13-1); 
      ((PyVarObject*)__pyx_t_11)->ob_size--;
      #else
      __pyx_t_10 = PySequence_ITEM(__pyx_t_11, __pyx_t_13-1); 
      #endif
      __Pyx_GOTREF(__pyx_t_10);
      #if !CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_12 = PySequence_GetSlice(__pyx_t_11, 0, __pyx_t_13-1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1990, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11);
      __pyx_t_11 = __pyx_t_12; __pyx_t_12 = NULL;
      #else
      CYTHON_UNUSED_VAR(__pyx_t_12);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_sig_series, ((PyObject*)__pyx_t_11));
      __pyx_t_11 = 0;
      __Pyx_XDECREF_SET(__pyx_v_last_type, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_1 = __pyx_v_sig_series; __Pyx_INCREF(__pyx_t_1);
      __pyx_t_13 = 0;
      for (;;) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
          #endif
          if (__pyx_t_13 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_10 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_13); __Pyx_INCREF(__pyx_t_10); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
        #else
        __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1990, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
        __Pyx_XDECREF_SET(__pyx_v_sig_type, __pyx_t_10);
        __pyx_t_10 = 0;
        if (unlikely(__pyx_v_sigindex_node == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
          __PYX_ERR(0, 1990, __pyx_L1_error)
        }
        __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_v_sig_type, __pyx_v_sigindex_node, Py_NE)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
        if (__pyx_t_4) {
          __pyx_t_10 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1990, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          if (unlikely(__pyx_v_sigindex_node == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 1990, __pyx_L1_error)
          }
          if (unlikely((PyDict_SetItem(__pyx_v_sigindex_node, __pyx_v_sig_type, __pyx_t_10) < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_DECREF_SET(__pyx_v_sigindex_node, __pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          goto __pyx_L18;
        }
        /*else*/ {
          if (unlikely(__pyx_v_sigindex_node == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 1990, __pyx_L1_error)
          }
          __pyx_t_10 = __Pyx_PyDict_GetItem(__pyx_v_sigindex_node, __pyx_v_sig_type); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1990, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = __pyx_t_10;
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF_SET(__pyx_v_sigindex_node, ((PyObject*)__pyx_t_11));
          __pyx_t_11 = 0;
        }
        __pyx_L18:;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(__pyx_v_sigindex_node == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1990, __pyx_L1_error)
      }
      if (unlikely((PyDict_SetItem(__pyx_v_sigindex_node, __pyx_v_last_type, __pyx_v_sig) < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_sigindex_matches = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v__fused_sigindex);
  __Pyx_GIVEREF(__pyx_v__fused_sigindex);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v__fused_sigindex)) __PYX_ERR(0, 1990, __pyx_L1_error);
  __pyx_v_sigindex_candidates = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __pyx_v_dest_sig; __Pyx_INCREF(__pyx_t_6);
  __pyx_t_7 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_6);
      #if !CYTHON_ASSUME_SAFE_MACROS
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
      #endif
      if (__pyx_t_7 >= __pyx_temp) break;
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
    #else
    __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_dst_type, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_found_matches, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_found_candidates, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_4 = (__pyx_v_dst_type == Py_None);
    if (__pyx_t_4) {
      __pyx_t_1 = __pyx_v_sigindex_matches; __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = 0;
      for (;;) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_11 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_11); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
        #else
        __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1990, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
        __Pyx_XDECREF_SET(__pyx_v_sn, __pyx_t_11);
        __pyx_t_11 = 0;
        if (unlikely(__pyx_v_sn == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
          __PYX_ERR(0, 1990, __pyx_L1_error)
        }
        __pyx_t_11 = __Pyx_PyDict_Values(((PyObject*)__pyx_v_sn)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1990, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_14 = __Pyx_PyList_Extend(__pyx_v_found_matches, __pyx_t_11); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 1990, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_v_sigindex_candidates; __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = 0;
      for (;;) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_11 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_11); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
        #else
        __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1990, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
        __Pyx_XDECREF_SET(__pyx_v_sn, __pyx_t_11);
        __pyx_t_11 = 0;
        if (unlikely(__pyx_v_sn == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
          __PYX_ERR(0, 1990, __pyx_L1_error)
        }
        __pyx_t_11 = __Pyx_PyDict_Values(((PyObject*)__pyx_v_sn)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1990, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_14 = __Pyx_PyList_Extend(__pyx_v_found_candidates, __pyx_t_11); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 1990, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L22;
    }
    /*else*/ {
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_sigindex_matches);
      __Pyx_GIVEREF(__pyx_v_sigindex_matches);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_sigindex_matches)) __PYX_ERR(0, 1990, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_sigindex_candidates);
      __Pyx_GIVEREF(__pyx_v_sigindex_candidates);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_sigindex_candidates)) __PYX_ERR(0, 1990, __pyx_L1_error);
      __pyx_t_11 = __pyx_t_1; __Pyx_INCREF(__pyx_t_11);
      __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (__pyx_t_5 >= 2) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
        __Pyx_XDECREF_SET(__pyx_v_search_list, ((PyObject*)__pyx_t_1));
        __pyx_t_1 = 0;
        if (unlikely(__pyx_v_search_list == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
          __PYX_ERR(0, 1990, __pyx_L1_error)
        }
        __pyx_t_1 = __pyx_v_search_list; __Pyx_INCREF(__pyx_t_1);
        __pyx_t_13 = 0;
        for (;;) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
            #endif
            if (__pyx_t_13 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_13); __Pyx_INCREF(__pyx_t_10); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
          #else
          __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1990, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
          __Pyx_XDECREF_SET(__pyx_v_sn, __pyx_t_10);
          __pyx_t_10 = 0;
          if (unlikely(__pyx_v_sn == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
            __PYX_ERR(0, 1990, __pyx_L1_error)
          }
          __pyx_t_10 = __Pyx_PyDict_GetItemDefault(((PyObject*)__pyx_v_sn), __pyx_v_dst_type, Py_None); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1990, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_XDECREF_SET(__pyx_v_type_match, __pyx_t_10);
          __pyx_t_10 = 0;
          __pyx_t_4 = (__pyx_v_type_match != Py_None);
          if (__pyx_t_4) {
            __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_found_matches, __pyx_v_type_match); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 1990, __pyx_L1_error)
          }
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __pyx_L22:;
    __Pyx_INCREF(__pyx_v_found_matches);
    __Pyx_DECREF_SET(__pyx_v_sigindex_matches, __pyx_v_found_matches);
    __Pyx_INCREF(__pyx_v_found_candidates);
    __Pyx_DECREF_SET(__pyx_v_sigindex_candidates, __pyx_v_found_candidates);
    __pyx_t_2 = (PyList_GET_SIZE(__pyx_v_found_matches) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_4 = __pyx_t_2;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_2 = (PyList_GET_SIZE(__pyx_v_found_candidates) != 0);
    __pyx_t_4 = __pyx_t_2;
    __pyx_L37_bool_binop_done:;
    __pyx_t_2 = (!__pyx_t_4);
    if (__pyx_t_2) {
      goto __pyx_L21_break;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  goto __pyx_L39_for_end;
  __pyx_L21_break:;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  goto __pyx_L39_for_end;
  __pyx_L39_for_end:;
  __Pyx_INCREF(__pyx_v_sigindex_matches);
  __pyx_v_candidates = __pyx_v_sigindex_matches;
  __pyx_t_2 = (PyList_GET_SIZE(__pyx_v_candidates) != 0);
  __pyx_t_4 = (!__pyx_t_2);
  if (unlikely(__pyx_t_4)) {
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 1990, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyList_GET_SIZE(__pyx_v_candidates); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1990, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_7 > 1);
  if (unlikely(__pyx_t_4)) {
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 1990, __pyx_L1_error)
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(((PyObject *)__pyx_v_signatures) == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1990, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_candidates, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_signatures), __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_11;
    __pyx_t_11 = 0;
    goto __pyx_L0;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("networkit.community.OverlappingNMIDistance.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_search_list);
  __Pyx_XDECREF(__pyx_v_sigindex_node);
  __Pyx_XDECREF(__pyx_v_dest_sig);
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_sig);
  __Pyx_XDECREF(__pyx_v_sig_series);
  __Pyx_XDECREF(__pyx_v_last_type);
  __Pyx_XDECREF(__pyx_v_sig_type);
  __Pyx_XDECREF(__pyx_v_sigindex_matches);
  __Pyx_XDECREF(__pyx_v_sigindex_candidates);
  __Pyx_XDECREF(__pyx_v_dst_type);
  __Pyx_XDECREF(__pyx_v_found_matches);
  __Pyx_XDECREF(__pyx_v_found_candidates);
  __Pyx_XDECREF(__pyx_v_sn);
  __Pyx_XDECREF(__pyx_v_type_match);
  __Pyx_XDECREF(__pyx_v_candidates);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_0__pyx_pw_9networkit_9community_22OverlappingNMIDistance_9getDissimilarity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_0__pyx_mdef_9networkit_9community_22OverlappingNMIDistance_9getDissimilarity = {"__pyx_fuse_0getDissimilarity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_fuse_0__pyx_pw_9networkit_9community_22OverlappingNMIDistance_9getDissimilarity, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_9community_22OverlappingNMIDistance_4getDissimilarity};
static PyObject *__pyx_fuse_0__pyx_pw_9networkit_9community_22OverlappingNMIDistance_9getDissimilarity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDissimilarity (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_first,&__pyx_n_s_second,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1990, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_first)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1990, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, 1); __PYX_ERR(0, 1990, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_second)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1990, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, 2); __PYX_ERR(0, 1990, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getDissimilarity") < 0)) __PYX_ERR(0, 1990, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
      values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_first = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
    __pyx_v_second = ((struct __pyx_obj_9networkit_10structures_Partition *)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1990, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.OverlappingNMIDistance.getDissimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_first), __pyx_ptype_9networkit_10structures_Partition, 1, "first", 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_second), __pyx_ptype_9networkit_10structures_Partition, 1, "second", 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_22OverlappingNMIDistance_8getDissimilarity(((struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *)__pyx_v_self), __pyx_v_G, __pyx_v_first, __pyx_v_second);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_22OverlappingNMIDistance_8getDissimilarity(struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_first, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_second) {
  double __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0getDissimilarity", 1);

  /* "networkit/community.pyx":2018
 * 		"""
 * 		cdef double ret
 * 		if isinstance(first, Partition) and isinstance(second, Partition):             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_first), __pyx_ptype_9networkit_10structures_Partition); 
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_second), __pyx_ptype_9networkit_10structures_Partition); 
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "networkit/community.pyx":2019
 * 		cdef double ret
 * 		if isinstance(first, Partition) and isinstance(second, Partition):
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)
 * 		elif isinstance(first, Cover) and isinstance(second, Cover):
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "networkit/community.pyx":2020
 * 		if isinstance(first, Partition) and isinstance(second, Partition):
 * 			with nogil:
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)             # <<<<<<<<<<<<<<
 * 		elif isinstance(first, Cover) and isinstance(second, Cover):
 * 			with nogil:
 */
          try {
            __pyx_t_3 = __pyx_v_self->_this.getDissimilarity(__pyx_v_G->_this, __pyx_v_first->_this, __pyx_v_second->_this);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 2020, __pyx_L7_error)
          }
          __pyx_v_ret = __pyx_t_3;
        }

        /* "networkit/community.pyx":2019
 * 		cdef double ret
 * 		if isinstance(first, Partition) and isinstance(second, Partition):
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)
 * 		elif isinstance(first, Cover) and isinstance(second, Cover):
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L8;
          }
          __pyx_L7_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L8:;
        }
    }

    /* "networkit/community.pyx":2018
 * 		"""
 * 		cdef double ret
 * 		if isinstance(first, Partition) and isinstance(second, Partition):             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)
 */
    goto __pyx_L3;
  }

  /* "networkit/community.pyx":2021
 * 			with nogil:
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)
 * 		elif isinstance(first, Cover) and isinstance(second, Cover):             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				ret = self._this.getDissimilarity(G._this, (<Cover>(first))._this, (<Cover>(second))._this)
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_first), __pyx_ptype_9networkit_10structures_Cover); 
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_second), __pyx_ptype_9networkit_10structures_Cover); 
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "networkit/community.pyx":2022
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)
 * 		elif isinstance(first, Cover) and isinstance(second, Cover):
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				ret = self._this.getDissimilarity(G._this, (<Cover>(first))._this, (<Cover>(second))._this)
 * 		else:
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "networkit/community.pyx":2023
 * 		elif isinstance(first, Cover) and isinstance(second, Cover):
 * 			with nogil:
 * 				ret = self._this.getDissimilarity(G._this, (<Cover>(first))._this, (<Cover>(second))._this)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise TypeError("Error, first and second must both be either a Partition or a Cover")
 */
          try {
            __pyx_t_3 = __pyx_v_self->_this.getDissimilarity(__pyx_v_G->_this, ((struct __pyx_obj_9networkit_10structures_Cover *)__pyx_v_first)->_this, ((struct __pyx_obj_9networkit_10structures_Cover *)__pyx_v_second)->_this);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 2023, __pyx_L12_error)
          }
          __pyx_v_ret = __pyx_t_3;
        }

        /* "networkit/community.pyx":2022
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)
 * 		elif isinstance(first, Cover) and isinstance(second, Cover):
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				ret = self._this.getDissimilarity(G._this, (<Cover>(first))._this, (<Cover>(second))._this)
 * 		else:
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L13;
          }
          __pyx_L12_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L13:;
        }
    }

    /* "networkit/community.pyx":2021
 * 			with nogil:
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)
 * 		elif isinstance(first, Cover) and isinstance(second, Cover):             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				ret = self._this.getDissimilarity(G._this, (<Cover>(first))._this, (<Cover>(second))._this)
 */
    goto __pyx_L3;
  }

  /* "networkit/community.pyx":2025
 * 				ret = self._this.getDissimilarity(G._this, (<Cover>(first))._this, (<Cover>(second))._this)
 * 		else:
 * 			raise TypeError("Error, first and second must both be either a Partition or a Cover")             # <<<<<<<<<<<<<<
 * 		return ret
 * 
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 2025, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "networkit/community.pyx":2026
 * 		else:
 * 			raise TypeError("Error, first and second must both be either a Partition or a Cover")
 * 		return ret             # <<<<<<<<<<<<<<
 * 
 * 	def _validateNormalization(self, _Normalization normalization):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_ret); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1990
 * 		self._this.setNormalization(normalization)
 * 
 * 	def getDissimilarity(self, Graph G, PartitionCover first, PartitionCover second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.community.OverlappingNMIDistance.getDissimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_1__pyx_pw_9networkit_9community_22OverlappingNMIDistance_11getDissimilarity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_1__pyx_mdef_9networkit_9community_22OverlappingNMIDistance_11getDissimilarity = {"__pyx_fuse_1getDissimilarity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_fuse_1__pyx_pw_9networkit_9community_22OverlappingNMIDistance_11getDissimilarity, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_9community_22OverlappingNMIDistance_4getDissimilarity};
static PyObject *__pyx_fuse_1__pyx_pw_9networkit_9community_22OverlappingNMIDistance_11getDissimilarity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_first = 0;
  struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_second = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDissimilarity (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_first,&__pyx_n_s_second,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1990, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_first)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1990, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, 1); __PYX_ERR(0, 1990, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_second)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1990, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, 2); __PYX_ERR(0, 1990, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getDissimilarity") < 0)) __PYX_ERR(0, 1990, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
      values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_first = ((struct __pyx_obj_9networkit_10structures_Cover *)values[1]);
    __pyx_v_second = ((struct __pyx_obj_9networkit_10structures_Cover *)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getDissimilarity", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1990, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.OverlappingNMIDistance.getDissimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_first), __pyx_ptype_9networkit_10structures_Cover, 1, "first", 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_second), __pyx_ptype_9networkit_10structures_Cover, 1, "second", 0))) __PYX_ERR(0, 1990, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_9community_22OverlappingNMIDistance_10getDissimilarity(((struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *)__pyx_v_self), __pyx_v_G, __pyx_v_first, __pyx_v_second);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_22OverlappingNMIDistance_10getDissimilarity(struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_first, struct __pyx_obj_9networkit_10structures_Cover *__pyx_v_second) {
  double __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1getDissimilarity", 1);

  /* "networkit/community.pyx":2018
 * 		"""
 * 		cdef double ret
 * 		if isinstance(first, Partition) and isinstance(second, Partition):             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_first), __pyx_ptype_9networkit_10structures_Partition); 
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_second), __pyx_ptype_9networkit_10structures_Partition); 
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "networkit/community.pyx":2019
 * 		cdef double ret
 * 		if isinstance(first, Partition) and isinstance(second, Partition):
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)
 * 		elif isinstance(first, Cover) and isinstance(second, Cover):
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "networkit/community.pyx":2020
 * 		if isinstance(first, Partition) and isinstance(second, Partition):
 * 			with nogil:
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)             # <<<<<<<<<<<<<<
 * 		elif isinstance(first, Cover) and isinstance(second, Cover):
 * 			with nogil:
 */
          try {
            __pyx_t_3 = __pyx_v_self->_this.getDissimilarity(__pyx_v_G->_this, ((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_v_first)->_this, ((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_v_second)->_this);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 2020, __pyx_L7_error)
          }
          __pyx_v_ret = __pyx_t_3;
        }

        /* "networkit/community.pyx":2019
 * 		cdef double ret
 * 		if isinstance(first, Partition) and isinstance(second, Partition):
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)
 * 		elif isinstance(first, Cover) and isinstance(second, Cover):
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L8;
          }
          __pyx_L7_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L8:;
        }
    }

    /* "networkit/community.pyx":2018
 * 		"""
 * 		cdef double ret
 * 		if isinstance(first, Partition) and isinstance(second, Partition):             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)
 */
    goto __pyx_L3;
  }

  /* "networkit/community.pyx":2021
 * 			with nogil:
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)
 * 		elif isinstance(first, Cover) and isinstance(second, Cover):             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				ret = self._this.getDissimilarity(G._this, (<Cover>(first))._this, (<Cover>(second))._this)
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_first), __pyx_ptype_9networkit_10structures_Cover); 
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_second), __pyx_ptype_9networkit_10structures_Cover); 
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "networkit/community.pyx":2022
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)
 * 		elif isinstance(first, Cover) and isinstance(second, Cover):
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				ret = self._this.getDissimilarity(G._this, (<Cover>(first))._this, (<Cover>(second))._this)
 * 		else:
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "networkit/community.pyx":2023
 * 		elif isinstance(first, Cover) and isinstance(second, Cover):
 * 			with nogil:
 * 				ret = self._this.getDissimilarity(G._this, (<Cover>(first))._this, (<Cover>(second))._this)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise TypeError("Error, first and second must both be either a Partition or a Cover")
 */
          try {
            __pyx_t_3 = __pyx_v_self->_this.getDissimilarity(__pyx_v_G->_this, __pyx_v_first->_this, __pyx_v_second->_this);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 2023, __pyx_L12_error)
          }
          __pyx_v_ret = __pyx_t_3;
        }

        /* "networkit/community.pyx":2022
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)
 * 		elif isinstance(first, Cover) and isinstance(second, Cover):
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				ret = self._this.getDissimilarity(G._this, (<Cover>(first))._this, (<Cover>(second))._this)
 * 		else:
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L13;
          }
          __pyx_L12_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L13:;
        }
    }

    /* "networkit/community.pyx":2021
 * 			with nogil:
 * 				ret = self._this.getDissimilarity(G._this, (<Partition>(first))._this, (<Partition>(second))._this)
 * 		elif isinstance(first, Cover) and isinstance(second, Cover):             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				ret = self._this.getDissimilarity(G._this, (<Cover>(first))._this, (<Cover>(second))._this)
 */
    goto __pyx_L3;
  }

  /* "networkit/community.pyx":2025
 * 				ret = self._this.getDissimilarity(G._this, (<Cover>(first))._this, (<Cover>(second))._this)
 * 		else:
 * 			raise TypeError("Error, first and second must both be either a Partition or a Cover")             # <<<<<<<<<<<<<<
 * 		return ret
 * 
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 2025, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "networkit/community.pyx":2026
 * 		else:
 * 			raise TypeError("Error, first and second must both be either a Partition or a Cover")
 * 		return ret             # <<<<<<<<<<<<<<
 * 
 * 	def _validateNormalization(self, _Normalization normalization):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_ret); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":1990
 * 		self._this.setNormalization(normalization)
 * 
 * 	def getDissimilarity(self, Graph G, PartitionCover first, PartitionCover second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.community.OverlappingNMIDistance.getDissimilarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":2028
 * 		return ret
 * 
 * 	def _validateNormalization(self, _Normalization normalization):             # <<<<<<<<<<<<<<
 * 		if normalization not in {OverlappingNMIDistance.Min, OverlappingNMIDistance.GeometricMean,
 * 				OverlappingNMIDistance.ArithmeticMean, OverlappingNMIDistance.Max, OverlappingNMIDistance.JointEntropy}:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_22OverlappingNMIDistance_7_validateNormalization(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_22OverlappingNMIDistance_7_validateNormalization = {"_validateNormalization", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_22OverlappingNMIDistance_7_validateNormalization, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_22OverlappingNMIDistance_7_validateNormalization(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  enum NetworKit::OverlappingNMIDistance::Normalization __pyx_v_normalization;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_validateNormalization (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_normalization,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_normalization)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2028, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_validateNormalization") < 0)) __PYX_ERR(0, 2028, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_normalization = ((enum NetworKit::OverlappingNMIDistance::Normalization)__Pyx_PyInt_As_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(values[0])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2028, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_validateNormalization", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2028, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.OverlappingNMIDistance._validateNormalization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_22OverlappingNMIDistance_6_validateNormalization(((struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *)__pyx_v_self), __pyx_v_normalization);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_22OverlappingNMIDistance_6_validateNormalization(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *__pyx_v_self, enum NetworKit::OverlappingNMIDistance::Normalization __pyx_v_normalization) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  enum NetworKit::OverlappingNMIDistance::Normalization __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_validateNormalization", 1);

  /* "networkit/community.pyx":2029
 * 
 * 	def _validateNormalization(self, _Normalization normalization):
 * 		if normalization not in {OverlappingNMIDistance.Min, OverlappingNMIDistance.GeometricMean,             # <<<<<<<<<<<<<<
 * 				OverlappingNMIDistance.ArithmeticMean, OverlappingNMIDistance.Max, OverlappingNMIDistance.JointEntropy}:
 * 			raise ValueError("Error, invalid normalization method")
 */
  __pyx_t_1 = __pyx_v_normalization;
  __pyx_t_3 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9networkit_9community_OverlappingNMIDistance), __pyx_n_s_Min); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9networkit_9community_OverlappingNMIDistance), __pyx_n_s_GeometricMean); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/community.pyx":2030
 * 	def _validateNormalization(self, _Normalization normalization):
 * 		if normalization not in {OverlappingNMIDistance.Min, OverlappingNMIDistance.GeometricMean,
 * 				OverlappingNMIDistance.ArithmeticMean, OverlappingNMIDistance.Max, OverlappingNMIDistance.JointEntropy}:             # <<<<<<<<<<<<<<
 * 			raise ValueError("Error, invalid normalization method")
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9networkit_9community_OverlappingNMIDistance), __pyx_n_s_ArithmeticMean); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/community.pyx":2029
 * 
 * 	def _validateNormalization(self, _Normalization normalization):
 * 		if normalization not in {OverlappingNMIDistance.Min, OverlappingNMIDistance.GeometricMean,             # <<<<<<<<<<<<<<
 * 				OverlappingNMIDistance.ArithmeticMean, OverlappingNMIDistance.Max, OverlappingNMIDistance.JointEntropy}:
 * 			raise ValueError("Error, invalid normalization method")
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "networkit/community.pyx":2030
 * 	def _validateNormalization(self, _Normalization normalization):
 * 		if normalization not in {OverlappingNMIDistance.Min, OverlappingNMIDistance.GeometricMean,
 * 				OverlappingNMIDistance.ArithmeticMean, OverlappingNMIDistance.Max, OverlappingNMIDistance.JointEntropy}:             # <<<<<<<<<<<<<<
 * 			raise ValueError("Error, invalid normalization method")
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9networkit_9community_OverlappingNMIDistance), __pyx_n_s_Max); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/community.pyx":2029
 * 
 * 	def _validateNormalization(self, _Normalization normalization):
 * 		if normalization not in {OverlappingNMIDistance.Min, OverlappingNMIDistance.GeometricMean,             # <<<<<<<<<<<<<<
 * 				OverlappingNMIDistance.ArithmeticMean, OverlappingNMIDistance.Max, OverlappingNMIDistance.JointEntropy}:
 * 			raise ValueError("Error, invalid normalization method")
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/community.pyx":2030
 * 	def _validateNormalization(self, _Normalization normalization):
 * 		if normalization not in {OverlappingNMIDistance.Min, OverlappingNMIDistance.GeometricMean,
 * 				OverlappingNMIDistance.ArithmeticMean, OverlappingNMIDistance.Max, OverlappingNMIDistance.JointEntropy}:             # <<<<<<<<<<<<<<
 * 			raise ValueError("Error, invalid normalization method")
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9networkit_9community_OverlappingNMIDistance), __pyx_n_s_JointEntropy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/community.pyx":2029
 * 
 * 	def _validateNormalization(self, _Normalization normalization):
 * 		if normalization not in {OverlappingNMIDistance.Min, OverlappingNMIDistance.GeometricMean,             # <<<<<<<<<<<<<<
 * 				OverlappingNMIDistance.ArithmeticMean, OverlappingNMIDistance.Max, OverlappingNMIDistance.JointEntropy}:
 * 			raise ValueError("Error, invalid normalization method")
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  __pyx_t_6 = __pyx_t_2;
  if (unlikely(__pyx_t_6)) {

    /* "networkit/community.pyx":2031
 * 		if normalization not in {OverlappingNMIDistance.Min, OverlappingNMIDistance.GeometricMean,
 * 				OverlappingNMIDistance.ArithmeticMean, OverlappingNMIDistance.Max, OverlappingNMIDistance.JointEntropy}:
 * 			raise ValueError("Error, invalid normalization method")             # <<<<<<<<<<<<<<
 * 
 * class SpectralPartitioner:
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 2031, __pyx_L1_error)

    /* "networkit/community.pyx":2029
 * 
 * 	def _validateNormalization(self, _Normalization normalization):
 * 		if normalization not in {OverlappingNMIDistance.Min, OverlappingNMIDistance.GeometricMean,             # <<<<<<<<<<<<<<
 * 				OverlappingNMIDistance.ArithmeticMean, OverlappingNMIDistance.Max, OverlappingNMIDistance.JointEntropy}:
 * 			raise ValueError("Error, invalid normalization method")
 */
  }

  /* "networkit/community.pyx":2028
 * 		return ret
 * 
 * 	def _validateNormalization(self, _Normalization normalization):             # <<<<<<<<<<<<<<
 * 		if normalization not in {OverlappingNMIDistance.Min, OverlappingNMIDistance.GeometricMean,
 * 				OverlappingNMIDistance.ArithmeticMean, OverlappingNMIDistance.Max, OverlappingNMIDistance.JointEntropy}:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.community.OverlappingNMIDistance._validateNormalization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_22OverlappingNMIDistance_15__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_22OverlappingNMIDistance_15__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_22OverlappingNMIDistance_15__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_22OverlappingNMIDistance_15__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_9community_22OverlappingNMIDistance_14__reduce_cython__(((struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_22OverlappingNMIDistance_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.OverlappingNMIDistance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_22OverlappingNMIDistance_17__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_22OverlappingNMIDistance_17__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_22OverlappingNMIDistance_17__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_22OverlappingNMIDistance_17__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.OverlappingNMIDistance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_22OverlappingNMIDistance_16__setstate_cython__(((struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_22OverlappingNMIDistance_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.OverlappingNMIDistance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":2051
 * 		Set this to false if you do not want to enforce balance, possibly increasing quality. Default: True
 * 	"""
 * 	def __init__(self, graph, count, balanced=True):             # <<<<<<<<<<<<<<
 * 		self.graph = graph
 * 		self.count = count
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_19SpectralPartitioner_1__init__ = {"__init__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19SpectralPartitioner_1__init__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_graph = 0;
  PyObject *__pyx_v_count = 0;
  PyObject *__pyx_v_balanced = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_graph,&__pyx_n_s_count,&__pyx_n_s_balanced,0};
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_True)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2051, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_graph)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2051, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 1); __PYX_ERR(0, 2051, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_count)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2051, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 2); __PYX_ERR(0, 2051, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_balanced);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2051, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 2051, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_graph = values[1];
    __pyx_v_count = values[2];
    __pyx_v_balanced = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 2051, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_19SpectralPartitioner___init__(__pyx_self, __pyx_v_self, __pyx_v_graph, __pyx_v_count, __pyx_v_balanced);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_graph, PyObject *__pyx_v_count, PyObject *__pyx_v_balanced) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "networkit/community.pyx":2052
 * 	"""
 * 	def __init__(self, graph, count, balanced=True):
 * 		self.graph = graph             # <<<<<<<<<<<<<<
 * 		self.count = count
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_graph, __pyx_v_graph) < 0) __PYX_ERR(0, 2052, __pyx_L1_error)

  /* "networkit/community.pyx":2053
 * 	def __init__(self, graph, count, balanced=True):
 * 		self.graph = graph
 * 		self.count = count             # <<<<<<<<<<<<<<
 * 
 * 		self.balanced = balanced
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_count, __pyx_v_count) < 0) __PYX_ERR(0, 2053, __pyx_L1_error)

  /* "networkit/community.pyx":2055
 * 		self.count = count
 * 
 * 		self.balanced = balanced             # <<<<<<<<<<<<<<
 * 
 * 	def _prepareSpectrum(self):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_balanced, __pyx_v_balanced) < 0) __PYX_ERR(0, 2055, __pyx_L1_error)

  /* "networkit/community.pyx":2051
 * 		Set this to false if you do not want to enforce balance, possibly increasing quality. Default: True
 * 	"""
 * 	def __init__(self, graph, count, balanced=True):             # <<<<<<<<<<<<<<
 * 		self.graph = graph
 * 		self.count = count
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":2057
 * 		self.balanced = balanced
 * 
 * 	def _prepareSpectrum(self):             # <<<<<<<<<<<<<<
 * 		spectrum = laplacianEigenvectors(self.graph, cutoff = (math.ceil(math.log(self.count, 2)) + 1), reverse=True)
 * 		self.eigenvectors = spectrum[1]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_3_prepareSpectrum(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_19SpectralPartitioner_3_prepareSpectrum = {"_prepareSpectrum", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19SpectralPartitioner_3_prepareSpectrum, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_3_prepareSpectrum(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_prepareSpectrum (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2057, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_prepareSpectrum") < 0)) __PYX_ERR(0, 2057, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_prepareSpectrum", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2057, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner._prepareSpectrum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_19SpectralPartitioner_2_prepareSpectrum(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner_2_prepareSpectrum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_spectrum = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_prepareSpectrum", 1);

  /* "networkit/community.pyx":2058
 * 
 * 	def _prepareSpectrum(self):
 * 		spectrum = laplacianEigenvectors(self.graph, cutoff = (math.ceil(math.log(self.count, 2)) + 1), reverse=True)             # <<<<<<<<<<<<<<
 * 		self.eigenvectors = spectrum[1]
 * 		self.eigenvalues = spectrum[0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_laplacianEigenvectors); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_graph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2)) __PYX_ERR(0, 2058, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_math); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ceil); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_math); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_log); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_count); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = NULL;
  __pyx_t_10 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_10 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_9, __pyx_t_7, __pyx_int_2};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 2+__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __pyx_t_8 = NULL;
  __pyx_t_10 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_10 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_5};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_cutoff, __pyx_t_6) < 0) __PYX_ERR(0, 2058, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_reverse, Py_True) < 0) __PYX_ERR(0, 2058, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_spectrum = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "networkit/community.pyx":2059
 * 	def _prepareSpectrum(self):
 * 		spectrum = laplacianEigenvectors(self.graph, cutoff = (math.ceil(math.log(self.count, 2)) + 1), reverse=True)
 * 		self.eigenvectors = spectrum[1]             # <<<<<<<<<<<<<<
 * 		self.eigenvalues = spectrum[0]
 * 
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_spectrum, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_eigenvectors, __pyx_t_6) < 0) __PYX_ERR(0, 2059, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":2060
 * 		spectrum = laplacianEigenvectors(self.graph, cutoff = (math.ceil(math.log(self.count, 2)) + 1), reverse=True)
 * 		self.eigenvectors = spectrum[1]
 * 		self.eigenvalues = spectrum[0]             # <<<<<<<<<<<<<<
 * 
 * 	def _getQuantiles(self, eigv, vertices, count = 1):
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_spectrum, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_eigenvalues, __pyx_t_6) < 0) __PYX_ERR(0, 2060, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":2057
 * 		self.balanced = balanced
 * 
 * 	def _prepareSpectrum(self):             # <<<<<<<<<<<<<<
 * 		spectrum = laplacianEigenvectors(self.graph, cutoff = (math.ceil(math.log(self.count, 2)) + 1), reverse=True)
 * 		self.eigenvectors = spectrum[1]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner._prepareSpectrum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_spectrum);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":2062
 * 		self.eigenvalues = spectrum[0]
 * 
 * 	def _getQuantiles(self, eigv, vertices, count = 1):             # <<<<<<<<<<<<<<
 * 		values = [eigv[i] for i in vertices]
 * 		values.sort()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_5_getQuantiles(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_19SpectralPartitioner_5_getQuantiles = {"_getQuantiles", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19SpectralPartitioner_5_getQuantiles, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_5_getQuantiles(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_eigv = 0;
  PyObject *__pyx_v_vertices = 0;
  PyObject *__pyx_v_count = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getQuantiles (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_eigv,&__pyx_n_s_vertices,&__pyx_n_s_count,0};
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)__pyx_int_1)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2062, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_eigv)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2062, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_getQuantiles", 0, 3, 4, 1); __PYX_ERR(0, 2062, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_vertices)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2062, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_getQuantiles", 0, 3, 4, 2); __PYX_ERR(0, 2062, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_count);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2062, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_getQuantiles") < 0)) __PYX_ERR(0, 2062, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_eigv = values[1];
    __pyx_v_vertices = values[2];
    __pyx_v_count = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getQuantiles", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 2062, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner._getQuantiles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_19SpectralPartitioner_4_getQuantiles(__pyx_self, __pyx_v_self, __pyx_v_eigv, __pyx_v_vertices, __pyx_v_count);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner_4_getQuantiles(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_eigv, PyObject *__pyx_v_vertices, PyObject *__pyx_v_count) {
  PyObject *__pyx_v_values = NULL;
  PyObject *__pyx_v_sections = NULL;
  PyObject *__pyx_v_quantiles = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_quantile = NULL;
  PyObject *__pyx_7genexpr__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getQuantiles", 1);

  /* "networkit/community.pyx":2063
 * 
 * 	def _getQuantiles(self, eigv, vertices, count = 1):
 * 		values = [eigv[i] for i in vertices]             # <<<<<<<<<<<<<<
 * 		values.sort()
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2063, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_vertices)) || PyTuple_CheckExact(__pyx_v_vertices)) {
      __pyx_t_2 = __pyx_v_vertices; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_vertices); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2063, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2063, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2063, __pyx_L5_error)
            #endif
            if (__pyx_t_3 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 2063, __pyx_L5_error)
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2063, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2063, __pyx_L5_error)
            #endif
            if (__pyx_t_3 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 2063, __pyx_L5_error)
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2063, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2063, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_i, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_eigv, __pyx_7genexpr__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2063, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 2063, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i); __pyx_7genexpr__pyx_v_i = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i); __pyx_7genexpr__pyx_v_i = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_v_values = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":2064
 * 	def _getQuantiles(self, eigv, vertices, count = 1):
 * 		values = [eigv[i] for i in vertices]
 * 		values.sort()             # <<<<<<<<<<<<<<
 * 
 * 		sections = count + 1
 */
  __pyx_t_6 = PyList_Sort(__pyx_v_values); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 2064, __pyx_L1_error)

  /* "networkit/community.pyx":2066
 * 		values.sort()
 * 
 * 		sections = count + 1             # <<<<<<<<<<<<<<
 * 		quantiles = []
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_count, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sections = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":2067
 * 
 * 		sections = count + 1
 * 		quantiles = []             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(1, sections):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_quantiles = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":2069
 * 		quantiles = []
 * 
 * 		for i in range(1, sections):             # <<<<<<<<<<<<<<
 * 			quantile = values[math.floor(len(values) * i / sections)]
 * 			quantiles.append(quantile)
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_1)) __PYX_ERR(0, 2069, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_sections);
  __Pyx_GIVEREF(__pyx_v_sections);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_sections)) __PYX_ERR(0, 2069, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2069, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2069, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2069, __pyx_L1_error)
          #endif
          if (__pyx_t_3 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 2069, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2069, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2069, __pyx_L1_error)
          #endif
          if (__pyx_t_3 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 2069, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2069, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2069, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "networkit/community.pyx":2070
 * 
 * 		for i in range(1, sections):
 * 			quantile = values[math.floor(len(values) * i / sections)]             # <<<<<<<<<<<<<<
 * 			quantiles.append(quantile)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_math); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2070, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_floor); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2070, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = __Pyx_PyList_GET_SIZE(__pyx_v_values); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2070, __pyx_L1_error)
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2070, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyNumber_Multiply(__pyx_t_5, __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2070, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_9, __pyx_v_sections); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2070, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_10 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2070, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_values, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2070, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_quantile, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "networkit/community.pyx":2071
 * 		for i in range(1, sections):
 * 			quantile = values[math.floor(len(values) * i / sections)]
 * 			quantiles.append(quantile)             # <<<<<<<<<<<<<<
 * 
 * 		return quantiles
 */
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_quantiles, __pyx_v_quantile); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 2071, __pyx_L1_error)

    /* "networkit/community.pyx":2069
 * 		quantiles = []
 * 
 * 		for i in range(1, sections):             # <<<<<<<<<<<<<<
 * 			quantile = values[math.floor(len(values) * i / sections)]
 * 			quantiles.append(quantile)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/community.pyx":2073
 * 			quantiles.append(quantile)
 * 
 * 		return quantiles             # <<<<<<<<<<<<<<
 * 
 * 	def _getMean(self, eigv, vertices):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_quantiles);
  __pyx_r = __pyx_v_quantiles;
  goto __pyx_L0;

  /* "networkit/community.pyx":2062
 * 		self.eigenvalues = spectrum[0]
 * 
 * 	def _getQuantiles(self, eigv, vertices, count = 1):             # <<<<<<<<<<<<<<
 * 		values = [eigv[i] for i in vertices]
 * 		values.sort()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner._getQuantiles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_values);
  __Pyx_XDECREF(__pyx_v_sections);
  __Pyx_XDECREF(__pyx_v_quantiles);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_quantile);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":2075
 * 		return quantiles
 * 
 * 	def _getMean(self, eigv, vertices):             # <<<<<<<<<<<<<<
 * 		values = [eigv[i] for i in vertices]
 * 		mean = np.mean(values)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_7_getMean(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_19SpectralPartitioner_7_getMean = {"_getMean", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19SpectralPartitioner_7_getMean, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_7_getMean(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_eigv = 0;
  PyObject *__pyx_v_vertices = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getMean (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_eigv,&__pyx_n_s_vertices,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2075, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_eigv)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2075, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_getMean", 1, 3, 3, 1); __PYX_ERR(0, 2075, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_vertices)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2075, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_getMean", 1, 3, 3, 2); __PYX_ERR(0, 2075, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_getMean") < 0)) __PYX_ERR(0, 2075, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_eigv = values[1];
    __pyx_v_vertices = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getMean", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 2075, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner._getMean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_19SpectralPartitioner_6_getMean(__pyx_self, __pyx_v_self, __pyx_v_eigv, __pyx_v_vertices);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner_6_getMean(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_eigv, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_v_values = NULL;
  PyObject *__pyx_v_mean = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getMean", 1);

  /* "networkit/community.pyx":2076
 * 
 * 	def _getMean(self, eigv, vertices):
 * 		values = [eigv[i] for i in vertices]             # <<<<<<<<<<<<<<
 * 		mean = np.mean(values)
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2076, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_vertices)) || PyTuple_CheckExact(__pyx_v_vertices)) {
      __pyx_t_2 = __pyx_v_vertices; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_vertices); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2076, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2076, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2076, __pyx_L5_error)
            #endif
            if (__pyx_t_3 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 2076, __pyx_L5_error)
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2076, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2076, __pyx_L5_error)
            #endif
            if (__pyx_t_3 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 2076, __pyx_L5_error)
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2076, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2076, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_i, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_eigv, __pyx_8genexpr1__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2076, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 2076, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i); __pyx_8genexpr1__pyx_v_i = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i); __pyx_8genexpr1__pyx_v_i = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_v_values = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":2077
 * 	def _getMean(self, eigv, vertices):
 * 		values = [eigv[i] for i in vertices]
 * 		mean = np.mean(values)             # <<<<<<<<<<<<<<
 * 
 * 		return mean
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_mean); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_values};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_v_mean = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/community.pyx":2079
 * 		mean = np.mean(values)
 * 
 * 		return mean             # <<<<<<<<<<<<<<
 * 
 * 	def _trisect(self, partition=None, iteration=1):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_mean);
  __pyx_r = __pyx_v_mean;
  goto __pyx_L0;

  /* "networkit/community.pyx":2075
 * 		return quantiles
 * 
 * 	def _getMean(self, eigv, vertices):             # <<<<<<<<<<<<<<
 * 		values = [eigv[i] for i in vertices]
 * 		mean = np.mean(values)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner._getMean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_values);
  __Pyx_XDECREF(__pyx_v_mean);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":2081
 * 		return mean
 * 
 * 	def _trisect(self, partition=None, iteration=1):             # <<<<<<<<<<<<<<
 * 		if partition is None:
 * 			vertices = list(self.graph.iterNodes())
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_9_trisect(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_19SpectralPartitioner_9_trisect = {"_trisect", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19SpectralPartitioner_9_trisect, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_9_trisect(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_partition = 0;
  PyObject *__pyx_v_iteration = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_trisect (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_partition,&__pyx_n_s_iteration,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)__pyx_int_1)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2081, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_partition);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2081, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_iteration);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2081, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_trisect") < 0)) __PYX_ERR(0, 2081, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_partition = values[1];
    __pyx_v_iteration = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_trisect", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 2081, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner._trisect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_19SpectralPartitioner_8_trisect(__pyx_self, __pyx_v_self, __pyx_v_partition, __pyx_v_iteration);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner_8_trisect(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_partition, PyObject *__pyx_v_iteration) {
  PyObject *__pyx_v_vertices = NULL;
  PyObject *__pyx_v_eigv = NULL;
  PyObject *__pyx_v_quantiles = NULL;
  PyObject *__pyx_v_partA = NULL;
  PyObject *__pyx_v_partB = NULL;
  PyObject *__pyx_v_partC = NULL;
  PyObject *__pyx_v_vertex = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_trisect", 1);

  /* "networkit/community.pyx":2082
 * 
 * 	def _trisect(self, partition=None, iteration=1):
 * 		if partition is None:             # <<<<<<<<<<<<<<
 * 			vertices = list(self.graph.iterNodes())
 * 		else:
 */
  __pyx_t_1 = (__pyx_v_partition == Py_None);
  if (__pyx_t_1) {

    /* "networkit/community.pyx":2083
 * 	def _trisect(self, partition=None, iteration=1):
 * 		if partition is None:
 * 			vertices = list(self.graph.iterNodes())             # <<<<<<<<<<<<<<
 * 		else:
 * 			vertices = self.partitions[partition]
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_graph); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2083, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_iterNodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2083, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2083, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_4 = __Pyx_PySequence_ListKeepNew(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2083, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_vertices = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "networkit/community.pyx":2082
 * 
 * 	def _trisect(self, partition=None, iteration=1):
 * 		if partition is None:             # <<<<<<<<<<<<<<
 * 			vertices = list(self.graph.iterNodes())
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "networkit/community.pyx":2085
 * 			vertices = list(self.graph.iterNodes())
 * 		else:
 * 			vertices = self.partitions[partition]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partitions); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2085, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_partition); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2085, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_vertices = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "networkit/community.pyx":2088
 * 
 * 
 * 		eigv = self.eigenvectors[iteration]             # <<<<<<<<<<<<<<
 * 
 * 		quantiles = self._getQuantiles(eigv, vertices, count = 2)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_eigenvectors); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_iteration); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_eigv = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/community.pyx":2090
 * 		eigv = self.eigenvectors[iteration]
 * 
 * 		quantiles = self._getQuantiles(eigv, vertices, count = 2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_getQuantiles); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_eigv);
  __Pyx_GIVEREF(__pyx_v_eigv);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_eigv)) __PYX_ERR(0, 2090, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_vertices);
  __Pyx_GIVEREF(__pyx_v_vertices);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_vertices)) __PYX_ERR(0, 2090, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_count, __pyx_int_2) < 0) __PYX_ERR(0, 2090, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_quantiles = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "networkit/community.pyx":2093
 * 
 * 
 * 		partA = self.nextPartition             # <<<<<<<<<<<<<<
 * 		partB = self.nextPartition + 1
 * 		partC = self.nextPartition + 2
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_nextPartition); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_partA = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "networkit/community.pyx":2094
 * 
 * 		partA = self.nextPartition
 * 		partB = self.nextPartition + 1             # <<<<<<<<<<<<<<
 * 		partC = self.nextPartition + 2
 * 		self.nextPartition += 3		# TODO this is not thread-safe
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_nextPartition); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_partB = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "networkit/community.pyx":2095
 * 		partA = self.nextPartition
 * 		partB = self.nextPartition + 1
 * 		partC = self.nextPartition + 2             # <<<<<<<<<<<<<<
 * 		self.nextPartition += 3		# TODO this is not thread-safe
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_nextPartition); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_partC = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "networkit/community.pyx":2096
 * 		partB = self.nextPartition + 1
 * 		partC = self.nextPartition + 2
 * 		self.nextPartition += 3		# TODO this is not thread-safe             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_nextPartition); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_3, 3, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_nextPartition, __pyx_t_3) < 0) __PYX_ERR(0, 2096, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/community.pyx":2099
 * 
 * 
 * 		self.partitions[partA] = []             # <<<<<<<<<<<<<<
 * 		self.partitions[partB] = []
 * 		self.partitions[partC] = []
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partitions); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (unlikely((PyObject_SetItem(__pyx_t_6, __pyx_v_partA, __pyx_t_3) < 0))) __PYX_ERR(0, 2099, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/community.pyx":2100
 * 
 * 		self.partitions[partA] = []
 * 		self.partitions[partB] = []             # <<<<<<<<<<<<<<
 * 		self.partitions[partC] = []
 * 
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partitions); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (unlikely((PyObject_SetItem(__pyx_t_6, __pyx_v_partB, __pyx_t_3) < 0))) __PYX_ERR(0, 2100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/community.pyx":2101
 * 		self.partitions[partA] = []
 * 		self.partitions[partB] = []
 * 		self.partitions[partC] = []             # <<<<<<<<<<<<<<
 * 
 * 		for vertex in vertices:
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partitions); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (unlikely((PyObject_SetItem(__pyx_t_6, __pyx_v_partC, __pyx_t_3) < 0))) __PYX_ERR(0, 2101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/community.pyx":2103
 * 		self.partitions[partC] = []
 * 
 * 		for vertex in vertices:             # <<<<<<<<<<<<<<
 * 			if (eigv[vertex] < quantiles[0]):
 * 				self.partitions[partA].append(vertex)
 */
  if (likely(PyList_CheckExact(__pyx_v_vertices)) || PyTuple_CheckExact(__pyx_v_vertices)) {
    __pyx_t_3 = __pyx_v_vertices; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_vertices); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2103, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2103, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 2103, __pyx_L1_error)
        #else
        __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2103, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 2103, __pyx_L1_error)
        #else
        __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2103, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_vertex, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "networkit/community.pyx":2104
 * 
 * 		for vertex in vertices:
 * 			if (eigv[vertex] < quantiles[0]):             # <<<<<<<<<<<<<<
 * 				self.partitions[partA].append(vertex)
 * 			elif (eigv[vertex] < quantiles[1]):
 */
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_eigv, __pyx_v_vertex); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_quantiles, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_6, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2104, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2104, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "networkit/community.pyx":2105
 * 		for vertex in vertices:
 * 			if (eigv[vertex] < quantiles[0]):
 * 				self.partitions[partA].append(vertex)             # <<<<<<<<<<<<<<
 * 			elif (eigv[vertex] < quantiles[1]):
 * 				self.partitions[partB].append(vertex)
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partitions); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2105, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_partA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2105, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyObject_Append(__pyx_t_2, __pyx_v_vertex); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 2105, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "networkit/community.pyx":2104
 * 
 * 		for vertex in vertices:
 * 			if (eigv[vertex] < quantiles[0]):             # <<<<<<<<<<<<<<
 * 				self.partitions[partA].append(vertex)
 * 			elif (eigv[vertex] < quantiles[1]):
 */
      goto __pyx_L6;
    }

    /* "networkit/community.pyx":2106
 * 			if (eigv[vertex] < quantiles[0]):
 * 				self.partitions[partA].append(vertex)
 * 			elif (eigv[vertex] < quantiles[1]):             # <<<<<<<<<<<<<<
 * 				self.partitions[partB].append(vertex)
 * 			else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_eigv, __pyx_v_vertex); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_quantiles, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2106, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2106, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_1) {

      /* "networkit/community.pyx":2107
 * 				self.partitions[partA].append(vertex)
 * 			elif (eigv[vertex] < quantiles[1]):
 * 				self.partitions[partB].append(vertex)             # <<<<<<<<<<<<<<
 * 			else:
 * 				self.partitions[partC].append(vertex)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partitions); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2107, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_v_partB); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2107, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_9 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_v_vertex); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 2107, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "networkit/community.pyx":2106
 * 			if (eigv[vertex] < quantiles[0]):
 * 				self.partitions[partA].append(vertex)
 * 			elif (eigv[vertex] < quantiles[1]):             # <<<<<<<<<<<<<<
 * 				self.partitions[partB].append(vertex)
 * 			else:
 */
      goto __pyx_L6;
    }

    /* "networkit/community.pyx":2109
 * 				self.partitions[partB].append(vertex)
 * 			else:
 * 				self.partitions[partC].append(vertex)             # <<<<<<<<<<<<<<
 * 
 * 		if (not (partition is None)):
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partitions); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_partC); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyObject_Append(__pyx_t_6, __pyx_v_vertex); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 2109, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_L6:;

    /* "networkit/community.pyx":2103
 * 		self.partitions[partC] = []
 * 
 * 		for vertex in vertices:             # <<<<<<<<<<<<<<
 * 			if (eigv[vertex] < quantiles[0]):
 * 				self.partitions[partA].append(vertex)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/community.pyx":2111
 * 				self.partitions[partC].append(vertex)
 * 
 * 		if (not (partition is None)):             # <<<<<<<<<<<<<<
 * 			del self.partitions[partition]
 * 
 */
  __pyx_t_1 = (__pyx_v_partition != Py_None);
  if (__pyx_t_1) {

    /* "networkit/community.pyx":2112
 * 
 * 		if (not (partition is None)):
 * 			del self.partitions[partition]             # <<<<<<<<<<<<<<
 * 
 * 	def _bisect(self, count, partition=None, iteration=1):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partitions); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyObject_DelItem(__pyx_t_3, __pyx_v_partition) < 0))) __PYX_ERR(0, 2112, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "networkit/community.pyx":2111
 * 				self.partitions[partC].append(vertex)
 * 
 * 		if (not (partition is None)):             # <<<<<<<<<<<<<<
 * 			del self.partitions[partition]
 * 
 */
  }

  /* "networkit/community.pyx":2081
 * 		return mean
 * 
 * 	def _trisect(self, partition=None, iteration=1):             # <<<<<<<<<<<<<<
 * 		if partition is None:
 * 			vertices = list(self.graph.iterNodes())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner._trisect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vertices);
  __Pyx_XDECREF(__pyx_v_eigv);
  __Pyx_XDECREF(__pyx_v_quantiles);
  __Pyx_XDECREF(__pyx_v_partA);
  __Pyx_XDECREF(__pyx_v_partB);
  __Pyx_XDECREF(__pyx_v_partC);
  __Pyx_XDECREF(__pyx_v_vertex);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":2114
 * 			del self.partitions[partition]
 * 
 * 	def _bisect(self, count, partition=None, iteration=1):             # <<<<<<<<<<<<<<
 * 		if count == 1:
 * 			return
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_11_bisect(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_19SpectralPartitioner_11_bisect = {"_bisect", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19SpectralPartitioner_11_bisect, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_11_bisect(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_count = 0;
  PyObject *__pyx_v_partition = 0;
  PyObject *__pyx_v_iteration = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bisect (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_count,&__pyx_n_s_partition,&__pyx_n_s_iteration,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)__pyx_int_1)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2114, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_count)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2114, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_bisect", 0, 2, 4, 1); __PYX_ERR(0, 2114, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_partition);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2114, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_iteration);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2114, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_bisect") < 0)) __PYX_ERR(0, 2114, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_count = values[1];
    __pyx_v_partition = values[2];
    __pyx_v_iteration = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_bisect", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 2114, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner._bisect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_19SpectralPartitioner_10_bisect(__pyx_self, __pyx_v_self, __pyx_v_count, __pyx_v_partition, __pyx_v_iteration);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner_10_bisect(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_count, PyObject *__pyx_v_partition, PyObject *__pyx_v_iteration) {
  PyObject *__pyx_v_vertices = NULL;
  PyObject *__pyx_v_eigv = NULL;
  PyObject *__pyx_v_split = NULL;
  PyObject *__pyx_v_partA = NULL;
  PyObject *__pyx_v_partB = NULL;
  PyObject *__pyx_v_vertex = NULL;
  PyObject *__pyx_v_nextCount = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bisect", 1);

  /* "networkit/community.pyx":2115
 * 
 * 	def _bisect(self, count, partition=None, iteration=1):
 * 		if count == 1:             # <<<<<<<<<<<<<<
 * 			return
 * 
 */
  __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_count, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2115, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "networkit/community.pyx":2116
 * 	def _bisect(self, count, partition=None, iteration=1):
 * 		if count == 1:
 * 			return             # <<<<<<<<<<<<<<
 * 
 * 		if count == 3:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "networkit/community.pyx":2115
 * 
 * 	def _bisect(self, count, partition=None, iteration=1):
 * 		if count == 1:             # <<<<<<<<<<<<<<
 * 			return
 * 
 */
  }

  /* "networkit/community.pyx":2118
 * 			return
 * 
 * 		if count == 3:             # <<<<<<<<<<<<<<
 * 			self._trisect(partition=partition)
 * 			return
 */
  __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_count, __pyx_int_3, 3, 0)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2118, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "networkit/community.pyx":2119
 * 
 * 		if count == 3:
 * 			self._trisect(partition=partition)             # <<<<<<<<<<<<<<
 * 			return
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_trisect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_partition, __pyx_v_partition) < 0) __PYX_ERR(0, 2119, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "networkit/community.pyx":2120
 * 		if count == 3:
 * 			self._trisect(partition=partition)
 * 			return             # <<<<<<<<<<<<<<
 * 
 * 		if partition is None:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "networkit/community.pyx":2118
 * 			return
 * 
 * 		if count == 3:             # <<<<<<<<<<<<<<
 * 			self._trisect(partition=partition)
 * 			return
 */
  }

  /* "networkit/community.pyx":2122
 * 			return
 * 
 * 		if partition is None:             # <<<<<<<<<<<<<<
 * 			vertices = list(self.graph.iterNodes())
 * 		else:
 */
  __pyx_t_1 = (__pyx_v_partition == Py_None);
  if (__pyx_t_1) {

    /* "networkit/community.pyx":2123
 * 
 * 		if partition is None:
 * 			vertices = list(self.graph.iterNodes())             # <<<<<<<<<<<<<<
 * 		else:
 * 			vertices = self.partitions[partition]
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_graph); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_iterNodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = __Pyx_PySequence_ListKeepNew(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_vertices = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "networkit/community.pyx":2122
 * 			return
 * 
 * 		if partition is None:             # <<<<<<<<<<<<<<
 * 			vertices = list(self.graph.iterNodes())
 * 		else:
 */
    goto __pyx_L5;
  }

  /* "networkit/community.pyx":2125
 * 			vertices = list(self.graph.iterNodes())
 * 		else:
 * 			vertices = self.partitions[partition]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partitions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_partition); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_vertices = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L5:;

  /* "networkit/community.pyx":2128
 * 
 * 
 * 		eigv = self.eigenvectors[iteration]             # <<<<<<<<<<<<<<
 * 
 * 		if (self.balanced):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_eigenvectors); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_iteration); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_eigv = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/community.pyx":2130
 * 		eigv = self.eigenvectors[iteration]
 * 
 * 		if (self.balanced):             # <<<<<<<<<<<<<<
 * 			split = self._getQuantiles(eigv, vertices)[0]
 * 		else:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_balanced); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "networkit/community.pyx":2131
 * 
 * 		if (self.balanced):
 * 			split = self._getQuantiles(eigv, vertices)[0]             # <<<<<<<<<<<<<<
 * 		else:
 * 			split = self._getMean(eigv, vertices)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_getQuantiles); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_eigv, __pyx_v_vertices};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2131, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_split = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "networkit/community.pyx":2130
 * 		eigv = self.eigenvectors[iteration]
 * 
 * 		if (self.balanced):             # <<<<<<<<<<<<<<
 * 			split = self._getQuantiles(eigv, vertices)[0]
 * 		else:
 */
    goto __pyx_L6;
  }

  /* "networkit/community.pyx":2133
 * 			split = self._getQuantiles(eigv, vertices)[0]
 * 		else:
 * 			split = self._getMean(eigv, vertices)             # <<<<<<<<<<<<<<
 * 
 * 		partA = self.nextPartition
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_getMean); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_eigv, __pyx_v_vertices};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_v_split = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L6:;

  /* "networkit/community.pyx":2135
 * 			split = self._getMean(eigv, vertices)
 * 
 * 		partA = self.nextPartition             # <<<<<<<<<<<<<<
 * 		partB = self.nextPartition + 1
 * 		self.nextPartition += 2		# TODO this is not thread-safe
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_nextPartition); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_partA = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/community.pyx":2136
 * 
 * 		partA = self.nextPartition
 * 		partB = self.nextPartition + 1             # <<<<<<<<<<<<<<
 * 		self.nextPartition += 2		# TODO this is not thread-safe
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_nextPartition); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_partB = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/community.pyx":2137
 * 		partA = self.nextPartition
 * 		partB = self.nextPartition + 1
 * 		self.nextPartition += 2		# TODO this is not thread-safe             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_nextPartition); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_2, 2, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_nextPartition, __pyx_t_4) < 0) __PYX_ERR(0, 2137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/community.pyx":2140
 * 
 * 
 * 		self.partitions[partA] = []             # <<<<<<<<<<<<<<
 * 		self.partitions[partB] = []
 * 
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partitions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely((PyObject_SetItem(__pyx_t_2, __pyx_v_partA, __pyx_t_4) < 0))) __PYX_ERR(0, 2140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/community.pyx":2141
 * 
 * 		self.partitions[partA] = []
 * 		self.partitions[partB] = []             # <<<<<<<<<<<<<<
 * 
 * 		for vertex in vertices:
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partitions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely((PyObject_SetItem(__pyx_t_2, __pyx_v_partB, __pyx_t_4) < 0))) __PYX_ERR(0, 2141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/community.pyx":2143
 * 		self.partitions[partB] = []
 * 
 * 		for vertex in vertices:             # <<<<<<<<<<<<<<
 * 			if (eigv[vertex] < split):
 * 				self.partitions[partA].append(vertex)
 */
  if (likely(PyList_CheckExact(__pyx_v_vertices)) || PyTuple_CheckExact(__pyx_v_vertices)) {
    __pyx_t_4 = __pyx_v_vertices; __Pyx_INCREF(__pyx_t_4);
    __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_vertices); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2143, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2143, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 2143, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2143, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2143, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 2143, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2143, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2143, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_vertex, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "networkit/community.pyx":2144
 * 
 * 		for vertex in vertices:
 * 			if (eigv[vertex] < split):             # <<<<<<<<<<<<<<
 * 				self.partitions[partA].append(vertex)
 * 			else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_eigv, __pyx_v_vertex); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_v_split, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2144, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2144, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "networkit/community.pyx":2145
 * 		for vertex in vertices:
 * 			if (eigv[vertex] < split):
 * 				self.partitions[partA].append(vertex)             # <<<<<<<<<<<<<<
 * 			else:
 * 				self.partitions[partB].append(vertex)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partitions); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_partA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = __Pyx_PyObject_Append(__pyx_t_2, __pyx_v_vertex); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 2145, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "networkit/community.pyx":2144
 * 
 * 		for vertex in vertices:
 * 			if (eigv[vertex] < split):             # <<<<<<<<<<<<<<
 * 				self.partitions[partA].append(vertex)
 * 			else:
 */
      goto __pyx_L9;
    }

    /* "networkit/community.pyx":2147
 * 				self.partitions[partA].append(vertex)
 * 			else:
 * 				self.partitions[partB].append(vertex)             # <<<<<<<<<<<<<<
 * 
 * 		if (not (partition is None)):
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partitions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_partB); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = __Pyx_PyObject_Append(__pyx_t_3, __pyx_v_vertex); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 2147, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L9:;

    /* "networkit/community.pyx":2143
 * 		self.partitions[partB] = []
 * 
 * 		for vertex in vertices:             # <<<<<<<<<<<<<<
 * 			if (eigv[vertex] < split):
 * 				self.partitions[partA].append(vertex)
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/community.pyx":2149
 * 				self.partitions[partB].append(vertex)
 * 
 * 		if (not (partition is None)):             # <<<<<<<<<<<<<<
 * 			del self.partitions[partition]
 * 
 */
  __pyx_t_1 = (__pyx_v_partition != Py_None);
  if (__pyx_t_1) {

    /* "networkit/community.pyx":2150
 * 
 * 		if (not (partition is None)):
 * 			del self.partitions[partition]             # <<<<<<<<<<<<<<
 * 
 * 		if count > 2:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partitions); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely((PyObject_DelItem(__pyx_t_4, __pyx_v_partition) < 0))) __PYX_ERR(0, 2150, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "networkit/community.pyx":2149
 * 				self.partitions[partB].append(vertex)
 * 
 * 		if (not (partition is None)):             # <<<<<<<<<<<<<<
 * 			del self.partitions[partition]
 * 
 */
  }

  /* "networkit/community.pyx":2152
 * 			del self.partitions[partition]
 * 
 * 		if count > 2:             # <<<<<<<<<<<<<<
 * 			if (count % 2 == 0):
 * 				self._bisect(count / 2, partition = partA, iteration = iteration + 1)
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_count, __pyx_int_2, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2152, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "networkit/community.pyx":2153
 * 
 * 		if count > 2:
 * 			if (count % 2 == 0):             # <<<<<<<<<<<<<<
 * 				self._bisect(count / 2, partition = partA, iteration = iteration + 1)
 * 				self._bisect(count / 2, partition = partB, iteration = iteration + 1)
 */
    __pyx_t_4 = __Pyx_PyInt_RemainderObjC(__pyx_v_count, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_4, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2153, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "networkit/community.pyx":2154
 * 		if count > 2:
 * 			if (count % 2 == 0):
 * 				self._bisect(count / 2, partition = partA, iteration = iteration + 1)             # <<<<<<<<<<<<<<
 * 				self._bisect(count / 2, partition = partB, iteration = iteration + 1)
 * 			else:
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bisect); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyInt_TrueDivideObjC(__pyx_v_count, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3)) __PYX_ERR(0, 2154, __pyx_L1_error);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_partition, __pyx_v_partA) < 0) __PYX_ERR(0, 2154, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_v_iteration, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_iteration, __pyx_t_9) < 0) __PYX_ERR(0, 2154, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "networkit/community.pyx":2155
 * 			if (count % 2 == 0):
 * 				self._bisect(count / 2, partition = partA, iteration = iteration + 1)
 * 				self._bisect(count / 2, partition = partB, iteration = iteration + 1)             # <<<<<<<<<<<<<<
 * 			else:
 * 				nextCount = (count - 1) / 2
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bisect); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = __Pyx_PyInt_TrueDivideObjC(__pyx_v_count, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3)) __PYX_ERR(0, 2155, __pyx_L1_error);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_partition, __pyx_v_partB) < 0) __PYX_ERR(0, 2155, __pyx_L1_error)
      __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_iteration, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_iteration, __pyx_t_4) < 0) __PYX_ERR(0, 2155, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "networkit/community.pyx":2153
 * 
 * 		if count > 2:
 * 			if (count % 2 == 0):             # <<<<<<<<<<<<<<
 * 				self._bisect(count / 2, partition = partA, iteration = iteration + 1)
 * 				self._bisect(count / 2, partition = partB, iteration = iteration + 1)
 */
      goto __pyx_L13;
    }

    /* "networkit/community.pyx":2157
 * 				self._bisect(count / 2, partition = partB, iteration = iteration + 1)
 * 			else:
 * 				nextCount = (count - 1) / 2             # <<<<<<<<<<<<<<
 * 				if nextCount > 2:
 * 					self._bisect(nextCount, partition = partA, iteration = iteration + 1)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_v_count, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_4, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_nextCount = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "networkit/community.pyx":2158
 * 			else:
 * 				nextCount = (count - 1) / 2
 * 				if nextCount > 2:             # <<<<<<<<<<<<<<
 * 					self._bisect(nextCount, partition = partA, iteration = iteration + 1)
 * 					self._bisect(nextCount + 1, partition = partB, iteration = iteration + 1)
 */
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_nextCount, __pyx_int_2, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2158, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 2158, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_1) {

        /* "networkit/community.pyx":2159
 * 				nextCount = (count - 1) / 2
 * 				if nextCount > 2:
 * 					self._bisect(nextCount, partition = partA, iteration = iteration + 1)             # <<<<<<<<<<<<<<
 * 					self._bisect(nextCount + 1, partition = partB, iteration = iteration + 1)
 * 				else:
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bisect); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2159, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2159, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v_nextCount);
        __Pyx_GIVEREF(__pyx_v_nextCount);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_nextCount)) __PYX_ERR(0, 2159, __pyx_L1_error);
        __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2159, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_partition, __pyx_v_partA) < 0) __PYX_ERR(0, 2159, __pyx_L1_error)
        __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_v_iteration, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2159, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_iteration, __pyx_t_9) < 0) __PYX_ERR(0, 2159, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2159, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "networkit/community.pyx":2160
 * 				if nextCount > 2:
 * 					self._bisect(nextCount, partition = partA, iteration = iteration + 1)
 * 					self._bisect(nextCount + 1, partition = partB, iteration = iteration + 1)             # <<<<<<<<<<<<<<
 * 				else:
 * 					self._bisect(nextCount, partition = partA, iteration = iteration + 1)
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bisect); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_nextCount, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_2);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2)) __PYX_ERR(0, 2160, __pyx_L1_error);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_partition, __pyx_v_partB) < 0) __PYX_ERR(0, 2160, __pyx_L1_error)
        __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_iteration, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_iteration, __pyx_t_3) < 0) __PYX_ERR(0, 2160, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "networkit/community.pyx":2158
 * 			else:
 * 				nextCount = (count - 1) / 2
 * 				if nextCount > 2:             # <<<<<<<<<<<<<<
 * 					self._bisect(nextCount, partition = partA, iteration = iteration + 1)
 * 					self._bisect(nextCount + 1, partition = partB, iteration = iteration + 1)
 */
        goto __pyx_L14;
      }

      /* "networkit/community.pyx":2162
 * 					self._bisect(nextCount + 1, partition = partB, iteration = iteration + 1)
 * 				else:
 * 					self._bisect(nextCount, partition = partA, iteration = iteration + 1)             # <<<<<<<<<<<<<<
 * 					self._trisect(partition = partB, iteration = iteration + 1)
 * 
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bisect); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_v_nextCount);
        __Pyx_GIVEREF(__pyx_v_nextCount);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_nextCount)) __PYX_ERR(0, 2162, __pyx_L1_error);
        __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_partition, __pyx_v_partA) < 0) __PYX_ERR(0, 2162, __pyx_L1_error)
        __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_v_iteration, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_iteration, __pyx_t_9) < 0) __PYX_ERR(0, 2162, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "networkit/community.pyx":2163
 * 				else:
 * 					self._bisect(nextCount, partition = partA, iteration = iteration + 1)
 * 					self._trisect(partition = partB, iteration = iteration + 1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_trisect); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_partition, __pyx_v_partB) < 0) __PYX_ERR(0, 2163, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_iteration, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_iteration, __pyx_t_2) < 0) __PYX_ERR(0, 2163, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_L14:;
    }
    __pyx_L13:;

    /* "networkit/community.pyx":2152
 * 			del self.partitions[partition]
 * 
 * 		if count > 2:             # <<<<<<<<<<<<<<
 * 			if (count % 2 == 0):
 * 				self._bisect(count / 2, partition = partA, iteration = iteration + 1)
 */
  }

  /* "networkit/community.pyx":2114
 * 			del self.partitions[partition]
 * 
 * 	def _bisect(self, count, partition=None, iteration=1):             # <<<<<<<<<<<<<<
 * 		if count == 1:
 * 			return
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner._bisect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vertices);
  __Pyx_XDECREF(__pyx_v_eigv);
  __Pyx_XDECREF(__pyx_v_split);
  __Pyx_XDECREF(__pyx_v_partA);
  __Pyx_XDECREF(__pyx_v_partB);
  __Pyx_XDECREF(__pyx_v_vertex);
  __Pyx_XDECREF(__pyx_v_nextCount);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":2166
 * 
 * 
 * 	def _generatePartition(self):             # <<<<<<<<<<<<<<
 * 		partition = Partition(size=self.graph.numberOfNodes())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_13_generatePartition(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_19SpectralPartitioner_13_generatePartition = {"_generatePartition", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19SpectralPartitioner_13_generatePartition, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_13_generatePartition(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_generatePartition (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2166, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_generatePartition") < 0)) __PYX_ERR(0, 2166, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_generatePartition", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2166, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner._generatePartition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_19SpectralPartitioner_12_generatePartition(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner_12_generatePartition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_partition = NULL;
  PyObject *__pyx_v_partIndex = NULL;
  PyObject *__pyx_v_vertices = NULL;
  PyObject *__pyx_v_firstItem = NULL;
  PyObject *__pyx_v_subsetID = NULL;
  PyObject *__pyx_v_vertex = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_generatePartition", 1);

  /* "networkit/community.pyx":2167
 * 
 * 	def _generatePartition(self):
 * 		partition = Partition(size=self.graph.numberOfNodes())             # <<<<<<<<<<<<<<
 * 
 * 		for partIndex in self.partitions:
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_graph); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_numberOfNodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_size, __pyx_t_2) < 0) __PYX_ERR(0, 2167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_10structures_Partition), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_partition = ((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/community.pyx":2169
 * 		partition = Partition(size=self.graph.numberOfNodes())
 * 
 * 		for partIndex in self.partitions:             # <<<<<<<<<<<<<<
 * 			vertices = self.partitions[partIndex]
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partitions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2169, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2169, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 2169, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2169, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2169, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 2169, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2169, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_7(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2169, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_partIndex, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "networkit/community.pyx":2170
 * 
 * 		for partIndex in self.partitions:
 * 			vertices = self.partitions[partIndex]             # <<<<<<<<<<<<<<
 * 
 * 			if (len(vertices) < 1):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partitions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_partIndex); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vertices, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "networkit/community.pyx":2172
 * 			vertices = self.partitions[partIndex]
 * 
 * 			if (len(vertices) < 1):             # <<<<<<<<<<<<<<
 * 				continue
 * 
 */
    __pyx_t_8 = PyObject_Length(__pyx_v_vertices); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2172, __pyx_L1_error)
    __pyx_t_9 = (__pyx_t_8 < 1);
    if (__pyx_t_9) {

      /* "networkit/community.pyx":2173
 * 
 * 			if (len(vertices) < 1):
 * 				continue             # <<<<<<<<<<<<<<
 * 
 * 			firstItem = vertices[0] # TODO come on.. there has to be an easier way of doing this...
 */
      goto __pyx_L3_continue;

      /* "networkit/community.pyx":2172
 * 			vertices = self.partitions[partIndex]
 * 
 * 			if (len(vertices) < 1):             # <<<<<<<<<<<<<<
 * 				continue
 * 
 */
    }

    /* "networkit/community.pyx":2175
 * 				continue
 * 
 * 			firstItem = vertices[0] # TODO come on.. there has to be an easier way of doing this...             # <<<<<<<<<<<<<<
 * 			partition.toSingleton(firstItem)
 * 			subsetID = partition[firstItem]
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_vertices, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_firstItem, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "networkit/community.pyx":2176
 * 
 * 			firstItem = vertices[0] # TODO come on.. there has to be an easier way of doing this...
 * 			partition.toSingleton(firstItem)             # <<<<<<<<<<<<<<
 * 			subsetID = partition[firstItem]
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_partition), __pyx_n_s_toSingleton); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_firstItem};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "networkit/community.pyx":2177
 * 			firstItem = vertices[0] # TODO come on.. there has to be an easier way of doing this...
 * 			partition.toSingleton(firstItem)
 * 			subsetID = partition[firstItem]             # <<<<<<<<<<<<<<
 * 
 * 			for vertex in vertices[1:]:
 */
    __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_partition), __pyx_v_firstItem); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_subsetID, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "networkit/community.pyx":2179
 * 			subsetID = partition[firstItem]
 * 
 * 			for vertex in vertices[1:]:             # <<<<<<<<<<<<<<
 * 				partition.addToSubset(subsetID, vertex)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetSlice(__pyx_v_vertices, 1, 0, NULL, NULL, &__pyx_slice__30, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_2 = __pyx_t_4; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_8 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2179, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2179, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 2179, __pyx_L1_error)
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2179, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2179, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 2179, __pyx_L1_error)
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2179, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_10(__pyx_t_2);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2179, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_vertex, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "networkit/community.pyx":2180
 * 
 * 			for vertex in vertices[1:]:
 * 				partition.addToSubset(subsetID, vertex)             # <<<<<<<<<<<<<<
 * 
 * 		self.partition = partition
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_partition), __pyx_n_s_addToSubset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_11, __pyx_v_subsetID, __pyx_v_vertex};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2180, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "networkit/community.pyx":2179
 * 			subsetID = partition[firstItem]
 * 
 * 			for vertex in vertices[1:]:             # <<<<<<<<<<<<<<
 * 				partition.addToSubset(subsetID, vertex)
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "networkit/community.pyx":2169
 * 		partition = Partition(size=self.graph.numberOfNodes())
 * 
 * 		for partIndex in self.partitions:             # <<<<<<<<<<<<<<
 * 			vertices = self.partitions[partIndex]
 * 
 */
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/community.pyx":2182
 * 				partition.addToSubset(subsetID, vertex)
 * 
 * 		self.partition = partition             # <<<<<<<<<<<<<<
 * 		return partition
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_partition, ((PyObject *)__pyx_v_partition)) < 0) __PYX_ERR(0, 2182, __pyx_L1_error)

  /* "networkit/community.pyx":2183
 * 
 * 		self.partition = partition
 * 		return partition             # <<<<<<<<<<<<<<
 * 
 * 	def run(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_partition);
  __pyx_r = ((PyObject *)__pyx_v_partition);
  goto __pyx_L0;

  /* "networkit/community.pyx":2166
 * 
 * 
 * 	def _generatePartition(self):             # <<<<<<<<<<<<<<
 * 		partition = Partition(size=self.graph.numberOfNodes())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner._generatePartition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_partition);
  __Pyx_XDECREF(__pyx_v_partIndex);
  __Pyx_XDECREF(__pyx_v_vertices);
  __Pyx_XDECREF(__pyx_v_firstItem);
  __Pyx_XDECREF(__pyx_v_subsetID);
  __Pyx_XDECREF(__pyx_v_vertex);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":2185
 * 		return partition
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		run()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_15run(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_19SpectralPartitioner_14run, "\n\t\trun()\n\n\t\tRuns the partitioning.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_19SpectralPartitioner_15run = {"run", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19SpectralPartitioner_15run, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_19SpectralPartitioner_14run};
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_15run(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2185, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "run") < 0)) __PYX_ERR(0, 2185, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("run", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2185, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_19SpectralPartitioner_14run(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner_14run(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 1);

  /* "networkit/community.pyx":2191
 * 		Runs the partitioning.
 * 		"""
 * 		self.nextPartition = 0             # <<<<<<<<<<<<<<
 * 		self.partitions = {}
 * 		self._prepareSpectrum()
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_nextPartition, __pyx_int_0) < 0) __PYX_ERR(0, 2191, __pyx_L1_error)

  /* "networkit/community.pyx":2192
 * 		"""
 * 		self.nextPartition = 0
 * 		self.partitions = {}             # <<<<<<<<<<<<<<
 * 		self._prepareSpectrum()
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_partitions, __pyx_t_1) < 0) __PYX_ERR(0, 2192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/community.pyx":2193
 * 		self.nextPartition = 0
 * 		self.partitions = {}
 * 		self._prepareSpectrum()             # <<<<<<<<<<<<<<
 * 
 * 		self._bisect(self.count)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_prepareSpectrum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/community.pyx":2195
 * 		self._prepareSpectrum()
 * 
 * 		self._bisect(self.count)             # <<<<<<<<<<<<<<
 * 
 * 		self._generatePartition()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_bisect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_count); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/community.pyx":2197
 * 		self._bisect(self.count)
 * 
 * 		self._generatePartition()             # <<<<<<<<<<<<<<
 * 
 * 	def getPartition(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_generatePartition); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/community.pyx":2185
 * 		return partition
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		run()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/community.pyx":2199
 * 		self._generatePartition()
 * 
 * 	def getPartition(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPartition()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_17getPartition(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_9community_19SpectralPartitioner_16getPartition, "\n\t\tgetPartition()\n\n\t\tRetrieves the partitioning after run() was called.\n\n\t\tReturns\n\t\t-------\n\t\tnetworkit.Partition\n\t\t\tThe resulting partition. Only valid if :code:`run()` was called before.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_9community_19SpectralPartitioner_17getPartition = {"getPartition", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19SpectralPartitioner_17getPartition, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_19SpectralPartitioner_16getPartition};
static PyObject *__pyx_pw_9networkit_9community_19SpectralPartitioner_17getPartition(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPartition (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2199, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getPartition") < 0)) __PYX_ERR(0, 2199, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getPartition", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2199, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner.getPartition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_19SpectralPartitioner_16getPartition(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_19SpectralPartitioner_16getPartition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPartition", 1);

  /* "networkit/community.pyx":2210
 * 			The resulting partition. Only valid if :code:`run()` was called before.
 * 		"""
 * 		return self.partition             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_partition); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/community.pyx":2199
 * 		self._generatePartition()
 * 
 * 	def getPartition(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPartition()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.community.SpectralPartitioner.getPartition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_GraphClusteringTools(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_17__pyx_unpickle_GraphClusteringTools(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_17__pyx_unpickle_GraphClusteringTools = {"__pyx_unpickle_GraphClusteringTools", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_17__pyx_unpickle_GraphClusteringTools, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_17__pyx_unpickle_GraphClusteringTools(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_GraphClusteringTools (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GraphClusteringTools", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GraphClusteringTools", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_GraphClusteringTools") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GraphClusteringTools", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.__pyx_unpickle_GraphClusteringTools", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_16__pyx_unpickle_GraphClusteringTools(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_16__pyx_unpickle_GraphClusteringTools(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_GraphClusteringTools", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__31, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = GraphClusteringTools.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = GraphClusteringTools.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = GraphClusteringTools.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GraphClusteringTools__set_state(<GraphClusteringTools> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = GraphClusteringTools.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_GraphClusteringTools__set_state(<GraphClusteringTools> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = GraphClusteringTools.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GraphClusteringTools__set_state(<GraphClusteringTools> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_GraphClusteringTools__set_state(GraphClusteringTools __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_9networkit_9community___pyx_unpickle_GraphClusteringTools__set_state(((struct __pyx_obj_9networkit_9community_GraphClusteringTools *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = GraphClusteringTools.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_GraphClusteringTools__set_state(<GraphClusteringTools> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GraphClusteringTools__set_state(<GraphClusteringTools> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_GraphClusteringTools__set_state(GraphClusteringTools __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_GraphClusteringTools(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.community.__pyx_unpickle_GraphClusteringTools", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_GraphClusteringTools__set_state(<GraphClusteringTools> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_GraphClusteringTools__set_state(GraphClusteringTools __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_9networkit_9community___pyx_unpickle_GraphClusteringTools__set_state(struct __pyx_obj_9networkit_9community_GraphClusteringTools *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_GraphClusteringTools__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_GraphClusteringTools__set_state(GraphClusteringTools __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 > 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_GraphClusteringTools__set_state(GraphClusteringTools __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_GraphClusteringTools__set_state(GraphClusteringTools __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_GraphClusteringTools__set_state(<GraphClusteringTools> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_GraphClusteringTools__set_state(GraphClusteringTools __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("networkit.community.__pyx_unpickle_GraphClusteringTools__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_DissimilarityMeasure(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9community_19__pyx_unpickle_DissimilarityMeasure(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9community_19__pyx_unpickle_DissimilarityMeasure = {"__pyx_unpickle_DissimilarityMeasure", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19__pyx_unpickle_DissimilarityMeasure, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9community_19__pyx_unpickle_DissimilarityMeasure(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_DissimilarityMeasure (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_DissimilarityMeasure", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_DissimilarityMeasure", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_DissimilarityMeasure") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_DissimilarityMeasure", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.community.__pyx_unpickle_DissimilarityMeasure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9community_18__pyx_unpickle_DissimilarityMeasure(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9community_18__pyx_unpickle_DissimilarityMeasure(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_DissimilarityMeasure", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__31, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = DissimilarityMeasure.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = DissimilarityMeasure.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = DissimilarityMeasure.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_DissimilarityMeasure__set_state(<DissimilarityMeasure> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9networkit_9community_DissimilarityMeasure), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = DissimilarityMeasure.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_DissimilarityMeasure__set_state(<DissimilarityMeasure> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = DissimilarityMeasure.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_DissimilarityMeasure__set_state(<DissimilarityMeasure> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_DissimilarityMeasure__set_state(DissimilarityMeasure __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_9networkit_9community___pyx_unpickle_DissimilarityMeasure__set_state(((struct __pyx_obj_9networkit_9community_DissimilarityMeasure *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = DissimilarityMeasure.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_DissimilarityMeasure__set_state(<DissimilarityMeasure> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_DissimilarityMeasure__set_state(<DissimilarityMeasure> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_DissimilarityMeasure__set_state(DissimilarityMeasure __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_DissimilarityMeasure(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.community.__pyx_unpickle_DissimilarityMeasure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_DissimilarityMeasure__set_state(<DissimilarityMeasure> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_DissimilarityMeasure__set_state(DissimilarityMeasure __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_9networkit_9community___pyx_unpickle_DissimilarityMeasure__set_state(struct __pyx_obj_9networkit_9community_DissimilarityMeasure *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_DissimilarityMeasure__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_DissimilarityMeasure__set_state(DissimilarityMeasure __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 > 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_DissimilarityMeasure__set_state(DissimilarityMeasure __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_DissimilarityMeasure__set_state(DissimilarityMeasure __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_DissimilarityMeasure__set_state(<DissimilarityMeasure> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_DissimilarityMeasure__set_state(DissimilarityMeasure __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("networkit.community.__pyx_unpickle_DissimilarityMeasure__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_9networkit_9community_CommunityDetector(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_9community_CommunityDetector *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_9community_CommunityDetector *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9networkit_9community_CommunityDetector(PyObject *o) {
  struct __pyx_obj_9networkit_9community_CommunityDetector *p = (struct __pyx_obj_9networkit_9community_CommunityDetector *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_CommunityDetector) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_9community_CommunityDetector);
}

static int __pyx_tp_traverse_9networkit_9community_CommunityDetector(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_9community_CommunityDetector *p = (struct __pyx_obj_9networkit_9community_CommunityDetector *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_9community_CommunityDetector)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_9community_CommunityDetector(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_9community_CommunityDetector *p = (struct __pyx_obj_9networkit_9community_CommunityDetector *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_9community_CommunityDetector);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_9community_CommunityDetector[] = {
  {"getPartition", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_17CommunityDetector_3getPartition, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_17CommunityDetector_2getPartition},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_17CommunityDetector_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_17CommunityDetector_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_CommunityDetector_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_CommunityDetector},
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tCommunityDetector()\n\n\tAbstract base class for static community detection algorithms.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_CommunityDetector},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_CommunityDetector},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_CommunityDetector},
  {Py_tp_init, (void *)__pyx_pw_9networkit_9community_17CommunityDetector_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_CommunityDetector},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_CommunityDetector_spec = {
  "networkit.community.CommunityDetector",
  sizeof(struct __pyx_obj_9networkit_9community_CommunityDetector),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_CommunityDetector_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_CommunityDetector = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""CommunityDetector", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_CommunityDetector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_CommunityDetector, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tCommunityDetector()\n\n\tAbstract base class for static community detection algorithms.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_CommunityDetector, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_CommunityDetector, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_CommunityDetector, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9networkit_9community_17CommunityDetector_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_CommunityDetector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_OverlappingCommunityDetector(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9networkit_9community_OverlappingCommunityDetector(PyObject *o) {
  struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *p = (struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_OverlappingCommunityDetector) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_9community_OverlappingCommunityDetector);
}

static int __pyx_tp_traverse_9networkit_9community_OverlappingCommunityDetector(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *p = (struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_9community_OverlappingCommunityDetector)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_9community_OverlappingCommunityDetector(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *p = (struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_9community_OverlappingCommunityDetector);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_9community_OverlappingCommunityDetector[] = {
  {"getCover", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_28OverlappingCommunityDetector_3getCover, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_28OverlappingCommunityDetector_2getCover},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_28OverlappingCommunityDetector_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_28OverlappingCommunityDetector_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_OverlappingCommunityDetector_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_OverlappingCommunityDetector},
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tOverlappingCommunityDetector()\n\n\tAbstract base class for static overlapping community detection algorithms.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_OverlappingCommunityDetector},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_OverlappingCommunityDetector},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_OverlappingCommunityDetector},
  {Py_tp_init, (void *)__pyx_pw_9networkit_9community_28OverlappingCommunityDetector_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_OverlappingCommunityDetector},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_OverlappingCommunityDetector_spec = {
  "networkit.community.OverlappingCommunityDetector",
  sizeof(struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_OverlappingCommunityDetector_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_OverlappingCommunityDetector = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""OverlappingCommunityDetector", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_OverlappingCommunityDetector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_OverlappingCommunityDetector, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tOverlappingCommunityDetector()\n\n\tAbstract base class for static overlapping community detection algorithms.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_OverlappingCommunityDetector, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_OverlappingCommunityDetector, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_OverlappingCommunityDetector, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9networkit_9community_28OverlappingCommunityDetector_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_OverlappingCommunityDetector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_ClusteringGenerator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9networkit_9community_ClusteringGenerator *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9networkit_9community_ClusteringGenerator *)o);
  new((void*)&(p->_this)) NetworKit::ClusteringGenerator();
  return o;
}

static void __pyx_tp_dealloc_9networkit_9community_ClusteringGenerator(PyObject *o) {
  struct __pyx_obj_9networkit_9community_ClusteringGenerator *p = (struct __pyx_obj_9networkit_9community_ClusteringGenerator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_ClusteringGenerator) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->_this);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_9networkit_9community_ClusteringGenerator[] = {
  {"makeSingletonClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19ClusteringGenerator_1makeSingletonClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_19ClusteringGenerator_makeSingletonClustering},
  {"makeOneClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19ClusteringGenerator_3makeOneClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_19ClusteringGenerator_2makeOneClustering},
  {"makeRandomClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19ClusteringGenerator_5makeRandomClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_19ClusteringGenerator_4makeRandomClustering},
  {"makeContinuousBalancedClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19ClusteringGenerator_7makeContinuousBalancedClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_19ClusteringGenerator_6makeContinuousBalancedClustering},
  {"makeNoncontinuousBalancedClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19ClusteringGenerator_9makeNoncontinuousBalancedClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_19ClusteringGenerator_8makeNoncontinuousBalancedClustering},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19ClusteringGenerator_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19ClusteringGenerator_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_ClusteringGenerator_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_ClusteringGenerator},
  {Py_tp_doc, (void *)PyDoc_STR(" Generators for various clusterings ")},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_ClusteringGenerator},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_ClusteringGenerator},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_ClusteringGenerator_spec = {
  "networkit.community.ClusteringGenerator",
  sizeof(struct __pyx_obj_9networkit_9community_ClusteringGenerator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9networkit_9community_ClusteringGenerator_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_ClusteringGenerator = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""ClusteringGenerator", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_ClusteringGenerator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_ClusteringGenerator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR(" Generators for various clusterings "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_ClusteringGenerator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_ClusteringGenerator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_GraphClusteringTools(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  return o;
}

static void __pyx_tp_dealloc_9networkit_9community_GraphClusteringTools(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_GraphClusteringTools) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_9networkit_9community_GraphClusteringTools[] = {
  {"getImbalance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_1getImbalance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_20GraphClusteringTools_getImbalance},
  {"communicationGraph", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_3communicationGraph, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_20GraphClusteringTools_2communicationGraph},
  {"weightedDegreeWithCluster", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_5weightedDegreeWithCluster, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_20GraphClusteringTools_4weightedDegreeWithCluster},
  {"isProperClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_7isProperClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_20GraphClusteringTools_6isProperClustering},
  {"isSingletonClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_9isSingletonClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_20GraphClusteringTools_8isSingletonClustering},
  {"isOneClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_11isOneClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_20GraphClusteringTools_10isOneClustering},
  {"equalClustering", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_13equalClustering, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_20GraphClusteringTools_12equalClustering},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_15__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20GraphClusteringTools_17__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_GraphClusteringTools_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_GraphClusteringTools},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_GraphClusteringTools},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_GraphClusteringTools},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_GraphClusteringTools_spec = {
  "networkit.community.GraphClusteringTools",
  sizeof(struct __pyx_obj_9networkit_9community_GraphClusteringTools),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9networkit_9community_GraphClusteringTools_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_GraphClusteringTools = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""GraphClusteringTools", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_GraphClusteringTools), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_GraphClusteringTools, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_GraphClusteringTools, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_GraphClusteringTools, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_PartitionIntersection(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9networkit_9community_PartitionIntersection *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9networkit_9community_PartitionIntersection *)o);
  new((void*)&(p->_this)) NetworKit::PartitionIntersection();
  return o;
}

static void __pyx_tp_dealloc_9networkit_9community_PartitionIntersection(PyObject *o) {
  struct __pyx_obj_9networkit_9community_PartitionIntersection *p = (struct __pyx_obj_9networkit_9community_PartitionIntersection *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_PartitionIntersection) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->_this);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_9networkit_9community_PartitionIntersection[] = {
  {"calculate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_21PartitionIntersection_1calculate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_21PartitionIntersection_calculate},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_21PartitionIntersection_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_21PartitionIntersection_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_PartitionIntersection_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_PartitionIntersection},
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tPartitionIntersection(zeta, eta)\n\t\n\tClass for calculating the intersection of two partitions, i.e. the clustering with the fewest clusters\n\tsuch that each cluster is a subset of a cluster in both partitions.\n\t")},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_PartitionIntersection},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_PartitionIntersection},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_PartitionIntersection_spec = {
  "networkit.community.PartitionIntersection",
  sizeof(struct __pyx_obj_9networkit_9community_PartitionIntersection),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9networkit_9community_PartitionIntersection_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_PartitionIntersection = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""PartitionIntersection", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_PartitionIntersection), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_PartitionIntersection, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR(" \n\tPartitionIntersection(zeta, eta)\n\t\n\tClass for calculating the intersection of two partitions, i.e. the clustering with the fewest clusters\n\tsuch that each cluster is a subset of a cluster in both partitions.\n\t"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_PartitionIntersection, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_PartitionIntersection, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_Coverage(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9networkit_9community_Coverage *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9networkit_9community_Coverage *)o);
  new((void*)&(p->_this)) NetworKit::Coverage();
  return o;
}

static void __pyx_tp_dealloc_9networkit_9community_Coverage(PyObject *o) {
  struct __pyx_obj_9networkit_9community_Coverage *p = (struct __pyx_obj_9networkit_9community_Coverage *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_Coverage) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->_this);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_9networkit_9community_Coverage[] = {
  {"getQuality", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_8Coverage_1getQuality, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_8Coverage_getQuality},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_8Coverage_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_8Coverage_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_Coverage_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_Coverage},
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tCoverage()\n\n\tCoverage is the fraction of intra-community edges ")},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_Coverage},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_Coverage},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_Coverage_spec = {
  "networkit.community.Coverage",
  sizeof(struct __pyx_obj_9networkit_9community_Coverage),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9networkit_9community_Coverage_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_Coverage = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""Coverage", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_Coverage), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_Coverage, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR(" \n\tCoverage()\n\n\tCoverage is the fraction of intra-community edges "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_Coverage, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_Coverage, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_EdgeCut(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9networkit_9community_EdgeCut *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9networkit_9community_EdgeCut *)o);
  new((void*)&(p->_this)) NetworKit::EdgeCut();
  return o;
}

static void __pyx_tp_dealloc_9networkit_9community_EdgeCut(PyObject *o) {
  struct __pyx_obj_9networkit_9community_EdgeCut *p = (struct __pyx_obj_9networkit_9community_EdgeCut *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_EdgeCut) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->_this);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_9networkit_9community_EdgeCut[] = {
  {"getQuality", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_7EdgeCut_1getQuality, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_7EdgeCut_getQuality},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_7EdgeCut_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_7EdgeCut_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_EdgeCut_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_EdgeCut},
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tEdgeCut()\n\t\n\tEdge cut is the total weight of inter-community edges")},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_EdgeCut},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_EdgeCut},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_EdgeCut_spec = {
  "networkit.community.EdgeCut",
  sizeof(struct __pyx_obj_9networkit_9community_EdgeCut),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9networkit_9community_EdgeCut_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_EdgeCut = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""EdgeCut", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_EdgeCut), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_EdgeCut, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR(" \n\tEdgeCut()\n\t\n\tEdge cut is the total weight of inter-community edges"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_EdgeCut, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_EdgeCut, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_Modularity(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9networkit_9community_Modularity *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9networkit_9community_Modularity *)o);
  new((void*)&(p->_this)) NetworKit::Modularity();
  return o;
}

static void __pyx_tp_dealloc_9networkit_9community_Modularity(PyObject *o) {
  struct __pyx_obj_9networkit_9community_Modularity *p = (struct __pyx_obj_9networkit_9community_Modularity *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_Modularity) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->_this);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_9networkit_9community_Modularity[] = {
  {"getQuality", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_10Modularity_1getQuality, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_10Modularity_getQuality},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_10Modularity_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_10Modularity_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_Modularity_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_Modularity},
  {Py_tp_doc, (void *)PyDoc_STR("\t\n\tModularity()\n\n\tModularity is a quality index for community detection.\n\tIt assigns a quality value in [-0.5, 1.0] to a partition of a graph which is higher for more modular networks and\n\tpartitions which better capture the modular structure. See also http://en.wikipedia.org/wiki/Modularity_(networks) .\n\n \tNotes\n\t-----\n\tModularity is defined as:\n\n\t.. math:: mod(\\zeta) := \\frac{\\sum_{C \\in \\zeta} \\sum_{ e \\in E(C) } \\omega(e)}{\\sum_{e \\in E} \\omega(e)} - \\frac{ \\sum_{C \\in \\zeta}( \\sum_{v \\in C} \\omega(v) )^2 }{4( \\sum_{e \\in E} \\omega(e) )^2 }\n\n\t")},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_Modularity},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_Modularity},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_Modularity_spec = {
  "networkit.community.Modularity",
  sizeof(struct __pyx_obj_9networkit_9community_Modularity),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9networkit_9community_Modularity_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_Modularity = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""Modularity", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_Modularity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_Modularity, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\t\n\tModularity()\n\n\tModularity is a quality index for community detection.\n\tIt assigns a quality value in [-0.5, 1.0] to a partition of a graph which is higher for more modular networks and\n\tpartitions which better capture the modular structure. See also http://en.wikipedia.org/wiki/Modularity_(networks) .\n\n \tNotes\n\t-----\n\tModularity is defined as:\n\n\t.. math:: mod(\\zeta) := \\frac{\\sum_{C \\in \\zeta} \\sum_{ e \\in E(C) } \\omega(e)}{\\sum_{e \\in E} \\omega(e)} - \\frac{ \\sum_{C \\in \\zeta}( \\sum_{v \\in C} \\omega(v) )^2 }{4( \\sum_{e \\in E} \\omega(e) )^2 }\n\n\t"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_Modularity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_Modularity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_HubDominance(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9networkit_9community_HubDominance *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9networkit_9community_HubDominance *)o);
  new((void*)&(p->_this)) NetworKit::HubDominance();
  return o;
}

static void __pyx_tp_dealloc_9networkit_9community_HubDominance(PyObject *o) {
  struct __pyx_obj_9networkit_9community_HubDominance *p = (struct __pyx_obj_9networkit_9community_HubDominance *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_HubDominance) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->_this);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_9networkit_9community_HubDominance[] = {
  {"__pyx_fuse_0getQuality", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_fuse_0__pyx_pw_9networkit_9community_12HubDominance_3getQuality, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_9community_12HubDominance_getQuality},
  {"__pyx_fuse_1getQuality", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_fuse_1__pyx_pw_9networkit_9community_12HubDominance_5getQuality, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_9community_12HubDominance_getQuality},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_12HubDominance_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_12HubDominance_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_HubDominance_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_HubDominance},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tHubDominance()\n\t\n\tA quality measure that measures the dominance of hubs in clusters. The hub dominance of a single\n\tcluster is defined as the maximum cluster-internal degree of a node in that cluster divided by\n\tthe maximum cluster-internal degree, i.e. the number of nodes in the cluster minus one. The\n\tvalue for all clusters is defined as the average of all clusters.\n\n\tStrictly speaking this is not a quality measure as this is rather dependent on the type of the\n\tconsidered graph, for more information see\n\tLancichinetti A, Kivel M, Saramki J, Fortunato S (2010)\n\tCharacterizing the Community Structure of Complex Networks\n\tPLoS ONE 5(8): e11976. doi: 10.1371/journal.pone.0011976\n\thttp://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0011976\n\t")},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_HubDominance},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_HubDominance},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_HubDominance_spec = {
  "networkit.community.HubDominance",
  sizeof(struct __pyx_obj_9networkit_9community_HubDominance),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9networkit_9community_HubDominance_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_HubDominance = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""HubDominance", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_HubDominance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_HubDominance, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n\tHubDominance()\n\t\n\tA quality measure that measures the dominance of hubs in clusters. The hub dominance of a single\n\tcluster is defined as the maximum cluster-internal degree of a node in that cluster divided by\n\tthe maximum cluster-internal degree, i.e. the number of nodes in the cluster minus one. The\n\tvalue for all clusters is defined as the average of all clusters.\n\n\tStrictly speaking this is not a quality measure as this is rather dependent on the type of the\n\tconsidered graph, for more information see\n\tLancichinetti A, Kivel M, Saramki J, Fortunato S (2010)\n\tCharacterizing the Community Structure of Complex Networks\n\tPLoS ONE 5(8): e11976. doi: 10.1371/journal.pone.0011976\n\thttp://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0011976\n\t"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_HubDominance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_HubDominance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_PLM(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_9community_CommunityDetector(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_9community_3PLM_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_9community_PLM[] = {
  {"getTiming", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLM_3getTiming, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_3PLM_2getTiming},
  {"coarsen", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLM_5coarsen, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_3PLM_4coarsen},
  {"prolong", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLM_7prolong, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_3PLM_6prolong},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLM_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLM_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_PLM_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tPLM(G, refine=False, gamma=1.0, par=\"balanced\", maxIter=32, turbo=True, recurse=True)\n\n\tParallel Louvain Method - the Louvain method, optionally extended to\n\ta full multi-level algorithm with refinement.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\trefine : bool, optional\n\t\tAdd a second move phase to refine the communities. Default: False\n\tgamma : float, optional\n\t\tMulti-resolution modularity parameter: 1.0 (standard modularity), 0.0 (one community), 2m (singleton communities). Default: 1.0\n\tpar : str, optional\n\t\tParallelization strategy, possible values: \"none\", \"simple\", \"balanced\", \"none randomized\". Default \"balanced\"\n\tmaxIter : int, optional\n\t\tMaximum number of iterations for move phase. Default: 32\n\tturbo : bool, optional\n\t\tFaster but uses O(n) additional memory per thread. Default: True\n\trecurse: bool, optional\n\t\tUse recursive coarsening, see http://journals.aps.org/pre/abstract/10.1103/PhysRevE.89.049902 for some explanations.\n\t\tDefault: True\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_CommunityDetector},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_CommunityDetector},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_PLM},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_PLM},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_PLM_spec = {
  "networkit.community.PLM",
  sizeof(struct __pyx_obj_9networkit_9community_PLM),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_PLM_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_PLM = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""PLM", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_PLM), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_CommunityDetector, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tPLM(G, refine=False, gamma=1.0, par=\"balanced\", maxIter=32, turbo=True, recurse=True)\n\n\tParallel Louvain Method - the Louvain method, optionally extended to\n\ta full multi-level algorithm with refinement.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\trefine : bool, optional\n\t\tAdd a second move phase to refine the communities. Default: False\n\tgamma : float, optional\n\t\tMulti-resolution modularity parameter: 1.0 (standard modularity), 0.0 (one community), 2m (singleton communities). Default: 1.0\n\tpar : str, optional\n\t\tParallelization strategy, possible values: \"none\", \"simple\", \"balanced\", \"none randomized\". Default \"balanced\"\n\tmaxIter : int, optional\n\t\tMaximum number of iterations for move phase. Default: 32\n\tturbo : bool, optional\n\t\tFaster but uses O(n) additional memory per thread. Default: True\n\trecurse: bool, optional\n\t\tUse recursive coarsening, see http://journals.aps.org/pre/abstract/10.1103/PhysRevE.89.049902 for some explanations.\n\t\tDefault: True\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_CommunityDetector, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_CommunityDetector, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_PLM, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_9community_17CommunityDetector_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_PLM, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_ParallelLeiden(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_9community_CommunityDetector(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_9community_14ParallelLeiden_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_9community_ParallelLeiden[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_14ParallelLeiden_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_14ParallelLeiden_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_ParallelLeiden_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tParallelLeiden(G, randomize=True, iterations=3, gamma=1)\n\n\tParallel Leiden Algorithm.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tA graph.\n\trandomize : bool, optional\n\t\tWhether to randomize the node order or not. Default: True\n\titerations : int, optional\n\t\tMaximum count of Leiden runs. Default: 3\n\tgamma : float, optional\n\t\tMulti-resolution modularity parameter: 1.0 (standard modularity), 0.0 (one community), 2m (singleton communities). Default: 1.0\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_CommunityDetector},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_CommunityDetector},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_ParallelLeiden},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_ParallelLeiden},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_ParallelLeiden_spec = {
  "networkit.community.ParallelLeiden",
  sizeof(struct __pyx_obj_9networkit_9community_ParallelLeiden),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_ParallelLeiden_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_ParallelLeiden = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""ParallelLeiden", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_ParallelLeiden), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_CommunityDetector, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tParallelLeiden(G, randomize=True, iterations=3, gamma=1)\n\n\tParallel Leiden Algorithm.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tA graph.\n\trandomize : bool, optional\n\t\tWhether to randomize the node order or not. Default: True\n\titerations : int, optional\n\t\tMaximum count of Leiden runs. Default: 3\n\tgamma : float, optional\n\t\tMulti-resolution modularity parameter: 1.0 (standard modularity), 0.0 (one community), 2m (singleton communities). Default: 1.0\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_CommunityDetector, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_CommunityDetector, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_ParallelLeiden, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_9community_17CommunityDetector_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_ParallelLeiden, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_LouvainMapEquation(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_9community_CommunityDetector(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_9community_18LouvainMapEquation_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_9community_LouvainMapEquation[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_18LouvainMapEquation_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_18LouvainMapEquation_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_LouvainMapEquation_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n\tLouvainMapEquation(G, hierarchical=False, maxIterations=32, parallelizationStrategy=\"relaxmap\")\n\t\n\tCommunity detection algorithm based on the Louvain algorithm. Uses the Map Equation to find communities.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the algorithm has to run.\n\thierarchical: bool, optional\n\t\tIteratively create a graph of the locally optimal clusters and optimize locally on that graph.\n\tmaxIterations: int, optional\n\t\tThe maximum number of local move iterations. Default: 32\n\tparallelizationStrategy: str, optional\n\t\tParallelization strategy, possible values: \"relaxmap\", \"synchronous\", \"none\". Default: \"relaxmap\"\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_CommunityDetector},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_CommunityDetector},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_LouvainMapEquation},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_LouvainMapEquation},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_LouvainMapEquation_spec = {
  "networkit.community.LouvainMapEquation",
  sizeof(struct __pyx_obj_9networkit_9community_LouvainMapEquation),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_LouvainMapEquation_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_LouvainMapEquation = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""LouvainMapEquation", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_LouvainMapEquation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_CommunityDetector, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tLouvainMapEquation(G, hierarchical=False, maxIterations=32, parallelizationStrategy=\"relaxmap\")\n\t\n\tCommunity detection algorithm based on the Louvain algorithm. Uses the Map Equation to find communities.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the algorithm has to run.\n\thierarchical: bool, optional\n\t\tIteratively create a graph of the locally optimal clusters and optimize locally on that graph.\n\tmaxIterations: int, optional\n\t\tThe maximum number of local move iterations. Default: 32\n\tparallelizationStrategy: str, optional\n\t\tParallelization strategy, possible values: \"relaxmap\", \"synchronous\", \"none\". Default: \"relaxmap\"\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_CommunityDetector, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_CommunityDetector, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_LouvainMapEquation, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_9community_17CommunityDetector_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_LouvainMapEquation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_PLP(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_9community_CommunityDetector(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_9community_3PLP_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_9community_PLP[] = {
  {"numberOfIterations", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLP_3numberOfIterations, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_3PLP_2numberOfIterations},
  {"getTiming", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLP_5getTiming, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_3PLP_4getTiming},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLP_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3PLP_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_PLP_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tPLP(G, updateThreshold=None, maxIterations=None, baseClustering=None)\n\n\tParallel label propagation for community detection:\n\tModerate solution quality, very short time to solution.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the algorithm has to run.\n\tupdateThreshold : int, optional\n\t\tnumber of nodes that have to be changed in each iteration so that a new iteration starts. Default: None\n\tmaxIterations: int, optional\n\t\tThe maximum number of local move iterations. Default: None\t\n\tbaseClustering : networkit.Partition, optional\n\t\tPLP needs a base clustering to start from; if none is given the algorithm will \n\t\trun on a singleton clustering. Default: None\n\n\tNotes\n\t-----\n\tAs described in Ovelgoenne et al: An Ensemble Learning Strategy for Graph Clustering\n \tRaghavan et al. proposed a label propagation algorithm for graph clustering.\n \tThis algorithm initializes every vertex of a graph with a unique label. Then, in iterative\n \tsweeps over the set of vertices the vertex labels are updated. A vertex gets the label\n \tthat the maximum number of its neighbors have. The procedure is stopped when every vertex\n \thas the label that at least half of its neighbors have.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_CommunityDetector},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_CommunityDetector},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_PLP},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_PLP},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_PLP_spec = {
  "networkit.community.PLP",
  sizeof(struct __pyx_obj_9networkit_9community_PLP),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_PLP_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_PLP = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""PLP", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_PLP), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_CommunityDetector, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tPLP(G, updateThreshold=None, maxIterations=None, baseClustering=None)\n\n\tParallel label propagation for community detection:\n\tModerate solution quality, very short time to solution.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the algorithm has to run.\n\tupdateThreshold : int, optional\n\t\tnumber of nodes that have to be changed in each iteration so that a new iteration starts. Default: None\n\tmaxIterations: int, optional\n\t\tThe maximum number of local move iterations. Default: None\t\n\tbaseClustering : networkit.Partition, optional\n\t\tPLP needs a base clustering to start from; if none is given the algorithm will \n\t\trun on a singleton clustering. Default: None\n\n\tNotes\n\t-----\n\tAs described in Ovelgoenne et al: An Ensemble Learning Strategy for Graph Clustering\n \tRaghavan et al. proposed a label propagation algorithm for graph clustering.\n \tThis algorithm initializes every vertex of a graph with a unique label. Then, in iterative\n \tsweeps over the set of vertices the vertex labels are updated. A vertex gets the label\n \tthat the maximum number of its neighbors have. The procedure is stopped when every vertex\n \thas the label that at least half of its neighbors have.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_CommunityDetector, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_CommunityDetector, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_PLP, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_9community_17CommunityDetector_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_PLP, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_LFM(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_9community_LFM *p;
  PyObject *o = __pyx_tp_new_9networkit_9community_OverlappingCommunityDetector(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_9community_LFM *)o);
  p->_scd = ((struct __pyx_obj_9networkit_3scd_SelectiveCommunityDetector *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_9community_3LFM_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_9community_LFM(PyObject *o) {
  struct __pyx_obj_9networkit_9community_LFM *p = (struct __pyx_obj_9networkit_9community_LFM *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_LFM) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_scd);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9networkit_9community_OverlappingCommunityDetector(o);
}

static int __pyx_tp_traverse_9networkit_9community_LFM(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_9community_LFM *p = (struct __pyx_obj_9networkit_9community_LFM *)o;
  e = __pyx_tp_traverse_9networkit_9community_OverlappingCommunityDetector(o, v, a); if (e) return e;
  if (p->_scd) {
    e = (*v)(((PyObject *)p->_scd), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_9community_LFM(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_9community_LFM *p = (struct __pyx_obj_9networkit_9community_LFM *)o;
  __pyx_tp_clear_9networkit_9community_OverlappingCommunityDetector(o);
  tmp = ((PyObject*)p->_scd);
  p->_scd = ((struct __pyx_obj_9networkit_3scd_SelectiveCommunityDetector *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_9community_LFM[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3LFM_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_3LFM_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_LFM_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_LFM},
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tLFM(G, scd)\n\t\n\tLocal community expansion algorithm:\n \n\tThe LFM algorithm detects overlapping communities by repeatedly\n\texecuting a given selective community detector algorithm\n\tfor different random seed nodes which have not yet been assigned to any community.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the algorithm has to run.\n\tscd : networkit.scd.SelectiveCommunityDetector\n\t\tThe selective community detector algorithm which is run on\n\t\trandomly selected seed nodes\n\n\tNotes\n\t-----\n\tLocal community expansion algorithm as introduced in:\n\n\tLancichinetti, A., Fortunato, S., & Kert\303\251sz, J. (2009).\n\tDetecting the overlapping and hierarchical community structure in complex networks.\n\tNew Journal of Physics, 11(3), 033015.\n\thttps://doi.org/10.1088/1367-2630/11/3/033015\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_LFM},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_LFM},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_LFM},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_LFM},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_LFM_spec = {
  "networkit.community.LFM",
  sizeof(struct __pyx_obj_9networkit_9community_LFM),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_LFM_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_LFM = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""LFM", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_LFM), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_LFM, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tLFM(G, scd)\n\t\n\tLocal community expansion algorithm:\n \n\tThe LFM algorithm detects overlapping communities by repeatedly\n\texecuting a given selective community detector algorithm\n\tfor different random seed nodes which have not yet been assigned to any community.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the algorithm has to run.\n\tscd : networkit.scd.SelectiveCommunityDetector\n\t\tThe selective community detector algorithm which is run on\n\t\trandomly selected seed nodes\n\n\tNotes\n\t-----\n\tLocal community expansion algorithm as introduced in:\n\n\tLancichinetti, A., Fortunato, S., & Kert\303\251sz, J. (2009).\n\tDetecting the overlapping and hierarchical community structure in complex networks.\n\tNew Journal of Physics, 11(3), 033015.\n\thttps://doi.org/10.1088/1367-2630/11/3/033015\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_LFM, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_LFM, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_LFM, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_9community_28OverlappingCommunityDetector_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_LFM, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_LPDegreeOrdered(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_9community_CommunityDetector(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_9community_15LPDegreeOrdered_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_9community_LPDegreeOrdered[] = {
  {"numberOfIterations", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_15LPDegreeOrdered_3numberOfIterations, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_15LPDegreeOrdered_2numberOfIterations},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_15LPDegreeOrdered_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_15LPDegreeOrdered_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_LPDegreeOrdered_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tLPDegreeOrdered(G)\n\t\n\tLabel propagation-based community detection algorithm which processes nodes in increasing order of node degree.\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_CommunityDetector},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_CommunityDetector},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_LPDegreeOrdered},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_LPDegreeOrdered},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_LPDegreeOrdered_spec = {
  "networkit.community.LPDegreeOrdered",
  sizeof(struct __pyx_obj_9networkit_9community_LPDegreeOrdered),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_LPDegreeOrdered_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_LPDegreeOrdered = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""LPDegreeOrdered", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_LPDegreeOrdered), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_CommunityDetector, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tLPDegreeOrdered(G)\n\t\n\tLabel propagation-based community detection algorithm which processes nodes in increasing order of node degree.\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_CommunityDetector, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_CommunityDetector, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_LPDegreeOrdered, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_9community_17CommunityDetector_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_LPDegreeOrdered, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_CutClustering(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_9community_CommunityDetector(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_9community_13CutClustering_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_9community_CutClustering[] = {
  {"getClusterHierarchy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_13CutClustering_3getClusterHierarchy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_13CutClustering_2getClusterHierarchy},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_13CutClustering_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_13CutClustering_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_CutClustering_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n\tCutClustering(G, alpha)\n\t\n\tCut clustering algorithm as defined in\n\tFlake, Gary William; Tarjan, Robert E.; Tsioutsiouliklis, Kostas. Graph Clustering and Minimum Cut Trees.\n\tInternet Mathematics 1 (2003), no. 4, 385--408.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\talpha : float\n\t\tThe parameter for the cut clustering algorithm.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_CommunityDetector},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_CommunityDetector},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_CutClustering},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_CutClustering},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_CutClustering_spec = {
  "networkit.community.CutClustering",
  sizeof(struct __pyx_obj_9networkit_9community_CutClustering),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_CutClustering_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_CutClustering = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""CutClustering", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_CutClustering), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_CommunityDetector, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tCutClustering(G, alpha)\n\t\n\tCut clustering algorithm as defined in\n\tFlake, Gary William; Tarjan, Robert E.; Tsioutsiouliklis, Kostas. Graph Clustering and Minimum Cut Trees.\n\tInternet Mathematics 1 (2003), no. 4, 385--408.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\talpha : float\n\t\tThe parameter for the cut clustering algorithm.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_CommunityDetector, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_CommunityDetector, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_CutClustering, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_9community_17CommunityDetector_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_CutClustering, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_DissimilarityMeasure(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  return o;
}

static void __pyx_tp_dealloc_9networkit_9community_DissimilarityMeasure(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_DissimilarityMeasure) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_9networkit_9community_DissimilarityMeasure[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20DissimilarityMeasure_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20DissimilarityMeasure_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_DissimilarityMeasure_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_DissimilarityMeasure},
  {Py_tp_doc, (void *)PyDoc_STR(" Abstract base class for partition/community dissimilarity measures ")},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_DissimilarityMeasure},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_DissimilarityMeasure},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_DissimilarityMeasure_spec = {
  "networkit.community.DissimilarityMeasure",
  sizeof(struct __pyx_obj_9networkit_9community_DissimilarityMeasure),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9networkit_9community_DissimilarityMeasure_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_DissimilarityMeasure = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""DissimilarityMeasure", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_DissimilarityMeasure), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_DissimilarityMeasure, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR(" Abstract base class for partition/community dissimilarity measures "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_DissimilarityMeasure, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_DissimilarityMeasure, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_NodeStructuralRandMeasure(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure *p;
  PyObject *o = __pyx_tp_new_9networkit_9community_DissimilarityMeasure(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure *)o);
  new((void*)&(p->_this)) NetworKit::NodeStructuralRandMeasure();
  return o;
}

static void __pyx_tp_dealloc_9networkit_9community_NodeStructuralRandMeasure(PyObject *o) {
  struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure *p = (struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_NodeStructuralRandMeasure) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->_this);
  __pyx_tp_dealloc_9networkit_9community_DissimilarityMeasure(o);
}

static PyMethodDef __pyx_methods_9networkit_9community_NodeStructuralRandMeasure[] = {
  {"getDissimilarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_25NodeStructuralRandMeasure_1getDissimilarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_25NodeStructuralRandMeasure_getDissimilarity},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_25NodeStructuralRandMeasure_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_25NodeStructuralRandMeasure_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_NodeStructuralRandMeasure_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_NodeStructuralRandMeasure},
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tNodeStructuralRandMeasure()\n\n\tThe node-structural Rand measure assigns a similarity value in [0,1]\n\tto two partitions of a graph, by considering all pairs of nodes.\n\t")},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_NodeStructuralRandMeasure},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_NodeStructuralRandMeasure},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_NodeStructuralRandMeasure_spec = {
  "networkit.community.NodeStructuralRandMeasure",
  sizeof(struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9networkit_9community_NodeStructuralRandMeasure_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_NodeStructuralRandMeasure = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""NodeStructuralRandMeasure", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_NodeStructuralRandMeasure), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_NodeStructuralRandMeasure, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR(" \n\tNodeStructuralRandMeasure()\n\n\tThe node-structural Rand measure assigns a similarity value in [0,1]\n\tto two partitions of a graph, by considering all pairs of nodes.\n\t"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_NodeStructuralRandMeasure, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_NodeStructuralRandMeasure, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_GraphStructuralRandMeasure(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure *p;
  PyObject *o = __pyx_tp_new_9networkit_9community_DissimilarityMeasure(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure *)o);
  new((void*)&(p->_this)) NetworKit::GraphStructuralRandMeasure();
  return o;
}

static void __pyx_tp_dealloc_9networkit_9community_GraphStructuralRandMeasure(PyObject *o) {
  struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure *p = (struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_GraphStructuralRandMeasure) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->_this);
  __pyx_tp_dealloc_9networkit_9community_DissimilarityMeasure(o);
}

static PyMethodDef __pyx_methods_9networkit_9community_GraphStructuralRandMeasure[] = {
  {"getDissimilarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_26GraphStructuralRandMeasure_1getDissimilarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_26GraphStructuralRandMeasure_getDissimilarity},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_26GraphStructuralRandMeasure_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_26GraphStructuralRandMeasure_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_GraphStructuralRandMeasure_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_GraphStructuralRandMeasure},
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tGraphStructuralRandMeasure()\n\n\tThe graph-structural Rand measure assigns a similarity value in [0,1]\n\tto two partitions of a graph, by considering connected pairs of nodes.\n\t")},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_GraphStructuralRandMeasure},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_GraphStructuralRandMeasure},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_GraphStructuralRandMeasure_spec = {
  "networkit.community.GraphStructuralRandMeasure",
  sizeof(struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9networkit_9community_GraphStructuralRandMeasure_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_GraphStructuralRandMeasure = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""GraphStructuralRandMeasure", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_GraphStructuralRandMeasure), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_GraphStructuralRandMeasure, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR(" \n\tGraphStructuralRandMeasure()\n\n\tThe graph-structural Rand measure assigns a similarity value in [0,1]\n\tto two partitions of a graph, by considering connected pairs of nodes.\n\t"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_GraphStructuralRandMeasure, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_GraphStructuralRandMeasure, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_JaccardMeasure(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_9community_JaccardMeasure *p;
  PyObject *o = __pyx_tp_new_9networkit_9community_DissimilarityMeasure(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_9community_JaccardMeasure *)o);
  new((void*)&(p->_this)) NetworKit::JaccardMeasure();
  return o;
}

static void __pyx_tp_dealloc_9networkit_9community_JaccardMeasure(PyObject *o) {
  struct __pyx_obj_9networkit_9community_JaccardMeasure *p = (struct __pyx_obj_9networkit_9community_JaccardMeasure *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_JaccardMeasure) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->_this);
  __pyx_tp_dealloc_9networkit_9community_DissimilarityMeasure(o);
}

static PyMethodDef __pyx_methods_9networkit_9community_JaccardMeasure[] = {
  {"getDissimilarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_14JaccardMeasure_1getDissimilarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_14JaccardMeasure_getDissimilarity},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_14JaccardMeasure_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_14JaccardMeasure_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_JaccardMeasure_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_JaccardMeasure},
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tJaccardMeasure()\n\t")},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_JaccardMeasure},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_JaccardMeasure},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_JaccardMeasure_spec = {
  "networkit.community.JaccardMeasure",
  sizeof(struct __pyx_obj_9networkit_9community_JaccardMeasure),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9networkit_9community_JaccardMeasure_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_JaccardMeasure = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""JaccardMeasure", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_JaccardMeasure), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_JaccardMeasure, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR(" \n\tJaccardMeasure()\n\t"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_JaccardMeasure, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_JaccardMeasure, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_NMIDistance(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_9community_NMIDistance *p;
  PyObject *o = __pyx_tp_new_9networkit_9community_DissimilarityMeasure(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_9community_NMIDistance *)o);
  new((void*)&(p->_this)) NetworKit::NMIDistance();
  return o;
}

static void __pyx_tp_dealloc_9networkit_9community_NMIDistance(PyObject *o) {
  struct __pyx_obj_9networkit_9community_NMIDistance *p = (struct __pyx_obj_9networkit_9community_NMIDistance *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_NMIDistance) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->_this);
  __pyx_tp_dealloc_9networkit_9community_DissimilarityMeasure(o);
}

static PyMethodDef __pyx_methods_9networkit_9community_NMIDistance[] = {
  {"getDissimilarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_11NMIDistance_1getDissimilarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_11NMIDistance_getDissimilarity},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_11NMIDistance_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_11NMIDistance_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_NMIDistance_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_NMIDistance},
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tNMIDistance()\n\n\tThe NMI distance assigns a similarity value in [0,1] to two partitions\n\tof a graph.\n\t")},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_NMIDistance},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_NMIDistance},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_NMIDistance_spec = {
  "networkit.community.NMIDistance",
  sizeof(struct __pyx_obj_9networkit_9community_NMIDistance),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9networkit_9community_NMIDistance_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_NMIDistance = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""NMIDistance", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_NMIDistance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_NMIDistance, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR(" \n\tNMIDistance()\n\n\tThe NMI distance assigns a similarity value in [0,1] to two partitions\n\tof a graph.\n\t"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_NMIDistance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_NMIDistance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_AdjustedRandMeasure(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_9community_AdjustedRandMeasure *p;
  PyObject *o = __pyx_tp_new_9networkit_9community_DissimilarityMeasure(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_9community_AdjustedRandMeasure *)o);
  new((void*)&(p->_this)) NetworKit::AdjustedRandMeasure();
  return o;
}

static void __pyx_tp_dealloc_9networkit_9community_AdjustedRandMeasure(PyObject *o) {
  struct __pyx_obj_9networkit_9community_AdjustedRandMeasure *p = (struct __pyx_obj_9networkit_9community_AdjustedRandMeasure *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_AdjustedRandMeasure) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->_this);
  __pyx_tp_dealloc_9networkit_9community_DissimilarityMeasure(o);
}

static PyMethodDef __pyx_methods_9networkit_9community_AdjustedRandMeasure[] = {
  {"getDissimilarity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19AdjustedRandMeasure_1getDissimilarity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_19AdjustedRandMeasure_getDissimilarity},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19AdjustedRandMeasure_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_19AdjustedRandMeasure_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_AdjustedRandMeasure_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_AdjustedRandMeasure},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tAdjustedRandMeasure()\n\t\n\tThe adjusted rand dissimilarity measure as proposed by Huber and Arabie in \"Comparing partitions\" (http://link.springer.com/article/10.1007/BF01908075)\n\t")},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_AdjustedRandMeasure},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_AdjustedRandMeasure},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_AdjustedRandMeasure_spec = {
  "networkit.community.AdjustedRandMeasure",
  sizeof(struct __pyx_obj_9networkit_9community_AdjustedRandMeasure),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9networkit_9community_AdjustedRandMeasure_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_AdjustedRandMeasure = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""AdjustedRandMeasure", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_AdjustedRandMeasure), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_AdjustedRandMeasure, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n\tAdjustedRandMeasure()\n\t\n\tThe adjusted rand dissimilarity measure as proposed by Huber and Arabie in \"Comparing partitions\" (http://link.springer.com/article/10.1007/BF01908075)\n\t"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_AdjustedRandMeasure, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_AdjustedRandMeasure, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_9networkit_9community_LocalCommunityEvaluation[] = {
  {"getWeightedAverage", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_3getWeightedAverage, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_24LocalCommunityEvaluation_2getWeightedAverage},
  {"getUnweightedAverage", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_5getUnweightedAverage, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_24LocalCommunityEvaluation_4getUnweightedAverage},
  {"getMaximumValue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_7getMaximumValue, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_24LocalCommunityEvaluation_6getMaximumValue},
  {"getMinimumValue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_9getMinimumValue, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_24LocalCommunityEvaluation_8getMinimumValue},
  {"getValue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_11getValue, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_24LocalCommunityEvaluation_10getValue},
  {"getValues", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_13getValues, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_24LocalCommunityEvaluation_12getValues},
  {"isSmallBetter", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_15isSmallBetter, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_24LocalCommunityEvaluation_14isSmallBetter},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_17__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_19__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_LocalCommunityEvaluation_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n\tLocalCommunityEvaluation()\n\t\n\tVirtual base class of all evaluation methods for a single clustering which is based on the evaluation of single clusters.\n\tThis is the base class both for Partitions as well as for Covers.\n\t")},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_LocalCommunityEvaluation},
  {Py_tp_init, (void *)__pyx_pw_9networkit_9community_24LocalCommunityEvaluation_1__init__},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_LocalCommunityEvaluation_spec = {
  "networkit.community.LocalCommunityEvaluation",
  sizeof(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_LocalCommunityEvaluation_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_LocalCommunityEvaluation = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""LocalCommunityEvaluation", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_LocalCommunityEvaluation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  0, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tLocalCommunityEvaluation()\n\t\n\tVirtual base class of all evaluation methods for a single clustering which is based on the evaluation of single clusters.\n\tThis is the base class both for Partitions as well as for Covers.\n\t"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_LocalCommunityEvaluation, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9networkit_9community_24LocalCommunityEvaluation_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  0, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_LocalPartitionEvaluation(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  p->_P = ((struct __pyx_obj_9networkit_10structures_Partition *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_9community_24LocalPartitionEvaluation_3__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_9community_LocalPartitionEvaluation(PyObject *o) {
  struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *p = (struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_LocalPartitionEvaluation) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_9community_24LocalPartitionEvaluation_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_G);
  Py_CLEAR(p->_P);
  if (likely(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_9community_LocalPartitionEvaluation);
}

static int __pyx_tp_traverse_9networkit_9community_LocalPartitionEvaluation(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *p = (struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *)o;
  e = ((likely(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation)) ? ((__pyx_ptype_9networkit_9community_LocalCommunityEvaluation->tp_traverse) ? __pyx_ptype_9networkit_9community_LocalCommunityEvaluation->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_9community_LocalPartitionEvaluation)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  if (p->_P) {
    e = (*v)(((PyObject *)p->_P), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_9community_LocalPartitionEvaluation(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *p = (struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation *)o;
  if (likely(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation)) { if (__pyx_ptype_9networkit_9community_LocalCommunityEvaluation->tp_clear) __pyx_ptype_9networkit_9community_LocalCommunityEvaluation->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_9community_LocalPartitionEvaluation);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_P);
  p->_P = ((struct __pyx_obj_9networkit_10structures_Partition *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_9community_LocalPartitionEvaluation[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalPartitionEvaluation_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_24LocalPartitionEvaluation_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_LocalPartitionEvaluation_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_LocalPartitionEvaluation},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tLocalPartitionEvaluation(G, P)\n\t\n\tVirtual base class of all evaluation methods for a single clustering which is based on the evaluation of single clusters.\n\tThis is the base class for Partitions.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_LocalPartitionEvaluation},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_LocalPartitionEvaluation},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_LocalPartitionEvaluation},
  {Py_tp_init, (void *)__pyx_pw_9networkit_9community_24LocalPartitionEvaluation_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_LocalPartitionEvaluation},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_LocalPartitionEvaluation_spec = {
  "networkit.community.LocalPartitionEvaluation",
  sizeof(struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_LocalPartitionEvaluation_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_LocalPartitionEvaluation = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""LocalPartitionEvaluation", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_LocalPartitionEvaluation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_LocalPartitionEvaluation, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tLocalPartitionEvaluation(G, P)\n\t\n\tVirtual base class of all evaluation methods for a single clustering which is based on the evaluation of single clusters.\n\tThis is the base class for Partitions.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_LocalPartitionEvaluation, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_LocalPartitionEvaluation, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_LocalPartitionEvaluation, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9networkit_9community_24LocalPartitionEvaluation_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_LocalPartitionEvaluation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_LocalCoverEvaluation(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  p->_C = ((struct __pyx_obj_9networkit_10structures_Cover *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_9community_20LocalCoverEvaluation_3__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_9community_LocalCoverEvaluation(PyObject *o) {
  struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *p = (struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_LocalCoverEvaluation) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_9community_20LocalCoverEvaluation_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_G);
  Py_CLEAR(p->_C);
  if (likely(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_9community_LocalCoverEvaluation);
}

static int __pyx_tp_traverse_9networkit_9community_LocalCoverEvaluation(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *p = (struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *)o;
  e = ((likely(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation)) ? ((__pyx_ptype_9networkit_9community_LocalCommunityEvaluation->tp_traverse) ? __pyx_ptype_9networkit_9community_LocalCommunityEvaluation->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_9community_LocalCoverEvaluation)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  if (p->_C) {
    e = (*v)(((PyObject *)p->_C), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_9community_LocalCoverEvaluation(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *p = (struct __pyx_obj_9networkit_9community_LocalCoverEvaluation *)o;
  if (likely(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation)) { if (__pyx_ptype_9networkit_9community_LocalCommunityEvaluation->tp_clear) __pyx_ptype_9networkit_9community_LocalCommunityEvaluation->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_9community_LocalCoverEvaluation);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_C);
  p->_C = ((struct __pyx_obj_9networkit_10structures_Cover *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_9community_LocalCoverEvaluation[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20LocalCoverEvaluation_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20LocalCoverEvaluation_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_LocalCoverEvaluation_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_LocalCoverEvaluation},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tLocalCoverEvaluation(G, P)\n\n\tVirtual base class of all evaluation methods for a single clustering which is based on the evaluation of single clusters.\n\tThis is the base class for Covers.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_LocalCoverEvaluation},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_LocalCoverEvaluation},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_LocalCoverEvaluation},
  {Py_tp_init, (void *)__pyx_pw_9networkit_9community_20LocalCoverEvaluation_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_LocalCoverEvaluation},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_LocalCoverEvaluation_spec = {
  "networkit.community.LocalCoverEvaluation",
  sizeof(struct __pyx_obj_9networkit_9community_LocalCoverEvaluation),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_LocalCoverEvaluation_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_LocalCoverEvaluation = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""LocalCoverEvaluation", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_LocalCoverEvaluation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_LocalCoverEvaluation, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tLocalCoverEvaluation(G, P)\n\n\tVirtual base class of all evaluation methods for a single clustering which is based on the evaluation of single clusters.\n\tThis is the base class for Covers.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_LocalCoverEvaluation, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_LocalCoverEvaluation, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_LocalCoverEvaluation, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9networkit_9community_20LocalCoverEvaluation_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_LocalCoverEvaluation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_IntrapartitionDensity(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_9community_LocalPartitionEvaluation(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_9community_21IntrapartitionDensity_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_9community_IntrapartitionDensity[] = {
  {"getGlobal", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_21IntrapartitionDensity_3getGlobal, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_21IntrapartitionDensity_2getGlobal},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_21IntrapartitionDensity_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_21IntrapartitionDensity_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_IntrapartitionDensity_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n\tIntrapartitionDensity(G, P)\n\t\n\tThe intra-cluster density of a partition is defined as the number of existing edges divided by the number of possible edges.\n\tThe global value is the sum of all existing intra-cluster edges divided by the sum of all possible intra-cluster edges.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the measure shall be evaluated.\n\tP : networkit.Partition\n\t\tThe partition that shall be evaluated.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_LocalPartitionEvaluation},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_LocalPartitionEvaluation},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_IntrapartitionDensity},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_IntrapartitionDensity},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_IntrapartitionDensity_spec = {
  "networkit.community.IntrapartitionDensity",
  sizeof(struct __pyx_obj_9networkit_9community_IntrapartitionDensity),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_IntrapartitionDensity_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_IntrapartitionDensity = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""IntrapartitionDensity", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_IntrapartitionDensity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_LocalPartitionEvaluation, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tIntrapartitionDensity(G, P)\n\t\n\tThe intra-cluster density of a partition is defined as the number of existing edges divided by the number of possible edges.\n\tThe global value is the sum of all existing intra-cluster edges divided by the sum of all possible intra-cluster edges.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the measure shall be evaluated.\n\tP : networkit.Partition\n\t\tThe partition that shall be evaluated.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_LocalPartitionEvaluation, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_LocalPartitionEvaluation, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_IntrapartitionDensity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_9community_24LocalPartitionEvaluation_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_IntrapartitionDensity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_IsolatedInterpartitionConductance(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_9community_LocalPartitionEvaluation(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_9community_33IsolatedInterpartitionConductance_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_9community_IsolatedInterpartitionConductance[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_33IsolatedInterpartitionConductance_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_33IsolatedInterpartitionConductance_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_IsolatedInterpartitionConductance_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n\tIsolatedInterpartitionConductance(G, P)\n\t\n\tIsolated inter-partition conductance is a measure for how well a partition\n\t(communtiy/cluster) is separated from the rest of the graph.\n\n\tThe conductance of a partition is defined as the weight of the cut divided\n\tby the volume (the sum of the degrees) of the nodes in the partition or the\n\tnodes in the rest of the graph, whatever is smaller. Small values thus indicate\n\tthat the cut is small compared to the volume of the smaller of the separated\n\tparts. For the whole partitions usually the maximum or the unweighted average\n\tis used.\n\n\tSee also Experiments on Density-Constrained Graph Clustering,\n\tRobert Grke, Andrea Kappes and  Dorothea Wagner, JEA 2015:\n\thttp://dx.doi.org/10.1145/2638551\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the measure shall be evaluated.\n\tP : networkit.Partition\n\t\tThe partition that shall be evaluated.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_LocalPartitionEvaluation},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_LocalPartitionEvaluation},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_IsolatedInterpartitionConductance},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_IsolatedInterpartitionConductance},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_IsolatedInterpartitionConductance_spec = {
  "networkit.community.IsolatedInterpartitionConductance",
  sizeof(struct __pyx_obj_9networkit_9community_IsolatedInterpartitionConductance),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_IsolatedInterpartitionConductance_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_IsolatedInterpartitionConductance = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""IsolatedInterpartitionConductance", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_IsolatedInterpartitionConductance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_LocalPartitionEvaluation, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tIsolatedInterpartitionConductance(G, P)\n\t\n\tIsolated inter-partition conductance is a measure for how well a partition\n\t(communtiy/cluster) is separated from the rest of the graph.\n\n\tThe conductance of a partition is defined as the weight of the cut divided\n\tby the volume (the sum of the degrees) of the nodes in the partition or the\n\tnodes in the rest of the graph, whatever is smaller. Small values thus indicate\n\tthat the cut is small compared to the volume of the smaller of the separated\n\tparts. For the whole partitions usually the maximum or the unweighted average\n\tis used.\n\n\tSee also Experiments on Density-Constrained Graph Clustering,\n\tRobert Grke, Andrea Kappes and  Dorothea Wagner, JEA 2015:\n\thttp://dx.doi.org/10.1145/2638551\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the measure shall be evaluated.\n\tP : networkit.Partition\n\t\tThe partition that shall be evaluated.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_LocalPartitionEvaluation, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_LocalPartitionEvaluation, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_IsolatedInterpartitionConductance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_9community_24LocalPartitionEvaluation_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_IsolatedInterpartitionConductance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_IsolatedInterpartitionExpansion(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_9community_LocalPartitionEvaluation(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_9community_31IsolatedInterpartitionExpansion_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_9community_IsolatedInterpartitionExpansion[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_31IsolatedInterpartitionExpansion_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_31IsolatedInterpartitionExpansion_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_IsolatedInterpartitionExpansion_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n\tIsolatedInterpartitionExpansion(G, P)\n\t\n\tIsolated inter-partition expansion is a measure for how well a partition\n\t(communtiy/cluster) is separated from the rest of the graph.\n\n\tThe expansion of a partition is defined as the weight of the cut divided\n\tby number of nodes in the partition or in the rest of the graph, whatever\n\tis smaller. Small values thus indicate that the cut is small compared to\n\tthe size of the smaller of the separated parts. For the whole partitions\n\tusually the maximum or the unweighted average is used. Note that expansion\n\tvalues can be larger than 1.\n\n\tSee also Experiments on Density-Constrained Graph Clustering,\n\tRobert Grke, Andrea Kappes and Dorothea Wagner, JEA 2015:\n\thttp://dx.doi.org/10.1145/2638551\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the measure shall be evaluated.\n\tP : networkit.Partition\n\t\tThe partition that shall be evaluated.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_LocalPartitionEvaluation},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_LocalPartitionEvaluation},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_IsolatedInterpartitionExpansion},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_IsolatedInterpartitionExpansion},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_IsolatedInterpartitionExpansion_spec = {
  "networkit.community.IsolatedInterpartitionExpansion",
  sizeof(struct __pyx_obj_9networkit_9community_IsolatedInterpartitionExpansion),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_IsolatedInterpartitionExpansion_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_IsolatedInterpartitionExpansion = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""IsolatedInterpartitionExpansion", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_IsolatedInterpartitionExpansion), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_LocalPartitionEvaluation, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tIsolatedInterpartitionExpansion(G, P)\n\t\n\tIsolated inter-partition expansion is a measure for how well a partition\n\t(communtiy/cluster) is separated from the rest of the graph.\n\n\tThe expansion of a partition is defined as the weight of the cut divided\n\tby number of nodes in the partition or in the rest of the graph, whatever\n\tis smaller. Small values thus indicate that the cut is small compared to\n\tthe size of the smaller of the separated parts. For the whole partitions\n\tusually the maximum or the unweighted average is used. Note that expansion\n\tvalues can be larger than 1.\n\n\tSee also Experiments on Density-Constrained Graph Clustering,\n\tRobert Grke, Andrea Kappes and Dorothea Wagner, JEA 2015:\n\thttp://dx.doi.org/10.1145/2638551\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the measure shall be evaluated.\n\tP : networkit.Partition\n\t\tThe partition that shall be evaluated.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_LocalPartitionEvaluation, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_LocalPartitionEvaluation, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_IsolatedInterpartitionExpansion, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_9community_24LocalPartitionEvaluation_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_IsolatedInterpartitionExpansion, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_CoverHubDominance(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_9community_LocalCoverEvaluation(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_9community_17CoverHubDominance_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_9community_CoverHubDominance[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_17CoverHubDominance_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_17CoverHubDominance_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_CoverHubDominance_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n\tCoverHubDominance(G, C)\n\t\n\tA quality measure that measures the dominance of hubs in clusters. The hub dominance of a single\n\tcluster is defined as the maximum cluster-internal degree of a node in that cluster divided by\n\tthe maximum cluster-internal degree, i.e. the number of nodes in the cluster minus one. The\n\tvalue for all clusters is defined as the average of all clusters.\n\tThis implementation is a natural generalization of this measure for covers.\n\tStrictly speaking this is not a quality measure as this is rather dependent on the type of the\n\tconsidered graph, for more information see\n\tLancichinetti A, Kivel M, Saramki J, Fortunato S (2010)\n\tCharacterizing the Community Structure of Complex Networks\n\tPLoS ONE 5(8): e11976. doi: 10.1371/journal.pone.0011976\n\thttp://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0011976\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the measure shall be evaluated.\n\tC : networkit.Cover\n\t\tThe cover that shall be evaluated.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_LocalCoverEvaluation},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_LocalCoverEvaluation},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_CoverHubDominance},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_CoverHubDominance},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_CoverHubDominance_spec = {
  "networkit.community.CoverHubDominance",
  sizeof(struct __pyx_obj_9networkit_9community_CoverHubDominance),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_CoverHubDominance_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_CoverHubDominance = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""CoverHubDominance", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_CoverHubDominance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_LocalCoverEvaluation, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tCoverHubDominance(G, C)\n\t\n\tA quality measure that measures the dominance of hubs in clusters. The hub dominance of a single\n\tcluster is defined as the maximum cluster-internal degree of a node in that cluster divided by\n\tthe maximum cluster-internal degree, i.e. the number of nodes in the cluster minus one. The\n\tvalue for all clusters is defined as the average of all clusters.\n\tThis implementation is a natural generalization of this measure for covers.\n\tStrictly speaking this is not a quality measure as this is rather dependent on the type of the\n\tconsidered graph, for more information see\n\tLancichinetti A, Kivel M, Saramki J, Fortunato S (2010)\n\tCharacterizing the Community Structure of Complex Networks\n\tPLoS ONE 5(8): e11976. doi: 10.1371/journal.pone.0011976\n\thttp://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0011976\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the measure shall be evaluated.\n\tC : networkit.Cover\n\t\tThe cover that shall be evaluated.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_LocalCoverEvaluation, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_LocalCoverEvaluation, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_CoverHubDominance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_9community_20LocalCoverEvaluation_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_CoverHubDominance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_PartitionHubDominance(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_9community_LocalPartitionEvaluation(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_9community_21PartitionHubDominance_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_9community_PartitionHubDominance[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_21PartitionHubDominance_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_21PartitionHubDominance_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_PartitionHubDominance_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n\tPartitionHubDominance(G, P)\n\t\n\tA quality measure that measures the dominance of hubs in clusters. The hub dominance of a single\n\tcluster is defined as the maximum cluster-internal degree of a node in that cluster divided by\n\tthe maximum cluster-internal degree, i.e. the number of nodes in the cluster minus one. The\n\tvalue for all clusters is defined as the average of all clusters.\n\tStrictly speaking this is not a quality measure as this is rather dependent on the type of the\n\tconsidered graph, for more information see\n\tLancichinetti A, Kivel M, Saramki J, Fortunato S (2010)\n\tCharacterizing the Community Structure of Complex Networks\n\tPLoS ONE 5(8): e11976. doi: 10.1371/journal.pone.0011976\n\thttp://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0011976\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the measure shall be evaluated.\n\tP : networkit.Partition\n\t\tThe partition that shall be evaluated.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_LocalPartitionEvaluation},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_LocalPartitionEvaluation},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_PartitionHubDominance},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_PartitionHubDominance},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_PartitionHubDominance_spec = {
  "networkit.community.PartitionHubDominance",
  sizeof(struct __pyx_obj_9networkit_9community_PartitionHubDominance),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_PartitionHubDominance_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_PartitionHubDominance = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""PartitionHubDominance", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_PartitionHubDominance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_LocalPartitionEvaluation, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tPartitionHubDominance(G, P)\n\t\n\tA quality measure that measures the dominance of hubs in clusters. The hub dominance of a single\n\tcluster is defined as the maximum cluster-internal degree of a node in that cluster divided by\n\tthe maximum cluster-internal degree, i.e. the number of nodes in the cluster minus one. The\n\tvalue for all clusters is defined as the average of all clusters.\n\tStrictly speaking this is not a quality measure as this is rather dependent on the type of the\n\tconsidered graph, for more information see\n\tLancichinetti A, Kivel M, Saramki J, Fortunato S (2010)\n\tCharacterizing the Community Structure of Complex Networks\n\tPLoS ONE 5(8): e11976. doi: 10.1371/journal.pone.0011976\n\thttp://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0011976\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the measure shall be evaluated.\n\tP : networkit.Partition\n\t\tThe partition that shall be evaluated.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_LocalPartitionEvaluation, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_LocalPartitionEvaluation, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_PartitionHubDominance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_9community_24LocalPartitionEvaluation_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_PartitionHubDominance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_PartitionFragmentation(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_9community_LocalPartitionEvaluation(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_9community_22PartitionFragmentation_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_9community_PartitionFragmentation[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_22PartitionFragmentation_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_22PartitionFragmentation_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_PartitionFragmentation_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n\tPartitionFragmentation(G, P)\n\t\n\tThis measure evaluates how fragmented a partition is. The fragmentation of a single cluster is defined as one minus the\n\tnumber of nodes in its maximum connected componented divided by its total number of nodes. Smaller values thus indicate a smaller fragmentation.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the measure shall be evaluated.\n\tP : networkit.Partition\n\t\tThe partition that shall be evaluated.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_LocalPartitionEvaluation},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_LocalPartitionEvaluation},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_PartitionFragmentation},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_PartitionFragmentation},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_PartitionFragmentation_spec = {
  "networkit.community.PartitionFragmentation",
  sizeof(struct __pyx_obj_9networkit_9community_PartitionFragmentation),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_PartitionFragmentation_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_PartitionFragmentation = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""PartitionFragmentation", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_PartitionFragmentation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_LocalPartitionEvaluation, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tPartitionFragmentation(G, P)\n\t\n\tThis measure evaluates how fragmented a partition is. The fragmentation of a single cluster is defined as one minus the\n\tnumber of nodes in its maximum connected componented divided by its total number of nodes. Smaller values thus indicate a smaller fragmentation.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the measure shall be evaluated.\n\tP : networkit.Partition\n\t\tThe partition that shall be evaluated.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_LocalPartitionEvaluation, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_LocalPartitionEvaluation, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_PartitionFragmentation, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_9community_24LocalPartitionEvaluation_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_PartitionFragmentation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_StablePartitionNodes(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_9community_LocalPartitionEvaluation(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_9community_20StablePartitionNodes_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_9community_StablePartitionNodes[] = {
  {"isStable", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20StablePartitionNodes_3isStable, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_20StablePartitionNodes_2isStable},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20StablePartitionNodes_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_20StablePartitionNodes_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_StablePartitionNodes_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n\tStablePartitionNodes(G, P)\n\t\n\tEvaluates how stable a given partition is. A node is considered to be stable if it has strictly more connections\n\tto its own partition than to other partitions. Isolated nodes are considered to be stable.\n\tThe value of a cluster is the percentage of stable nodes in the cluster.\n\tLarger values indicate that a clustering is more stable and thus better defined.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the measure shall be evaluated.\n\tP : networkit.Partition\n\t\tThe partition that shall be evaluated.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_LocalPartitionEvaluation},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_LocalPartitionEvaluation},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_StablePartitionNodes},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_StablePartitionNodes},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_StablePartitionNodes_spec = {
  "networkit.community.StablePartitionNodes",
  sizeof(struct __pyx_obj_9networkit_9community_StablePartitionNodes),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_StablePartitionNodes_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_StablePartitionNodes = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""StablePartitionNodes", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_StablePartitionNodes), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_LocalPartitionEvaluation, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tStablePartitionNodes(G, P)\n\t\n\tEvaluates how stable a given partition is. A node is considered to be stable if it has strictly more connections\n\tto its own partition than to other partitions. Isolated nodes are considered to be stable.\n\tThe value of a cluster is the percentage of stable nodes in the cluster.\n\tLarger values indicate that a clustering is more stable and thus better defined.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the measure shall be evaluated.\n\tP : networkit.Partition\n\t\tThe partition that shall be evaluated.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_LocalPartitionEvaluation, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_LocalPartitionEvaluation, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_StablePartitionNodes, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_9community_24LocalPartitionEvaluation_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_StablePartitionNodes, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_CoverF1Similarity(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_9community_CoverF1Similarity *p;
  PyObject *o = __pyx_tp_new_9networkit_9community_LocalCoverEvaluation(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_9community_CoverF1Similarity *)o);
  p->_reference = ((struct __pyx_obj_9networkit_10structures_Cover *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_9community_17CoverF1Similarity_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_9community_CoverF1Similarity(PyObject *o) {
  struct __pyx_obj_9networkit_9community_CoverF1Similarity *p = (struct __pyx_obj_9networkit_9community_CoverF1Similarity *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_CoverF1Similarity) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_reference);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9networkit_9community_LocalCoverEvaluation(o);
}

static int __pyx_tp_traverse_9networkit_9community_CoverF1Similarity(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_9community_CoverF1Similarity *p = (struct __pyx_obj_9networkit_9community_CoverF1Similarity *)o;
  e = __pyx_tp_traverse_9networkit_9community_LocalCoverEvaluation(o, v, a); if (e) return e;
  if (p->_reference) {
    e = (*v)(((PyObject *)p->_reference), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_9community_CoverF1Similarity(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_9community_CoverF1Similarity *p = (struct __pyx_obj_9networkit_9community_CoverF1Similarity *)o;
  __pyx_tp_clear_9networkit_9community_LocalCoverEvaluation(o);
  tmp = ((PyObject*)p->_reference);
  p->_reference = ((struct __pyx_obj_9networkit_10structures_Cover *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_9community_CoverF1Similarity[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_17CoverF1Similarity_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_17CoverF1Similarity_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_CoverF1Similarity_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_CoverF1Similarity},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tCoverF1Similarity(G, C, reference)\n\t\n\tCompare a given cover to a reference cover using the F1 measure.\n\tThis is a typical similarity measure used to compare the found\n\toverlapping community structure to a ground truth community\n\tstructure. Each cluster is compared to the best-matching reference\n\tcluster (in terms of highest F1 score). A value of 1 indicates\n\tperfect agreement while a while of 0 indicates complete\n\tdisagreement. An example where this measure is used is the\n\tfollowing paper:\n\n\tAlessandro Epasto, Silvio Lattanzi, and Renato Paes\n\tLeme. 2017. Ego-Splitting Framework: from Non-Overlapping to\n\tOverlapping Clusters. In Proceedings of the 23rd ACM SIGKDD\n\tInternational Conference on Knowledge Discovery and Data Mining\n\t(KDD '17). ACM, New York, NY, USA, 145-154. DOI:\n\thttps://doi.org/10.1145/3097983.3098054\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the evaluation is performed.\n\tC : networkit.Cover\n\t\tThe cover that shall be evaluated.\n\treference : networkit.Cover\n\t\tThe cover to which the similarity shall be computed.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_9community_CoverF1Similarity},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_9community_CoverF1Similarity},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_CoverF1Similarity},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_CoverF1Similarity},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_CoverF1Similarity_spec = {
  "networkit.community.CoverF1Similarity",
  sizeof(struct __pyx_obj_9networkit_9community_CoverF1Similarity),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_9community_CoverF1Similarity_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_CoverF1Similarity = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""CoverF1Similarity", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_CoverF1Similarity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_CoverF1Similarity, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tCoverF1Similarity(G, C, reference)\n\t\n\tCompare a given cover to a reference cover using the F1 measure.\n\tThis is a typical similarity measure used to compare the found\n\toverlapping community structure to a ground truth community\n\tstructure. Each cluster is compared to the best-matching reference\n\tcluster (in terms of highest F1 score). A value of 1 indicates\n\tperfect agreement while a while of 0 indicates complete\n\tdisagreement. An example where this measure is used is the\n\tfollowing paper:\n\n\tAlessandro Epasto, Silvio Lattanzi, and Renato Paes\n\tLeme. 2017. Ego-Splitting Framework: from Non-Overlapping to\n\tOverlapping Clusters. In Proceedings of the 23rd ACM SIGKDD\n\tInternational Conference on Knowledge Discovery and Data Mining\n\t(KDD '17). ACM, New York, NY, USA, 145-154. DOI:\n\thttps://doi.org/10.1145/3097983.3098054\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph on which the evaluation is performed.\n\tC : networkit.Cover\n\t\tThe cover that shall be evaluated.\n\treference : networkit.Cover\n\t\tThe cover to which the similarity shall be computed.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_9community_CoverF1Similarity, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9community_CoverF1Similarity, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_CoverF1Similarity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_9community_20LocalCoverEvaluation_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_CoverF1Similarity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_9community_OverlappingNMIDistance(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *p;
  PyObject *o = __pyx_tp_new_9networkit_9community_DissimilarityMeasure(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *)o);
  new((void*)&(p->_this)) NetworKit::OverlappingNMIDistance();
  if (unlikely(__pyx_pw_9networkit_9community_22OverlappingNMIDistance_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_9community_OverlappingNMIDistance(PyObject *o) {
  struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *p = (struct __pyx_obj_9networkit_9community_OverlappingNMIDistance *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_9community_OverlappingNMIDistance) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->_this);
  __pyx_tp_dealloc_9networkit_9community_DissimilarityMeasure(o);
}

static PyMethodDef __pyx_methods_9networkit_9community_OverlappingNMIDistance[] = {
  {"setNormalization", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_22OverlappingNMIDistance_3setNormalization, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_9community_22OverlappingNMIDistance_2setNormalization},
  {"_validateNormalization", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_22OverlappingNMIDistance_7_validateNormalization, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__pyx_fuse_0getDissimilarity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_fuse_0__pyx_pw_9networkit_9community_22OverlappingNMIDistance_9getDissimilarity, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_9community_22OverlappingNMIDistance_4getDissimilarity},
  {"__pyx_fuse_1getDissimilarity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_fuse_1__pyx_pw_9networkit_9community_22OverlappingNMIDistance_11getDissimilarity, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_9community_22OverlappingNMIDistance_4getDissimilarity},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_22OverlappingNMIDistance_15__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_9community_22OverlappingNMIDistance_17__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_9community_OverlappingNMIDistance_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_9community_OverlappingNMIDistance},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tOverlappingNMIDistance(normalization = networkit.community.Normalization.MAX)\n\t\n\tCompare two covers using the overlapping normalized mutual information measure. This is a dissimilarity measure with\n\ta range of [0, 1]. A value of 0 indicates a perfect agreement while a 1 indicates complete disagreement.\n\n\tFor `networkit.community.Normalization.Max` normalization, this is the measure introduced in [NMI13]. Other normalization\n\tmethods result in similar measures.\n\n\tParameter :code:`normalization` can be one of the following:\n\n\t- networkit.community.Normalization.MIN\n\t- networkit.community.Normalization.GEOMETRIC_MEAN\n\t- networkit.community.Normalization.ARITHMETIC_MEAN\n\t- networkit.community.Normalization.MAX\n\t- networkit.community.Normalization.JOINT_ENTROPY\n\n\tParameters\n\t----------\n\tnormalization : networkit.community.Normalization, optional\n\t\tNormalization strategy for OverlappingNMIDistance. Default: networkit.community.Normalization.MAX\n\n\tRaises\n\t------\n\tValueError\n\t    If `normalization` is not one of the available methods.\n\n\tReferences\n\t----------\n\t[NMI13]\n\t\tMcDaid, Aaron F., Derek Greene, and Neil Hurley. \"Normalized Mutual Information to Evaluate Overlapping\n\t\tCommunity Finding Algorithms.\" ArXiv:1110.2515 [Physics], August 2, 2013. http://arxiv.org/abs/1110.2515.\n\t")},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_9community_OverlappingNMIDistance},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_9community_OverlappingNMIDistance},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_9community_OverlappingNMIDistance_spec = {
  "networkit.community.OverlappingNMIDistance",
  sizeof(struct __pyx_obj_9networkit_9community_OverlappingNMIDistance),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9networkit_9community_OverlappingNMIDistance_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_9community_OverlappingNMIDistance = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.community.""OverlappingNMIDistance", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9community_OverlappingNMIDistance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9community_OverlappingNMIDistance, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n\tOverlappingNMIDistance(normalization = networkit.community.Normalization.MAX)\n\t\n\tCompare two covers using the overlapping normalized mutual information measure. This is a dissimilarity measure with\n\ta range of [0, 1]. A value of 0 indicates a perfect agreement while a 1 indicates complete disagreement.\n\n\tFor `networkit.community.Normalization.Max` normalization, this is the measure introduced in [NMI13]. Other normalization\n\tmethods result in similar measures.\n\n\tParameter :code:`normalization` can be one of the following:\n\n\t- networkit.community.Normalization.MIN\n\t- networkit.community.Normalization.GEOMETRIC_MEAN\n\t- networkit.community.Normalization.ARITHMETIC_MEAN\n\t- networkit.community.Normalization.MAX\n\t- networkit.community.Normalization.JOINT_ENTROPY\n\n\tParameters\n\t----------\n\tnormalization : networkit.community.Normalization, optional\n\t\tNormalization strategy for OverlappingNMIDistance. Default: networkit.community.Normalization.MAX\n\n\tRaises\n\t------\n\tValueError\n\t    If `normalization` is not one of the available methods.\n\n\tReferences\n\t----------\n\t[NMI13]\n\t\tMcDaid, Aaron F., Derek Greene, and Neil Hurley. \"Normalized Mutual Information to Evaluate Overlapping\n\t\tCommunity Finding Algorithms.\" ArXiv:1110.2515 [Physics], August 2, 2013. http://arxiv.org/abs/1110.2515.\n\t"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_9community_OverlappingNMIDistance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9community_OverlappingNMIDistance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_0_is_not_a_file, __pyx_k_0_is_not_a_file, sizeof(__pyx_k_0_is_not_a_file), 0, 1, 0, 0},
    {&__pyx_n_s_ARITHMETIC_MEAN, __pyx_k_ARITHMETIC_MEAN, sizeof(__pyx_k_ARITHMETIC_MEAN), 0, 0, 1, 1},
    {&__pyx_n_s_AdjustedRandMeasure, __pyx_k_AdjustedRandMeasure, sizeof(__pyx_k_AdjustedRandMeasure), 0, 0, 1, 1},
    {&__pyx_n_s_AdjustedRandMeasure___reduce_cyt, __pyx_k_AdjustedRandMeasure___reduce_cyt, sizeof(__pyx_k_AdjustedRandMeasure___reduce_cyt), 0, 0, 1, 1},
    {&__pyx_n_s_AdjustedRandMeasure___setstate_c, __pyx_k_AdjustedRandMeasure___setstate_c, sizeof(__pyx_k_AdjustedRandMeasure___setstate_c), 0, 0, 1, 1},
    {&__pyx_n_s_AdjustedRandMeasure_getDissimila, __pyx_k_AdjustedRandMeasure_getDissimila, sizeof(__pyx_k_AdjustedRandMeasure_getDissimila), 0, 0, 1, 1},
    {&__pyx_n_s_ArithmeticMean, __pyx_k_ArithmeticMean, sizeof(__pyx_k_ArithmeticMean), 0, 0, 1, 1},
    {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
    {&__pyx_n_s_BinaryEdgeListPartitionReader, __pyx_k_BinaryEdgeListPartitionReader, sizeof(__pyx_k_BinaryEdgeListPartitionReader), 0, 0, 1, 1},
    {&__pyx_n_s_BinaryEdgeListPartitionWriter, __pyx_k_BinaryEdgeListPartitionWriter, sizeof(__pyx_k_BinaryEdgeListPartitionWriter), 0, 0, 1, 1},
    {&__pyx_n_s_BinaryPartitionReader, __pyx_k_BinaryPartitionReader, sizeof(__pyx_k_BinaryPartitionReader), 0, 0, 1, 1},
    {&__pyx_n_s_BinaryPartitionWriter, __pyx_k_BinaryPartitionWriter, sizeof(__pyx_k_BinaryPartitionWriter), 0, 0, 1, 1},
    {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
    {&__pyx_n_s_ClusteringGenerator, __pyx_k_ClusteringGenerator, sizeof(__pyx_k_ClusteringGenerator), 0, 0, 1, 1},
    {&__pyx_n_s_ClusteringGenerator___reduce_cyt, __pyx_k_ClusteringGenerator___reduce_cyt, sizeof(__pyx_k_ClusteringGenerator___reduce_cyt), 0, 0, 1, 1},
    {&__pyx_n_s_ClusteringGenerator___setstate_c, __pyx_k_ClusteringGenerator___setstate_c, sizeof(__pyx_k_ClusteringGenerator___setstate_c), 0, 0, 1, 1},
    {&__pyx_n_s_ClusteringGenerator_makeContinuo, __pyx_k_ClusteringGenerator_makeContinuo, sizeof(__pyx_k_ClusteringGenerator_makeContinuo), 0, 0, 1, 1},
    {&__pyx_n_s_ClusteringGenerator_makeNonconti, __pyx_k_ClusteringGenerator_makeNonconti, sizeof(__pyx_k_ClusteringGenerator_makeNonconti), 0, 0, 1, 1},
    {&__pyx_n_s_ClusteringGenerator_makeOneClust, __pyx_k_ClusteringGenerator_makeOneClust, sizeof(__pyx_k_ClusteringGenerator_makeOneClust), 0, 0, 1, 1},
    {&__pyx_n_s_ClusteringGenerator_makeRandomCl, __pyx_k_ClusteringGenerator_makeRandomCl, sizeof(__pyx_k_ClusteringGenerator_makeRandomCl), 0, 0, 1, 1},
    {&__pyx_n_s_ClusteringGenerator_makeSingleto, __pyx_k_ClusteringGenerator_makeSingleto, sizeof(__pyx_k_ClusteringGenerator_makeSingleto), 0, 0, 1, 1},
    {&__pyx_kp_u_Communities_detected_in_5f_s, __pyx_k_Communities_detected_in_5f_s, sizeof(__pyx_k_Communities_detected_in_5f_s), 0, 1, 0, 0},
    {&__pyx_n_s_CommunityDetector, __pyx_k_CommunityDetector, sizeof(__pyx_k_CommunityDetector), 0, 0, 1, 1},
    {&__pyx_n_s_CommunityDetector___reduce_cytho, __pyx_k_CommunityDetector___reduce_cytho, sizeof(__pyx_k_CommunityDetector___reduce_cytho), 0, 0, 1, 1},
    {&__pyx_n_s_CommunityDetector___setstate_cyt, __pyx_k_CommunityDetector___setstate_cyt, sizeof(__pyx_k_CommunityDetector___setstate_cyt), 0, 0, 1, 1},
    {&__pyx_n_s_CommunityDetector_getPartition, __pyx_k_CommunityDetector_getPartition, sizeof(__pyx_k_CommunityDetector_getPartition), 0, 0, 1, 1},
    {&__pyx_n_s_CoreDecomposition, __pyx_k_CoreDecomposition, sizeof(__pyx_k_CoreDecomposition), 0, 0, 1, 1},
    {&__pyx_n_s_Cover, __pyx_k_Cover, sizeof(__pyx_k_Cover), 0, 0, 1, 1},
    {&__pyx_n_s_CoverF1Similarity, __pyx_k_CoverF1Similarity, sizeof(__pyx_k_CoverF1Similarity), 0, 0, 1, 1},
    {&__pyx_n_s_CoverF1Similarity___reduce_cytho, __pyx_k_CoverF1Similarity___reduce_cytho, sizeof(__pyx_k_CoverF1Similarity___reduce_cytho), 0, 0, 1, 1},
    {&__pyx_n_s_CoverF1Similarity___setstate_cyt, __pyx_k_CoverF1Similarity___setstate_cyt, sizeof(__pyx_k_CoverF1Similarity___setstate_cyt), 0, 0, 1, 1},
    {&__pyx_n_s_CoverHubDominance, __pyx_k_CoverHubDominance, sizeof(__pyx_k_CoverHubDominance), 0, 0, 1, 1},
    {&__pyx_n_s_CoverHubDominance___reduce_cytho, __pyx_k_CoverHubDominance___reduce_cytho, sizeof(__pyx_k_CoverHubDominance___reduce_cytho), 0, 0, 1, 1},
    {&__pyx_n_s_CoverHubDominance___setstate_cyt, __pyx_k_CoverHubDominance___setstate_cyt, sizeof(__pyx_k_CoverHubDominance___setstate_cyt), 0, 0, 1, 1},
    {&__pyx_n_s_Coverage, __pyx_k_Coverage, sizeof(__pyx_k_Coverage), 0, 0, 1, 1},
    {&__pyx_n_s_Coverage___reduce_cython, __pyx_k_Coverage___reduce_cython, sizeof(__pyx_k_Coverage___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Coverage___setstate_cython, __pyx_k_Coverage___setstate_cython, sizeof(__pyx_k_Coverage___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Coverage_getQuality, __pyx_k_Coverage_getQuality, sizeof(__pyx_k_Coverage_getQuality), 0, 0, 1, 1},
    {&__pyx_n_s_CutClustering, __pyx_k_CutClustering, sizeof(__pyx_k_CutClustering), 0, 0, 1, 1},
    {&__pyx_n_s_CutClustering___reduce_cython, __pyx_k_CutClustering___reduce_cython, sizeof(__pyx_k_CutClustering___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_CutClustering___setstate_cython, __pyx_k_CutClustering___setstate_cython, sizeof(__pyx_k_CutClustering___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_CutClustering_getClusterHierarch, __pyx_k_CutClustering_getClusterHierarch, sizeof(__pyx_k_CutClustering_getClusterHierarch), 0, 0, 1, 1},
    {&__pyx_n_s_DissimilarityMeasure, __pyx_k_DissimilarityMeasure, sizeof(__pyx_k_DissimilarityMeasure), 0, 0, 1, 1},
    {&__pyx_n_s_DissimilarityMeasure___reduce_cy, __pyx_k_DissimilarityMeasure___reduce_cy, sizeof(__pyx_k_DissimilarityMeasure___reduce_cy), 0, 0, 1, 1},
    {&__pyx_n_s_DissimilarityMeasure___setstate, __pyx_k_DissimilarityMeasure___setstate, sizeof(__pyx_k_DissimilarityMeasure___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_EdgeCut, __pyx_k_EdgeCut, sizeof(__pyx_k_EdgeCut), 0, 0, 1, 1},
    {&__pyx_n_s_EdgeCut___reduce_cython, __pyx_k_EdgeCut___reduce_cython, sizeof(__pyx_k_EdgeCut___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_EdgeCut___setstate_cython, __pyx_k_EdgeCut___setstate_cython, sizeof(__pyx_k_EdgeCut___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_EdgeCut_getQuality, __pyx_k_EdgeCut_getQuality, sizeof(__pyx_k_EdgeCut_getQuality), 0, 0, 1, 1},
    {&__pyx_n_s_EdgeListPartitionReader, __pyx_k_EdgeListPartitionReader, sizeof(__pyx_k_EdgeListPartitionReader), 0, 0, 1, 1},
    {&__pyx_kp_u_Error_first_and_second_must_both, __pyx_k_Error_first_and_second_must_both, sizeof(__pyx_k_Error_first_and_second_must_both), 0, 1, 0, 0},
    {&__pyx_kp_u_Error_invalid_normalization_meth, __pyx_k_Error_invalid_normalization_meth, sizeof(__pyx_k_Error_invalid_normalization_meth), 0, 1, 0, 0},
    {&__pyx_kp_u_Error_object_not_properly_initia, __pyx_k_Error_object_not_properly_initia, sizeof(__pyx_k_Error_object_not_properly_initia), 0, 1, 0, 0},
    {&__pyx_kp_u_Error_you_may_not_use_CommunityD, __pyx_k_Error_you_may_not_use_CommunityD, sizeof(__pyx_k_Error_you_may_not_use_CommunityD), 0, 1, 0, 0},
    {&__pyx_kp_u_Error_you_may_not_use_LocalCommu, __pyx_k_Error_you_may_not_use_LocalCommu, sizeof(__pyx_k_Error_you_may_not_use_LocalCommu), 0, 1, 0, 0},
    {&__pyx_kp_u_Error_you_may_not_use_LocalCover, __pyx_k_Error_you_may_not_use_LocalCover, sizeof(__pyx_k_Error_you_may_not_use_LocalCover), 0, 1, 0, 0},
    {&__pyx_kp_u_Error_you_may_not_use_LocalParti, __pyx_k_Error_you_may_not_use_LocalParti, sizeof(__pyx_k_Error_you_may_not_use_LocalParti), 0, 1, 0, 0},
    {&__pyx_kp_u_Error_you_may_not_use_Overlappin, __pyx_k_Error_you_may_not_use_Overlappin, sizeof(__pyx_k_Error_you_may_not_use_Overlappin), 0, 1, 0, 0},
    {&__pyx_kp_s_Expected_at_least_d_argument_s_g, __pyx_k_Expected_at_least_d_argument_s_g, sizeof(__pyx_k_Expected_at_least_d_argument_s_g), 0, 0, 1, 0},
    {&__pyx_kp_s_Function_call_with_ambiguous_arg, __pyx_k_Function_call_with_ambiguous_arg, sizeof(__pyx_k_Function_call_with_ambiguous_arg), 0, 0, 1, 0},
    {&__pyx_n_s_G, __pyx_k_G, sizeof(__pyx_k_G), 0, 0, 1, 1},
    {&__pyx_n_s_GEOMETRIC_MEAN, __pyx_k_GEOMETRIC_MEAN, sizeof(__pyx_k_GEOMETRIC_MEAN), 0, 0, 1, 1},
    {&__pyx_n_s_Gcoarse, __pyx_k_Gcoarse, sizeof(__pyx_k_Gcoarse), 0, 0, 1, 1},
    {&__pyx_n_s_GeometricMean, __pyx_k_GeometricMean, sizeof(__pyx_k_GeometricMean), 0, 0, 1, 1},
    {&__pyx_n_s_Gfine, __pyx_k_Gfine, sizeof(__pyx_k_Gfine), 0, 0, 1, 1},
    {&__pyx_n_s_GraphClusteringTools, __pyx_k_GraphClusteringTools, sizeof(__pyx_k_GraphClusteringTools), 0, 0, 1, 1},
    {&__pyx_n_s_GraphClusteringTools___reduce_cy, __pyx_k_GraphClusteringTools___reduce_cy, sizeof(__pyx_k_GraphClusteringTools___reduce_cy), 0, 0, 1, 1},
    {&__pyx_n_s_GraphClusteringTools___setstate, __pyx_k_GraphClusteringTools___setstate, sizeof(__pyx_k_GraphClusteringTools___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_GraphClusteringTools_communicati, __pyx_k_GraphClusteringTools_communicati, sizeof(__pyx_k_GraphClusteringTools_communicati), 0, 0, 1, 1},
    {&__pyx_n_s_GraphClusteringTools_equalCluste, __pyx_k_GraphClusteringTools_equalCluste, sizeof(__pyx_k_GraphClusteringTools_equalCluste), 0, 0, 1, 1},
    {&__pyx_n_s_GraphClusteringTools_getImbalanc, __pyx_k_GraphClusteringTools_getImbalanc, sizeof(__pyx_k_GraphClusteringTools_getImbalanc), 0, 0, 1, 1},
    {&__pyx_n_s_GraphClusteringTools_isOneCluste, __pyx_k_GraphClusteringTools_isOneCluste, sizeof(__pyx_k_GraphClusteringTools_isOneCluste), 0, 0, 1, 1},
    {&__pyx_n_s_GraphClusteringTools_isProperClu, __pyx_k_GraphClusteringTools_isProperClu, sizeof(__pyx_k_GraphClusteringTools_isProperClu), 0, 0, 1, 1},
    {&__pyx_n_s_GraphClusteringTools_isSingleton, __pyx_k_GraphClusteringTools_isSingleton, sizeof(__pyx_k_GraphClusteringTools_isSingleton), 0, 0, 1, 1},
    {&__pyx_n_s_GraphClusteringTools_weightedDeg, __pyx_k_GraphClusteringTools_weightedDeg, sizeof(__pyx_k_GraphClusteringTools_weightedDeg), 0, 0, 1, 1},
    {&__pyx_n_s_GraphStructuralRandMeasure, __pyx_k_GraphStructuralRandMeasure, sizeof(__pyx_k_GraphStructuralRandMeasure), 0, 0, 1, 1},
    {&__pyx_n_s_GraphStructuralRandMeasure___red, __pyx_k_GraphStructuralRandMeasure___red, sizeof(__pyx_k_GraphStructuralRandMeasure___red), 0, 0, 1, 1},
    {&__pyx_n_s_GraphStructuralRandMeasure___set, __pyx_k_GraphStructuralRandMeasure___set, sizeof(__pyx_k_GraphStructuralRandMeasure___set), 0, 0, 1, 1},
    {&__pyx_n_s_GraphStructuralRandMeasure_getDi, __pyx_k_GraphStructuralRandMeasure_getDi, sizeof(__pyx_k_GraphStructuralRandMeasure_getDi), 0, 0, 1, 1},
    {&__pyx_n_s_GraphTools, __pyx_k_GraphTools, sizeof(__pyx_k_GraphTools), 0, 0, 1, 1},
    {&__pyx_n_s_HubDominance, __pyx_k_HubDominance, sizeof(__pyx_k_HubDominance), 0, 0, 1, 1},
    {&__pyx_n_s_HubDominance___reduce_cython, __pyx_k_HubDominance___reduce_cython, sizeof(__pyx_k_HubDominance___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_HubDominance___setstate_cython, __pyx_k_HubDominance___setstate_cython, sizeof(__pyx_k_HubDominance___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_HubDominance_getQuality, __pyx_k_HubDominance_getQuality, sizeof(__pyx_k_HubDominance_getQuality), 0, 0, 1, 1},
    {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
    {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
    {&__pyx_n_s_IntrapartitionDensity, __pyx_k_IntrapartitionDensity, sizeof(__pyx_k_IntrapartitionDensity), 0, 0, 1, 1},
    {&__pyx_n_s_IntrapartitionDensity___reduce_c, __pyx_k_IntrapartitionDensity___reduce_c, sizeof(__pyx_k_IntrapartitionDensity___reduce_c), 0, 0, 1, 1},
    {&__pyx_n_s_IntrapartitionDensity___setstate, __pyx_k_IntrapartitionDensity___setstate, sizeof(__pyx_k_IntrapartitionDensity___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_IntrapartitionDensity_getGlobal, __pyx_k_IntrapartitionDensity_getGlobal, sizeof(__pyx_k_IntrapartitionDensity_getGlobal), 0, 0, 1, 1},
    {&__pyx_n_s_IsolatedInterpartitionConductanc, __pyx_k_IsolatedInterpartitionConductanc, sizeof(__pyx_k_IsolatedInterpartitionConductanc), 0, 0, 1, 1},
    {&__pyx_n_s_IsolatedInterpartitionConductanc_2, __pyx_k_IsolatedInterpartitionConductanc_2, sizeof(__pyx_k_IsolatedInterpartitionConductanc_2), 0, 0, 1, 1},
    {&__pyx_n_s_IsolatedInterpartitionConductanc_3, __pyx_k_IsolatedInterpartitionConductanc_3, sizeof(__pyx_k_IsolatedInterpartitionConductanc_3), 0, 0, 1, 1},
    {&__pyx_n_s_IsolatedInterpartitionExpansion, __pyx_k_IsolatedInterpartitionExpansion, sizeof(__pyx_k_IsolatedInterpartitionExpansion), 0, 0, 1, 1},
    {&__pyx_n_s_IsolatedInterpartitionExpansion_2, __pyx_k_IsolatedInterpartitionExpansion_2, sizeof(__pyx_k_IsolatedInterpartitionExpansion_2), 0, 0, 1, 1},
    {&__pyx_n_s_IsolatedInterpartitionExpansion_3, __pyx_k_IsolatedInterpartitionExpansion_3, sizeof(__pyx_k_IsolatedInterpartitionExpansion_3), 0, 0, 1, 1},
    {&__pyx_n_s_JOINT_ENTROPY, __pyx_k_JOINT_ENTROPY, sizeof(__pyx_k_JOINT_ENTROPY), 0, 0, 1, 1},
    {&__pyx_n_s_JaccardMeasure, __pyx_k_JaccardMeasure, sizeof(__pyx_k_JaccardMeasure), 0, 0, 1, 1},
    {&__pyx_n_s_JaccardMeasure___reduce_cython, __pyx_k_JaccardMeasure___reduce_cython, sizeof(__pyx_k_JaccardMeasure___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_JaccardMeasure___setstate_cython, __pyx_k_JaccardMeasure___setstate_cython, sizeof(__pyx_k_JaccardMeasure___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_JaccardMeasure_getDissimilarity, __pyx_k_JaccardMeasure_getDissimilarity, sizeof(__pyx_k_JaccardMeasure_getDissimilarity), 0, 0, 1, 1},
    {&__pyx_n_s_JointEntropy, __pyx_k_JointEntropy, sizeof(__pyx_k_JointEntropy), 0, 0, 1, 1},
    {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
    {&__pyx_n_s_LFM, __pyx_k_LFM, sizeof(__pyx_k_LFM), 0, 0, 1, 1},
    {&__pyx_n_s_LFM___reduce_cython, __pyx_k_LFM___reduce_cython, sizeof(__pyx_k_LFM___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_LFM___setstate_cython, __pyx_k_LFM___setstate_cython, sizeof(__pyx_k_LFM___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_LPDegreeOrdered, __pyx_k_LPDegreeOrdered, sizeof(__pyx_k_LPDegreeOrdered), 0, 0, 1, 1},
    {&__pyx_n_s_LPDegreeOrdered___reduce_cython, __pyx_k_LPDegreeOrdered___reduce_cython, sizeof(__pyx_k_LPDegreeOrdered___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_LPDegreeOrdered___setstate_cytho, __pyx_k_LPDegreeOrdered___setstate_cytho, sizeof(__pyx_k_LPDegreeOrdered___setstate_cytho), 0, 0, 1, 1},
    {&__pyx_n_s_LPDegreeOrdered_numberOfIteratio, __pyx_k_LPDegreeOrdered_numberOfIteratio, sizeof(__pyx_k_LPDegreeOrdered_numberOfIteratio), 0, 0, 1, 1},
    {&__pyx_n_s_LocalCommunityEvaluation, __pyx_k_LocalCommunityEvaluation, sizeof(__pyx_k_LocalCommunityEvaluation), 0, 0, 1, 1},
    {&__pyx_n_s_LocalCommunityEvaluation___reduc, __pyx_k_LocalCommunityEvaluation___reduc, sizeof(__pyx_k_LocalCommunityEvaluation___reduc), 0, 0, 1, 1},
    {&__pyx_n_s_LocalCommunityEvaluation___setst, __pyx_k_LocalCommunityEvaluation___setst, sizeof(__pyx_k_LocalCommunityEvaluation___setst), 0, 0, 1, 1},
    {&__pyx_n_s_LocalCommunityEvaluation_getMaxi, __pyx_k_LocalCommunityEvaluation_getMaxi, sizeof(__pyx_k_LocalCommunityEvaluation_getMaxi), 0, 0, 1, 1},
    {&__pyx_n_s_LocalCommunityEvaluation_getMini, __pyx_k_LocalCommunityEvaluation_getMini, sizeof(__pyx_k_LocalCommunityEvaluation_getMini), 0, 0, 1, 1},
    {&__pyx_n_s_LocalCommunityEvaluation_getUnwe, __pyx_k_LocalCommunityEvaluation_getUnwe, sizeof(__pyx_k_LocalCommunityEvaluation_getUnwe), 0, 0, 1, 1},
    {&__pyx_n_s_LocalCommunityEvaluation_getValu, __pyx_k_LocalCommunityEvaluation_getValu, sizeof(__pyx_k_LocalCommunityEvaluation_getValu), 0, 0, 1, 1},
    {&__pyx_n_s_LocalCommunityEvaluation_getValu_2, __pyx_k_LocalCommunityEvaluation_getValu_2, sizeof(__pyx_k_LocalCommunityEvaluation_getValu_2), 0, 0, 1, 1},
    {&__pyx_n_s_LocalCommunityEvaluation_getWeig, __pyx_k_LocalCommunityEvaluation_getWeig, sizeof(__pyx_k_LocalCommunityEvaluation_getWeig), 0, 0, 1, 1},
    {&__pyx_n_s_LocalCommunityEvaluation_isSmall, __pyx_k_LocalCommunityEvaluation_isSmall, sizeof(__pyx_k_LocalCommunityEvaluation_isSmall), 0, 0, 1, 1},
    {&__pyx_n_s_LocalCoverEvaluation, __pyx_k_LocalCoverEvaluation, sizeof(__pyx_k_LocalCoverEvaluation), 0, 0, 1, 1},
    {&__pyx_n_s_LocalCoverEvaluation___reduce_cy, __pyx_k_LocalCoverEvaluation___reduce_cy, sizeof(__pyx_k_LocalCoverEvaluation___reduce_cy), 0, 0, 1, 1},
    {&__pyx_n_s_LocalCoverEvaluation___setstate, __pyx_k_LocalCoverEvaluation___setstate, sizeof(__pyx_k_LocalCoverEvaluation___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_LocalPartitionEvaluation, __pyx_k_LocalPartitionEvaluation, sizeof(__pyx_k_LocalPartitionEvaluation), 0, 0, 1, 1},
    {&__pyx_n_s_LocalPartitionEvaluation___reduc, __pyx_k_LocalPartitionEvaluation___reduc, sizeof(__pyx_k_LocalPartitionEvaluation___reduc), 0, 0, 1, 1},
    {&__pyx_n_s_LocalPartitionEvaluation___setst, __pyx_k_LocalPartitionEvaluation___setst, sizeof(__pyx_k_LocalPartitionEvaluation___setst), 0, 0, 1, 1},
    {&__pyx_n_s_LouvainMapEquation, __pyx_k_LouvainMapEquation, sizeof(__pyx_k_LouvainMapEquation), 0, 0, 1, 1},
    {&__pyx_n_s_LouvainMapEquation___reduce_cyth, __pyx_k_LouvainMapEquation___reduce_cyth, sizeof(__pyx_k_LouvainMapEquation___reduce_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_LouvainMapEquation___setstate_cy, __pyx_k_LouvainMapEquation___setstate_cy, sizeof(__pyx_k_LouvainMapEquation___setstate_cy), 0, 0, 1, 1},
    {&__pyx_n_s_MAX, __pyx_k_MAX, sizeof(__pyx_k_MAX), 0, 0, 1, 1},
    {&__pyx_n_s_MIN, __pyx_k_MIN, sizeof(__pyx_k_MIN), 0, 0, 1, 1},
    {&__pyx_n_s_Max, __pyx_k_Max, sizeof(__pyx_k_Max), 0, 0, 1, 1},
    {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
    {&__pyx_n_s_Min, __pyx_k_Min, sizeof(__pyx_k_Min), 0, 0, 1, 1},
    {&__pyx_n_s_MissingDependencyError, __pyx_k_MissingDependencyError, sizeof(__pyx_k_MissingDependencyError), 0, 0, 1, 1},
    {&__pyx_n_s_Modularity, __pyx_k_Modularity, sizeof(__pyx_k_Modularity), 0, 0, 1, 1},
    {&__pyx_n_s_Modularity___reduce_cython, __pyx_k_Modularity___reduce_cython, sizeof(__pyx_k_Modularity___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Modularity___setstate_cython, __pyx_k_Modularity___setstate_cython, sizeof(__pyx_k_Modularity___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Modularity_getQuality, __pyx_k_Modularity_getQuality, sizeof(__pyx_k_Modularity_getQuality), 0, 0, 1, 1},
    {&__pyx_n_s_NMIDistance, __pyx_k_NMIDistance, sizeof(__pyx_k_NMIDistance), 0, 0, 1, 1},
    {&__pyx_n_s_NMIDistance___reduce_cython, __pyx_k_NMIDistance___reduce_cython, sizeof(__pyx_k_NMIDistance___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_NMIDistance___setstate_cython, __pyx_k_NMIDistance___setstate_cython, sizeof(__pyx_k_NMIDistance___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_NMIDistance_getDissimilarity, __pyx_k_NMIDistance_getDissimilarity, sizeof(__pyx_k_NMIDistance_getDissimilarity), 0, 0, 1, 1},
    {&__pyx_kp_s_No_matching_signature_found, __pyx_k_No_matching_signature_found, sizeof(__pyx_k_No_matching_signature_found), 0, 0, 1, 0},
    {&__pyx_n_s_NodeStructuralRandMeasure, __pyx_k_NodeStructuralRandMeasure, sizeof(__pyx_k_NodeStructuralRandMeasure), 0, 0, 1, 1},
    {&__pyx_n_s_NodeStructuralRandMeasure___redu, __pyx_k_NodeStructuralRandMeasure___redu, sizeof(__pyx_k_NodeStructuralRandMeasure___redu), 0, 0, 1, 1},
    {&__pyx_n_s_NodeStructuralRandMeasure___sets, __pyx_k_NodeStructuralRandMeasure___sets, sizeof(__pyx_k_NodeStructuralRandMeasure___sets), 0, 0, 1, 1},
    {&__pyx_n_s_NodeStructuralRandMeasure_getDis, __pyx_k_NodeStructuralRandMeasure_getDis, sizeof(__pyx_k_NodeStructuralRandMeasure_getDis), 0, 0, 1, 1},
    {&__pyx_n_s_Normalization, __pyx_k_Normalization, sizeof(__pyx_k_Normalization), 0, 0, 1, 1},
    {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
    {&__pyx_n_s_OverlappingCommunityDetector, __pyx_k_OverlappingCommunityDetector, sizeof(__pyx_k_OverlappingCommunityDetector), 0, 0, 1, 1},
    {&__pyx_n_s_OverlappingCommunityDetector___r, __pyx_k_OverlappingCommunityDetector___r, sizeof(__pyx_k_OverlappingCommunityDetector___r), 0, 0, 1, 1},
    {&__pyx_n_s_OverlappingCommunityDetector___s, __pyx_k_OverlappingCommunityDetector___s, sizeof(__pyx_k_OverlappingCommunityDetector___s), 0, 0, 1, 1},
    {&__pyx_n_s_OverlappingCommunityDetector_get, __pyx_k_OverlappingCommunityDetector_get, sizeof(__pyx_k_OverlappingCommunityDetector_get), 0, 0, 1, 1},
    {&__pyx_n_s_OverlappingNMIDistance, __pyx_k_OverlappingNMIDistance, sizeof(__pyx_k_OverlappingNMIDistance), 0, 0, 1, 1},
    {&__pyx_n_s_OverlappingNMIDistance___reduce, __pyx_k_OverlappingNMIDistance___reduce, sizeof(__pyx_k_OverlappingNMIDistance___reduce), 0, 0, 1, 1},
    {&__pyx_n_s_OverlappingNMIDistance___setstat, __pyx_k_OverlappingNMIDistance___setstat, sizeof(__pyx_k_OverlappingNMIDistance___setstat), 0, 0, 1, 1},
    {&__pyx_n_s_OverlappingNMIDistance__validate, __pyx_k_OverlappingNMIDistance__validate, sizeof(__pyx_k_OverlappingNMIDistance__validate), 0, 0, 1, 1},
    {&__pyx_n_s_OverlappingNMIDistance_getDissim, __pyx_k_OverlappingNMIDistance_getDissim, sizeof(__pyx_k_OverlappingNMIDistance_getDissim), 0, 0, 1, 1},
    {&__pyx_n_s_OverlappingNMIDistance_setNormal, __pyx_k_OverlappingNMIDistance_setNormal, sizeof(__pyx_k_OverlappingNMIDistance_setNormal), 0, 0, 1, 1},
    {&__pyx_n_s_P, __pyx_k_P, sizeof(__pyx_k_P), 0, 0, 1, 1},
    {&__pyx_n_s_PLM, __pyx_k_PLM, sizeof(__pyx_k_PLM), 0, 0, 1, 1},
    {&__pyx_n_s_PLM___reduce_cython, __pyx_k_PLM___reduce_cython, sizeof(__pyx_k_PLM___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PLM___setstate_cython, __pyx_k_PLM___setstate_cython, sizeof(__pyx_k_PLM___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PLM_coarsen, __pyx_k_PLM_coarsen, sizeof(__pyx_k_PLM_coarsen), 0, 0, 1, 1},
    {&__pyx_n_s_PLM_getTiming, __pyx_k_PLM_getTiming, sizeof(__pyx_k_PLM_getTiming), 0, 0, 1, 1},
    {&__pyx_n_s_PLM_prolong, __pyx_k_PLM_prolong, sizeof(__pyx_k_PLM_prolong), 0, 0, 1, 1},
    {&__pyx_n_s_PLP, __pyx_k_PLP, sizeof(__pyx_k_PLP), 0, 0, 1, 1},
    {&__pyx_n_s_PLP___reduce_cython, __pyx_k_PLP___reduce_cython, sizeof(__pyx_k_PLP___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PLP___setstate_cython, __pyx_k_PLP___setstate_cython, sizeof(__pyx_k_PLP___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PLP_getTiming, __pyx_k_PLP_getTiming, sizeof(__pyx_k_PLP_getTiming), 0, 0, 1, 1},
    {&__pyx_n_s_PLP_numberOfIterations, __pyx_k_PLP_numberOfIterations, sizeof(__pyx_k_PLP_numberOfIterations), 0, 0, 1, 1},
    {&__pyx_n_s_ParallelLeiden, __pyx_k_ParallelLeiden, sizeof(__pyx_k_ParallelLeiden), 0, 0, 1, 1},
    {&__pyx_n_s_ParallelLeiden___reduce_cython, __pyx_k_ParallelLeiden___reduce_cython, sizeof(__pyx_k_ParallelLeiden___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ParallelLeiden___setstate_cython, __pyx_k_ParallelLeiden___setstate_cython, sizeof(__pyx_k_ParallelLeiden___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ParallelPartitionCoarsening, __pyx_k_ParallelPartitionCoarsening, sizeof(__pyx_k_ParallelPartitionCoarsening), 0, 0, 1, 1},
    {&__pyx_n_s_Partition, __pyx_k_Partition, sizeof(__pyx_k_Partition), 0, 0, 1, 1},
    {&__pyx_n_s_PartitionFragmentation, __pyx_k_PartitionFragmentation, sizeof(__pyx_k_PartitionFragmentation), 0, 0, 1, 1},
    {&__pyx_n_s_PartitionFragmentation___reduce, __pyx_k_PartitionFragmentation___reduce, sizeof(__pyx_k_PartitionFragmentation___reduce), 0, 0, 1, 1},
    {&__pyx_n_s_PartitionFragmentation___setstat, __pyx_k_PartitionFragmentation___setstat, sizeof(__pyx_k_PartitionFragmentation___setstat), 0, 0, 1, 1},
    {&__pyx_n_s_PartitionHubDominance, __pyx_k_PartitionHubDominance, sizeof(__pyx_k_PartitionHubDominance), 0, 0, 1, 1},
    {&__pyx_n_s_PartitionHubDominance___reduce_c, __pyx_k_PartitionHubDominance___reduce_c, sizeof(__pyx_k_PartitionHubDominance___reduce_c), 0, 0, 1, 1},
    {&__pyx_n_s_PartitionHubDominance___setstate, __pyx_k_PartitionHubDominance___setstate, sizeof(__pyx_k_PartitionHubDominance___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_PartitionIntersection, __pyx_k_PartitionIntersection, sizeof(__pyx_k_PartitionIntersection), 0, 0, 1, 1},
    {&__pyx_n_s_PartitionIntersection___reduce_c, __pyx_k_PartitionIntersection___reduce_c, sizeof(__pyx_k_PartitionIntersection___reduce_c), 0, 0, 1, 1},
    {&__pyx_n_s_PartitionIntersection___setstate, __pyx_k_PartitionIntersection___setstate, sizeof(__pyx_k_PartitionIntersection___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_PartitionIntersection_calculate, __pyx_k_PartitionIntersection_calculate, sizeof(__pyx_k_PartitionIntersection_calculate), 0, 0, 1, 1},
    {&__pyx_n_s_PartitionReader, __pyx_k_PartitionReader, sizeof(__pyx_k_PartitionReader), 0, 0, 1, 1},
    {&__pyx_n_s_PartitionWriter, __pyx_k_PartitionWriter, sizeof(__pyx_k_PartitionWriter), 0, 0, 1, 1},
    {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
    {&__pyx_n_s_SpectralPartitioner, __pyx_k_SpectralPartitioner, sizeof(__pyx_k_SpectralPartitioner), 0, 0, 1, 1},
    {&__pyx_n_s_SpectralPartitioner___init, __pyx_k_SpectralPartitioner___init, sizeof(__pyx_k_SpectralPartitioner___init), 0, 0, 1, 1},
    {&__pyx_n_s_SpectralPartitioner__bisect, __pyx_k_SpectralPartitioner__bisect, sizeof(__pyx_k_SpectralPartitioner__bisect), 0, 0, 1, 1},
    {&__pyx_n_s_SpectralPartitioner__generatePar, __pyx_k_SpectralPartitioner__generatePar, sizeof(__pyx_k_SpectralPartitioner__generatePar), 0, 0, 1, 1},
    {&__pyx_n_s_SpectralPartitioner__getMean, __pyx_k_SpectralPartitioner__getMean, sizeof(__pyx_k_SpectralPartitioner__getMean), 0, 0, 1, 1},
    {&__pyx_n_s_SpectralPartitioner__getQuantile, __pyx_k_SpectralPartitioner__getQuantile, sizeof(__pyx_k_SpectralPartitioner__getQuantile), 0, 0, 1, 1},
    {&__pyx_n_s_SpectralPartitioner__prepareSpec, __pyx_k_SpectralPartitioner__prepareSpec, sizeof(__pyx_k_SpectralPartitioner__prepareSpec), 0, 0, 1, 1},
    {&__pyx_n_s_SpectralPartitioner__trisect, __pyx_k_SpectralPartitioner__trisect, sizeof(__pyx_k_SpectralPartitioner__trisect), 0, 0, 1, 1},
    {&__pyx_n_s_SpectralPartitioner_getPartition, __pyx_k_SpectralPartitioner_getPartition, sizeof(__pyx_k_SpectralPartitioner_getPartition), 0, 0, 1, 1},
    {&__pyx_kp_s_SpectralPartitioner_graph_count, __pyx_k_SpectralPartitioner_graph_count, sizeof(__pyx_k_SpectralPartitioner_graph_count), 0, 0, 1, 0},
    {&__pyx_n_s_SpectralPartitioner_run, __pyx_k_SpectralPartitioner_run, sizeof(__pyx_k_SpectralPartitioner_run), 0, 0, 1, 1},
    {&__pyx_n_s_StablePartitionNodes, __pyx_k_StablePartitionNodes, sizeof(__pyx_k_StablePartitionNodes), 0, 0, 1, 1},
    {&__pyx_n_s_StablePartitionNodes___reduce_cy, __pyx_k_StablePartitionNodes___reduce_cy, sizeof(__pyx_k_StablePartitionNodes___reduce_cy), 0, 0, 1, 1},
    {&__pyx_n_s_StablePartitionNodes___setstate, __pyx_k_StablePartitionNodes___setstate, sizeof(__pyx_k_StablePartitionNodes___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_StablePartitionNodes_isStable, __pyx_k_StablePartitionNodes_isStable, sizeof(__pyx_k_StablePartitionNodes_isStable), 0, 0, 1, 1},
    {&__pyx_kp_u_TODO, __pyx_k_TODO, sizeof(__pyx_k_TODO), 0, 1, 0, 0},
    {&__pyx_kp_u_There_is_no_core_for_the_specifi, __pyx_k_There_is_no_core_for_the_specifi, sizeof(__pyx_k_There_is_no_core_for_the_specifi), 0, 1, 0, 0},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_kp_u__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0, 0},
    {&__pyx_kp_u__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 1, 0, 0},
    {&__pyx_n_s__207, __pyx_k__207, sizeof(__pyx_k__207), 0, 0, 1, 1},
    {&__pyx_kp_u__22, __pyx_k__22, sizeof(__pyx_k__22), 0, 1, 0, 0},
    {&__pyx_kp_u__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 1, 0, 0},
    {&__pyx_n_s__33, __pyx_k__33, sizeof(__pyx_k__33), 0, 0, 1, 1},
    {&__pyx_kp_s__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 1, 0},
    {&__pyx_kp_s__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 0, 1, 0},
    {&__pyx_kp_s__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 0, 1, 0},
    {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
    {&__pyx_n_s_addToSubset, __pyx_k_addToSubset, sizeof(__pyx_k_addToSubset), 0, 0, 1, 1},
    {&__pyx_n_s_algebraic, __pyx_k_algebraic, sizeof(__pyx_k_algebraic), 0, 0, 1, 1},
    {&__pyx_n_s_algo, __pyx_k_algo, sizeof(__pyx_k_algo), 0, 0, 1, 1},
    {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
    {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
    {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_kp_u_avg_community_size, __pyx_k_avg_community_size, sizeof(__pyx_k_avg_community_size), 0, 1, 0, 0},
    {&__pyx_n_s_balanced, __pyx_k_balanced, sizeof(__pyx_k_balanced), 0, 0, 1, 1},
    {&__pyx_n_u_balanced, __pyx_k_balanced, sizeof(__pyx_k_balanced), 0, 1, 0, 1},
    {&__pyx_n_s_baseClustering, __pyx_k_baseClustering, sizeof(__pyx_k_baseClustering), 0, 0, 1, 1},
    {&__pyx_n_s_bisect, __pyx_k_bisect, sizeof(__pyx_k_bisect), 0, 0, 1, 1},
    {&__pyx_n_s_calculate, __pyx_k_calculate, sizeof(__pyx_k_calculate), 0, 0, 1, 1},
    {&__pyx_n_s_ceil, __pyx_k_ceil, sizeof(__pyx_k_ceil), 0, 0, 1, 1},
    {&__pyx_n_s_centrality, __pyx_k_centrality, sizeof(__pyx_k_centrality), 0, 0, 1, 1},
    {&__pyx_n_s_cg, __pyx_k_cg, sizeof(__pyx_k_cg), 0, 0, 1, 1},
    {&__pyx_n_s_cid, __pyx_k_cid, sizeof(__pyx_k_cid), 0, 0, 1, 1},
    {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_coarsen, __pyx_k_coarsen, sizeof(__pyx_k_coarsen), 0, 0, 1, 1},
    {&__pyx_n_s_coarsening, __pyx_k_coarsening, sizeof(__pyx_k_coarsening), 0, 0, 1, 1},
    {&__pyx_n_s_commProps, __pyx_k_commProps, sizeof(__pyx_k_commProps), 0, 0, 1, 1},
    {&__pyx_n_s_communicationGraph, __pyx_k_communicationGraph, sizeof(__pyx_k_communicationGraph), 0, 0, 1, 1},
    {&__pyx_kp_u_communities, __pyx_k_communities, sizeof(__pyx_k_communities), 0, 1, 0, 0},
    {&__pyx_n_s_communities_2, __pyx_k_communities_2, sizeof(__pyx_k_communities_2), 0, 0, 1, 1},
    {&__pyx_n_s_communityGraph, __pyx_k_communityGraph, sizeof(__pyx_k_communityGraph), 0, 0, 1, 1},
    {&__pyx_n_s_communitySizes, __pyx_k_communitySizes, sizeof(__pyx_k_communitySizes), 0, 0, 1, 1},
    {&__pyx_n_s_compareCommunities, __pyx_k_compareCommunities, sizeof(__pyx_k_compareCommunities), 0, 0, 1, 1},
    {&__pyx_n_s_coreDec, __pyx_k_coreDec, sizeof(__pyx_k_coreDec), 0, 0, 1, 1},
    {&__pyx_n_s_cores, __pyx_k_cores, sizeof(__pyx_k_cores), 0, 0, 1, 1},
    {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
    {&__pyx_n_s_cutoff, __pyx_k_cutoff, sizeof(__pyx_k_cutoff), 0, 0, 1, 1},
    {&__pyx_n_u_default, __pyx_k_default, sizeof(__pyx_k_default), 0, 1, 0, 1},
    {&__pyx_n_s_default_timer, __pyx_k_default_timer, sizeof(__pyx_k_default_timer), 0, 0, 1, 1},
    {&__pyx_n_s_defaults, __pyx_k_defaults, sizeof(__pyx_k_defaults), 0, 0, 1, 1},
    {&__pyx_n_s_detectCommunities, __pyx_k_detectCommunities, sizeof(__pyx_k_detectCommunities), 0, 0, 1, 1},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_n_s_dict_2, __pyx_k_dict_2, sizeof(__pyx_k_dict_2), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
    {&__pyx_n_s_eCut, __pyx_k_eCut, sizeof(__pyx_k_eCut), 0, 0, 1, 1},
    {&__pyx_kp_u_edge_cut, __pyx_k_edge_cut, sizeof(__pyx_k_edge_cut), 0, 1, 0, 0},
    {&__pyx_kp_u_edge_cut_portion, __pyx_k_edge_cut_portion, sizeof(__pyx_k_edge_cut_portion), 0, 1, 0, 0},
    {&__pyx_kp_u_edgelist_s0, __pyx_k_edgelist_s0, sizeof(__pyx_k_edgelist_s0), 0, 1, 0, 0},
    {&__pyx_kp_u_edgelist_s1, __pyx_k_edgelist_s1, sizeof(__pyx_k_edgelist_s1), 0, 1, 0, 0},
    {&__pyx_kp_u_edgelist_t0, __pyx_k_edgelist_t0, sizeof(__pyx_k_edgelist_t0), 0, 1, 0, 0},
    {&__pyx_kp_u_edgelist_t1, __pyx_k_edgelist_t1, sizeof(__pyx_k_edgelist_t1), 0, 1, 0, 0},
    {&__pyx_n_s_eigenvalues, __pyx_k_eigenvalues, sizeof(__pyx_k_eigenvalues), 0, 0, 1, 1},
    {&__pyx_n_s_eigenvectors, __pyx_k_eigenvectors, sizeof(__pyx_k_eigenvectors), 0, 0, 1, 1},
    {&__pyx_n_s_eigv, __pyx_k_eigv, sizeof(__pyx_k_eigv), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
    {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
    {&__pyx_n_s_equalClustering, __pyx_k_equalClustering, sizeof(__pyx_k_equalClustering), 0, 0, 1, 1},
    {&__pyx_n_s_eta, __pyx_k_eta, sizeof(__pyx_k_eta), 0, 0, 1, 1},
    {&__pyx_n_s_evalCommunityDetection, __pyx_k_evalCommunityDetection, sizeof(__pyx_k_evalCommunityDetection), 0, 0, 1, 1},
    {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
    {&__pyx_n_s_expanduser, __pyx_k_expanduser, sizeof(__pyx_k_expanduser), 0, 0, 1, 1},
    {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
    {&__pyx_n_s_first, __pyx_k_first, sizeof(__pyx_k_first), 0, 0, 1, 1},
    {&__pyx_n_s_firstItem, __pyx_k_firstItem, sizeof(__pyx_k_firstItem), 0, 0, 1, 1},
    {&__pyx_n_s_floor, __pyx_k_floor, sizeof(__pyx_k_floor), 0, 0, 1, 1},
    {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
    {&__pyx_n_s_fused_sigindex, __pyx_k_fused_sigindex, sizeof(__pyx_k_fused_sigindex), 0, 0, 1, 1},
    {&__pyx_n_s_gamma, __pyx_k_gamma, sizeof(__pyx_k_gamma), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_generatePartition, __pyx_k_generatePartition, sizeof(__pyx_k_generatePartition), 0, 0, 1, 1},
    {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
    {&__pyx_n_s_getClusterHierarchy, __pyx_k_getClusterHierarchy, sizeof(__pyx_k_getClusterHierarchy), 0, 0, 1, 1},
    {&__pyx_n_s_getCoarseGraph, __pyx_k_getCoarseGraph, sizeof(__pyx_k_getCoarseGraph), 0, 0, 1, 1},
    {&__pyx_n_s_getCover, __pyx_k_getCover, sizeof(__pyx_k_getCover), 0, 0, 1, 1},
    {&__pyx_n_s_getDissimilarity, __pyx_k_getDissimilarity, sizeof(__pyx_k_getDissimilarity), 0, 0, 1, 1},
    {&__pyx_n_s_getGlobal, __pyx_k_getGlobal, sizeof(__pyx_k_getGlobal), 0, 0, 1, 1},
    {&__pyx_n_s_getImbalance, __pyx_k_getImbalance, sizeof(__pyx_k_getImbalance), 0, 0, 1, 1},
    {&__pyx_n_s_getMaximumValue, __pyx_k_getMaximumValue, sizeof(__pyx_k_getMaximumValue), 0, 0, 1, 1},
    {&__pyx_n_s_getMean, __pyx_k_getMean, sizeof(__pyx_k_getMean), 0, 0, 1, 1},
    {&__pyx_n_s_getMembers, __pyx_k_getMembers, sizeof(__pyx_k_getMembers), 0, 0, 1, 1},
    {&__pyx_n_s_getMinimumValue, __pyx_k_getMinimumValue, sizeof(__pyx_k_getMinimumValue), 0, 0, 1, 1},
    {&__pyx_n_s_getPartition, __pyx_k_getPartition, sizeof(__pyx_k_getPartition), 0, 0, 1, 1},
    {&__pyx_n_s_getQuality, __pyx_k_getQuality, sizeof(__pyx_k_getQuality), 0, 0, 1, 1},
    {&__pyx_n_s_getQuantiles, __pyx_k_getQuantiles, sizeof(__pyx_k_getQuantiles), 0, 0, 1, 1},
    {&__pyx_n_s_getTiming, __pyx_k_getTiming, sizeof(__pyx_k_getTiming), 0, 0, 1, 1},
    {&__pyx_n_s_getUnweightedAverage, __pyx_k_getUnweightedAverage, sizeof(__pyx_k_getUnweightedAverage), 0, 0, 1, 1},
    {&__pyx_n_s_getValue, __pyx_k_getValue, sizeof(__pyx_k_getValue), 0, 0, 1, 1},
    {&__pyx_n_s_getValues, __pyx_k_getValues, sizeof(__pyx_k_getValues), 0, 0, 1, 1},
    {&__pyx_n_s_getWeightedAverage, __pyx_k_getWeightedAverage, sizeof(__pyx_k_getWeightedAverage), 0, 0, 1, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_graph, __pyx_k_graph, sizeof(__pyx_k_graph), 0, 0, 1, 1},
    {&__pyx_n_s_graphio, __pyx_k_graphio, sizeof(__pyx_k_graphio), 0, 0, 1, 1},
    {&__pyx_n_s_graphtools, __pyx_k_graphtools, sizeof(__pyx_k_graphtools), 0, 0, 1, 1},
    {&__pyx_n_s_have_tabulate, __pyx_k_have_tabulate, sizeof(__pyx_k_have_tabulate), 0, 0, 1, 1},
    {&__pyx_n_s_helpers, __pyx_k_helpers, sizeof(__pyx_k_helpers), 0, 0, 1, 1},
    {&__pyx_n_s_hierarchical, __pyx_k_hierarchical, sizeof(__pyx_k_hierarchical), 0, 0, 1, 1},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_imbalance, __pyx_k_imbalance, sizeof(__pyx_k_imbalance), 0, 0, 1, 1},
    {&__pyx_n_u_imbalance, __pyx_k_imbalance, sizeof(__pyx_k_imbalance), 0, 1, 0, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
    {&__pyx_n_s_init_subclass, __pyx_k_init_subclass, sizeof(__pyx_k_init_subclass), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_inspect, __pyx_k_inspect, sizeof(__pyx_k_inspect), 0, 0, 1, 1},
    {&__pyx_n_s_inspectCommunities, __pyx_k_inspectCommunities, sizeof(__pyx_k_inspectCommunities), 0, 0, 1, 1},
    {&__pyx_n_s_isOneClustering, __pyx_k_isOneClustering, sizeof(__pyx_k_isOneClustering), 0, 0, 1, 1},
    {&__pyx_n_s_isProperClustering, __pyx_k_isProperClustering, sizeof(__pyx_k_isProperClustering), 0, 0, 1, 1},
    {&__pyx_n_s_isSingletonClustering, __pyx_k_isSingletonClustering, sizeof(__pyx_k_isSingletonClustering), 0, 0, 1, 1},
    {&__pyx_n_s_isSmallBetter, __pyx_k_isSmallBetter, sizeof(__pyx_k_isSmallBetter), 0, 0, 1, 1},
    {&__pyx_n_s_isStable, __pyx_k_isStable, sizeof(__pyx_k_isStable), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_isfile, __pyx_k_isfile, sizeof(__pyx_k_isfile), 0, 0, 1, 1},
    {&__pyx_n_s_iterNodes, __pyx_k_iterNodes, sizeof(__pyx_k_iterNodes), 0, 0, 1, 1},
    {&__pyx_n_s_iteration, __pyx_k_iteration, sizeof(__pyx_k_iteration), 0, 0, 1, 1},
    {&__pyx_n_s_iterations, __pyx_k_iterations, sizeof(__pyx_k_iterations), 0, 0, 1, 1},
    {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
    {&__pyx_n_s_kCore, __pyx_k_kCore, sizeof(__pyx_k_kCore), 0, 0, 1, 1},
    {&__pyx_n_s_kCoreCommunityDetection, __pyx_k_kCoreCommunityDetection, sizeof(__pyx_k_kCoreCommunityDetection), 0, 0, 1, 1},
    {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
    {&__pyx_n_s_laplacianEigenvectors, __pyx_k_laplacianEigenvectors, sizeof(__pyx_k_laplacianEigenvectors), 0, 0, 1, 1},
    {&__pyx_n_s_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_makeContinuousBalancedClustering, __pyx_k_makeContinuousBalancedClustering, sizeof(__pyx_k_makeContinuousBalancedClustering), 0, 0, 1, 1},
    {&__pyx_n_s_makeNoncontinuousBalancedCluster, __pyx_k_makeNoncontinuousBalancedCluster, sizeof(__pyx_k_makeNoncontinuousBalancedCluster), 0, 0, 1, 1},
    {&__pyx_n_s_makeOneClustering, __pyx_k_makeOneClustering, sizeof(__pyx_k_makeOneClustering), 0, 0, 1, 1},
    {&__pyx_n_s_makeRandomClustering, __pyx_k_makeRandomClustering, sizeof(__pyx_k_makeRandomClustering), 0, 0, 1, 1},
    {&__pyx_n_s_makeSingletonClustering, __pyx_k_makeSingletonClustering, sizeof(__pyx_k_makeSingletonClustering), 0, 0, 1, 1},
    {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
    {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
    {&__pyx_n_s_maxIter, __pyx_k_maxIter, sizeof(__pyx_k_maxIter), 0, 0, 1, 1},
    {&__pyx_n_s_maxIterations, __pyx_k_maxIterations, sizeof(__pyx_k_maxIterations), 0, 0, 1, 1},
    {&__pyx_kp_u_max_community_size, __pyx_k_max_community_size, sizeof(__pyx_k_max_community_size), 0, 1, 0, 0},
    {&__pyx_n_s_mean, __pyx_k_mean, sizeof(__pyx_k_mean), 0, 0, 1, 1},
    {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
    {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
    {&__pyx_kp_u_min_community_size, __pyx_k_min_community_size, sizeof(__pyx_k_min_community_size), 0, 1, 0, 0},
    {&__pyx_n_s_mod, __pyx_k_mod, sizeof(__pyx_k_mod), 0, 0, 1, 1},
    {&__pyx_n_u_modularity, __pyx_k_modularity, sizeof(__pyx_k_modularity), 0, 1, 0, 1},
    {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_networkit_community, __pyx_k_networkit_community, sizeof(__pyx_k_networkit_community), 0, 0, 1, 1},
    {&__pyx_kp_s_networkit_community_pyx, __pyx_k_networkit_community_pyx, sizeof(__pyx_k_networkit_community_pyx), 0, 0, 1, 0},
    {&__pyx_kp_s_networkit_structures, __pyx_k_networkit_structures, sizeof(__pyx_k_networkit_structures), 0, 0, 1, 0},
    {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
    {&__pyx_n_s_nextCount, __pyx_k_nextCount, sizeof(__pyx_k_nextCount), 0, 0, 1, 1},
    {&__pyx_n_s_nextPartition, __pyx_k_nextPartition, sizeof(__pyx_k_nextPartition), 0, 0, 1, 1},
    {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
    {&__pyx_n_s_nodeToMetaNode, __pyx_k_nodeToMetaNode, sizeof(__pyx_k_nodeToMetaNode), 0, 0, 1, 1},
    {&__pyx_n_s_none, __pyx_k_none, sizeof(__pyx_k_none), 0, 0, 1, 1},
    {&__pyx_n_s_normalization, __pyx_k_normalization, sizeof(__pyx_k_normalization), 0, 0, 1, 1},
    {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
    {&__pyx_n_s_numberOfEdges, __pyx_k_numberOfEdges, sizeof(__pyx_k_numberOfEdges), 0, 0, 1, 1},
    {&__pyx_n_s_numberOfIterations, __pyx_k_numberOfIterations, sizeof(__pyx_k_numberOfIterations), 0, 0, 1, 1},
    {&__pyx_n_s_numberOfNodes, __pyx_k_numberOfNodes, sizeof(__pyx_k_numberOfNodes), 0, 0, 1, 1},
    {&__pyx_n_s_numberOfSubsets, __pyx_k_numberOfSubsets, sizeof(__pyx_k_numberOfSubsets), 0, 0, 1, 1},
    {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
    {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
    {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
    {&__pyx_n_s_par, __pyx_k_par, sizeof(__pyx_k_par), 0, 0, 1, 1},
    {&__pyx_n_s_parallel, __pyx_k_parallel, sizeof(__pyx_k_parallel), 0, 0, 1, 1},
    {&__pyx_n_s_parallelizationStrategy, __pyx_k_parallelizationStrategy, sizeof(__pyx_k_parallelizationStrategy), 0, 0, 1, 1},
    {&__pyx_n_s_partA, __pyx_k_partA, sizeof(__pyx_k_partA), 0, 0, 1, 1},
    {&__pyx_n_s_partB, __pyx_k_partB, sizeof(__pyx_k_partB), 0, 0, 1, 1},
    {&__pyx_n_s_partC, __pyx_k_partC, sizeof(__pyx_k_partC), 0, 0, 1, 1},
    {&__pyx_n_s_partIndex, __pyx_k_partIndex, sizeof(__pyx_k_partIndex), 0, 0, 1, 1},
    {&__pyx_n_s_partition, __pyx_k_partition, sizeof(__pyx_k_partition), 0, 0, 1, 1},
    {&__pyx_n_s_partitions, __pyx_k_partitions, sizeof(__pyx_k_partitions), 0, 0, 1, 1},
    {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
    {&__pyx_kp_u_path_expanded_to_0, __pyx_k_path_expanded_to_0, sizeof(__pyx_k_path_expanded_to_0), 0, 1, 0, 0},
    {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
    {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
    {&__pyx_n_s_prepareSpectrum, __pyx_k_prepareSpectrum, sizeof(__pyx_k_prepareSpectrum), 0, 0, 1, 1},
    {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
    {&__pyx_n_s_prolong, __pyx_k_prolong, sizeof(__pyx_k_prolong), 0, 0, 1, 1},
    {&__pyx_n_s_pyResult, __pyx_k_pyResult, sizeof(__pyx_k_pyResult), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_DissimilarityMeas, __pyx_k_pyx_unpickle_DissimilarityMeas, sizeof(__pyx_k_pyx_unpickle_DissimilarityMeas), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_GraphClusteringTo, __pyx_k_pyx_unpickle_GraphClusteringTo, sizeof(__pyx_k_pyx_unpickle_GraphClusteringTo), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
    {&__pyx_n_s_quantile, __pyx_k_quantile, sizeof(__pyx_k_quantile), 0, 0, 1, 1},
    {&__pyx_n_s_quantiles, __pyx_k_quantiles, sizeof(__pyx_k_quantiles), 0, 0, 1, 1},
    {&__pyx_n_u_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 1, 0, 1},
    {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
    {&__pyx_n_s_randomize, __pyx_k_randomize, sizeof(__pyx_k_randomize), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
    {&__pyx_n_s_readCommunities, __pyx_k_readCommunities, sizeof(__pyx_k_readCommunities), 0, 0, 1, 1},
    {&__pyx_kp_u_read_communities_from_0, __pyx_k_read_communities_from_0, sizeof(__pyx_k_read_communities_from_0), 0, 1, 0, 0},
    {&__pyx_n_s_reader, __pyx_k_reader, sizeof(__pyx_k_reader), 0, 0, 1, 1},
    {&__pyx_n_s_readers, __pyx_k_readers, sizeof(__pyx_k_readers), 0, 0, 1, 1},
    {&__pyx_n_s_recurse, __pyx_k_recurse, sizeof(__pyx_k_recurse), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_reference, __pyx_k_reference, sizeof(__pyx_k_reference), 0, 0, 1, 1},
    {&__pyx_n_s_refine, __pyx_k_refine, sizeof(__pyx_k_refine), 0, 0, 1, 1},
    {&__pyx_n_u_relaxmap, __pyx_k_relaxmap, sizeof(__pyx_k_relaxmap), 0, 1, 0, 1},
    {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
    {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
    {&__pyx_n_s_results, __pyx_k_results, sizeof(__pyx_k_results), 0, 0, 1, 1},
    {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
    {&__pyx_n_s_reverse, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
    {&__pyx_n_s_run, __pyx_k_run, sizeof(__pyx_k_run), 0, 0, 1, 1},
    {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
    {&__pyx_n_s_scd, __pyx_k_scd, sizeof(__pyx_k_scd), 0, 0, 1, 1},
    {&__pyx_n_s_scores, __pyx_k_scores, sizeof(__pyx_k_scores), 0, 0, 1, 1},
    {&__pyx_n_s_second, __pyx_k_second, sizeof(__pyx_k_second), 0, 0, 1, 1},
    {&__pyx_n_s_sections, __pyx_k_sections, sizeof(__pyx_k_sections), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_kp_s_self__this_cannot_be_converted_t, __pyx_k_self__this_cannot_be_converted_t, sizeof(__pyx_k_self__this_cannot_be_converted_t), 0, 0, 1, 0},
    {&__pyx_n_s_setNormalization, __pyx_k_setNormalization, sizeof(__pyx_k_setNormalization), 0, 0, 1, 1},
    {&__pyx_n_s_set_name, __pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
    {&__pyx_kp_u_solution_properties, __pyx_k_solution_properties, sizeof(__pyx_k_solution_properties), 0, 1, 0, 0},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_spectrum, __pyx_k_spectrum, sizeof(__pyx_k_spectrum), 0, 0, 1, 1},
    {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
    {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
    {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
    {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
    {&__pyx_n_s_stdstring, __pyx_k_stdstring, sizeof(__pyx_k_stdstring), 0, 0, 1, 1},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
    {&__pyx_n_s_subgraphFromNodes, __pyx_k_subgraphFromNodes, sizeof(__pyx_k_subgraphFromNodes), 0, 0, 1, 1},
    {&__pyx_n_s_subprocess, __pyx_k_subprocess, sizeof(__pyx_k_subprocess), 0, 0, 1, 1},
    {&__pyx_n_s_subsetID, __pyx_k_subsetID, sizeof(__pyx_k_subsetID), 0, 0, 1, 1},
    {&__pyx_n_s_subsetSizes, __pyx_k_subsetSizes, sizeof(__pyx_k_subsetSizes), 0, 0, 1, 1},
    {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
    {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
    {&__pyx_n_s_support, __pyx_k_support, sizeof(__pyx_k_support), 0, 0, 1, 1},
    {&__pyx_n_s_tabulate, __pyx_k_tabulate, sizeof(__pyx_k_tabulate), 0, 0, 1, 1},
    {&__pyx_n_u_tabulate, __pyx_k_tabulate, sizeof(__pyx_k_tabulate), 0, 1, 0, 1},
    {&__pyx_n_s_tempfile, __pyx_k_tempfile, sizeof(__pyx_k_tempfile), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_kp_u_time_s, __pyx_k_time_s, sizeof(__pyx_k_time_s), 0, 1, 0, 0},
    {&__pyx_n_s_timeit, __pyx_k_timeit, sizeof(__pyx_k_timeit), 0, 0, 1, 1},
    {&__pyx_n_s_toSingleton, __pyx_k_toSingleton, sizeof(__pyx_k_toSingleton), 0, 0, 1, 1},
    {&__pyx_n_s_trisect, __pyx_k_trisect, sizeof(__pyx_k_trisect), 0, 0, 1, 1},
    {&__pyx_n_s_turbo, __pyx_k_turbo, sizeof(__pyx_k_turbo), 0, 0, 1, 1},
    {&__pyx_n_s_u, __pyx_k_u, sizeof(__pyx_k_u), 0, 0, 1, 1},
    {&__pyx_kp_u_unrecognized_format_0, __pyx_k_unrecognized_format_0, sizeof(__pyx_k_unrecognized_format_0), 0, 1, 0, 0},
    {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
    {&__pyx_n_s_updateThreshold, __pyx_k_updateThreshold, sizeof(__pyx_k_updateThreshold), 0, 0, 1, 1},
    {&__pyx_n_s_use_setstate, __pyx_k_use_setstate, sizeof(__pyx_k_use_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_validateNormalization, __pyx_k_validateNormalization, sizeof(__pyx_k_validateNormalization), 0, 0, 1, 1},
    {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
    {&__pyx_n_s_vertex, __pyx_k_vertex, sizeof(__pyx_k_vertex), 0, 0, 1, 1},
    {&__pyx_n_s_vertices, __pyx_k_vertices, sizeof(__pyx_k_vertices), 0, 0, 1, 1},
    {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
    {&__pyx_n_s_weightedDegreeWithCluster, __pyx_k_weightedDegreeWithCluster, sizeof(__pyx_k_weightedDegreeWithCluster), 0, 0, 1, 1},
    {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
    {&__pyx_n_s_writeCommunities, __pyx_k_writeCommunities, sizeof(__pyx_k_writeCommunities), 0, 0, 1, 1},
    {&__pyx_kp_u_wrote_communities_to_0, __pyx_k_wrote_communities_to_0, sizeof(__pyx_k_wrote_communities_to_0), 0, 1, 0, 0},
    {&__pyx_n_s_zeta, __pyx_k_zeta, sizeof(__pyx_k_zeta), 0, 0, 1, 1},
    {&__pyx_n_s_zeta1, __pyx_k_zeta1, sizeof(__pyx_k_zeta1), 0, 0, 1, 1},
    {&__pyx_n_s_zeta2, __pyx_k_zeta2, sizeof(__pyx_k_zeta2), 0, 0, 1, 1},
    {&__pyx_n_s_zetaCoarse, __pyx_k_zetaCoarse, sizeof(__pyx_k_zetaCoarse), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 239, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 65, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin___import__ = __Pyx_GetBuiltinName(__pyx_n_s_import); if (!__pyx_builtin___import__) __PYX_ERR(0, 574, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(0, 1630, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 1660, __pyx_L1_error)
  __pyx_builtin_min = __Pyx_GetBuiltinName(__pyx_n_s_min); if (!__pyx_builtin_min) __PYX_ERR(0, 1692, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 1693, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 1694, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 1776, __pyx_L1_error)
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s_IOError); if (!__pyx_builtin_IOError) __PYX_ERR(0, 1785, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 1787, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 1822, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 1852, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 2031, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 68, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "networkit/community.pyx":65
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == CommunityDetector:
 * 			raise RuntimeError("Error, you may not use CommunityDetector directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def getPartition(self):
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Error_you_may_not_use_CommunityD); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "networkit/community.pyx":79
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return Partition().setThis((<_CommunityDetectionAlgorithm*>(self._this)).getPartition())
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_Error_object_not_properly_initia); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "networkit/community.pyx":98
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == OverlappingCommunityDetector:
 * 			raise RuntimeError("Error, you may not use OverlappingCommunityDetector directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def getCover(self):
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Error_you_may_not_use_Overlappin); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "networkit/community.pyx":574
 * 	cdef _HubDominance _this
 * 
 * 	def getQuality(self, PartitionCover zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(zeta, G)
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_No_matching_signature_found); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Function_call_with_ambiguous_arg); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "networkit/community.pyx":1187
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == LocalCommunityEvaluation:
 * 			raise RuntimeError("Error, you may not use LocalCommunityEvaluation directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def getWeightedAverage(self):
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_Error_you_may_not_use_LocalCommu); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 1187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "networkit/community.pyx":1316
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == LocalPartitionEvaluation:
 * 			raise RuntimeError("Error, you may not use LocalPartitionEvaluation directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def __cinit__(self, Graph G not None, Partition P not None, *args, **namedargs):
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_Error_you_may_not_use_LocalParti); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "networkit/community.pyx":1346
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == LocalCoverEvaluation:
 * 			raise RuntimeError("Error, you may not use LocalCoverEvaluation directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def __cinit__(self, Graph G not None, Cover C not None, *args, **namedargs):
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_Error_you_may_not_use_LocalCover); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 1346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "networkit/community.pyx":1662
 * 	print("Communities detected in {:.5f} [s]".format(end - start))
 * 	if inspect:
 * 		print ("solution properties:")             # <<<<<<<<<<<<<<
 * 		inspectCommunities(zeta, G)
 * 	return zeta
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_solution_properties); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 1662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "networkit/community.pyx":1768
 * 	"""
 * 	readers =  {"default": PartitionReader(),
 * 		"edgelist-t1": EdgeListPartitionReader(1, '\t'),             # <<<<<<<<<<<<<<
 * 		"edgelist-t0": EdgeListPartitionReader(0, '\t'),
 * 		"edgelist-s1": EdgeListPartitionReader(1, ' '),
 */
  __pyx_tuple__17 = PyTuple_Pack(2, __pyx_int_1, __pyx_kp_u__16); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 1768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "networkit/community.pyx":1769
 * 	readers =  {"default": PartitionReader(),
 * 		"edgelist-t1": EdgeListPartitionReader(1, '\t'),
 * 		"edgelist-t0": EdgeListPartitionReader(0, '\t'),             # <<<<<<<<<<<<<<
 * 		"edgelist-s1": EdgeListPartitionReader(1, ' '),
 * 		"edgelist-s0": EdgeListPartitionReader(0, ' '),
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_int_0, __pyx_kp_u__16); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 1769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "networkit/community.pyx":1770
 * 		"edgelist-t1": EdgeListPartitionReader(1, '\t'),
 * 		"edgelist-t0": EdgeListPartitionReader(0, '\t'),
 * 		"edgelist-s1": EdgeListPartitionReader(1, ' '),             # <<<<<<<<<<<<<<
 * 		"edgelist-s0": EdgeListPartitionReader(0, ' '),
 * 		}
 */
  __pyx_tuple__20 = PyTuple_Pack(2, __pyx_int_1, __pyx_kp_u__19); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 1770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "networkit/community.pyx":1771
 * 		"edgelist-t0": EdgeListPartitionReader(0, '\t'),
 * 		"edgelist-s1": EdgeListPartitionReader(1, ' '),
 * 		"edgelist-s0": EdgeListPartitionReader(0, ' '),             # <<<<<<<<<<<<<<
 * 		}
 * 	# get reader
 */
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_int_0, __pyx_kp_u__19); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 1771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "networkit/community.pyx":1787
 * 		raise IOError("{0} is not a file".format(path))
 * 	else:
 * 		with open(path, "r") as file:    # catch a wrong path before it crashes the interpreteri             # <<<<<<<<<<<<<<
 * 			print("read communities from: {0}".format(path))
 * 			communities = reader.read(path)
 */
  __pyx_tuple__23 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 1787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "networkit/community.pyx":1822
 * 	Currently not implemented.
 * 	"""
 * 	raise NotImplementedError("TODO:")             # <<<<<<<<<<<<<<
 * 
 * def kCoreCommunityDetection(G, k, algo=None, inspect=True):
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_u_TODO); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 1822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "networkit/community.pyx":1856
 * 
 * 	if len(kCore) == 0:
 * 		raise RuntimeError("There is no core for the specified k")             # <<<<<<<<<<<<<<
 * 
 * 	C = GraphTools.subgraphFromNodes(G, kCore)
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_u_There_is_no_core_for_the_specifi); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 1856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "networkit/community.pyx":2025
 * 				ret = self._this.getDissimilarity(G._this, (<Cover>(first))._this, (<Cover>(second))._this)
 * 		else:
 * 			raise TypeError("Error, first and second must both be either a Partition or a Cover")             # <<<<<<<<<<<<<<
 * 		return ret
 * 
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_u_Error_first_and_second_must_both); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 2025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "networkit/community.pyx":2031
 * 		if normalization not in {OverlappingNMIDistance.Min, OverlappingNMIDistance.GeometricMean,
 * 				OverlappingNMIDistance.ArithmeticMean, OverlappingNMIDistance.Max, OverlappingNMIDistance.JointEntropy}:
 * 			raise ValueError("Error, invalid normalization method")             # <<<<<<<<<<<<<<
 * 
 * class SpectralPartitioner:
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_Error_invalid_normalization_meth); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 2031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "networkit/community.pyx":2179
 * 			subsetID = partition[firstItem]
 * 
 * 			for vertex in vertices[1:]:             # <<<<<<<<<<<<<<
 * 				partition.addToSubset(subsetID, vertex)
 * 
 */
  __pyx_slice__30 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__30)) __PYX_ERR(0, 2179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__30);
  __Pyx_GIVEREF(__pyx_slice__30);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  __pyx_tuple__31 = PyTuple_Pack(3, __pyx_int_238750788, __pyx_int_228825662, __pyx_int_222419149); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "networkit/community.pyx":67
 * 			raise RuntimeError("Error, you may not use CommunityDetector directly, use a sub-class instead")
 * 
 * 	def getPartition(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPartition()
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getPartition, 67, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 67, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_tuple__37 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":100
 * 			raise RuntimeError("Error, you may not use OverlappingCommunityDetector directly, use a sub-class instead")
 * 
 * 	def getCover(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getCover()
 */
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getCover, 100, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 100, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":133
 * 	""" Generators for various clusterings """
 * 	cdef _ClusteringGenerator _this
 * 	def makeSingletonClustering(self, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeSingletonClustering(G)
 */
  __pyx_tuple__42 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_G); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_makeSingletonClustering, 133, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 133, __pyx_L1_error)

  /* "networkit/community.pyx":150
 * 		"""
 * 		return Partition().setThis(self._this.makeSingletonClustering(G._this))
 * 	def makeOneClustering(self, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeOneClustering(G)
 */
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_makeOneClustering, 150, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 150, __pyx_L1_error)

  /* "networkit/community.pyx":167
 * 		"""
 * 		return Partition().setThis(self._this.makeOneClustering(G._this))
 * 	def makeRandomClustering(self, Graph G, count k):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeRandomClustering(G, k)
 */
  __pyx_tuple__45 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_k); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_makeRandomClustering, 167, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 167, __pyx_L1_error)

  /* "networkit/community.pyx":186
 * 		"""
 * 		return Partition().setThis(self._this.makeRandomClustering(G._this, k))
 * 	def makeContinuousBalancedClustering(self, Graph G, count k):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeContinuousBalancedClustering(G, k)
 */
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_makeContinuousBalancedClustering, 186, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 186, __pyx_L1_error)

  /* "networkit/community.pyx":205
 * 		"""
 * 		return Partition().setThis(self._this.makeContinuousBalancedClustering(G._this, k))
 * 	def makeNoncontinuousBalancedClustering(self, Graph G, count k):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeNoncontinuousBalancedClustering(G, k)
 */
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_makeNoncontinuousBalancedCluster, 205, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 205, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":239
 * 
 * cdef class GraphClusteringTools:
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def getImbalance(Partition zeta, Graph G = None):
 * 		"""
 */
  __pyx_tuple__51 = PyTuple_Pack(2, __pyx_n_s_zeta, __pyx_n_s_G); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getImbalance, 239, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 239, __pyx_L1_error)
  __pyx_tuple__53 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "networkit/community.pyx":263
 * 			return getImbalance(zeta._this)
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def communicationGraph(Graph graph, Partition zeta):
 * 		"""
 */
  __pyx_tuple__54 = PyTuple_Pack(2, __pyx_n_s_graph, __pyx_n_s_zeta); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_communicationGraph, 263, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 263, __pyx_L1_error)

  /* "networkit/community.pyx":289
 * 		"""
 * 		return Graph().setThis(communicationGraph(graph._this, zeta._this))
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def weightedDegreeWithCluster(Graph graph, Partition zeta, node u, index cid):
 * 		"""
 */
  __pyx_tuple__56 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_zeta, __pyx_n_s_u, __pyx_n_s_cid); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_weightedDegreeWithCluster, 289, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 289, __pyx_L1_error)

  /* "networkit/community.pyx":313
 * 		"""
 * 		return weightedDegreeWithCluster(graph._this, zeta._this, u, cid)
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def isProperClustering(Graph G, Partition zeta):
 * 		"""
 */
  __pyx_tuple__58 = PyTuple_Pack(2, __pyx_n_s_G, __pyx_n_s_zeta); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_isProperClustering, 313, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 313, __pyx_L1_error)

  /* "networkit/community.pyx":333
 * 		"""
 * 		return isProperClustering(G._this, zeta._this)
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def isSingletonClustering(Graph G, Partition zeta):
 * 		"""
 */
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_isSingletonClustering, 333, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 333, __pyx_L1_error)

  /* "networkit/community.pyx":353
 * 		"""
 * 		return isSingletonClustering(G._this, zeta._this)
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def isOneClustering(Graph G, Partition zeta):
 * 		"""
 */
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_isOneClustering, 353, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(0, 353, __pyx_L1_error)

  /* "networkit/community.pyx":373
 * 		"""
 * 		return isOneClustering(G._this, zeta._this)
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def equalClustering(Partition zeta, Partition eta, Graph G):
 * 		"""
 */
  __pyx_tuple__62 = PyTuple_Pack(3, __pyx_n_s_zeta, __pyx_n_s_eta, __pyx_n_s_G); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_equalClustering, 373, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 373, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__64 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_GraphClusteringTools, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_GraphClusteringTools__set_state(self, __pyx_state)
 */
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "networkit/community.pyx":410
 * 	"""
 * 	cdef _PartitionIntersection _this
 * 	def calculate(self, Partition zeta, Partition eta):             # <<<<<<<<<<<<<<
 * 		"""
 * 		calculate(zeta, eta)
 */
  __pyx_tuple__67 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_zeta, __pyx_n_s_eta); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_calculate, 410, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 410, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":443
 * 	cdef _Coverage _this
 * 
 * 	def getQuality(self, Partition zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(Partition zeta, Graph G)
 */
  __pyx_tuple__71 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_zeta, __pyx_n_s_G); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getQuality, 443, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(0, 443, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":478
 * 	cdef _EdgeCut _this
 * 
 * 	def getQuality(self, Partition zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(zeta, G)
 */
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getQuality, 478, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 478, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":524
 * 	cdef _Modularity _this
 * 
 * 	def getQuality(self, Partition zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(zeta,  G)
 */
  __pyx_tuple__78 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_zeta, __pyx_n_s_G, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getQuality, 524, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 524, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":574
 * 	cdef _HubDominance _this
 * 
 * 	def getQuality(self, PartitionCover zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(zeta, G)
 */
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getQuality, 574, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(0, 574, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":638
 * 		self._this = new _PLM(G._this, refine, gamma, stdstring(par), maxIter, turbo, recurse)
 * 
 * 	def getTiming(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getTiming()
 */
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getTiming, 638, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 638, __pyx_L1_error)

  /* "networkit/community.pyx":651
 * 		return (<_PLM*>(self._this)).getTiming()
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def coarsen(Graph G, Partition zeta, bool_t parallel = False):
 * 		"""
 */
  __pyx_tuple__86 = PyTuple_Pack(4, __pyx_n_s_G, __pyx_n_s_zeta, __pyx_n_s_parallel, __pyx_n_s_result); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_coarsen, 651, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 651, __pyx_L1_error)
  __pyx_tuple__88 = PyTuple_Pack(1, Py_False); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);

  /* "networkit/community.pyx":676
 * 		return (Graph().setThis(result.first), result.second)
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def prolong(Graph Gcoarse, Partition zetaCoarse, Graph Gfine, vector[node] nodeToMetaNode):
 * 		"""
 */
  __pyx_tuple__89 = PyTuple_Pack(4, __pyx_n_s_Gcoarse, __pyx_n_s_zetaCoarse, __pyx_n_s_Gfine, __pyx_n_s_nodeToMetaNode); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_prolong, 676, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 676, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":808
 * 
 * 
 * 	def numberOfIterations(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		numberOfIterations()
 */
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_numberOfIterations, 808, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 808, __pyx_L1_error)

  /* "networkit/community.pyx":821
 * 		return (<_PLP*>(self._this)).numberOfIterations()
 * 
 * 	def getTiming(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getTiming()
 */
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getTiming, 821, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(0, 821, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__100 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__100)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":889
 * 		self._this = new _LPDegreeOrdered(G._this)
 * 
 * 	def numberOfIterations(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		numberOfIterations()
 */
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_numberOfIterations, 889, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 889, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":932
 * 		self._this = new _CutClustering(G._this, alpha)
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def getClusterHierarchy(Graph G not None):
 * 		"""
 */
  __pyx_tuple__106 = PyTuple_Pack(4, __pyx_n_s_G, __pyx_n_s_result, __pyx_n_s_pyResult, __pyx_n_s_res); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getClusterHierarchy, 932, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(0, 932, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_DissimilarityMeasure, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_DissimilarityMeasure__set_state(self, __pyx_state)
 */
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "networkit/community.pyx":985
 * 	cdef _NodeStructuralRandMeasure _this
 * 
 * 	def getDissimilarity(self, Graph G, Partition first, Partition second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */
  __pyx_tuple__112 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_first, __pyx_n_s_second, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getDissimilarity, 985, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(0, 985, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":1026
 * 	cdef _GraphStructuralRandMeasure _this
 * 
 * 	def getDissimilarity(self, Graph G, Partition first, Partition second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getDissimilarity, 1026, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) __PYX_ERR(0, 1026, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":1064
 * 	cdef _JaccardMeasure _this
 * 
 * 	def getDissimilarity(self, Graph G, Partition first, Partition second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getDissimilarity, 1064, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(0, 1064, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__120 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__120)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":1104
 * 	cdef _NMIDistance _this
 * 
 * 	def getDissimilarity(self, Graph G, Partition first, Partition second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */
  __pyx_codeobj__122 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getDissimilarity, 1104, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__122)) __PYX_ERR(0, 1104, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__124 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__124)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":1142
 * 	cdef _AdjustedRandMeasure _this
 * 
 * 	def getDissimilarity(self, Graph G not None, Partition first not None, Partition second not None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getDissimilarity, 1142, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) __PYX_ERR(0, 1142, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__126 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__126)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":1189
 * 			raise RuntimeError("Error, you may not use LocalCommunityEvaluation directly, use a sub-class instead")
 * 
 * 	def getWeightedAverage(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getWeightedAverage()
 */
  __pyx_codeobj__128 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getWeightedAverage, 1189, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__128)) __PYX_ERR(0, 1189, __pyx_L1_error)

  /* "networkit/community.pyx":1204
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getWeightedAverage()
 * 
 * 	def getUnweightedAverage(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getUnweightedAverage()
 */
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getUnweightedAverage, 1204, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(0, 1204, __pyx_L1_error)

  /* "networkit/community.pyx":1219
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getUnweightedAverage()
 * 
 * 	def getMaximumValue(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getMaximumValue()
 */
  __pyx_codeobj__130 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getMaximumValue, 1219, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__130)) __PYX_ERR(0, 1219, __pyx_L1_error)

  /* "networkit/community.pyx":1234
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getMaximumValue()
 * 
 * 	def getMinimumValue(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getMinimumValue()
 */
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getMinimumValue, 1234, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(0, 1234, __pyx_L1_error)

  /* "networkit/community.pyx":1249
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getMinimumValue()
 * 
 * 	def getValue(self, index i):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getValue(index i)
 */
  __pyx_tuple__132 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_i); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__132, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getValue, 1249, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) __PYX_ERR(0, 1249, __pyx_L1_error)

  /* "networkit/community.pyx":1269
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getValue(i)
 * 
 * 	def getValues(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getValues()
 */
  __pyx_codeobj__134 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getValues, 1269, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__134)) __PYX_ERR(0, 1269, __pyx_L1_error)

  /* "networkit/community.pyx":1284
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getValues()
 * 
 * 	def isSmallBetter(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		isSmallBetter()
 */
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_isSmallBetter, 1284, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(0, 1284, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__136 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__136)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__138 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__138)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__140 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__140)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":1380
 * 		self._this = new _IntrapartitionDensity(self._G._this, self._P._this)
 * 
 * 	def getGlobal(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getGlobal()
 */
  __pyx_codeobj__142 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getGlobal, 1380, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__142)) __PYX_ERR(0, 1380, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__144 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__144)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__146 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__146)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__148 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__148)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__150 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__150)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__152 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__152)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__153 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__153)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__154 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__154)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":1571
 * 
 * 
 * 	def isStable(self, node u):             # <<<<<<<<<<<<<<
 * 		"""
 * 		isStable(u)
 */
  __pyx_tuple__155 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_u); if (unlikely(!__pyx_tuple__155)) __PYX_ERR(0, 1571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);
  __pyx_codeobj__156 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__155, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_isStable, 1571, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__156)) __PYX_ERR(0, 1571, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__157 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__157)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__158 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__158)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__159 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__159)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__160 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__160)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":1633
 * 		assert(self._C == C)
 * 
 * def detectCommunities(G, algo=None, inspect=True):             # <<<<<<<<<<<<<<
 * 	"""
 * 	detectCommunities(G, algo=None, inspect=True)
 */
  __pyx_tuple__161 = PyTuple_Pack(6, __pyx_n_s_G, __pyx_n_s_algo, __pyx_n_s_inspect, __pyx_n_s_start, __pyx_n_s_zeta, __pyx_n_s_end); if (unlikely(!__pyx_tuple__161)) __PYX_ERR(0, 1633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);
  __pyx_codeobj__162 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__161, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_detectCommunities, 1633, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__162)) __PYX_ERR(0, 1633, __pyx_L1_error)
  __pyx_tuple__163 = PyTuple_Pack(2, Py_None, ((PyObject *)Py_True)); if (unlikely(!__pyx_tuple__163)) __PYX_ERR(0, 1633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);

  /* "networkit/community.pyx":1666
 * 	return zeta
 * 
 * def inspectCommunities(zeta, G):             # <<<<<<<<<<<<<<
 * 	"""
 * 	inspectCommunities(zeta, G)
 */
  __pyx_tuple__164 = PyTuple_Pack(7, __pyx_n_s_zeta, __pyx_n_s_G, __pyx_n_s_communitySizes, __pyx_n_s_mod, __pyx_n_s_eCut, __pyx_n_s_imbalance, __pyx_n_s_commProps); if (unlikely(!__pyx_tuple__164)) __PYX_ERR(0, 1666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__164);
  __Pyx_GIVEREF(__pyx_tuple__164);
  __pyx_codeobj__165 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__164, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_inspectCommunities, 1666, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__165)) __PYX_ERR(0, 1666, __pyx_L1_error)

  /* "networkit/community.pyx":1703
 * 
 * 
 * def communityGraph(G, zeta):             # <<<<<<<<<<<<<<
 * 	"""
 * 	communityGraph(G, P)
 */
  __pyx_tuple__166 = PyTuple_Pack(3, __pyx_n_s_G, __pyx_n_s_zeta, __pyx_n_s_cg); if (unlikely(!__pyx_tuple__166)) __PYX_ERR(0, 1703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__166);
  __Pyx_GIVEREF(__pyx_tuple__166);
  __pyx_codeobj__167 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__166, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_communityGraph, 1703, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__167)) __PYX_ERR(0, 1703, __pyx_L1_error)

  /* "networkit/community.pyx":1722
 * 
 * 
 * def evalCommunityDetection(algo, G):             # <<<<<<<<<<<<<<
 * 	"""
 * 	evalCommunityDetection(algo, G)
 */
  __pyx_tuple__168 = PyTuple_Pack(6, __pyx_n_s_algo, __pyx_n_s_G, __pyx_n_s_start, __pyx_n_s_zeta, __pyx_n_s_end, __pyx_n_s_results); if (unlikely(!__pyx_tuple__168)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__168);
  __Pyx_GIVEREF(__pyx_tuple__168);
  __pyx_codeobj__169 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__168, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_evalCommunityDetection, 1722, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__169)) __PYX_ERR(0, 1722, __pyx_L1_error)

  /* "networkit/community.pyx":1754
 * 	print(tabulate.tabulate(results))
 * 
 * def readCommunities(path, format="default"):             # <<<<<<<<<<<<<<
 * 	"""
 * 	readCommunities(path, format="default")
 */
  __pyx_tuple__170 = PyTuple_Pack(6, __pyx_n_s_path, __pyx_n_s_format, __pyx_n_s_readers, __pyx_n_s_reader, __pyx_n_s_file, __pyx_n_s_communities_2); if (unlikely(!__pyx_tuple__170)) __PYX_ERR(0, 1754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__170);
  __Pyx_GIVEREF(__pyx_tuple__170);
  __pyx_codeobj__171 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__170, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_readCommunities, 1754, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__171)) __PYX_ERR(0, 1754, __pyx_L1_error)
  __pyx_tuple__172 = PyTuple_Pack(1, ((PyObject*)__pyx_n_u_default)); if (unlikely(!__pyx_tuple__172)) __PYX_ERR(0, 1754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__172);
  __Pyx_GIVEREF(__pyx_tuple__172);

  /* "networkit/community.pyx":1795
 * 
 * 
 * def writeCommunities(communities, path):             # <<<<<<<<<<<<<<
 * 	"""
 * 	writeCommunities(communities, path)
 */
  __pyx_tuple__173 = PyTuple_Pack(2, __pyx_n_s_communities_2, __pyx_n_s_path); if (unlikely(!__pyx_tuple__173)) __PYX_ERR(0, 1795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);
  __pyx_codeobj__174 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__173, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_writeCommunities, 1795, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__174)) __PYX_ERR(0, 1795, __pyx_L1_error)

  /* "networkit/community.pyx":1812
 * 
 * 
 * def compareCommunities(G, zeta1, zeta2):             # <<<<<<<<<<<<<<
 * 	"""
 * 	compareCommunities(G, zeta1, zeta2)
 */
  __pyx_tuple__175 = PyTuple_Pack(3, __pyx_n_s_G, __pyx_n_s_zeta1, __pyx_n_s_zeta2); if (unlikely(!__pyx_tuple__175)) __PYX_ERR(0, 1812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);
  __pyx_codeobj__176 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__175, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_compareCommunities, 1812, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__176)) __PYX_ERR(0, 1812, __pyx_L1_error)

  /* "networkit/community.pyx":1824
 * 	raise NotImplementedError("TODO:")
 * 
 * def kCoreCommunityDetection(G, k, algo=None, inspect=True):             # <<<<<<<<<<<<<<
 * 	"""
 * 	kCoreCommunityDetection(G, k, algo=None, inspect=True)
 */
  __pyx_tuple__177 = PyTuple_Pack(10, __pyx_n_s_G, __pyx_n_s_k, __pyx_n_s_algo, __pyx_n_s_inspect, __pyx_n_s_coreDec, __pyx_n_s_cores, __pyx_n_s_kCore, __pyx_n_s_partition, __pyx_n_s_i, __pyx_n_s_C); if (unlikely(!__pyx_tuple__177)) __PYX_ERR(0, 1824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);
  __pyx_codeobj__178 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__177, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_kCoreCommunityDetection, 1824, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__178)) __PYX_ERR(0, 1824, __pyx_L1_error)

  /* "networkit/community.pyx":1963
 * 		self._this = _OverlappingNMIDistance(normalization)
 * 
 * 	def setNormalization(self, normalization):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setNormalization(self, normalization)
 */
  __pyx_tuple__179 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_normalization); if (unlikely(!__pyx_tuple__179)) __PYX_ERR(0, 1963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__179);
  __Pyx_GIVEREF(__pyx_tuple__179);
  __pyx_codeobj__180 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__179, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_setNormalization, 1963, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__180)) __PYX_ERR(0, 1963, __pyx_L1_error)

  /* "networkit/community.pyx":1990
 * 		self._this.setNormalization(normalization)
 * 
 * 	def getDissimilarity(self, Graph G, PartitionCover first, PartitionCover second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */
  __pyx_codeobj__181 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getDissimilarity, 1990, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__181)) __PYX_ERR(0, 1990, __pyx_L1_error)

  /* "networkit/community.pyx":2028
 * 		return ret
 * 
 * 	def _validateNormalization(self, _Normalization normalization):             # <<<<<<<<<<<<<<
 * 		if normalization not in {OverlappingNMIDistance.Min, OverlappingNMIDistance.GeometricMean,
 * 				OverlappingNMIDistance.ArithmeticMean, OverlappingNMIDistance.Max, OverlappingNMIDistance.JointEntropy}:
 */
  __pyx_codeobj__182 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__179, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_validateNormalization, 2028, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__182)) __PYX_ERR(0, 2028, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__183 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__183)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__184 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__184)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/community.pyx":2051
 * 		Set this to false if you do not want to enforce balance, possibly increasing quality. Default: True
 * 	"""
 * 	def __init__(self, graph, count, balanced=True):             # <<<<<<<<<<<<<<
 * 		self.graph = graph
 * 		self.count = count
 */
  __pyx_tuple__185 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_graph, __pyx_n_s_count, __pyx_n_s_balanced); if (unlikely(!__pyx_tuple__185)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__185);
  __Pyx_GIVEREF(__pyx_tuple__185);
  __pyx_codeobj__186 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__185, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_init, 2051, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__186)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __pyx_tuple__187 = PyTuple_Pack(1, ((PyObject *)Py_True)); if (unlikely(!__pyx_tuple__187)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__187);
  __Pyx_GIVEREF(__pyx_tuple__187);

  /* "networkit/community.pyx":2057
 * 		self.balanced = balanced
 * 
 * 	def _prepareSpectrum(self):             # <<<<<<<<<<<<<<
 * 		spectrum = laplacianEigenvectors(self.graph, cutoff = (math.ceil(math.log(self.count, 2)) + 1), reverse=True)
 * 		self.eigenvectors = spectrum[1]
 */
  __pyx_tuple__188 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_spectrum); if (unlikely(!__pyx_tuple__188)) __PYX_ERR(0, 2057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__188);
  __Pyx_GIVEREF(__pyx_tuple__188);
  __pyx_codeobj__189 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__188, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_prepareSpectrum, 2057, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__189)) __PYX_ERR(0, 2057, __pyx_L1_error)

  /* "networkit/community.pyx":2062
 * 		self.eigenvalues = spectrum[0]
 * 
 * 	def _getQuantiles(self, eigv, vertices, count = 1):             # <<<<<<<<<<<<<<
 * 		values = [eigv[i] for i in vertices]
 * 		values.sort()
 */
  __pyx_tuple__190 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_eigv, __pyx_n_s_vertices, __pyx_n_s_count, __pyx_n_s_values, __pyx_n_s_sections, __pyx_n_s_quantiles, __pyx_n_s_i, __pyx_n_s_quantile, __pyx_n_s_i); if (unlikely(!__pyx_tuple__190)) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__190);
  __Pyx_GIVEREF(__pyx_tuple__190);
  __pyx_codeobj__191 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__190, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getQuantiles, 2062, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__191)) __PYX_ERR(0, 2062, __pyx_L1_error)
  __pyx_tuple__192 = PyTuple_Pack(1, ((PyObject *)__pyx_int_1)); if (unlikely(!__pyx_tuple__192)) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__192);
  __Pyx_GIVEREF(__pyx_tuple__192);

  /* "networkit/community.pyx":2075
 * 		return quantiles
 * 
 * 	def _getMean(self, eigv, vertices):             # <<<<<<<<<<<<<<
 * 		values = [eigv[i] for i in vertices]
 * 		mean = np.mean(values)
 */
  __pyx_tuple__193 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_eigv, __pyx_n_s_vertices, __pyx_n_s_values, __pyx_n_s_mean, __pyx_n_s_i); if (unlikely(!__pyx_tuple__193)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__193);
  __Pyx_GIVEREF(__pyx_tuple__193);
  __pyx_codeobj__194 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__193, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getMean, 2075, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__194)) __PYX_ERR(0, 2075, __pyx_L1_error)

  /* "networkit/community.pyx":2081
 * 		return mean
 * 
 * 	def _trisect(self, partition=None, iteration=1):             # <<<<<<<<<<<<<<
 * 		if partition is None:
 * 			vertices = list(self.graph.iterNodes())
 */
  __pyx_tuple__195 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_partition, __pyx_n_s_iteration, __pyx_n_s_vertices, __pyx_n_s_eigv, __pyx_n_s_quantiles, __pyx_n_s_partA, __pyx_n_s_partB, __pyx_n_s_partC, __pyx_n_s_vertex); if (unlikely(!__pyx_tuple__195)) __PYX_ERR(0, 2081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__195);
  __Pyx_GIVEREF(__pyx_tuple__195);
  __pyx_codeobj__196 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__195, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_trisect, 2081, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__196)) __PYX_ERR(0, 2081, __pyx_L1_error)
  __pyx_tuple__197 = PyTuple_Pack(2, Py_None, ((PyObject *)__pyx_int_1)); if (unlikely(!__pyx_tuple__197)) __PYX_ERR(0, 2081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__197);
  __Pyx_GIVEREF(__pyx_tuple__197);

  /* "networkit/community.pyx":2114
 * 			del self.partitions[partition]
 * 
 * 	def _bisect(self, count, partition=None, iteration=1):             # <<<<<<<<<<<<<<
 * 		if count == 1:
 * 			return
 */
  __pyx_tuple__198 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_count, __pyx_n_s_partition, __pyx_n_s_iteration, __pyx_n_s_vertices, __pyx_n_s_eigv, __pyx_n_s_split, __pyx_n_s_partA, __pyx_n_s_partB, __pyx_n_s_vertex, __pyx_n_s_nextCount); if (unlikely(!__pyx_tuple__198)) __PYX_ERR(0, 2114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__198);
  __Pyx_GIVEREF(__pyx_tuple__198);
  __pyx_codeobj__199 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__198, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_bisect, 2114, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__199)) __PYX_ERR(0, 2114, __pyx_L1_error)

  /* "networkit/community.pyx":2166
 * 
 * 
 * 	def _generatePartition(self):             # <<<<<<<<<<<<<<
 * 		partition = Partition(size=self.graph.numberOfNodes())
 * 
 */
  __pyx_tuple__200 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_partition, __pyx_n_s_partIndex, __pyx_n_s_vertices, __pyx_n_s_firstItem, __pyx_n_s_subsetID, __pyx_n_s_vertex); if (unlikely(!__pyx_tuple__200)) __PYX_ERR(0, 2166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__200);
  __Pyx_GIVEREF(__pyx_tuple__200);
  __pyx_codeobj__201 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__200, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_generatePartition, 2166, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__201)) __PYX_ERR(0, 2166, __pyx_L1_error)

  /* "networkit/community.pyx":2185
 * 		return partition
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		run()
 */
  __pyx_codeobj__202 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_run, 2185, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__202)) __PYX_ERR(0, 2185, __pyx_L1_error)

  /* "networkit/community.pyx":2199
 * 		self._generatePartition()
 * 
 * 	def getPartition(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPartition()
 */
  __pyx_codeobj__203 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_community_pyx, __pyx_n_s_getPartition, 2199, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__203)) __PYX_ERR(0, 2199, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_GraphClusteringTools(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__204 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__204)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__204);
  __Pyx_GIVEREF(__pyx_tuple__204);
  __pyx_codeobj__205 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__204, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_GraphClusteringTo, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__205)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_codeobj__206 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__204, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_DissimilarityMeas, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__206)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_get.method_name = &__pyx_n_s_get;
  __pyx_umethod_PyDict_Type_values.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_values.method_name = &__pyx_n_s_values;
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_32 = PyInt_FromLong(32); if (unlikely(!__pyx_int_32)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_228825662 = PyInt_FromLong(228825662L); if (unlikely(!__pyx_int_228825662)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_238750788 = PyInt_FromLong(238750788L); if (unlikely(!__pyx_int_238750788)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* AssertionsEnabled.init */
  if (likely(__Pyx_init_assertions_enabled() == 0)); else

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("networkit.base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_4base_Algorithm = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.base", "Algorithm", sizeof(struct __pyx_obj_9networkit_4base_Algorithm), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_4base_Algorithm),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_4base_Algorithm) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_4base_Algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_CommunityDetector = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_CommunityDetector_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_CommunityDetector)) __PYX_ERR(0, 55, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_CommunityDetector_spec, __pyx_ptype_9networkit_9community_CommunityDetector) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_CommunityDetector = &__pyx_type_9networkit_9community_CommunityDetector;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_CommunityDetector->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_CommunityDetector) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_CommunityDetector->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_CommunityDetector->tp_dictoffset && __pyx_ptype_9networkit_9community_CommunityDetector->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_CommunityDetector->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CommunityDetector, (PyObject *) __pyx_ptype_9networkit_9community_CommunityDetector) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_CommunityDetector) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_4base_Algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_OverlappingCommunityDetector = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_OverlappingCommunityDetector_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_OverlappingCommunityDetector)) __PYX_ERR(0, 88, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_OverlappingCommunityDetector_spec, __pyx_ptype_9networkit_9community_OverlappingCommunityDetector) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_OverlappingCommunityDetector = &__pyx_type_9networkit_9community_OverlappingCommunityDetector;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_OverlappingCommunityDetector->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_OverlappingCommunityDetector) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_OverlappingCommunityDetector->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_OverlappingCommunityDetector->tp_dictoffset && __pyx_ptype_9networkit_9community_OverlappingCommunityDetector->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_OverlappingCommunityDetector->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OverlappingCommunityDetector, (PyObject *) __pyx_ptype_9networkit_9community_OverlappingCommunityDetector) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_OverlappingCommunityDetector) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_9community_ClusteringGenerator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_ClusteringGenerator_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_9community_ClusteringGenerator)) __PYX_ERR(0, 130, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_ClusteringGenerator_spec, __pyx_ptype_9networkit_9community_ClusteringGenerator) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_ClusteringGenerator = &__pyx_type_9networkit_9community_ClusteringGenerator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_ClusteringGenerator) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_ClusteringGenerator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_ClusteringGenerator->tp_dictoffset && __pyx_ptype_9networkit_9community_ClusteringGenerator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_ClusteringGenerator->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ClusteringGenerator, (PyObject *) __pyx_ptype_9networkit_9community_ClusteringGenerator) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_ClusteringGenerator) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_9community_GraphClusteringTools = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_GraphClusteringTools_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_9community_GraphClusteringTools)) __PYX_ERR(0, 238, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_GraphClusteringTools_spec, __pyx_ptype_9networkit_9community_GraphClusteringTools) < 0) __PYX_ERR(0, 238, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_GraphClusteringTools = &__pyx_type_9networkit_9community_GraphClusteringTools;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_GraphClusteringTools) < 0) __PYX_ERR(0, 238, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_GraphClusteringTools->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_GraphClusteringTools->tp_dictoffset && __pyx_ptype_9networkit_9community_GraphClusteringTools->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_GraphClusteringTools->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GraphClusteringTools, (PyObject *) __pyx_ptype_9networkit_9community_GraphClusteringTools) < 0) __PYX_ERR(0, 238, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_GraphClusteringTools) < 0) __PYX_ERR(0, 238, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_9community_PartitionIntersection = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_PartitionIntersection_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_9community_PartitionIntersection)) __PYX_ERR(0, 402, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_PartitionIntersection_spec, __pyx_ptype_9networkit_9community_PartitionIntersection) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_PartitionIntersection = &__pyx_type_9networkit_9community_PartitionIntersection;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_PartitionIntersection) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_PartitionIntersection->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_PartitionIntersection->tp_dictoffset && __pyx_ptype_9networkit_9community_PartitionIntersection->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_PartitionIntersection->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PartitionIntersection, (PyObject *) __pyx_ptype_9networkit_9community_PartitionIntersection) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_PartitionIntersection) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_9community_Coverage = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_Coverage_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_9community_Coverage)) __PYX_ERR(0, 436, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_Coverage_spec, __pyx_ptype_9networkit_9community_Coverage) < 0) __PYX_ERR(0, 436, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_Coverage = &__pyx_type_9networkit_9community_Coverage;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_Coverage) < 0) __PYX_ERR(0, 436, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_Coverage->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_Coverage->tp_dictoffset && __pyx_ptype_9networkit_9community_Coverage->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_Coverage->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Coverage, (PyObject *) __pyx_ptype_9networkit_9community_Coverage) < 0) __PYX_ERR(0, 436, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_Coverage) < 0) __PYX_ERR(0, 436, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_9community_EdgeCut = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_EdgeCut_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_9community_EdgeCut)) __PYX_ERR(0, 471, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_EdgeCut_spec, __pyx_ptype_9networkit_9community_EdgeCut) < 0) __PYX_ERR(0, 471, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_EdgeCut = &__pyx_type_9networkit_9community_EdgeCut;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_EdgeCut) < 0) __PYX_ERR(0, 471, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_EdgeCut->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_EdgeCut->tp_dictoffset && __pyx_ptype_9networkit_9community_EdgeCut->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_EdgeCut->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EdgeCut, (PyObject *) __pyx_ptype_9networkit_9community_EdgeCut) < 0) __PYX_ERR(0, 471, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_EdgeCut) < 0) __PYX_ERR(0, 471, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_9community_Modularity = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_Modularity_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_9community_Modularity)) __PYX_ERR(0, 507, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_Modularity_spec, __pyx_ptype_9networkit_9community_Modularity) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_Modularity = &__pyx_type_9networkit_9community_Modularity;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_Modularity) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_Modularity->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_Modularity->tp_dictoffset && __pyx_ptype_9networkit_9community_Modularity->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_Modularity->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Modularity, (PyObject *) __pyx_ptype_9networkit_9community_Modularity) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_Modularity) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_9community_HubDominance = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_HubDominance_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_9community_HubDominance)) __PYX_ERR(0, 555, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_HubDominance_spec, __pyx_ptype_9networkit_9community_HubDominance) < 0) __PYX_ERR(0, 555, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_HubDominance = &__pyx_type_9networkit_9community_HubDominance;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_HubDominance) < 0) __PYX_ERR(0, 555, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_HubDominance->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_HubDominance->tp_dictoffset && __pyx_ptype_9networkit_9community_HubDominance->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_HubDominance->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HubDominance, (PyObject *) __pyx_ptype_9networkit_9community_HubDominance) < 0) __PYX_ERR(0, 555, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_HubDominance) < 0) __PYX_ERR(0, 555, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_CommunityDetector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_PLM = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_PLM_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_PLM)) __PYX_ERR(0, 608, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_PLM_spec, __pyx_ptype_9networkit_9community_PLM) < 0) __PYX_ERR(0, 608, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_PLM = &__pyx_type_9networkit_9community_PLM;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_PLM->tp_base = __pyx_ptype_9networkit_9community_CommunityDetector;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_PLM) < 0) __PYX_ERR(0, 608, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_PLM->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_PLM->tp_dictoffset && __pyx_ptype_9networkit_9community_PLM->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_PLM->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PLM, (PyObject *) __pyx_ptype_9networkit_9community_PLM) < 0) __PYX_ERR(0, 608, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_PLM) < 0) __PYX_ERR(0, 608, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_CommunityDetector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_ParallelLeiden = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_ParallelLeiden_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_ParallelLeiden)) __PYX_ERR(0, 708, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_ParallelLeiden_spec, __pyx_ptype_9networkit_9community_ParallelLeiden) < 0) __PYX_ERR(0, 708, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_ParallelLeiden = &__pyx_type_9networkit_9community_ParallelLeiden;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_ParallelLeiden->tp_base = __pyx_ptype_9networkit_9community_CommunityDetector;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_ParallelLeiden) < 0) __PYX_ERR(0, 708, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_ParallelLeiden->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_ParallelLeiden->tp_dictoffset && __pyx_ptype_9networkit_9community_ParallelLeiden->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_ParallelLeiden->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ParallelLeiden, (PyObject *) __pyx_ptype_9networkit_9community_ParallelLeiden) < 0) __PYX_ERR(0, 708, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_ParallelLeiden) < 0) __PYX_ERR(0, 708, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_CommunityDetector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_LouvainMapEquation = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_LouvainMapEquation_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_LouvainMapEquation)) __PYX_ERR(0, 734, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_LouvainMapEquation_spec, __pyx_ptype_9networkit_9community_LouvainMapEquation) < 0) __PYX_ERR(0, 734, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_LouvainMapEquation = &__pyx_type_9networkit_9community_LouvainMapEquation;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_LouvainMapEquation->tp_base = __pyx_ptype_9networkit_9community_CommunityDetector;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_LouvainMapEquation) < 0) __PYX_ERR(0, 734, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_LouvainMapEquation->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_LouvainMapEquation->tp_dictoffset && __pyx_ptype_9networkit_9community_LouvainMapEquation->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_LouvainMapEquation->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LouvainMapEquation, (PyObject *) __pyx_ptype_9networkit_9community_LouvainMapEquation) < 0) __PYX_ERR(0, 734, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_LouvainMapEquation) < 0) __PYX_ERR(0, 734, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_CommunityDetector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_PLP = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_PLP_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_PLP)) __PYX_ERR(0, 765, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_PLP_spec, __pyx_ptype_9networkit_9community_PLP) < 0) __PYX_ERR(0, 765, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_PLP = &__pyx_type_9networkit_9community_PLP;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_PLP->tp_base = __pyx_ptype_9networkit_9community_CommunityDetector;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_PLP) < 0) __PYX_ERR(0, 765, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_PLP->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_PLP->tp_dictoffset && __pyx_ptype_9networkit_9community_PLP->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_PLP->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PLP, (PyObject *) __pyx_ptype_9networkit_9community_PLP) < 0) __PYX_ERR(0, 765, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_PLP) < 0) __PYX_ERR(0, 765, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_OverlappingCommunityDetector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_LFM = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_LFM_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_LFM)) __PYX_ERR(0, 839, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_LFM_spec, __pyx_ptype_9networkit_9community_LFM) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_LFM = &__pyx_type_9networkit_9community_LFM;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_LFM->tp_base = __pyx_ptype_9networkit_9community_OverlappingCommunityDetector;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_LFM) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_LFM->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_LFM->tp_dictoffset && __pyx_ptype_9networkit_9community_LFM->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_LFM->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LFM, (PyObject *) __pyx_ptype_9networkit_9community_LFM) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_LFM) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_CommunityDetector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_LPDegreeOrdered = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_LPDegreeOrdered_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_LPDegreeOrdered)) __PYX_ERR(0, 879, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_LPDegreeOrdered_spec, __pyx_ptype_9networkit_9community_LPDegreeOrdered) < 0) __PYX_ERR(0, 879, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_LPDegreeOrdered = &__pyx_type_9networkit_9community_LPDegreeOrdered;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_LPDegreeOrdered->tp_base = __pyx_ptype_9networkit_9community_CommunityDetector;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_LPDegreeOrdered) < 0) __PYX_ERR(0, 879, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_LPDegreeOrdered->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_LPDegreeOrdered->tp_dictoffset && __pyx_ptype_9networkit_9community_LPDegreeOrdered->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_LPDegreeOrdered->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LPDegreeOrdered, (PyObject *) __pyx_ptype_9networkit_9community_LPDegreeOrdered) < 0) __PYX_ERR(0, 879, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_LPDegreeOrdered) < 0) __PYX_ERR(0, 879, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_CommunityDetector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_CutClustering = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_CutClustering_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_CutClustering)) __PYX_ERR(0, 913, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_CutClustering_spec, __pyx_ptype_9networkit_9community_CutClustering) < 0) __PYX_ERR(0, 913, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_CutClustering = &__pyx_type_9networkit_9community_CutClustering;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_CutClustering->tp_base = __pyx_ptype_9networkit_9community_CommunityDetector;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_CutClustering) < 0) __PYX_ERR(0, 913, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_CutClustering->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_CutClustering->tp_dictoffset && __pyx_ptype_9networkit_9community_CutClustering->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_CutClustering->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CutClustering, (PyObject *) __pyx_ptype_9networkit_9community_CutClustering) < 0) __PYX_ERR(0, 913, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_CutClustering) < 0) __PYX_ERR(0, 913, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_9community_DissimilarityMeasure = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_DissimilarityMeasure_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_9community_DissimilarityMeasure)) __PYX_ERR(0, 965, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_DissimilarityMeasure_spec, __pyx_ptype_9networkit_9community_DissimilarityMeasure) < 0) __PYX_ERR(0, 965, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_DissimilarityMeasure = &__pyx_type_9networkit_9community_DissimilarityMeasure;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_DissimilarityMeasure) < 0) __PYX_ERR(0, 965, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_DissimilarityMeasure->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_DissimilarityMeasure->tp_dictoffset && __pyx_ptype_9networkit_9community_DissimilarityMeasure->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_DissimilarityMeasure->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DissimilarityMeasure, (PyObject *) __pyx_ptype_9networkit_9community_DissimilarityMeasure) < 0) __PYX_ERR(0, 965, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_DissimilarityMeasure) < 0) __PYX_ERR(0, 965, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_DissimilarityMeasure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_NodeStructuralRandMeasure = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_NodeStructuralRandMeasure_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_NodeStructuralRandMeasure)) __PYX_ERR(0, 976, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_NodeStructuralRandMeasure_spec, __pyx_ptype_9networkit_9community_NodeStructuralRandMeasure) < 0) __PYX_ERR(0, 976, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_NodeStructuralRandMeasure = &__pyx_type_9networkit_9community_NodeStructuralRandMeasure;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_NodeStructuralRandMeasure->tp_base = __pyx_ptype_9networkit_9community_DissimilarityMeasure;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_NodeStructuralRandMeasure) < 0) __PYX_ERR(0, 976, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_NodeStructuralRandMeasure->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_NodeStructuralRandMeasure->tp_dictoffset && __pyx_ptype_9networkit_9community_NodeStructuralRandMeasure->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_NodeStructuralRandMeasure->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_NodeStructuralRandMeasure, (PyObject *) __pyx_ptype_9networkit_9community_NodeStructuralRandMeasure) < 0) __PYX_ERR(0, 976, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_NodeStructuralRandMeasure) < 0) __PYX_ERR(0, 976, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_DissimilarityMeasure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_GraphStructuralRandMeasure = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_GraphStructuralRandMeasure_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_GraphStructuralRandMeasure)) __PYX_ERR(0, 1017, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_GraphStructuralRandMeasure_spec, __pyx_ptype_9networkit_9community_GraphStructuralRandMeasure) < 0) __PYX_ERR(0, 1017, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_GraphStructuralRandMeasure = &__pyx_type_9networkit_9community_GraphStructuralRandMeasure;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_GraphStructuralRandMeasure->tp_base = __pyx_ptype_9networkit_9community_DissimilarityMeasure;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_GraphStructuralRandMeasure) < 0) __PYX_ERR(0, 1017, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_GraphStructuralRandMeasure->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_GraphStructuralRandMeasure->tp_dictoffset && __pyx_ptype_9networkit_9community_GraphStructuralRandMeasure->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_GraphStructuralRandMeasure->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GraphStructuralRandMeasure, (PyObject *) __pyx_ptype_9networkit_9community_GraphStructuralRandMeasure) < 0) __PYX_ERR(0, 1017, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_GraphStructuralRandMeasure) < 0) __PYX_ERR(0, 1017, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_DissimilarityMeasure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_JaccardMeasure = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_JaccardMeasure_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_JaccardMeasure)) __PYX_ERR(0, 1058, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_JaccardMeasure_spec, __pyx_ptype_9networkit_9community_JaccardMeasure) < 0) __PYX_ERR(0, 1058, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_JaccardMeasure = &__pyx_type_9networkit_9community_JaccardMeasure;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_JaccardMeasure->tp_base = __pyx_ptype_9networkit_9community_DissimilarityMeasure;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_JaccardMeasure) < 0) __PYX_ERR(0, 1058, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_JaccardMeasure->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_JaccardMeasure->tp_dictoffset && __pyx_ptype_9networkit_9community_JaccardMeasure->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_JaccardMeasure->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_JaccardMeasure, (PyObject *) __pyx_ptype_9networkit_9community_JaccardMeasure) < 0) __PYX_ERR(0, 1058, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_JaccardMeasure) < 0) __PYX_ERR(0, 1058, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_DissimilarityMeasure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_NMIDistance = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_NMIDistance_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_NMIDistance)) __PYX_ERR(0, 1095, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_NMIDistance_spec, __pyx_ptype_9networkit_9community_NMIDistance) < 0) __PYX_ERR(0, 1095, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_NMIDistance = &__pyx_type_9networkit_9community_NMIDistance;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_NMIDistance->tp_base = __pyx_ptype_9networkit_9community_DissimilarityMeasure;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_NMIDistance) < 0) __PYX_ERR(0, 1095, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_NMIDistance->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_NMIDistance->tp_dictoffset && __pyx_ptype_9networkit_9community_NMIDistance->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_NMIDistance->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_NMIDistance, (PyObject *) __pyx_ptype_9networkit_9community_NMIDistance) < 0) __PYX_ERR(0, 1095, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_NMIDistance) < 0) __PYX_ERR(0, 1095, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_DissimilarityMeasure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_AdjustedRandMeasure = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_AdjustedRandMeasure_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_AdjustedRandMeasure)) __PYX_ERR(0, 1134, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_AdjustedRandMeasure_spec, __pyx_ptype_9networkit_9community_AdjustedRandMeasure) < 0) __PYX_ERR(0, 1134, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_AdjustedRandMeasure = &__pyx_type_9networkit_9community_AdjustedRandMeasure;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_AdjustedRandMeasure->tp_base = __pyx_ptype_9networkit_9community_DissimilarityMeasure;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_AdjustedRandMeasure) < 0) __PYX_ERR(0, 1134, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_AdjustedRandMeasure->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_AdjustedRandMeasure->tp_dictoffset && __pyx_ptype_9networkit_9community_AdjustedRandMeasure->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_AdjustedRandMeasure->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AdjustedRandMeasure, (PyObject *) __pyx_ptype_9networkit_9community_AdjustedRandMeasure) < 0) __PYX_ERR(0, 1134, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_AdjustedRandMeasure) < 0) __PYX_ERR(0, 1134, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_4base_Algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_LocalCommunityEvaluation = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_LocalCommunityEvaluation_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_LocalCommunityEvaluation)) __PYX_ERR(0, 1178, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_LocalCommunityEvaluation_spec, __pyx_ptype_9networkit_9community_LocalCommunityEvaluation) < 0) __PYX_ERR(0, 1178, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_LocalCommunityEvaluation = &__pyx_type_9networkit_9community_LocalCommunityEvaluation;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_LocalCommunityEvaluation->tp_dealloc = __pyx_ptype_9networkit_4base_Algorithm->tp_dealloc;
  __pyx_ptype_9networkit_9community_LocalCommunityEvaluation->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  __pyx_ptype_9networkit_9community_LocalCommunityEvaluation->tp_new = __pyx_ptype_9networkit_4base_Algorithm->tp_new;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation) < 0) __PYX_ERR(0, 1178, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_LocalCommunityEvaluation->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_LocalCommunityEvaluation->tp_dictoffset && __pyx_ptype_9networkit_9community_LocalCommunityEvaluation->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_LocalCommunityEvaluation->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LocalCommunityEvaluation, (PyObject *) __pyx_ptype_9networkit_9community_LocalCommunityEvaluation) < 0) __PYX_ERR(0, 1178, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_LocalCommunityEvaluation) < 0) __PYX_ERR(0, 1178, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_LocalCommunityEvaluation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_LocalPartitionEvaluation = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_LocalPartitionEvaluation_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_LocalPartitionEvaluation)) __PYX_ERR(0, 1304, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_LocalPartitionEvaluation_spec, __pyx_ptype_9networkit_9community_LocalPartitionEvaluation) < 0) __PYX_ERR(0, 1304, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_LocalPartitionEvaluation = &__pyx_type_9networkit_9community_LocalPartitionEvaluation;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_LocalPartitionEvaluation->tp_base = __pyx_ptype_9networkit_9community_LocalCommunityEvaluation;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_LocalPartitionEvaluation) < 0) __PYX_ERR(0, 1304, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_LocalPartitionEvaluation->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_LocalPartitionEvaluation->tp_dictoffset && __pyx_ptype_9networkit_9community_LocalPartitionEvaluation->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_LocalPartitionEvaluation->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LocalPartitionEvaluation, (PyObject *) __pyx_ptype_9networkit_9community_LocalPartitionEvaluation) < 0) __PYX_ERR(0, 1304, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_LocalPartitionEvaluation) < 0) __PYX_ERR(0, 1304, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_LocalCommunityEvaluation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_LocalCoverEvaluation = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_LocalCoverEvaluation_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_LocalCoverEvaluation)) __PYX_ERR(0, 1334, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_LocalCoverEvaluation_spec, __pyx_ptype_9networkit_9community_LocalCoverEvaluation) < 0) __PYX_ERR(0, 1334, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_LocalCoverEvaluation = &__pyx_type_9networkit_9community_LocalCoverEvaluation;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_LocalCoverEvaluation->tp_base = __pyx_ptype_9networkit_9community_LocalCommunityEvaluation;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_LocalCoverEvaluation) < 0) __PYX_ERR(0, 1334, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_LocalCoverEvaluation->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_LocalCoverEvaluation->tp_dictoffset && __pyx_ptype_9networkit_9community_LocalCoverEvaluation->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_LocalCoverEvaluation->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LocalCoverEvaluation, (PyObject *) __pyx_ptype_9networkit_9community_LocalCoverEvaluation) < 0) __PYX_ERR(0, 1334, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_LocalCoverEvaluation) < 0) __PYX_ERR(0, 1334, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_LocalPartitionEvaluation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_IntrapartitionDensity = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_IntrapartitionDensity_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_IntrapartitionDensity)) __PYX_ERR(0, 1363, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_IntrapartitionDensity_spec, __pyx_ptype_9networkit_9community_IntrapartitionDensity) < 0) __PYX_ERR(0, 1363, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_IntrapartitionDensity = &__pyx_type_9networkit_9community_IntrapartitionDensity;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_IntrapartitionDensity->tp_base = __pyx_ptype_9networkit_9community_LocalPartitionEvaluation;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_IntrapartitionDensity) < 0) __PYX_ERR(0, 1363, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_IntrapartitionDensity->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_IntrapartitionDensity->tp_dictoffset && __pyx_ptype_9networkit_9community_IntrapartitionDensity->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_IntrapartitionDensity->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_IntrapartitionDensity, (PyObject *) __pyx_ptype_9networkit_9community_IntrapartitionDensity) < 0) __PYX_ERR(0, 1363, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_IntrapartitionDensity) < 0) __PYX_ERR(0, 1363, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_LocalPartitionEvaluation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_IsolatedInterpartitionConductance_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance)) __PYX_ERR(0, 1401, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_IsolatedInterpartitionConductance_spec, __pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance) < 0) __PYX_ERR(0, 1401, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance = &__pyx_type_9networkit_9community_IsolatedInterpartitionConductance;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance->tp_base = __pyx_ptype_9networkit_9community_LocalPartitionEvaluation;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance) < 0) __PYX_ERR(0, 1401, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance->tp_dictoffset && __pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_IsolatedInterpartitionConductanc, (PyObject *) __pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance) < 0) __PYX_ERR(0, 1401, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_IsolatedInterpartitionConductance) < 0) __PYX_ERR(0, 1401, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_LocalPartitionEvaluation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_IsolatedInterpartitionExpansion_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion)) __PYX_ERR(0, 1434, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_IsolatedInterpartitionExpansion_spec, __pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion) < 0) __PYX_ERR(0, 1434, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion = &__pyx_type_9networkit_9community_IsolatedInterpartitionExpansion;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion->tp_base = __pyx_ptype_9networkit_9community_LocalPartitionEvaluation;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion) < 0) __PYX_ERR(0, 1434, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion->tp_dictoffset && __pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_IsolatedInterpartitionExpansion, (PyObject *) __pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion) < 0) __PYX_ERR(0, 1434, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_IsolatedInterpartitionExpansion) < 0) __PYX_ERR(0, 1434, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_LocalCoverEvaluation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_CoverHubDominance = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_CoverHubDominance_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_CoverHubDominance)) __PYX_ERR(0, 1467, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_CoverHubDominance_spec, __pyx_ptype_9networkit_9community_CoverHubDominance) < 0) __PYX_ERR(0, 1467, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_CoverHubDominance = &__pyx_type_9networkit_9community_CoverHubDominance;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_CoverHubDominance->tp_base = __pyx_ptype_9networkit_9community_LocalCoverEvaluation;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_CoverHubDominance) < 0) __PYX_ERR(0, 1467, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_CoverHubDominance->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_CoverHubDominance->tp_dictoffset && __pyx_ptype_9networkit_9community_CoverHubDominance->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_CoverHubDominance->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CoverHubDominance, (PyObject *) __pyx_ptype_9networkit_9community_CoverHubDominance) < 0) __PYX_ERR(0, 1467, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_CoverHubDominance) < 0) __PYX_ERR(0, 1467, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_LocalPartitionEvaluation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_PartitionHubDominance = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_PartitionHubDominance_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_PartitionHubDominance)) __PYX_ERR(0, 1498, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_PartitionHubDominance_spec, __pyx_ptype_9networkit_9community_PartitionHubDominance) < 0) __PYX_ERR(0, 1498, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_PartitionHubDominance = &__pyx_type_9networkit_9community_PartitionHubDominance;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_PartitionHubDominance->tp_base = __pyx_ptype_9networkit_9community_LocalPartitionEvaluation;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_PartitionHubDominance) < 0) __PYX_ERR(0, 1498, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_PartitionHubDominance->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_PartitionHubDominance->tp_dictoffset && __pyx_ptype_9networkit_9community_PartitionHubDominance->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_PartitionHubDominance->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PartitionHubDominance, (PyObject *) __pyx_ptype_9networkit_9community_PartitionHubDominance) < 0) __PYX_ERR(0, 1498, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_PartitionHubDominance) < 0) __PYX_ERR(0, 1498, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_LocalPartitionEvaluation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_PartitionFragmentation = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_PartitionFragmentation_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_PartitionFragmentation)) __PYX_ERR(0, 1528, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_PartitionFragmentation_spec, __pyx_ptype_9networkit_9community_PartitionFragmentation) < 0) __PYX_ERR(0, 1528, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_PartitionFragmentation = &__pyx_type_9networkit_9community_PartitionFragmentation;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_PartitionFragmentation->tp_base = __pyx_ptype_9networkit_9community_LocalPartitionEvaluation;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_PartitionFragmentation) < 0) __PYX_ERR(0, 1528, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_PartitionFragmentation->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_PartitionFragmentation->tp_dictoffset && __pyx_ptype_9networkit_9community_PartitionFragmentation->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_PartitionFragmentation->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PartitionFragmentation, (PyObject *) __pyx_ptype_9networkit_9community_PartitionFragmentation) < 0) __PYX_ERR(0, 1528, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_PartitionFragmentation) < 0) __PYX_ERR(0, 1528, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_LocalPartitionEvaluation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_StablePartitionNodes = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_StablePartitionNodes_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_StablePartitionNodes)) __PYX_ERR(0, 1551, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_StablePartitionNodes_spec, __pyx_ptype_9networkit_9community_StablePartitionNodes) < 0) __PYX_ERR(0, 1551, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_StablePartitionNodes = &__pyx_type_9networkit_9community_StablePartitionNodes;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_StablePartitionNodes->tp_base = __pyx_ptype_9networkit_9community_LocalPartitionEvaluation;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_StablePartitionNodes) < 0) __PYX_ERR(0, 1551, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_StablePartitionNodes->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_StablePartitionNodes->tp_dictoffset && __pyx_ptype_9networkit_9community_StablePartitionNodes->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_StablePartitionNodes->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StablePartitionNodes, (PyObject *) __pyx_ptype_9networkit_9community_StablePartitionNodes) < 0) __PYX_ERR(0, 1551, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_StablePartitionNodes) < 0) __PYX_ERR(0, 1551, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_LocalCoverEvaluation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_CoverF1Similarity = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_CoverF1Similarity_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_CoverF1Similarity)) __PYX_ERR(0, 1597, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_CoverF1Similarity_spec, __pyx_ptype_9networkit_9community_CoverF1Similarity) < 0) __PYX_ERR(0, 1597, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_CoverF1Similarity = &__pyx_type_9networkit_9community_CoverF1Similarity;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_CoverF1Similarity->tp_base = __pyx_ptype_9networkit_9community_LocalCoverEvaluation;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_CoverF1Similarity) < 0) __PYX_ERR(0, 1597, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_CoverF1Similarity->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_CoverF1Similarity->tp_dictoffset && __pyx_ptype_9networkit_9community_CoverF1Similarity->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_CoverF1Similarity->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CoverF1Similarity, (PyObject *) __pyx_ptype_9networkit_9community_CoverF1Similarity) < 0) __PYX_ERR(0, 1597, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_CoverF1Similarity) < 0) __PYX_ERR(0, 1597, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_9community_DissimilarityMeasure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_9community_OverlappingNMIDistance = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_9community_OverlappingNMIDistance_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_9community_OverlappingNMIDistance)) __PYX_ERR(0, 1923, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_9community_OverlappingNMIDistance_spec, __pyx_ptype_9networkit_9community_OverlappingNMIDistance) < 0) __PYX_ERR(0, 1923, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_9community_OverlappingNMIDistance = &__pyx_type_9networkit_9community_OverlappingNMIDistance;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_9community_OverlappingNMIDistance->tp_base = __pyx_ptype_9networkit_9community_DissimilarityMeasure;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_9community_OverlappingNMIDistance) < 0) __PYX_ERR(0, 1923, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_9community_OverlappingNMIDistance->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_9community_OverlappingNMIDistance->tp_dictoffset && __pyx_ptype_9networkit_9community_OverlappingNMIDistance->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_9community_OverlappingNMIDistance->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OverlappingNMIDistance, (PyObject *) __pyx_ptype_9networkit_9community_OverlappingNMIDistance) < 0) __PYX_ERR(0, 1923, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_9community_OverlappingNMIDistance) < 0) __PYX_ERR(0, 1923, __pyx_L1_error)
  #endif
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("networkit.base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_4base__CythonParentClass = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.base", "_CythonParentClass", sizeof(struct __pyx_obj_9networkit_4base__CythonParentClass), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_4base__CythonParentClass),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_4base__CythonParentClass) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("networkit.structures"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_10structures_Cover = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.structures", "Cover", sizeof(struct __pyx_obj_9networkit_10structures_Cover), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_10structures_Cover),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_10structures_Cover) __PYX_ERR(3, 50, __pyx_L1_error)
  __pyx_vtabptr_9networkit_10structures_Cover = (struct __pyx_vtabstruct_9networkit_10structures_Cover*)__Pyx_GetVtable(__pyx_ptype_9networkit_10structures_Cover); if (unlikely(!__pyx_vtabptr_9networkit_10structures_Cover)) __PYX_ERR(3, 50, __pyx_L1_error)
  __pyx_ptype_9networkit_10structures_Partition = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.structures", "Partition", sizeof(struct __pyx_obj_9networkit_10structures_Partition), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_10structures_Partition),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_10structures_Partition) __PYX_ERR(3, 86, __pyx_L1_error)
  __pyx_vtabptr_9networkit_10structures_Partition = (struct __pyx_vtabstruct_9networkit_10structures_Partition*)__Pyx_GetVtable(__pyx_ptype_9networkit_10structures_Partition); if (unlikely(!__pyx_vtabptr_9networkit_10structures_Partition)) __PYX_ERR(3, 86, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("networkit.graph"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_5graph_Graph = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "Graph", sizeof(struct __pyx_obj_9networkit_5graph_Graph), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_Graph),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_Graph) __PYX_ERR(4, 283, __pyx_L1_error)
  __pyx_vtabptr_9networkit_5graph_Graph = (struct __pyx_vtabstruct_9networkit_5graph_Graph*)__Pyx_GetVtable(__pyx_ptype_9networkit_5graph_Graph); if (unlikely(!__pyx_vtabptr_9networkit_5graph_Graph)) __PYX_ERR(4, 283, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_NodeIntAttribute = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "NodeIntAttribute", sizeof(struct __pyx_obj_9networkit_5graph_NodeIntAttribute), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_NodeIntAttribute),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_NodeIntAttribute) __PYX_ERR(4, 287, __pyx_L1_error)
  __pyx_vtabptr_9networkit_5graph_NodeIntAttribute = (struct __pyx_vtabstruct_9networkit_5graph_NodeIntAttribute*)__Pyx_GetVtable(__pyx_ptype_9networkit_5graph_NodeIntAttribute); if (unlikely(!__pyx_vtabptr_9networkit_5graph_NodeIntAttribute)) __PYX_ERR(4, 287, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_NodeDoubleAttribute = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "NodeDoubleAttribute", sizeof(struct __pyx_obj_9networkit_5graph_NodeDoubleAttribute), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_NodeDoubleAttribute),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_NodeDoubleAttribute) __PYX_ERR(4, 294, __pyx_L1_error)
  __pyx_vtabptr_9networkit_5graph_NodeDoubleAttribute = (struct __pyx_vtabstruct_9networkit_5graph_NodeDoubleAttribute*)__Pyx_GetVtable(__pyx_ptype_9networkit_5graph_NodeDoubleAttribute); if (unlikely(!__pyx_vtabptr_9networkit_5graph_NodeDoubleAttribute)) __PYX_ERR(4, 294, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_NodeStringAttribute = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "NodeStringAttribute", sizeof(struct __pyx_obj_9networkit_5graph_NodeStringAttribute), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_NodeStringAttribute),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_NodeStringAttribute) __PYX_ERR(4, 301, __pyx_L1_error)
  __pyx_vtabptr_9networkit_5graph_NodeStringAttribute = (struct __pyx_vtabstruct_9networkit_5graph_NodeStringAttribute*)__Pyx_GetVtable(__pyx_ptype_9networkit_5graph_NodeStringAttribute); if (unlikely(!__pyx_vtabptr_9networkit_5graph_NodeStringAttribute)) __PYX_ERR(4, 301, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_EdgeIntAttribute = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "EdgeIntAttribute", sizeof(struct __pyx_obj_9networkit_5graph_EdgeIntAttribute), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_EdgeIntAttribute),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_EdgeIntAttribute) __PYX_ERR(4, 308, __pyx_L1_error)
  __pyx_vtabptr_9networkit_5graph_EdgeIntAttribute = (struct __pyx_vtabstruct_9networkit_5graph_EdgeIntAttribute*)__Pyx_GetVtable(__pyx_ptype_9networkit_5graph_EdgeIntAttribute); if (unlikely(!__pyx_vtabptr_9networkit_5graph_EdgeIntAttribute)) __PYX_ERR(4, 308, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_EdgeDoubleAttribute = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "EdgeDoubleAttribute", sizeof(struct __pyx_obj_9networkit_5graph_EdgeDoubleAttribute), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_EdgeDoubleAttribute),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_EdgeDoubleAttribute) __PYX_ERR(4, 315, __pyx_L1_error)
  __pyx_vtabptr_9networkit_5graph_EdgeDoubleAttribute = (struct __pyx_vtabstruct_9networkit_5graph_EdgeDoubleAttribute*)__Pyx_GetVtable(__pyx_ptype_9networkit_5graph_EdgeDoubleAttribute); if (unlikely(!__pyx_vtabptr_9networkit_5graph_EdgeDoubleAttribute)) __PYX_ERR(4, 315, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_EdgeStringAttribute = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "EdgeStringAttribute", sizeof(struct __pyx_obj_9networkit_5graph_EdgeStringAttribute), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_EdgeStringAttribute),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_EdgeStringAttribute) __PYX_ERR(4, 322, __pyx_L1_error)
  __pyx_vtabptr_9networkit_5graph_EdgeStringAttribute = (struct __pyx_vtabstruct_9networkit_5graph_EdgeStringAttribute*)__Pyx_GetVtable(__pyx_ptype_9networkit_5graph_EdgeStringAttribute); if (unlikely(!__pyx_vtabptr_9networkit_5graph_EdgeStringAttribute)) __PYX_ERR(4, 322, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "RandomMaximumSpanningForest", sizeof(struct __pyx_obj_9networkit_5graph_RandomMaximumSpanningForest), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_RandomMaximumSpanningForest),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest) __PYX_ERR(4, 347, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "UnionMaximumSpanningForest", sizeof(struct __pyx_obj_9networkit_5graph_UnionMaximumSpanningForest), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_UnionMaximumSpanningForest),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest) __PYX_ERR(4, 362, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("networkit.scd"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_3scd_SelectiveCommunityDetector = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.scd", "SelectiveCommunityDetector", sizeof(struct __pyx_obj_9networkit_3scd_SelectiveCommunityDetector), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_3scd_SelectiveCommunityDetector),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_3scd_SelectiveCommunityDetector) __PYX_ERR(5, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_community(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_community},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "community",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcommunity(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcommunity(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_community(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_community(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_community(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __pyx_t_9networkit_10structures_count __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'community' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("community", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "community" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_community(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_networkit__community) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "networkit.community")) {
      if (unlikely((PyDict_SetItemString(modules, "networkit.community", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "networkit/community.pyx":9
 * from libcpp.map cimport map
 * 
 * import os             # <<<<<<<<<<<<<<
 * import math
 * import numpy as np
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_os, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_2) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/community.pyx":10
 * 
 * import os
 * import math             # <<<<<<<<<<<<<<
 * import numpy as np
 * import random
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_math, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_math, __pyx_t_2) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/community.pyx":11
 * import os
 * import math
 * import numpy as np             # <<<<<<<<<<<<<<
 * import random
 * import timeit
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_numpy, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/community.pyx":12
 * import math
 * import numpy as np
 * import random             # <<<<<<<<<<<<<<
 * import timeit
 * import warnings
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_random, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_random, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/community.pyx":13
 * import numpy as np
 * import random
 * import timeit             # <<<<<<<<<<<<<<
 * import warnings
 * try:
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_timeit, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_timeit, __pyx_t_2) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/community.pyx":14
 * import random
 * import timeit
 * import warnings             # <<<<<<<<<<<<<<
 * try:
 * 	import tabulate
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_warnings, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_2) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/community.pyx":15
 * import timeit
 * import warnings
 * try:             # <<<<<<<<<<<<<<
 * 	import tabulate
 * except ImportError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "networkit/community.pyx":16
 * import warnings
 * try:
 * 	import tabulate             # <<<<<<<<<<<<<<
 * except ImportError:
 * 	have_tabulate = False
 */
      __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_tabulate, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_tabulate, __pyx_t_2) < 0) __PYX_ERR(0, 16, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "networkit/community.pyx":15
 * import timeit
 * import warnings
 * try:             # <<<<<<<<<<<<<<
 * 	import tabulate
 * except ImportError:
 */
    }

    /* "networkit/community.pyx":20
 * 	have_tabulate = False
 * else:
 * 	have_tabulate = True             # <<<<<<<<<<<<<<
 * import tempfile
 * import subprocess
 */
    /*else:*/ {
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_have_tabulate, Py_True) < 0) __PYX_ERR(0, 20, __pyx_L4_except_error)
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L7_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "networkit/community.pyx":17
 * try:
 * 	import tabulate
 * except ImportError:             # <<<<<<<<<<<<<<
 * 	have_tabulate = False
 * else:
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("networkit.community", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 17, __pyx_L4_except_error)
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "networkit/community.pyx":18
 * 	import tabulate
 * except ImportError:
 * 	have_tabulate = False             # <<<<<<<<<<<<<<
 * else:
 * 	have_tabulate = True
 */
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_have_tabulate, Py_False) < 0) __PYX_ERR(0, 18, __pyx_L4_except_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;

    /* "networkit/community.pyx":15
 * import timeit
 * import warnings
 * try:             # <<<<<<<<<<<<<<
 * 	import tabulate
 * except ImportError:
 */
    __pyx_L4_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_3, __pyx_t_4);
    __pyx_L7_try_end:;
  }

  /* "networkit/community.pyx":21
 * else:
 * 	have_tabulate = True
 * import tempfile             # <<<<<<<<<<<<<<
 * import subprocess
 * 
 */
  __pyx_t_7 = __Pyx_ImportDottedModule(__pyx_n_s_tempfile, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tempfile, __pyx_t_7) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":22
 * 	have_tabulate = True
 * import tempfile
 * import subprocess             # <<<<<<<<<<<<<<
 * 
 * from .base cimport _Algorithm, Algorithm
 */
  __pyx_t_7 = __Pyx_ImportDottedModule(__pyx_n_s_subprocess, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_subprocess, __pyx_t_7) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":27
 * from .graph cimport _Graph, Graph
 * from .structures cimport _Partition, Partition, _Cover, Cover, count, index, node, edgeweight
 * from .graphio import PartitionReader, PartitionWriter, EdgeListPartitionReader, BinaryPartitionReader, BinaryPartitionWriter, BinaryEdgeListPartitionReader, BinaryEdgeListPartitionWriter             # <<<<<<<<<<<<<<
 * from .scd cimport _SelectiveCommunityDetector, SelectiveCommunityDetector
 * 
 */
  __pyx_t_7 = PyList_New(7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_PartitionReader);
  __Pyx_GIVEREF(__pyx_n_s_PartitionReader);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_PartitionReader)) __PYX_ERR(0, 27, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_PartitionWriter);
  __Pyx_GIVEREF(__pyx_n_s_PartitionWriter);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_n_s_PartitionWriter)) __PYX_ERR(0, 27, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_EdgeListPartitionReader);
  __Pyx_GIVEREF(__pyx_n_s_EdgeListPartitionReader);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 2, __pyx_n_s_EdgeListPartitionReader)) __PYX_ERR(0, 27, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_BinaryPartitionReader);
  __Pyx_GIVEREF(__pyx_n_s_BinaryPartitionReader);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 3, __pyx_n_s_BinaryPartitionReader)) __PYX_ERR(0, 27, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_BinaryPartitionWriter);
  __Pyx_GIVEREF(__pyx_n_s_BinaryPartitionWriter);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 4, __pyx_n_s_BinaryPartitionWriter)) __PYX_ERR(0, 27, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_BinaryEdgeListPartitionReader);
  __Pyx_GIVEREF(__pyx_n_s_BinaryEdgeListPartitionReader);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 5, __pyx_n_s_BinaryEdgeListPartitionReader)) __PYX_ERR(0, 27, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_BinaryEdgeListPartitionWriter);
  __Pyx_GIVEREF(__pyx_n_s_BinaryEdgeListPartitionWriter);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 6, __pyx_n_s_BinaryEdgeListPartitionWriter)) __PYX_ERR(0, 27, __pyx_L1_error);
  __pyx_t_6 = __Pyx_Import(__pyx_n_s_graphio, __pyx_t_7, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_PartitionReader); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PartitionReader, __pyx_t_7) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_PartitionWriter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PartitionWriter, __pyx_t_7) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_EdgeListPartitionReader); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EdgeListPartitionReader, __pyx_t_7) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_BinaryPartitionReader); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BinaryPartitionReader, __pyx_t_7) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_BinaryPartitionWriter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BinaryPartitionWriter, __pyx_t_7) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_BinaryEdgeListPartitionReader); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BinaryEdgeListPartitionReader, __pyx_t_7) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_BinaryEdgeListPartitionWriter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BinaryEdgeListPartitionWriter, __pyx_t_7) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":30
 * from .scd cimport _SelectiveCommunityDetector, SelectiveCommunityDetector
 * 
 * from . import graph             # <<<<<<<<<<<<<<
 * from .graphtools import GraphTools
 * from .algebraic import laplacianEigenvectors
 */
  __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_n_s_graph);
  __Pyx_GIVEREF(__pyx_n_s_graph);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_graph)) __PYX_ERR(0, 30, __pyx_L1_error);
  __pyx_t_7 = __Pyx_Import(__pyx_kp_s__5, __pyx_t_6, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_ImportFrom(__pyx_t_7, __pyx_n_s_graph); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_graph, __pyx_t_6) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":31
 * 
 * from . import graph
 * from .graphtools import GraphTools             # <<<<<<<<<<<<<<
 * from .algebraic import laplacianEigenvectors
 * from .centrality import CoreDecomposition
 */
  __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_GraphTools);
  __Pyx_GIVEREF(__pyx_n_s_GraphTools);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_GraphTools)) __PYX_ERR(0, 31, __pyx_L1_error);
  __pyx_t_6 = __Pyx_Import(__pyx_n_s_graphtools, __pyx_t_7, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_GraphTools); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GraphTools, __pyx_t_7) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":32
 * from . import graph
 * from .graphtools import GraphTools
 * from .algebraic import laplacianEigenvectors             # <<<<<<<<<<<<<<
 * from .centrality import CoreDecomposition
 * from .coarsening import ParallelPartitionCoarsening
 */
  __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_n_s_laplacianEigenvectors);
  __Pyx_GIVEREF(__pyx_n_s_laplacianEigenvectors);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_laplacianEigenvectors)) __PYX_ERR(0, 32, __pyx_L1_error);
  __pyx_t_7 = __Pyx_Import(__pyx_n_s_algebraic, __pyx_t_6, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_ImportFrom(__pyx_t_7, __pyx_n_s_laplacianEigenvectors); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_laplacianEigenvectors, __pyx_t_6) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":33
 * from .graphtools import GraphTools
 * from .algebraic import laplacianEigenvectors
 * from .centrality import CoreDecomposition             # <<<<<<<<<<<<<<
 * from .coarsening import ParallelPartitionCoarsening
 * from . import graphio
 */
  __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_CoreDecomposition);
  __Pyx_GIVEREF(__pyx_n_s_CoreDecomposition);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_CoreDecomposition)) __PYX_ERR(0, 33, __pyx_L1_error);
  __pyx_t_6 = __Pyx_Import(__pyx_n_s_centrality, __pyx_t_7, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_CoreDecomposition); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CoreDecomposition, __pyx_t_7) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":34
 * from .algebraic import laplacianEigenvectors
 * from .centrality import CoreDecomposition
 * from .coarsening import ParallelPartitionCoarsening             # <<<<<<<<<<<<<<
 * from . import graphio
 * from .helpers import stdstring
 */
  __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_n_s_ParallelPartitionCoarsening);
  __Pyx_GIVEREF(__pyx_n_s_ParallelPartitionCoarsening);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_ParallelPartitionCoarsening)) __PYX_ERR(0, 34, __pyx_L1_error);
  __pyx_t_7 = __Pyx_Import(__pyx_n_s_coarsening, __pyx_t_6, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_ImportFrom(__pyx_t_7, __pyx_n_s_ParallelPartitionCoarsening); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParallelPartitionCoarsening, __pyx_t_6) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":35
 * from .centrality import CoreDecomposition
 * from .coarsening import ParallelPartitionCoarsening
 * from . import graphio             # <<<<<<<<<<<<<<
 * from .helpers import stdstring
 * from .support import MissingDependencyError
 */
  __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_graphio);
  __Pyx_GIVEREF(__pyx_n_s_graphio);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_graphio)) __PYX_ERR(0, 35, __pyx_L1_error);
  __pyx_t_6 = __Pyx_Import(__pyx_kp_s__5, __pyx_t_7, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_graphio); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_graphio, __pyx_t_7) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":36
 * from .coarsening import ParallelPartitionCoarsening
 * from . import graphio
 * from .helpers import stdstring             # <<<<<<<<<<<<<<
 * from .support import MissingDependencyError
 * from cython.operator import dereference
 */
  __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_n_s_stdstring);
  __Pyx_GIVEREF(__pyx_n_s_stdstring);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_stdstring)) __PYX_ERR(0, 36, __pyx_L1_error);
  __pyx_t_7 = __Pyx_Import(__pyx_n_s_helpers, __pyx_t_6, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_ImportFrom(__pyx_t_7, __pyx_n_s_stdstring); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_stdstring, __pyx_t_6) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":37
 * from . import graphio
 * from .helpers import stdstring
 * from .support import MissingDependencyError             # <<<<<<<<<<<<<<
 * from cython.operator import dereference
 * 
 */
  __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_MissingDependencyError);
  __Pyx_GIVEREF(__pyx_n_s_MissingDependencyError);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_MissingDependencyError)) __PYX_ERR(0, 37, __pyx_L1_error);
  __pyx_t_6 = __Pyx_Import(__pyx_n_s_support, __pyx_t_7, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_MissingDependencyError); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MissingDependencyError, __pyx_t_7) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":47
 * 	index _none "NetworKit::none"
 * 
 * none = _none             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/CommunityDetectionAlgorithm.hpp>":
 */
  __pyx_t_6 = __Pyx_PyInt_From_uint64_t(NetworKit::none); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_none, __pyx_t_6) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":67
 * 			raise RuntimeError("Error, you may not use CommunityDetector directly, use a sub-class instead")
 * 
 * 	def getPartition(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPartition()
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_17CommunityDetector_3getPartition, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CommunityDetector_getPartition, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_CommunityDetector, __pyx_n_s_getPartition, __pyx_t_6) < 0) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_CommunityDetector);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_17CommunityDetector_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CommunityDetector___reduce_cytho, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__36)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_6) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_17CommunityDetector_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CommunityDetector___setstate_cyt, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_6) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":100
 * 			raise RuntimeError("Error, you may not use OverlappingCommunityDetector directly, use a sub-class instead")
 * 
 * 	def getCover(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getCover()
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_28OverlappingCommunityDetector_3getCover, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OverlappingCommunityDetector_get, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_OverlappingCommunityDetector, __pyx_n_s_getCover, __pyx_t_6) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_OverlappingCommunityDetector);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_28OverlappingCommunityDetector_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OverlappingCommunityDetector___r, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_6) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_28OverlappingCommunityDetector_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OverlappingCommunityDetector___s, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_6) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":133
 * 	""" Generators for various clusterings """
 * 	cdef _ClusteringGenerator _this
 * 	def makeSingletonClustering(self, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeSingletonClustering(G)
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19ClusteringGenerator_1makeSingletonClustering, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ClusteringGenerator_makeSingleto, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_ClusteringGenerator, __pyx_n_s_makeSingletonClustering, __pyx_t_6) < 0) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_ClusteringGenerator);

  /* "networkit/community.pyx":150
 * 		"""
 * 		return Partition().setThis(self._this.makeSingletonClustering(G._this))
 * 	def makeOneClustering(self, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeOneClustering(G)
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19ClusteringGenerator_3makeOneClustering, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ClusteringGenerator_makeOneClust, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_ClusteringGenerator, __pyx_n_s_makeOneClustering, __pyx_t_6) < 0) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_ClusteringGenerator);

  /* "networkit/community.pyx":167
 * 		"""
 * 		return Partition().setThis(self._this.makeOneClustering(G._this))
 * 	def makeRandomClustering(self, Graph G, count k):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeRandomClustering(G, k)
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19ClusteringGenerator_5makeRandomClustering, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ClusteringGenerator_makeRandomCl, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_ClusteringGenerator, __pyx_n_s_makeRandomClustering, __pyx_t_6) < 0) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_ClusteringGenerator);

  /* "networkit/community.pyx":186
 * 		"""
 * 		return Partition().setThis(self._this.makeRandomClustering(G._this, k))
 * 	def makeContinuousBalancedClustering(self, Graph G, count k):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeContinuousBalancedClustering(G, k)
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19ClusteringGenerator_7makeContinuousBalancedClustering, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ClusteringGenerator_makeContinuo, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_ClusteringGenerator, __pyx_n_s_makeContinuousBalancedClustering, __pyx_t_6) < 0) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_ClusteringGenerator);

  /* "networkit/community.pyx":205
 * 		"""
 * 		return Partition().setThis(self._this.makeContinuousBalancedClustering(G._this, k))
 * 	def makeNoncontinuousBalancedClustering(self, Graph G, count k):             # <<<<<<<<<<<<<<
 * 		"""
 * 		makeNoncontinuousBalancedClustering(G, k)
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19ClusteringGenerator_9makeNoncontinuousBalancedClustering, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ClusteringGenerator_makeNonconti, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_ClusteringGenerator, __pyx_n_s_makeNoncontinuousBalancedCluster, __pyx_t_6) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_ClusteringGenerator);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19ClusteringGenerator_11__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ClusteringGenerator___reduce_cyt, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_6) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19ClusteringGenerator_13__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ClusteringGenerator___setstate_c, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_6) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":239
 * 
 * cdef class GraphClusteringTools:
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def getImbalance(Partition zeta, Graph G = None):
 * 		"""
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_20GraphClusteringTools_1getImbalance, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphClusteringTools_getImbalanc, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_6, __pyx_tuple__53);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_getImbalance, __pyx_t_6) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphClusteringTools);
  __Pyx_GetNameInClass(__pyx_t_6, (PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_getImbalance); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_getImbalance, __pyx_t_7) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphClusteringTools);

  /* "networkit/community.pyx":263
 * 			return getImbalance(zeta._this)
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def communicationGraph(Graph graph, Partition zeta):
 * 		"""
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_20GraphClusteringTools_3communicationGraph, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphClusteringTools_communicati, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_communicationGraph, __pyx_t_7) < 0) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphClusteringTools);
  __Pyx_GetNameInClass(__pyx_t_7, (PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_communicationGraph); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_communicationGraph, __pyx_t_6) < 0) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphClusteringTools);

  /* "networkit/community.pyx":289
 * 		"""
 * 		return Graph().setThis(communicationGraph(graph._this, zeta._this))
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def weightedDegreeWithCluster(Graph graph, Partition zeta, node u, index cid):
 * 		"""
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_20GraphClusteringTools_5weightedDegreeWithCluster, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphClusteringTools_weightedDeg, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__57)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_weightedDegreeWithCluster, __pyx_t_6) < 0) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphClusteringTools);
  __Pyx_GetNameInClass(__pyx_t_6, (PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_weightedDegreeWithCluster); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_weightedDegreeWithCluster, __pyx_t_7) < 0) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphClusteringTools);

  /* "networkit/community.pyx":313
 * 		"""
 * 		return weightedDegreeWithCluster(graph._this, zeta._this, u, cid)
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def isProperClustering(Graph G, Partition zeta):
 * 		"""
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_20GraphClusteringTools_7isProperClustering, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphClusteringTools_isProperClu, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_isProperClustering, __pyx_t_7) < 0) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphClusteringTools);
  __Pyx_GetNameInClass(__pyx_t_7, (PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_isProperClustering); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_isProperClustering, __pyx_t_6) < 0) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphClusteringTools);

  /* "networkit/community.pyx":333
 * 		"""
 * 		return isProperClustering(G._this, zeta._this)
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def isSingletonClustering(Graph G, Partition zeta):
 * 		"""
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_20GraphClusteringTools_9isSingletonClustering, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphClusteringTools_isSingleton, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_isSingletonClustering, __pyx_t_6) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphClusteringTools);
  __Pyx_GetNameInClass(__pyx_t_6, (PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_isSingletonClustering); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_isSingletonClustering, __pyx_t_7) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphClusteringTools);

  /* "networkit/community.pyx":353
 * 		"""
 * 		return isSingletonClustering(G._this, zeta._this)
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def isOneClustering(Graph G, Partition zeta):
 * 		"""
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_20GraphClusteringTools_11isOneClustering, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphClusteringTools_isOneCluste, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_isOneClustering, __pyx_t_7) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphClusteringTools);
  __Pyx_GetNameInClass(__pyx_t_7, (PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_isOneClustering); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_isOneClustering, __pyx_t_6) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphClusteringTools);

  /* "networkit/community.pyx":373
 * 		"""
 * 		return isOneClustering(G._this, zeta._this)
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def equalClustering(Partition zeta, Partition eta, Graph G):
 * 		"""
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_20GraphClusteringTools_13equalClustering, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphClusteringTools_equalCluste, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_equalClustering, __pyx_t_6) < 0) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphClusteringTools);
  __Pyx_GetNameInClass(__pyx_t_6, (PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_equalClustering); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_equalClustering, __pyx_t_7) < 0) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphClusteringTools);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_20GraphClusteringTools_15__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphClusteringTools___reduce_cy, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__65)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphClusteringTools);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_GraphClusteringTools, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_GraphClusteringTools__set_state(self, __pyx_state)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_20GraphClusteringTools_17__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphClusteringTools___setstate, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphClusteringTools, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphClusteringTools);

  /* "networkit/community.pyx":410
 * 	"""
 * 	cdef _PartitionIntersection _this
 * 	def calculate(self, Partition zeta, Partition eta):             # <<<<<<<<<<<<<<
 * 		"""
 * 		calculate(zeta, eta)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_21PartitionIntersection_1calculate, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PartitionIntersection_calculate, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_PartitionIntersection, __pyx_n_s_calculate, __pyx_t_7) < 0) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_PartitionIntersection);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_21PartitionIntersection_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PartitionIntersection___reduce_c, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_21PartitionIntersection_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PartitionIntersection___setstate, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__70)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":443
 * 	cdef _Coverage _this
 * 
 * 	def getQuality(self, Partition zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(Partition zeta, Graph G)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_8Coverage_1getQuality, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Coverage_getQuality, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__72)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_Coverage, __pyx_n_s_getQuality, __pyx_t_7) < 0) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_Coverage);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_8Coverage_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Coverage___reduce_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_8Coverage_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Coverage___setstate_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":478
 * 	cdef _EdgeCut _this
 * 
 * 	def getQuality(self, Partition zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(zeta, G)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_7EdgeCut_1getQuality, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EdgeCut_getQuality, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__75)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_EdgeCut, __pyx_n_s_getQuality, __pyx_t_7) < 0) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_EdgeCut);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_7EdgeCut_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EdgeCut___reduce_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__76)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_7EdgeCut_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EdgeCut___setstate_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":524
 * 	cdef _Modularity _this
 * 
 * 	def getQuality(self, Partition zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(zeta,  G)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_10Modularity_1getQuality, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Modularity_getQuality, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_Modularity, __pyx_n_s_getQuality, __pyx_t_7) < 0) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_Modularity);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_10Modularity_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Modularity___reduce_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_10Modularity_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Modularity___setstate_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":574
 * 	cdef _HubDominance _this
 * 
 * 	def getQuality(self, PartitionCover zeta, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getQuality(zeta, G)
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_k__4 = __pyx_t_7;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __pyx_FusedFunction_New(&__pyx_fuse_0__pyx_mdef_9networkit_9community_12HubDominance_3getQuality, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HubDominance_getQuality, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_6, __pyx_empty_tuple);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_Partition, __pyx_t_6) < 0) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __pyx_FusedFunction_New(&__pyx_fuse_1__pyx_mdef_9networkit_9community_12HubDominance_5getQuality, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HubDominance_getQuality, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_6, __pyx_empty_tuple);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_Cover, __pyx_t_6) < 0) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __pyx_FusedFunction_New(&__pyx_mdef_9networkit_9community_12HubDominance_1getQuality, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HubDominance_getQuality, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_6, __pyx_empty_tuple);
  ((__pyx_FusedFunctionObject *) __pyx_t_6)->__signatures__ = __pyx_t_7;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_HubDominance, __pyx_n_s_getQuality, __pyx_t_6) < 0) __PYX_ERR(0, 574, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_9networkit_9community_HubDominance);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_12HubDominance_9__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HubDominance___reduce_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_6) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_12HubDominance_11__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HubDominance___setstate_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__84)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_6) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":638
 * 		self._this = new _PLM(G._this, refine, gamma, stdstring(par), maxIter, turbo, recurse)
 * 
 * 	def getTiming(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getTiming()
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_3PLM_3getTiming, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PLM_getTiming, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_PLM, __pyx_n_s_getTiming, __pyx_t_6) < 0) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_PLM);

  /* "networkit/community.pyx":651
 * 		return (<_PLM*>(self._this)).getTiming()
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def coarsen(Graph G, Partition zeta, bool_t parallel = False):
 * 		"""
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_3PLM_5coarsen, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PLM_coarsen, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_6, __pyx_tuple__88);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_PLM, __pyx_n_s_coarsen, __pyx_t_6) < 0) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_PLM);
  __Pyx_GetNameInClass(__pyx_t_6, (PyObject *)__pyx_ptype_9networkit_9community_PLM, __pyx_n_s_coarsen); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_PLM, __pyx_n_s_coarsen, __pyx_t_7) < 0) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_PLM);

  /* "networkit/community.pyx":676
 * 		return (Graph().setThis(result.first), result.second)
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def prolong(Graph Gcoarse, Partition zetaCoarse, Graph Gfine, vector[node] nodeToMetaNode):
 * 		"""
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_3PLM_7prolong, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PLM_prolong, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_PLM, __pyx_n_s_prolong, __pyx_t_7) < 0) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_PLM);
  __Pyx_GetNameInClass(__pyx_t_7, (PyObject *)__pyx_ptype_9networkit_9community_PLM, __pyx_n_s_prolong); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_PLM, __pyx_n_s_prolong, __pyx_t_6) < 0) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_PLM);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_3PLM_9__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PLM___reduce_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_6) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_3PLM_11__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PLM___setstate_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__92)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_6) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_14ParallelLeiden_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ParallelLeiden___reduce_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_6) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_14ParallelLeiden_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ParallelLeiden___setstate_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_6) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_18LouvainMapEquation_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LouvainMapEquation___reduce_cyth, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__95)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_6) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_18LouvainMapEquation_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LouvainMapEquation___setstate_cy, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__96)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_6) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":794
 * 	"""
 * 
 * 	def __cinit__(self, Graph G not None, count updateThreshold=none, count maxIterations=none, Partition baseClustering=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Constructor to the Parallel label propagation community detection algorithm.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_none); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyInt_As_uint64_t(__pyx_t_6); if (unlikely((__pyx_t_8 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_k__10 = __pyx_t_8;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_none); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyInt_As_uint64_t(__pyx_t_6); if (unlikely((__pyx_t_8 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_k__11 = __pyx_t_8;

  /* "networkit/community.pyx":808
 * 
 * 
 * 	def numberOfIterations(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		numberOfIterations()
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_3PLP_3numberOfIterations, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PLP_numberOfIterations, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_PLP, __pyx_n_s_numberOfIterations, __pyx_t_6) < 0) __PYX_ERR(0, 808, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_PLP);

  /* "networkit/community.pyx":821
 * 		return (<_PLP*>(self._this)).numberOfIterations()
 * 
 * 	def getTiming(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getTiming()
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_3PLP_5getTiming, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PLP_getTiming, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__98)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_PLP, __pyx_n_s_getTiming, __pyx_t_6) < 0) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_PLP);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_3PLP_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PLP___reduce_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_6) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_3PLP_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PLP___setstate_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__100)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_6) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_3LFM_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LFM___reduce_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_6) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_3LFM_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LFM___setstate_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__102)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_6) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":889
 * 		self._this = new _LPDegreeOrdered(G._this)
 * 
 * 	def numberOfIterations(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		numberOfIterations()
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_15LPDegreeOrdered_3numberOfIterations, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LPDegreeOrdered_numberOfIteratio, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_LPDegreeOrdered, __pyx_n_s_numberOfIterations, __pyx_t_6) < 0) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_LPDegreeOrdered);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_15LPDegreeOrdered_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LPDegreeOrdered___reduce_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__104)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_6) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_15LPDegreeOrdered_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LPDegreeOrdered___setstate_cytho, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_6) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":932
 * 		self._this = new _CutClustering(G._this, alpha)
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def getClusterHierarchy(Graph G not None):
 * 		"""
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_13CutClustering_3getClusterHierarchy, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CutClustering_getClusterHierarch, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_CutClustering, __pyx_n_s_getClusterHierarchy, __pyx_t_6) < 0) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_CutClustering);
  __Pyx_GetNameInClass(__pyx_t_6, (PyObject *)__pyx_ptype_9networkit_9community_CutClustering, __pyx_n_s_getClusterHierarchy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_CutClustering, __pyx_n_s_getClusterHierarchy, __pyx_t_7) < 0) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_CutClustering);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_13CutClustering_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CutClustering___reduce_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__108)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_13CutClustering_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CutClustering___setstate_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__109)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_20DissimilarityMeasure_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DissimilarityMeasure___reduce_cy, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__110)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_DissimilarityMeasure, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_DissimilarityMeasure);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_DissimilarityMeasure, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_DissimilarityMeasure__set_state(self, __pyx_state)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_20DissimilarityMeasure_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DissimilarityMeasure___setstate, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__111)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_DissimilarityMeasure, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_DissimilarityMeasure);

  /* "networkit/community.pyx":985
 * 	cdef _NodeStructuralRandMeasure _this
 * 
 * 	def getDissimilarity(self, Graph G, Partition first, Partition second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_25NodeStructuralRandMeasure_1getDissimilarity, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NodeStructuralRandMeasure_getDis, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__113)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_NodeStructuralRandMeasure, __pyx_n_s_getDissimilarity, __pyx_t_7) < 0) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_NodeStructuralRandMeasure);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_25NodeStructuralRandMeasure_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NodeStructuralRandMeasure___redu, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_25NodeStructuralRandMeasure_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NodeStructuralRandMeasure___sets, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__115)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1026
 * 	cdef _GraphStructuralRandMeasure _this
 * 
 * 	def getDissimilarity(self, Graph G, Partition first, Partition second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_26GraphStructuralRandMeasure_1getDissimilarity, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphStructuralRandMeasure_getDi, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__116)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_GraphStructuralRandMeasure, __pyx_n_s_getDissimilarity, __pyx_t_7) < 0) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_GraphStructuralRandMeasure);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_26GraphStructuralRandMeasure_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphStructuralRandMeasure___red, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__117)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_26GraphStructuralRandMeasure_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphStructuralRandMeasure___set, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__118)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1064
 * 	cdef _JaccardMeasure _this
 * 
 * 	def getDissimilarity(self, Graph G, Partition first, Partition second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_14JaccardMeasure_1getDissimilarity, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_JaccardMeasure_getDissimilarity, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__119)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_JaccardMeasure, __pyx_n_s_getDissimilarity, __pyx_t_7) < 0) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_JaccardMeasure);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_14JaccardMeasure_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_JaccardMeasure___reduce_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__120)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_14JaccardMeasure_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_JaccardMeasure___setstate_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__121)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1104
 * 	cdef _NMIDistance _this
 * 
 * 	def getDissimilarity(self, Graph G, Partition first, Partition second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_11NMIDistance_1getDissimilarity, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NMIDistance_getDissimilarity, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__122)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_NMIDistance, __pyx_n_s_getDissimilarity, __pyx_t_7) < 0) __PYX_ERR(0, 1104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_NMIDistance);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_11NMIDistance_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NMIDistance___reduce_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__123)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_11NMIDistance_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NMIDistance___setstate_cython, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__124)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1142
 * 	cdef _AdjustedRandMeasure _this
 * 
 * 	def getDissimilarity(self, Graph G not None, Partition first not None, Partition second not None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19AdjustedRandMeasure_1getDissimilarity, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AdjustedRandMeasure_getDissimila, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__125)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_AdjustedRandMeasure, __pyx_n_s_getDissimilarity, __pyx_t_7) < 0) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_AdjustedRandMeasure);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19AdjustedRandMeasure_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AdjustedRandMeasure___reduce_cyt, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__126)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19AdjustedRandMeasure_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AdjustedRandMeasure___setstate_c, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__127)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1189
 * 			raise RuntimeError("Error, you may not use LocalCommunityEvaluation directly, use a sub-class instead")
 * 
 * 	def getWeightedAverage(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getWeightedAverage()
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_3getWeightedAverage, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LocalCommunityEvaluation_getWeig, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__128)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_LocalCommunityEvaluation, __pyx_n_s_getWeightedAverage, __pyx_t_7) < 0) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation);

  /* "networkit/community.pyx":1204
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getWeightedAverage()
 * 
 * 	def getUnweightedAverage(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getUnweightedAverage()
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_5getUnweightedAverage, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LocalCommunityEvaluation_getUnwe, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__129)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_LocalCommunityEvaluation, __pyx_n_s_getUnweightedAverage, __pyx_t_7) < 0) __PYX_ERR(0, 1204, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation);

  /* "networkit/community.pyx":1219
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getUnweightedAverage()
 * 
 * 	def getMaximumValue(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getMaximumValue()
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_7getMaximumValue, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LocalCommunityEvaluation_getMaxi, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__130)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_LocalCommunityEvaluation, __pyx_n_s_getMaximumValue, __pyx_t_7) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation);

  /* "networkit/community.pyx":1234
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getMaximumValue()
 * 
 * 	def getMinimumValue(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getMinimumValue()
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_9getMinimumValue, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LocalCommunityEvaluation_getMini, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__131)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_LocalCommunityEvaluation, __pyx_n_s_getMinimumValue, __pyx_t_7) < 0) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation);

  /* "networkit/community.pyx":1249
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getMinimumValue()
 * 
 * 	def getValue(self, index i):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getValue(index i)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_11getValue, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LocalCommunityEvaluation_getValu, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__133)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_LocalCommunityEvaluation, __pyx_n_s_getValue, __pyx_t_7) < 0) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation);

  /* "networkit/community.pyx":1269
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getValue(i)
 * 
 * 	def getValues(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getValues()
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_13getValues, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LocalCommunityEvaluation_getValu_2, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__134)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_LocalCommunityEvaluation, __pyx_n_s_getValues, __pyx_t_7) < 0) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation);

  /* "networkit/community.pyx":1284
 * 		return (<_LocalCommunityEvaluation*>(self._this)).getValues()
 * 
 * 	def isSmallBetter(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		isSmallBetter()
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_15isSmallBetter, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LocalCommunityEvaluation_isSmall, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__135)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_LocalCommunityEvaluation, __pyx_n_s_isSmallBetter, __pyx_t_7) < 0) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_LocalCommunityEvaluation);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_17__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LocalCommunityEvaluation___reduc, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__136)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_24LocalCommunityEvaluation_19__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LocalCommunityEvaluation___setst, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__137)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_24LocalPartitionEvaluation_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LocalPartitionEvaluation___reduc, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__138)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_24LocalPartitionEvaluation_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LocalPartitionEvaluation___setst, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__139)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_20LocalCoverEvaluation_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LocalCoverEvaluation___reduce_cy, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__140)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_20LocalCoverEvaluation_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_LocalCoverEvaluation___setstate, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__141)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1380
 * 		self._this = new _IntrapartitionDensity(self._G._this, self._P._this)
 * 
 * 	def getGlobal(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getGlobal()
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_21IntrapartitionDensity_3getGlobal, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_IntrapartitionDensity_getGlobal, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__142)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_IntrapartitionDensity, __pyx_n_s_getGlobal, __pyx_t_7) < 0) __PYX_ERR(0, 1380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_IntrapartitionDensity);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_21IntrapartitionDensity_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_IntrapartitionDensity___reduce_c, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__143)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_21IntrapartitionDensity_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_IntrapartitionDensity___setstate, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__144)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_33IsolatedInterpartitionConductance_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_IsolatedInterpartitionConductanc_2, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__145)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_33IsolatedInterpartitionConductance_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_IsolatedInterpartitionConductanc_3, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__146)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_31IsolatedInterpartitionExpansion_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_IsolatedInterpartitionExpansion_2, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__147)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_31IsolatedInterpartitionExpansion_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_IsolatedInterpartitionExpansion_3, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__148)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_17CoverHubDominance_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CoverHubDominance___reduce_cytho, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__149)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_17CoverHubDominance_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CoverHubDominance___setstate_cyt, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__150)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_21PartitionHubDominance_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PartitionHubDominance___reduce_c, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__151)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_21PartitionHubDominance_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PartitionHubDominance___setstate, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__152)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_22PartitionFragmentation_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PartitionFragmentation___reduce, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__153)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_22PartitionFragmentation_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PartitionFragmentation___setstat, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__154)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1571
 * 
 * 
 * 	def isStable(self, node u):             # <<<<<<<<<<<<<<
 * 		"""
 * 		isStable(u)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_20StablePartitionNodes_3isStable, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StablePartitionNodes_isStable, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__156)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_StablePartitionNodes, __pyx_n_s_isStable, __pyx_t_7) < 0) __PYX_ERR(0, 1571, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_StablePartitionNodes);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_20StablePartitionNodes_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StablePartitionNodes___reduce_cy, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__157)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_20StablePartitionNodes_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StablePartitionNodes___setstate, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__158)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_17CoverF1Similarity_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CoverF1Similarity___reduce_cytho, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__159)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_17CoverF1Similarity_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CoverF1Similarity___setstate_cyt, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__160)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1633
 * 		assert(self._C == C)
 * 
 * def detectCommunities(G, algo=None, inspect=True):             # <<<<<<<<<<<<<<
 * 	"""
 * 	detectCommunities(G, algo=None, inspect=True)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_1detectCommunities, 0, __pyx_n_s_detectCommunities, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__162)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__163);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_detectCommunities, __pyx_t_7) < 0) __PYX_ERR(0, 1633, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1666
 * 	return zeta
 * 
 * def inspectCommunities(zeta, G):             # <<<<<<<<<<<<<<
 * 	"""
 * 	inspectCommunities(zeta, G)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_3inspectCommunities, 0, __pyx_n_s_inspectCommunities, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__165)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_inspectCommunities, __pyx_t_7) < 0) __PYX_ERR(0, 1666, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1703
 * 
 * 
 * def communityGraph(G, zeta):             # <<<<<<<<<<<<<<
 * 	"""
 * 	communityGraph(G, P)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_5communityGraph, 0, __pyx_n_s_communityGraph, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__167)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_communityGraph, __pyx_t_7) < 0) __PYX_ERR(0, 1703, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1722
 * 
 * 
 * def evalCommunityDetection(algo, G):             # <<<<<<<<<<<<<<
 * 	"""
 * 	evalCommunityDetection(algo, G)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_7evalCommunityDetection, 0, __pyx_n_s_evalCommunityDetection, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__169)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evalCommunityDetection, __pyx_t_7) < 0) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1754
 * 	print(tabulate.tabulate(results))
 * 
 * def readCommunities(path, format="default"):             # <<<<<<<<<<<<<<
 * 	"""
 * 	readCommunities(path, format="default")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_9readCommunities, 0, __pyx_n_s_readCommunities, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__171)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__172);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_readCommunities, __pyx_t_7) < 0) __PYX_ERR(0, 1754, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1795
 * 
 * 
 * def writeCommunities(communities, path):             # <<<<<<<<<<<<<<
 * 	"""
 * 	writeCommunities(communities, path)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_11writeCommunities, 0, __pyx_n_s_writeCommunities, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__174)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_writeCommunities, __pyx_t_7) < 0) __PYX_ERR(0, 1795, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1812
 * 
 * 
 * def compareCommunities(G, zeta1, zeta2):             # <<<<<<<<<<<<<<
 * 	"""
 * 	compareCommunities(G, zeta1, zeta2)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_13compareCommunities, 0, __pyx_n_s_compareCommunities, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__176)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compareCommunities, __pyx_t_7) < 0) __PYX_ERR(0, 1812, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1824
 * 	raise NotImplementedError("TODO:")
 * 
 * def kCoreCommunityDetection(G, k, algo=None, inspect=True):             # <<<<<<<<<<<<<<
 * 	"""
 * 	kCoreCommunityDetection(G, k, algo=None, inspect=True)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_15kCoreCommunityDetection, 0, __pyx_n_s_kCoreCommunityDetection, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__178)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__163);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_kCoreCommunityDetection, __pyx_t_7) < 0) __PYX_ERR(0, 1824, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1902
 * 		JOINT_ENTROPY
 * 
 * class Normalization:             # <<<<<<<<<<<<<<
 * 	MIN = _Normalization.MIN
 * 	GEOMETRIC_MEAN = _Normalization.GEOMETRIC_MEAN
 */
  __pyx_t_7 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_Normalization, __pyx_n_s_Normalization, (PyObject *) NULL, __pyx_n_s_networkit_community, (PyObject *) NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "networkit/community.pyx":1903
 * 
 * class Normalization:
 * 	MIN = _Normalization.MIN             # <<<<<<<<<<<<<<
 * 	GEOMETRIC_MEAN = _Normalization.GEOMETRIC_MEAN
 * 	ARITHMETIC_MEAN = _Normalization.ARITHMETIC_MEAN
 */
  __pyx_t_6 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(NetworKit::OverlappingNMIDistance::MIN); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_MIN, __pyx_t_6) < 0) __PYX_ERR(0, 1903, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":1904
 * class Normalization:
 * 	MIN = _Normalization.MIN
 * 	GEOMETRIC_MEAN = _Normalization.GEOMETRIC_MEAN             # <<<<<<<<<<<<<<
 * 	ARITHMETIC_MEAN = _Normalization.ARITHMETIC_MEAN
 * 	MAX = _Normalization.MAX
 */
  __pyx_t_6 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(NetworKit::OverlappingNMIDistance::GEOMETRIC_MEAN); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_GEOMETRIC_MEAN, __pyx_t_6) < 0) __PYX_ERR(0, 1904, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":1905
 * 	MIN = _Normalization.MIN
 * 	GEOMETRIC_MEAN = _Normalization.GEOMETRIC_MEAN
 * 	ARITHMETIC_MEAN = _Normalization.ARITHMETIC_MEAN             # <<<<<<<<<<<<<<
 * 	MAX = _Normalization.MAX
 * 	JOINT_ENTROPY = _Normalization.JOINT_ENTROPY
 */
  __pyx_t_6 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(NetworKit::OverlappingNMIDistance::ARITHMETIC_MEAN); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_ARITHMETIC_MEAN, __pyx_t_6) < 0) __PYX_ERR(0, 1905, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":1906
 * 	GEOMETRIC_MEAN = _Normalization.GEOMETRIC_MEAN
 * 	ARITHMETIC_MEAN = _Normalization.ARITHMETIC_MEAN
 * 	MAX = _Normalization.MAX             # <<<<<<<<<<<<<<
 * 	JOINT_ENTROPY = _Normalization.JOINT_ENTROPY
 * 	Min = MIN # this + following added for backwards compatibility
 */
  __pyx_t_6 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(NetworKit::OverlappingNMIDistance::MAX); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_MAX, __pyx_t_6) < 0) __PYX_ERR(0, 1906, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":1907
 * 	ARITHMETIC_MEAN = _Normalization.ARITHMETIC_MEAN
 * 	MAX = _Normalization.MAX
 * 	JOINT_ENTROPY = _Normalization.JOINT_ENTROPY             # <<<<<<<<<<<<<<
 * 	Min = MIN # this + following added for backwards compatibility
 * 	GeometricMean = GEOMETRIC_MEAN
 */
  __pyx_t_6 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(NetworKit::OverlappingNMIDistance::JOINT_ENTROPY); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_JOINT_ENTROPY, __pyx_t_6) < 0) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":1908
 * 	MAX = _Normalization.MAX
 * 	JOINT_ENTROPY = _Normalization.JOINT_ENTROPY
 * 	Min = MIN # this + following added for backwards compatibility             # <<<<<<<<<<<<<<
 * 	GeometricMean = GEOMETRIC_MEAN
 * 	ArithmeticMean = ARITHMETIC_MEAN
 */
  __pyx_t_6 = PyObject_GetItem(__pyx_t_7, __pyx_n_s_MIN);
  if (unlikely(!__pyx_t_6)) {
    PyErr_Clear();
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_MIN);
  }
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_Min, __pyx_t_6) < 0) __PYX_ERR(0, 1908, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":1909
 * 	JOINT_ENTROPY = _Normalization.JOINT_ENTROPY
 * 	Min = MIN # this + following added for backwards compatibility
 * 	GeometricMean = GEOMETRIC_MEAN             # <<<<<<<<<<<<<<
 * 	ArithmeticMean = ARITHMETIC_MEAN
 * 	Max = MAX
 */
  __pyx_t_6 = PyObject_GetItem(__pyx_t_7, __pyx_n_s_GEOMETRIC_MEAN);
  if (unlikely(!__pyx_t_6)) {
    PyErr_Clear();
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_GEOMETRIC_MEAN);
  }
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_GeometricMean, __pyx_t_6) < 0) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":1910
 * 	Min = MIN # this + following added for backwards compatibility
 * 	GeometricMean = GEOMETRIC_MEAN
 * 	ArithmeticMean = ARITHMETIC_MEAN             # <<<<<<<<<<<<<<
 * 	Max = MAX
 * 	JointEntropy = JOINT_ENTROPY
 */
  __pyx_t_6 = PyObject_GetItem(__pyx_t_7, __pyx_n_s_ARITHMETIC_MEAN);
  if (unlikely(!__pyx_t_6)) {
    PyErr_Clear();
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_ARITHMETIC_MEAN);
  }
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_ArithmeticMean, __pyx_t_6) < 0) __PYX_ERR(0, 1910, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":1911
 * 	GeometricMean = GEOMETRIC_MEAN
 * 	ArithmeticMean = ARITHMETIC_MEAN
 * 	Max = MAX             # <<<<<<<<<<<<<<
 * 	JointEntropy = JOINT_ENTROPY
 * 
 */
  __pyx_t_6 = PyObject_GetItem(__pyx_t_7, __pyx_n_s_MAX);
  if (unlikely(!__pyx_t_6)) {
    PyErr_Clear();
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_MAX);
  }
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_Max, __pyx_t_6) < 0) __PYX_ERR(0, 1911, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":1912
 * 	ArithmeticMean = ARITHMETIC_MEAN
 * 	Max = MAX
 * 	JointEntropy = JOINT_ENTROPY             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/community/OverlappingNMIDistance.hpp>":
 */
  __pyx_t_6 = PyObject_GetItem(__pyx_t_7, __pyx_n_s_JOINT_ENTROPY);
  if (unlikely(!__pyx_t_6)) {
    PyErr_Clear();
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_JOINT_ENTROPY);
  }
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_JointEntropy, __pyx_t_6) < 0) __PYX_ERR(0, 1912, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":1902
 * 		JOINT_ENTROPY
 * 
 * class Normalization:             # <<<<<<<<<<<<<<
 * 	MIN = _Normalization.MIN
 * 	GEOMETRIC_MEAN = _Normalization.GEOMETRIC_MEAN
 */
  __pyx_t_6 = __Pyx_Py3ClassCreate(((PyObject*)&PyType_Type), __pyx_n_s_Normalization, __pyx_empty_tuple, __pyx_t_7, NULL, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Normalization, __pyx_t_6) < 0) __PYX_ERR(0, 1902, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1959
 * 	cdef _OverlappingNMIDistance _this
 * 
 * 	def __cinit__(self, normalization = Normalization.MAX):             # <<<<<<<<<<<<<<
 * 		self._validateNormalization(normalization)
 * 		self._this = _OverlappingNMIDistance(normalization)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Normalization); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_MAX); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_k__26 = __pyx_t_6;
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_6 = 0;

  /* "networkit/community.pyx":1963
 * 		self._this = _OverlappingNMIDistance(normalization)
 * 
 * 	def setNormalization(self, normalization):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setNormalization(self, normalization)
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_22OverlappingNMIDistance_3setNormalization, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OverlappingNMIDistance_setNormal, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__180)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_OverlappingNMIDistance, __pyx_n_s_setNormalization, __pyx_t_6) < 0) __PYX_ERR(0, 1963, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_OverlappingNMIDistance);

  /* "networkit/community.pyx":1990
 * 		self._this.setNormalization(normalization)
 * 
 * 	def getDissimilarity(self, Graph G, PartitionCover first, PartitionCover second):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDissimilarity(G, first, second)
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_k__27 = __pyx_t_6;
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __pyx_FusedFunction_New(&__pyx_fuse_0__pyx_mdef_9networkit_9community_22OverlappingNMIDistance_9getDissimilarity, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OverlappingNMIDistance_getDissim, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__181)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_empty_tuple);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_Partition, __pyx_t_7) < 0) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __pyx_FusedFunction_New(&__pyx_fuse_1__pyx_mdef_9networkit_9community_22OverlappingNMIDistance_11getDissimilarity, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OverlappingNMIDistance_getDissim, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__181)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_empty_tuple);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_Cover, __pyx_t_7) < 0) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __pyx_FusedFunction_New(&__pyx_mdef_9networkit_9community_22OverlappingNMIDistance_5getDissimilarity, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OverlappingNMIDistance_getDissim, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__181)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_empty_tuple);
  ((__pyx_FusedFunctionObject *) __pyx_t_7)->__signatures__ = __pyx_t_6;
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_6 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_OverlappingNMIDistance, __pyx_n_s_getDissimilarity, __pyx_t_7) < 0) __PYX_ERR(0, 1990, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_9networkit_9community_OverlappingNMIDistance);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":2028
 * 		return ret
 * 
 * 	def _validateNormalization(self, _Normalization normalization):             # <<<<<<<<<<<<<<
 * 		if normalization not in {OverlappingNMIDistance.Min, OverlappingNMIDistance.GeometricMean,
 * 				OverlappingNMIDistance.ArithmeticMean, OverlappingNMIDistance.Max, OverlappingNMIDistance.JointEntropy}:
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_22OverlappingNMIDistance_7_validateNormalization, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OverlappingNMIDistance__validate, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__182)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_9community_OverlappingNMIDistance, __pyx_n_s_validateNormalization, __pyx_t_7) < 0) __PYX_ERR(0, 2028, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_9networkit_9community_OverlappingNMIDistance);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_22OverlappingNMIDistance_15__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OverlappingNMIDistance___reduce, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__183)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_22OverlappingNMIDistance_17__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OverlappingNMIDistance___setstat, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__184)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":2033
 * 			raise ValueError("Error, invalid normalization method")
 * 
 * class SpectralPartitioner:             # <<<<<<<<<<<<<<
 * 	"""
 * 	SpectralPartitioner(graph, count, balances=True)
 */
  __pyx_t_7 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_SpectralPartitioner, __pyx_n_s_SpectralPartitioner, (PyObject *) NULL, __pyx_n_s_networkit_community, __pyx_kp_s_SpectralPartitioner_graph_count); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "networkit/community.pyx":2051
 * 		Set this to false if you do not want to enforce balance, possibly increasing quality. Default: True
 * 	"""
 * 	def __init__(self, graph, count, balanced=True):             # <<<<<<<<<<<<<<
 * 		self.graph = graph
 * 		self.count = count
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19SpectralPartitioner_1__init__, 0, __pyx_n_s_SpectralPartitioner___init, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__186)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_6, __pyx_tuple__187);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_init, __pyx_t_6) < 0) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":2057
 * 		self.balanced = balanced
 * 
 * 	def _prepareSpectrum(self):             # <<<<<<<<<<<<<<
 * 		spectrum = laplacianEigenvectors(self.graph, cutoff = (math.ceil(math.log(self.count, 2)) + 1), reverse=True)
 * 		self.eigenvectors = spectrum[1]
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19SpectralPartitioner_3_prepareSpectrum, 0, __pyx_n_s_SpectralPartitioner__prepareSpec, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__189)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_prepareSpectrum, __pyx_t_6) < 0) __PYX_ERR(0, 2057, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":2062
 * 		self.eigenvalues = spectrum[0]
 * 
 * 	def _getQuantiles(self, eigv, vertices, count = 1):             # <<<<<<<<<<<<<<
 * 		values = [eigv[i] for i in vertices]
 * 		values.sort()
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19SpectralPartitioner_5_getQuantiles, 0, __pyx_n_s_SpectralPartitioner__getQuantile, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__191)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_6, __pyx_tuple__192);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_getQuantiles, __pyx_t_6) < 0) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":2075
 * 		return quantiles
 * 
 * 	def _getMean(self, eigv, vertices):             # <<<<<<<<<<<<<<
 * 		values = [eigv[i] for i in vertices]
 * 		mean = np.mean(values)
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19SpectralPartitioner_7_getMean, 0, __pyx_n_s_SpectralPartitioner__getMean, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__194)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_getMean, __pyx_t_6) < 0) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":2081
 * 		return mean
 * 
 * 	def _trisect(self, partition=None, iteration=1):             # <<<<<<<<<<<<<<
 * 		if partition is None:
 * 			vertices = list(self.graph.iterNodes())
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19SpectralPartitioner_9_trisect, 0, __pyx_n_s_SpectralPartitioner__trisect, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__196)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_6, __pyx_tuple__197);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_trisect, __pyx_t_6) < 0) __PYX_ERR(0, 2081, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":2114
 * 			del self.partitions[partition]
 * 
 * 	def _bisect(self, count, partition=None, iteration=1):             # <<<<<<<<<<<<<<
 * 		if count == 1:
 * 			return
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19SpectralPartitioner_11_bisect, 0, __pyx_n_s_SpectralPartitioner__bisect, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__199)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_6, __pyx_tuple__197);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_bisect, __pyx_t_6) < 0) __PYX_ERR(0, 2114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":2166
 * 
 * 
 * 	def _generatePartition(self):             # <<<<<<<<<<<<<<
 * 		partition = Partition(size=self.graph.numberOfNodes())
 * 
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19SpectralPartitioner_13_generatePartition, 0, __pyx_n_s_SpectralPartitioner__generatePar, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__201)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_generatePartition, __pyx_t_6) < 0) __PYX_ERR(0, 2166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":2185
 * 		return partition
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		run()
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19SpectralPartitioner_15run, 0, __pyx_n_s_SpectralPartitioner_run, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__202)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_run, __pyx_t_6) < 0) __PYX_ERR(0, 2185, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":2199
 * 		self._generatePartition()
 * 
 * 	def getPartition(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPartition()
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19SpectralPartitioner_17getPartition, 0, __pyx_n_s_SpectralPartitioner_getPartition, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__203)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_7, __pyx_n_s_getPartition, __pyx_t_6) < 0) __PYX_ERR(0, 2199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/community.pyx":2033
 * 			raise ValueError("Error, invalid normalization method")
 * 
 * class SpectralPartitioner:             # <<<<<<<<<<<<<<
 * 	"""
 * 	SpectralPartitioner(graph, count, balances=True)
 */
  __pyx_t_6 = __Pyx_Py3ClassCreate(((PyObject*)&PyType_Type), __pyx_n_s_SpectralPartitioner, __pyx_empty_tuple, __pyx_t_7, NULL, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SpectralPartitioner, __pyx_t_6) < 0) __PYX_ERR(0, 2033, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_GraphClusteringTools(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_17__pyx_unpickle_GraphClusteringTools, 0, __pyx_n_s_pyx_unpickle_GraphClusteringTo, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__205)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_GraphClusteringTo, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_GraphClusteringTools__set_state(<GraphClusteringTools> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_GraphClusteringTools__set_state(GraphClusteringTools __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9community_19__pyx_unpickle_DissimilarityMeasure, 0, __pyx_n_s_pyx_unpickle_DissimilarityMeas, NULL, __pyx_n_s_networkit_community, __pyx_d, ((PyObject *)__pyx_codeobj__206)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_DissimilarityMeas, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/community.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * 
 * from libcpp.string cimport string
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init networkit.community", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init networkit.community");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetAttr3 */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    int res = PyObject_GetOptionalAttr(o, n, &r);
    return (res != 0) ? r : __Pyx_NewRef(d);
#else
  #if CYTHON_USE_TYPE_SLOTS
    if (likely(PyString_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
  #endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
#endif
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (unlikely(!j)) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_ass_subscript) {
            int r;
            PyObject *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return -1;
            r = mm->mp_ass_subscript(o, key, v);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return sm->sq_ass_item(o, i, v);
        }
    }
#else
    if (is_list || !PyMapping_Check(o))
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = __Pyx_PyObject_GetIterNextFunc(iter);
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
#if CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
#include <string.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* UnpackUnboundCMethod */
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {
    PyObject *result;
    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));
    if (unlikely(!selfless_args)) return NULL;
    result = PyObject_Call(method, selfless_args, kwargs);
    Py_DECREF(selfless_args);
    return result;
}
static PyMethodDef __Pyx_UnboundCMethod_Def = {
     "CythonUnboundCMethod",
     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),
     METH_VARARGS | METH_KEYWORDS,
     NULL
};
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #else
    if (likely(!__Pyx_CyOrPyCFunction_Check(method)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    } else
#endif
#if CYTHON_COMPILING_IN_PYPY
#else
    if (PyCFunction_Check(method))
#endif
    {
        PyObject *self;
        int self_found;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        self = PyObject_GetAttrString(method, "__self__");
        if (!self) {
            PyErr_Clear();
        }
#else
        self = PyCFunction_GET_SELF(method);
#endif
        self_found = (self && self != Py_None);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        Py_XDECREF(self);
#endif
        if (self_found) {
            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);
            if (unlikely(!unbound_method)) return -1;
            Py_DECREF(method);
            target->method = unbound_method;
        }
    }
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_values */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_values, d);
    else
        return PyDict_Values(d);
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if ((PY_VERSION_HEX >= 0x030600B1) && flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            #else
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            #endif
        } else if ((PY_VERSION_HEX >= 0x030700A0) && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObjectLookupSpecial */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return with_error ? __Pyx_PyObject_GetAttrStr(obj, attr_name) : __Pyx_PyObject_GetAttrStrNoError(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a + (unsigned long)b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (!meth) {
            PyErr_Clear();
        } else {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallMethod1 */
#if !(CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C00A2)
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
#endif
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
#if CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C00A2
    PyObject *args[2] = {obj, arg};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_Call2Args;
    return PyObject_VectorcallMethod(method_name, args, 2 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);
#else
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
#endif
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* PyIntCompare */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 1;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a == b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) == 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 0;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 0;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal == 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a == (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_RemainderObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = a % b;
            x += ((x != 0) & ((x ^ b) < 0)) * b;
            return PyInt_FromLong(x);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return __Pyx_NewRef(op1);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_remainder(op1, op2);
            }
        }
                x = a % b;
                x += ((x != 0) & ((x ^ b) < 0)) * b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla % llb;
                llx += ((llx != 0) & ((llx ^ llb) < 0)) * llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceRemainder : PyNumber_Remainder)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        
            if (8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53))) {
                return PyFloat_FromDouble((double)a / (double)b);
            }
            return PyInt_Type.tp_as_number->nb_true_divide(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            }
        }
                if ((8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53)))
                        || __Pyx_PyLong_DigitCount(op1) <= 52 / PyLong_SHIFT) {
                    return PyFloat_FromDouble((double)a / (double)b);
                }
                return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            return PyLong_FromLong(x);
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("divide", return NULL)
            result = ((double)a) / (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a - (unsigned long)b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return PyLong_FromLong(-intval);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, int wraparound) {
    __Pyx_TypeName obj_type_name;
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is unsliceable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
bad:
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__32);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (!r) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}
#endif

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    destructor tp_dealloc = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_dealloc, destructor) != current_tp_dealloc)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_dealloc = __Pyx_PyType_GetSlot(type, tp_dealloc, destructor)) == current_tp_dealloc)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type)
        tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    traverseproc tp_traverse = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_traverse, traverseproc) != current_tp_traverse)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_traverse = __Pyx_PyType_GetSlot(type, tp_traverse, traverseproc)) == current_tp_traverse)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type && tp_traverse)
        return tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    inquiry tp_clear = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_clear, inquiry) != current_tp_clear)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_clear = __Pyx_PyType_GetSlot(type, tp_clear, inquiry)) == current_tp_clear)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type && tp_clear)
        tp_clear(obj);
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_8
#define __PYX_HAVE_RT_ImportType_3_0_8
static PyTypeObject *__Pyx_ImportType_3_0_8(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_8 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_8 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_8 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__33;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* GetNameInClass */
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    PyObject *dict;
    assert(PyType_Check(nmspace));
#if CYTHON_USE_TYPE_SLOTS
    dict = ((PyTypeObject*)nmspace)->tp_dict;
    Py_XINCREF(dict);
#else
    dict = PyObject_GetAttr(nmspace, __pyx_n_s_dict);
#endif
    if (likely(dict)) {
        result = PyObject_GetItem(dict, name);
        Py_DECREF(dict);
        if (result) {
            return result;
        }
    }
    PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}

/* FusedFunction */
static PyObject *
__pyx_FusedFunction_New(PyMethodDef *ml, int flags,
                        PyObject *qualname, PyObject *closure,
                        PyObject *module, PyObject *globals,
                        PyObject *code)
{
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_FusedFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        __pyx_FusedFunctionObject *fusedfunc = (__pyx_FusedFunctionObject *) op;
        fusedfunc->__signatures__ = NULL;
        fusedfunc->self = NULL;
        PyObject_GC_Track(op);
    }
    return op;
}
static void
__pyx_FusedFunction_dealloc(__pyx_FusedFunctionObject *self)
{
    PyObject_GC_UnTrack(self);
    Py_CLEAR(self->self);
    Py_CLEAR(self->__signatures__);
    __Pyx__CyFunction_dealloc((__pyx_CyFunctionObject *) self);
}
static int
__pyx_FusedFunction_traverse(__pyx_FusedFunctionObject *self,
                             visitproc visit,
                             void *arg)
{
    Py_VISIT(self->self);
    Py_VISIT(self->__signatures__);
    return __Pyx_CyFunction_traverse((__pyx_CyFunctionObject *) self, visit, arg);
}
static int
__pyx_FusedFunction_clear(__pyx_FusedFunctionObject *self)
{
    Py_CLEAR(self->self);
    Py_CLEAR(self->__signatures__);
    return __Pyx_CyFunction_clear((__pyx_CyFunctionObject *) self);
}
static PyObject *
__pyx_FusedFunction_descr_get(PyObject *self, PyObject *obj, PyObject *type)
{
    __pyx_FusedFunctionObject *func, *meth;
    func = (__pyx_FusedFunctionObject *) self;
    if (func->self || func->func.flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(self);
        return self;
    }
    if (obj == Py_None)
        obj = NULL;
    if (func->func.flags & __Pyx_CYFUNCTION_CLASSMETHOD)
        obj = type;
    if (obj == NULL) {
        Py_INCREF(self);
        return self;
    }
    meth = (__pyx_FusedFunctionObject *) __pyx_FusedFunction_New(
                    ((PyCFunctionObject *) func)->m_ml,
                    ((__pyx_CyFunctionObject *) func)->flags,
                    ((__pyx_CyFunctionObject *) func)->func_qualname,
                    ((__pyx_CyFunctionObject *) func)->func_closure,
                    ((PyCFunctionObject *) func)->m_module,
                    ((__pyx_CyFunctionObject *) func)->func_globals,
                    ((__pyx_CyFunctionObject *) func)->func_code);
    if (unlikely(!meth))
        return NULL;
    if (func->func.defaults) {
        PyObject **pydefaults;
        int i;
        if (unlikely(!__Pyx_CyFunction_InitDefaults(
                (PyObject*)meth,
                func->func.defaults_size,
                func->func.defaults_pyobjects))) {
            Py_XDECREF((PyObject*)meth);
            return NULL;
        }
        memcpy(meth->func.defaults, func->func.defaults, func->func.defaults_size);
        pydefaults = __Pyx_CyFunction_Defaults(PyObject *, meth);
        for (i = 0; i < meth->func.defaults_pyobjects; i++)
            Py_XINCREF(pydefaults[i]);
    }
    __Pyx_CyFunction_SetClassObj(meth, __Pyx_CyFunction_GetClassObj(func));
    Py_XINCREF(func->__signatures__);
    meth->__signatures__ = func->__signatures__;
    Py_XINCREF(func->func.defaults_tuple);
    meth->func.defaults_tuple = func->func.defaults_tuple;
    Py_XINCREF(obj);
    meth->self = obj;
    return (PyObject *) meth;
}
static PyObject *
_obj_to_string(PyObject *obj)
{
    if (PyUnicode_CheckExact(obj))
        return __Pyx_NewRef(obj);
#if PY_MAJOR_VERSION == 2
    else if (PyString_Check(obj))
        return PyUnicode_FromEncodedObject(obj, NULL, "strict");
#endif
    else if (PyType_Check(obj))
        return PyObject_GetAttr(obj, __pyx_n_s_name);
    else
        return PyObject_Unicode(obj);
}
static PyObject *
__pyx_FusedFunction_getitem(__pyx_FusedFunctionObject *self, PyObject *idx)
{
    PyObject *signature = NULL;
    PyObject *unbound_result_func;
    PyObject *result_func = NULL;
    if (unlikely(self->__signatures__ == NULL)) {
        PyErr_SetString(PyExc_TypeError, "Function is not fused");
        return NULL;
    }
    if (PyTuple_Check(idx)) {
        Py_ssize_t n = PyTuple_GET_SIZE(idx);
        PyObject *list = PyList_New(n);
        int i;
        if (unlikely(!list))
            return NULL;
        for (i = 0; i < n; i++) {
            PyObject *string;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            PyObject *item = PyTuple_GET_ITEM(idx, i);
#else
            PyObject *item = PySequence_ITEM(idx, i);  if (unlikely(!item)) goto __pyx_err;
#endif
            string = _obj_to_string(item);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
            Py_DECREF(item);
#endif
            if (unlikely(!string)) goto __pyx_err;
            PyList_SET_ITEM(list, i, string);
        }
        signature = PyUnicode_Join(__pyx_kp_u__7, list);
__pyx_err:;
        Py_DECREF(list);
    } else {
        signature = _obj_to_string(idx);
    }
    if (unlikely(!signature))
        return NULL;
    unbound_result_func = PyObject_GetItem(self->__signatures__, signature);
    if (likely(unbound_result_func)) {
        if (self->self) {
            __pyx_FusedFunctionObject *unbound = (__pyx_FusedFunctionObject *) unbound_result_func;
            __Pyx_CyFunction_SetClassObj(unbound, __Pyx_CyFunction_GetClassObj(self));
            result_func = __pyx_FusedFunction_descr_get(unbound_result_func,
                                                        self->self, self->self);
        } else {
            result_func = unbound_result_func;
            Py_INCREF(result_func);
        }
    }
    Py_DECREF(signature);
    Py_XDECREF(unbound_result_func);
    return result_func;
}
static PyObject *
__pyx_FusedFunction_callfunction(PyObject *func, PyObject *args, PyObject *kw)
{
     __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    int static_specialized = (cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD &&
                              !((__pyx_FusedFunctionObject *) func)->__signatures__);
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !static_specialized) {
        return __Pyx_CyFunction_CallAsMethod(func, args, kw);
    } else {
        return __Pyx_CyFunction_Call(func, args, kw);
    }
}
static PyObject *
__pyx_FusedFunction_call(PyObject *func, PyObject *args, PyObject *kw)
{
    __pyx_FusedFunctionObject *binding_func = (__pyx_FusedFunctionObject *) func;
    Py_ssize_t argc = PyTuple_GET_SIZE(args);
    PyObject *new_args = NULL;
    __pyx_FusedFunctionObject *new_func = NULL;
    PyObject *result = NULL;
    int is_staticmethod = binding_func->func.flags & __Pyx_CYFUNCTION_STATICMETHOD;
    if (binding_func->self) {
        PyObject *self;
        Py_ssize_t i;
        new_args = PyTuple_New(argc + 1);
        if (unlikely(!new_args))
            return NULL;
        self = binding_func->self;
        Py_INCREF(self);
        PyTuple_SET_ITEM(new_args, 0, self);
        self = NULL;
        for (i = 0; i < argc; i++) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            PyObject *item = PyTuple_GET_ITEM(args, i);
            Py_INCREF(item);
#else
            PyObject *item = PySequence_ITEM(args, i);  if (unlikely(!item)) goto bad;
#endif
            PyTuple_SET_ITEM(new_args, i + 1, item);
        }
        args = new_args;
    }
    if (binding_func->__signatures__) {
        PyObject *tup;
        if (is_staticmethod && binding_func->func.flags & __Pyx_CYFUNCTION_CCLASS) {
            tup = PyTuple_Pack(3, args,
                               kw == NULL ? Py_None : kw,
                               binding_func->func.defaults_tuple);
            if (unlikely(!tup)) goto bad;
            new_func = (__pyx_FusedFunctionObject *) __Pyx_CyFunction_CallMethod(
                func, binding_func->__signatures__, tup, NULL);
        } else {
            tup = PyTuple_Pack(4, binding_func->__signatures__, args,
                               kw == NULL ? Py_None : kw,
                               binding_func->func.defaults_tuple);
            if (unlikely(!tup)) goto bad;
            new_func = (__pyx_FusedFunctionObject *) __pyx_FusedFunction_callfunction(func, tup, NULL);
        }
        Py_DECREF(tup);
        if (unlikely(!new_func))
            goto bad;
        __Pyx_CyFunction_SetClassObj(new_func, __Pyx_CyFunction_GetClassObj(binding_func));
        func = (PyObject *) new_func;
    }
    result = __pyx_FusedFunction_callfunction(func, args, kw);
bad:
    Py_XDECREF(new_args);
    Py_XDECREF((PyObject *) new_func);
    return result;
}
static PyMemberDef __pyx_FusedFunction_members[] = {
    {(char *) "__signatures__",
     T_OBJECT,
     offsetof(__pyx_FusedFunctionObject, __signatures__),
     READONLY,
     0},
    {(char *) "__self__", T_OBJECT_EX, offsetof(__pyx_FusedFunctionObject, self), READONLY, 0},
    {0, 0, 0, 0, 0},
};
static PyGetSetDef __pyx_FusedFunction_getsets[] = {
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_FusedFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__pyx_FusedFunction_dealloc},
    {Py_tp_call, (void *)__pyx_FusedFunction_call},
    {Py_tp_traverse, (void *)__pyx_FusedFunction_traverse},
    {Py_tp_clear, (void *)__pyx_FusedFunction_clear},
    {Py_tp_members, (void *)__pyx_FusedFunction_members},
    {Py_tp_getset, (void *)__pyx_FusedFunction_getsets},
    {Py_tp_descr_get, (void *)__pyx_FusedFunction_descr_get},
    {Py_mp_subscript, (void *)__pyx_FusedFunction_getitem},
    {0, 0},
};
static PyType_Spec __pyx_FusedFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "fused_cython_function",
    sizeof(__pyx_FusedFunctionObject),
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_FusedFunctionType_slots
};
#else
static PyMappingMethods __pyx_FusedFunction_mapping_methods = {
    0,
    (binaryfunc) __pyx_FusedFunction_getitem,
    0,
};
static PyTypeObject __pyx_FusedFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "fused_cython_function",
    sizeof(__pyx_FusedFunctionObject),
    0,
    (destructor) __pyx_FusedFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    0,
    0,
    0,
    &__pyx_FusedFunction_mapping_methods,
    0,
    (ternaryfunc) __pyx_FusedFunction_call,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __pyx_FusedFunction_traverse,
    (inquiry) __pyx_FusedFunction_clear,
    0,
    0,
    0,
    0,
    0,
    __pyx_FusedFunction_members,
    __pyx_FusedFunction_getsets,
    &__pyx_CyFunctionType_type,
    0,
    __pyx_FusedFunction_descr_get,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_FusedFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    PyObject *bases = PyTuple_Pack(1, __pyx_CyFunctionType);
    if (unlikely(!bases)) {
        return -1;
    }
    __pyx_FusedFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_FusedFunctionType_spec, bases);
    Py_DECREF(bases);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_FusedFunctionType_type.tp_base = __pyx_CyFunctionType;
    __pyx_FusedFunctionType = __Pyx_FetchCommonType(&__pyx_FusedFunctionType_type);
#endif
    if (unlikely(__pyx_FusedFunctionType == NULL)) {
        return -1;
    }
    return 0;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases;
#if CYTHON_ASSUME_SAFE_MACROS
    nbases = PyTuple_GET_SIZE(bases);
#else
    nbases = PyTuple_Size(bases);
    if (nbases < 0) return NULL;
#endif
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
#if CYTHON_ASSUME_SAFE_MACROS
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *tmp = PyTuple_GetItem(bases, i);
        if (!tmp) return NULL;
#endif
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStrNoError(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs[3] = {NULL, name, bases};
            ns = __Pyx_PyObject_FastCallDict(prep, pargs+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, mkw);
            Py_DECREF(prep);
        } else {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
#if PY_VERSION_HEX >= 0x03030000
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
#else
    CYTHON_MAYBE_UNUSED_VAR(qualname);
#endif
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
static int __Pyx_SetNamesPEP487(PyObject *type_obj) {
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *names_to_set, *key, *value, *set_name, *tmp;
    Py_ssize_t i = 0;
#if CYTHON_USE_TYPE_SLOTS
    names_to_set = PyDict_Copy(type->tp_dict);
#else
    {
        PyObject *d = PyObject_GetAttr(type_obj, __pyx_n_s_dict);
        names_to_set = NULL;
        if (likely(d)) {
            PyObject *names_to_set = PyDict_New();
            int ret = likely(names_to_set) ? PyDict_Update(names_to_set, d) : -1;
            Py_DECREF(d);
            if (unlikely(ret < 0))
                Py_CLEAR(names_to_set);
        }
    }
#endif
    if (unlikely(names_to_set == NULL))
        goto bad;
    while (PyDict_Next(names_to_set, &i, &key, &value)) {
        set_name = __Pyx_PyObject_LookupSpecialNoError(value, __pyx_n_s_set_name);
        if (unlikely(set_name != NULL)) {
            tmp = __Pyx_PyObject_Call2Args(set_name, type_obj, key);
            Py_DECREF(set_name);
            if (unlikely(tmp == NULL)) {
                __Pyx_TypeName value_type_name =
                    __Pyx_PyType_GetName(Py_TYPE(value));
                __Pyx_TypeName type_name = __Pyx_PyType_GetName(type);
                PyErr_Format(PyExc_RuntimeError,
#if PY_MAJOR_VERSION >= 3
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %R " "in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name, key, type_name);
#else
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %.100s in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name,
                    PyString_Check(key) ? PyString_AS_STRING(key) : "?",
                    type_name);
#endif
                goto bad;
            } else {
                Py_DECREF(tmp);
            }
        }
        else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
    Py_DECREF(names_to_set);
    return 0;
bad:
    Py_XDECREF(names_to_set);
    return -1;
}
static PyObject *__Pyx_InitSubclassPEP487(PyObject *type_obj, PyObject *mkw) {
#if CYTHON_USE_TYPE_SLOTS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *mro = type->tp_mro;
    Py_ssize_t i, nbases;
    if (unlikely(!mro)) goto done;
    (void) &__Pyx_GetBuiltinName;
    Py_INCREF(mro);
    nbases = PyTuple_GET_SIZE(mro);
    assert(PyTuple_GET_ITEM(mro, 0) == type_obj);
    for (i = 1; i < nbases-1; i++) {
        PyObject *base, *dict, *meth;
        base = PyTuple_GET_ITEM(mro, i);
        dict = ((PyTypeObject *)base)->tp_dict;
        meth = __Pyx_PyDict_GetItemStrWithError(dict, __pyx_n_s_init_subclass);
        if (unlikely(meth)) {
            descrgetfunc f = Py_TYPE(meth)->tp_descr_get;
            PyObject *res;
            Py_INCREF(meth);
            if (likely(f)) {
                res = f(meth, NULL, type_obj);
                Py_DECREF(meth);
                if (unlikely(!res)) goto bad;
                meth = res;
            }
            res = __Pyx_PyObject_FastCallDict(meth, NULL, 0, mkw);
            Py_DECREF(meth);
            if (unlikely(!res)) goto bad;
            Py_DECREF(res);
            goto done;
        } else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
done:
    Py_XDECREF(mro);
    return type_obj;
bad:
    Py_XDECREF(mro);
    Py_DECREF(type_obj);
    return NULL;
#else
    PyObject *super_type, *super, *func, *res;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    super_type = __Pyx_GetBuiltinName(__pyx_n_s_super);
#else
    super_type = (PyObject*) &PySuper_Type;
    (void) &__Pyx_GetBuiltinName;
#endif
    super = likely(super_type) ? __Pyx_PyObject_Call2Args(super_type, type_obj, type_obj) : NULL;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    Py_XDECREF(super_type);
#endif
    if (unlikely(!super)) {
        Py_CLEAR(type_obj);
        goto done;
    }
    func = __Pyx_PyObject_GetAttrStrNoError(super, __pyx_n_s_init_subclass);
    Py_DECREF(super);
    if (likely(!func)) {
        if (unlikely(PyErr_Occurred()))
            Py_CLEAR(type_obj);
        goto done;
    }
    res = __Pyx_PyObject_FastCallDict(func, NULL, 0, mkw);
    Py_DECREF(func);
    if (unlikely(!res))
        Py_CLEAR(type_obj);
    Py_XDECREF(res);
done:
    return type_obj;
#endif
}
#endif
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result;
    PyObject *owned_metaclass = NULL;
    PyObject *margs[4] = {NULL, name, bases, dict};
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    result = __Pyx_PyObject_FastCallDict(metaclass, margs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET,
#if PY_VERSION_HEX < 0x030600A4
        (metaclass == (PyObject*)&PyType_Type) ? NULL : mkw
#else
        mkw
#endif
    );
    Py_XDECREF(owned_metaclass);
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
    if (likely(result) && likely(PyType_Check(result))) {
        if (unlikely(__Pyx_SetNamesPEP487(result) < 0)) {
            Py_CLEAR(result);
        } else {
            result = __Pyx_InitSubclassPEP487(result, mkw);
        }
    }
#else
    (void) &__Pyx_GetBuiltinName;
#endif
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(uint64_t));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(uint64_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(uint64_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT)) {
                                return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(uint64_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT)) {
                                return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(uint64_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT)) {
                                return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(uint64_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(uint64_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(uint64_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(uint64_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(uint64_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(uint64_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (uint64_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (uint64_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (uint64_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (uint64_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (uint64_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(uint64_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((uint64_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(uint64_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((uint64_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((uint64_t) 1) << (sizeof(uint64_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(enum NetworKit::OverlappingNMIDistance::Normalization value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum NetworKit::OverlappingNMIDistance::Normalization neg_one = (enum NetworKit::OverlappingNMIDistance::Normalization) -1, const_zero = (enum NetworKit::OverlappingNMIDistance::Normalization) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(enum NetworKit::OverlappingNMIDistance::Normalization),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(enum NetworKit::OverlappingNMIDistance::Normalization));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE enum NetworKit::OverlappingNMIDistance::Normalization __Pyx_PyInt_As_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum NetworKit::OverlappingNMIDistance::Normalization neg_one = (enum NetworKit::OverlappingNMIDistance::Normalization) -1, const_zero = (enum NetworKit::OverlappingNMIDistance::Normalization) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(enum NetworKit::OverlappingNMIDistance::Normalization, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum NetworKit::OverlappingNMIDistance::Normalization) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum NetworKit::OverlappingNMIDistance::Normalization, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::OverlappingNMIDistance::Normalization, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) >= 2 * PyLong_SHIFT)) {
                                return (enum NetworKit::OverlappingNMIDistance::Normalization) (((((enum NetworKit::OverlappingNMIDistance::Normalization)digits[1]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::OverlappingNMIDistance::Normalization, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) >= 3 * PyLong_SHIFT)) {
                                return (enum NetworKit::OverlappingNMIDistance::Normalization) (((((((enum NetworKit::OverlappingNMIDistance::Normalization)digits[2]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[1]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::OverlappingNMIDistance::Normalization, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) >= 4 * PyLong_SHIFT)) {
                                return (enum NetworKit::OverlappingNMIDistance::Normalization) (((((((((enum NetworKit::OverlappingNMIDistance::Normalization)digits[3]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[2]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[1]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum NetworKit::OverlappingNMIDistance::Normalization) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::OverlappingNMIDistance::Normalization, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::OverlappingNMIDistance::Normalization, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum NetworKit::OverlappingNMIDistance::Normalization, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::OverlappingNMIDistance::Normalization, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum NetworKit::OverlappingNMIDistance::Normalization) (((enum NetworKit::OverlappingNMIDistance::Normalization)-1)*(((((enum NetworKit::OverlappingNMIDistance::Normalization)digits[1]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::OverlappingNMIDistance::Normalization, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum NetworKit::OverlappingNMIDistance::Normalization) ((((((enum NetworKit::OverlappingNMIDistance::Normalization)digits[1]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::OverlappingNMIDistance::Normalization, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum NetworKit::OverlappingNMIDistance::Normalization) (((enum NetworKit::OverlappingNMIDistance::Normalization)-1)*(((((((enum NetworKit::OverlappingNMIDistance::Normalization)digits[2]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[1]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::OverlappingNMIDistance::Normalization, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum NetworKit::OverlappingNMIDistance::Normalization) ((((((((enum NetworKit::OverlappingNMIDistance::Normalization)digits[2]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[1]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::OverlappingNMIDistance::Normalization, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum NetworKit::OverlappingNMIDistance::Normalization) (((enum NetworKit::OverlappingNMIDistance::Normalization)-1)*(((((((((enum NetworKit::OverlappingNMIDistance::Normalization)digits[3]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[2]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[1]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::OverlappingNMIDistance::Normalization, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum NetworKit::OverlappingNMIDistance::Normalization) ((((((((((enum NetworKit::OverlappingNMIDistance::Normalization)digits[3]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[2]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[1]) << PyLong_SHIFT) | (enum NetworKit::OverlappingNMIDistance::Normalization)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::OverlappingNMIDistance::Normalization, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum NetworKit::OverlappingNMIDistance::Normalization) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::OverlappingNMIDistance::Normalization, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available, cannot convert large enums");
        return (enum NetworKit::OverlappingNMIDistance::Normalization) -1;
    } else {
        enum NetworKit::OverlappingNMIDistance::Normalization val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum NetworKit::OverlappingNMIDistance::Normalization) -1;
        val = __Pyx_PyInt_As_enum__NetworKit_3a__3a_OverlappingNMIDistance_3a__3a_Normalization(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum NetworKit::OverlappingNMIDistance::Normalization");
    return (enum NetworKit::OverlappingNMIDistance::Normalization) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum NetworKit::OverlappingNMIDistance::Normalization");
    return (enum NetworKit::OverlappingNMIDistance::Normalization) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__207);
    }
    return name;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
