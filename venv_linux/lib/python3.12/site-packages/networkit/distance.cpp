/* Generated by Cython 3.0.8 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "networkit/cython_helper.h"
        ],
        "include_dirs": [
            "networkit"
        ],
        "language": "c++",
        "name": "networkit.distance",
        "sources": [
            "networkit/distance.pyx"
        ]
    },
    "module_name": "networkit.distance"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_8" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030008F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__networkit__distance
#define __PYX_HAVE_API__networkit__distance
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include <string.h>
#include <string>
#include <set>
#include <unordered_map>
#include <networkit/base/Algorithm.hpp>
#include <stdint.h>
#include "cython_helper.h"
#include <algorithm>
#include <networkit/structures/Cover.hpp>
#include <networkit/structures/Partition.hpp>
#include <networkit/dynamics/GraphEvent.hpp>
#include <networkit/base/DynAlgorithm.hpp>
#include <unordered_set>
#include <networkit/Globals.hpp>
#include <networkit/graph/Graph.hpp>
#include <networkit/graph/SpanningForest.hpp>
#include <networkit/graph/RandomMaximumSpanningForest.hpp>
#include <networkit/graph/UnionMaximumSpanningForest.hpp>
#include <networkit/matching/Matching.hpp>
#include <networkit/distance/STSP.hpp>
#include <networkit/distance/SSSP.hpp>
#include <networkit/distance/DynSSSP.hpp>
#include <networkit/distance/AdamicAdarDistance.hpp>
#include <networkit/distance/Diameter.hpp>
#include <networkit/distance/Eccentricity.hpp>
#include <networkit/distance/EffectiveDiameterApproximation.hpp>
#include <networkit/distance/EffectiveDiameter.hpp>
#include <networkit/distance/HopPlotApproximation.hpp>
#include <networkit/distance/NeighborhoodFunction.hpp>
#include <networkit/distance/NeighborhoodFunctionApproximation.hpp>
#include <networkit/distance/Volume.hpp>
#include <networkit/distance/JaccardDistance.hpp>
#include <networkit/distance/AlgebraicDistance.hpp>
#include <networkit/distance/CommuteTimeDistance.hpp>
#include <networkit/distance/NeighborhoodFunctionHeuristic.hpp>
#include <networkit/distance/APSP.hpp>
#include <networkit/distance/SPSP.hpp>
#include <networkit/distance/DynAPSP.hpp>
#include <networkit/distance/BFS.hpp>
#include <networkit/distance/Dijkstra.hpp>
#include <networkit/distance/MultiTargetBFS.hpp>
#include <networkit/distance/MultiTargetDijkstra.hpp>
#include <networkit/distance/DynBFS.hpp>
#include <networkit/distance/DynDijkstra.hpp>
#include <networkit/distance/BidirectionalBFS.hpp>
#include <networkit/distance/BidirectionalDijkstra.hpp>
#include <networkit/distance/AStar.hpp>
#include <networkit/reachability/AllSimplePaths.hpp>
#include <networkit/distance/ReverseBFS.hpp>
#include <networkit/distance/PrunedLandmarkLabeling.hpp>
#include <networkit/distance/DynPrunedLandmarkLabeling.hpp>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "networkit/distance.pyx",
  "<stringsource>",
  "networkit/helpers.pxd",
  "networkit/base.pxd",
  "networkit/structures.pxd",
  "networkit/dynamics.pxd",
  "networkit/graph.pxd",
  "networkit/matching.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* #### Code section: numeric_typedefs ### */

/* "structures.pxd":8
 * from libcpp.string cimport string
 * 
 * ctypedef uint64_t count             # <<<<<<<<<<<<<<
 * ctypedef uint64_t index
 * ctypedef uint64_t edgeid
 */
typedef uint64_t __pyx_t_9networkit_10structures_count;

/* "structures.pxd":9
 * 
 * ctypedef uint64_t count
 * ctypedef uint64_t index             # <<<<<<<<<<<<<<
 * ctypedef uint64_t edgeid
 * ctypedef index node
 */
typedef uint64_t __pyx_t_9networkit_10structures_index;

/* "structures.pxd":10
 * ctypedef uint64_t count
 * ctypedef uint64_t index
 * ctypedef uint64_t edgeid             # <<<<<<<<<<<<<<
 * ctypedef index node
 * ctypedef double coordinate
 */
typedef uint64_t __pyx_t_9networkit_10structures_edgeid;

/* "structures.pxd":11
 * ctypedef uint64_t index
 * ctypedef uint64_t edgeid
 * ctypedef index node             # <<<<<<<<<<<<<<
 * ctypedef double coordinate
 * ctypedef double edgeweight
 */
typedef __pyx_t_9networkit_10structures_index __pyx_t_9networkit_10structures_node;

/* "structures.pxd":12
 * ctypedef uint64_t edgeid
 * ctypedef index node
 * ctypedef double coordinate             # <<<<<<<<<<<<<<
 * ctypedef double edgeweight
 * 
 */
typedef double __pyx_t_9networkit_10structures_coordinate;

/* "structures.pxd":13
 * ctypedef index node
 * ctypedef double coordinate
 * ctypedef double edgeweight             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "cython_helper.h":
 */
typedef double __pyx_t_9networkit_10structures_edgeweight;
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_9networkit_4base__CythonParentClass;
struct __pyx_obj_9networkit_4base_Algorithm;
struct __pyx_obj_9networkit_10structures_Cover;
struct __pyx_obj_9networkit_10structures_Partition;
struct __pyx_obj_9networkit_8dynamics_GraphEvent;
struct __pyx_obj_9networkit_5graph_Graph;
struct __pyx_obj_9networkit_5graph_NodeIntAttribute;
struct __pyx_obj_9networkit_5graph_NodeDoubleAttribute;
struct __pyx_obj_9networkit_5graph_NodeStringAttribute;
struct __pyx_obj_9networkit_5graph_EdgeIntAttribute;
struct __pyx_obj_9networkit_5graph_EdgeDoubleAttribute;
struct __pyx_obj_9networkit_5graph_EdgeStringAttribute;
struct __pyx_obj_9networkit_5graph_RandomMaximumSpanningForest;
struct __pyx_obj_9networkit_5graph_UnionMaximumSpanningForest;
struct __pyx_obj_9networkit_8matching_Matching;
struct __pyx_obj_9networkit_8distance_STSP;
struct __pyx_obj_9networkit_8distance_SSSP;
struct __pyx_obj_9networkit_8distance_DynSSSP;
struct __pyx_obj_9networkit_8distance_AdamicAdarDistance;
struct __pyx_obj_9networkit_8distance_Diameter;
struct __pyx_obj_9networkit_8distance_Eccentricity;
struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation;
struct __pyx_obj_9networkit_8distance_EffectiveDiameter;
struct __pyx_obj_9networkit_8distance_HopPlotApproximation;
struct __pyx_obj_9networkit_8distance_NeighborhoodFunction;
struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation;
struct __pyx_obj_9networkit_8distance_Volume;
struct __pyx_obj_9networkit_8distance_JaccardDistance;
struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer;
struct __pyx_obj_9networkit_8distance_AlgebraicDistance;
struct __pyx_obj_9networkit_8distance_CommuteTimeDistance;
struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic;
struct __pyx_obj_9networkit_8distance_APSP;
struct __pyx_obj_9networkit_8distance_SPSP;
struct __pyx_obj_9networkit_8distance_DynAPSP;
struct __pyx_obj_9networkit_8distance_BFS;
struct __pyx_obj_9networkit_8distance_Dijkstra;
struct __pyx_obj_9networkit_8distance_MultiTargetBFS;
struct __pyx_obj_9networkit_8distance_MultiTargetDijkstra;
struct __pyx_obj_9networkit_8distance_DynBFS;
struct __pyx_obj_9networkit_8distance_DynDijkstra;
struct __pyx_obj_9networkit_8distance_BidirectionalBFS;
struct __pyx_obj_9networkit_8distance_BidirectionalDijkstra;
struct __pyx_obj_9networkit_8distance_AStar;
struct __pyx_obj_9networkit_8distance_AllSimplePaths;
struct __pyx_obj_9networkit_8distance_ReverseBFS;
struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling;
struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling;
struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume;
struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr;
struct __pyx_t_9networkit_8distance_PathCallbackWrapper;
struct __pyx_t_9networkit_8distance_PathCallbackWrapper {

  /* "networkit/distance.pyx":1500
 * 		self._this = new _DynDijkstra(G._this, source)
 * 
 * cdef cppclass PathCallbackWrapper:             # <<<<<<<<<<<<<<
 * 	void* callback
 * 	__init__(object callback):
 */
  void *callback;
  void __pyx_f___init__PathCallbackWrapper(PyObject *);
  virtual void cython_call_operator(std::vector<__pyx_t_9networkit_10structures_node> );
  __pyx_t_9networkit_8distance_PathCallbackWrapper(PyObject *__pyx_v_callback) {
    __pyx_f___init__PathCallbackWrapper(__pyx_v_callback);
  }
  virtual ~__pyx_t_9networkit_8distance_PathCallbackWrapper() {
  }
};

/* "base.pxd":9
 * 		bool_t hasFinished() except +
 * 
 * cdef class _CythonParentClass:             # <<<<<<<<<<<<<<
 * 	cdef _Algorithm *_this
 * 
 */
struct __pyx_obj_9networkit_4base__CythonParentClass {
  PyObject_HEAD
  NetworKit::Algorithm *_this;
};


/* "base.pxd":12
 * 	cdef _Algorithm *_this
 * 
 * cdef class Algorithm(_CythonParentClass):             # <<<<<<<<<<<<<<
 * 	pass
 */
struct __pyx_obj_9networkit_4base_Algorithm {
  struct __pyx_obj_9networkit_4base__CythonParentClass __pyx_base;
};


/* "structures.pxd":50
 * 		set[index] getSubsetIds() except +
 * 
 * cdef class Cover:             # <<<<<<<<<<<<<<
 * 	cdef _Cover _this
 * 	cdef setThis(self, _Cover& other)
 */
struct __pyx_obj_9networkit_10structures_Cover {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_10structures_Cover *__pyx_vtab;
  NetworKit::Cover _this;
};


/* "structures.pxd":86
 * 		index operator[](index) except +
 * 
 * cdef class Partition:             # <<<<<<<<<<<<<<
 * 	cdef _Partition _this
 * 	cdef setThis(self, _Partition& other)
 */
struct __pyx_obj_9networkit_10structures_Partition {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_10structures_Partition *__pyx_vtab;
  NetworKit::Partition _this;
};


/* "dynamics.pxd":36
 * 		bool_t operator>=(_GraphEvent)
 * 
 * cdef class GraphEvent:             # <<<<<<<<<<<<<<
 * 	cdef _GraphEvent _this
 */
struct __pyx_obj_9networkit_8dynamics_GraphEvent {
  PyObject_HEAD
  NetworKit::GraphEvent _this;
};


/* "graph.pxd":283
 * 		void swap(_EdgeStringAttribute& other)
 * 
 * cdef class Graph:             # <<<<<<<<<<<<<<
 * 	cdef _Graph _this
 * 	cdef setThis(self, _Graph& other)
 */
struct __pyx_obj_9networkit_5graph_Graph {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_5graph_Graph *__pyx_vtab;
  NetworKit::Graph _this;
};


/* "graph.pxd":287
 * 	cdef setThis(self, _Graph& other)
 * 
 * cdef class NodeIntAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _NodeIntAttribute _this
 * 	cdef _NodeIntAttribute._AttributeIterator _iter
 */
struct __pyx_obj_9networkit_5graph_NodeIntAttribute {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_5graph_NodeIntAttribute *__pyx_vtab;
  NetworKit::Graph::NodeIntAttribute _this;
  NetworKit::Graph::NodeIntAttribute::Iterator _iter;
  NetworKit::Graph::NodeIntAttribute::Iterator _stopiter;
  NetworKit::Graph *_G;
};


/* "graph.pxd":294
 * 	cdef setThis(self, _NodeIntAttribute& other, _Graph* graph)
 * 
 * cdef class NodeDoubleAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _NodeDoubleAttribute _this
 * 	cdef _NodeDoubleAttribute._AttributeIterator _iter
 */
struct __pyx_obj_9networkit_5graph_NodeDoubleAttribute {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_5graph_NodeDoubleAttribute *__pyx_vtab;
  NetworKit::Graph::NodeDoubleAttribute _this;
  NetworKit::Graph::NodeDoubleAttribute::Iterator _iter;
  NetworKit::Graph::NodeDoubleAttribute::Iterator _stopiter;
  NetworKit::Graph *_G;
};


/* "graph.pxd":301
 * 	cdef setThis(self, _NodeDoubleAttribute& other, _Graph* graph)
 * 
 * cdef class NodeStringAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _NodeStringAttribute _this
 * 	cdef _NodeStringAttribute._AttributeIterator _iter
 */
struct __pyx_obj_9networkit_5graph_NodeStringAttribute {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_5graph_NodeStringAttribute *__pyx_vtab;
  NetworKit::Graph::NodeStringAttribute _this;
  NetworKit::Graph::NodeStringAttribute::Iterator _iter;
  NetworKit::Graph::NodeStringAttribute::Iterator _stopiter;
  NetworKit::Graph *_G;
};


/* "graph.pxd":308
 * 	cdef setThis(self, _NodeStringAttribute& other, _Graph* graph)
 * 
 * cdef class EdgeIntAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _EdgeIntAttribute _this
 * 	cdef _EdgeIntAttribute._AttributeIterator _iter
 */
struct __pyx_obj_9networkit_5graph_EdgeIntAttribute {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_5graph_EdgeIntAttribute *__pyx_vtab;
  NetworKit::Graph::EdgeIntAttribute _this;
  NetworKit::Graph::EdgeIntAttribute::Iterator _iter;
  NetworKit::Graph::EdgeIntAttribute::Iterator _stopiter;
  NetworKit::Graph *_G;
};


/* "graph.pxd":315
 * 	cdef setThis(self, _EdgeIntAttribute& other, _Graph* graph)
 * 
 * cdef class EdgeDoubleAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _EdgeDoubleAttribute _this
 * 	cdef _EdgeDoubleAttribute._AttributeIterator _iter
 */
struct __pyx_obj_9networkit_5graph_EdgeDoubleAttribute {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_5graph_EdgeDoubleAttribute *__pyx_vtab;
  NetworKit::Graph::EdgeDoubleAttribute _this;
  NetworKit::Graph::EdgeDoubleAttribute::Iterator _iter;
  NetworKit::Graph::EdgeDoubleAttribute::Iterator _stopiter;
  NetworKit::Graph *_G;
};


/* "graph.pxd":322
 * 	cdef setThis(self, _EdgeDoubleAttribute& other, _Graph* graph)
 * 
 * cdef class EdgeStringAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _EdgeStringAttribute _this
 * 	cdef _EdgeStringAttribute._AttributeIterator _iter
 */
struct __pyx_obj_9networkit_5graph_EdgeStringAttribute {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_5graph_EdgeStringAttribute *__pyx_vtab;
  NetworKit::Graph::EdgeStringAttribute _this;
  NetworKit::Graph::EdgeStringAttribute::Iterator _iter;
  NetworKit::Graph::EdgeStringAttribute::Iterator _stopiter;
  NetworKit::Graph *_G;
};


/* "graph.pxd":347
 * 		bool_t inMSF(node u, node v) except +
 * 
 * cdef class RandomMaximumSpanningForest(Algorithm):             # <<<<<<<<<<<<<<
 * 	cdef vector[double] _attribute
 * 	cdef Graph _G
 */
struct __pyx_obj_9networkit_5graph_RandomMaximumSpanningForest {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  std::vector<double>  _attribute;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "graph.pxd":362
 * 		bool_t inUMSF(node u, node v) except +
 * 
 * cdef class UnionMaximumSpanningForest(Algorithm):             # <<<<<<<<<<<<<<
 * 	cdef Graph _G
 */
struct __pyx_obj_9networkit_5graph_UnionMaximumSpanningForest {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "matching.pxd":32
 * 		vector[node] getVector() except +
 * 
 * cdef class Matching:             # <<<<<<<<<<<<<<
 * 	cdef _Matching _this
 * 	cdef setThis(self,  _Matching& other)
 */
struct __pyx_obj_9networkit_8matching_Matching {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_8matching_Matching *__pyx_vtab;
  NetworKit::Matching _this;
};


/* "networkit/distance.pyx":45
 * 		unordered_map[node, index] &getTargetIndexMap() except +
 * 
 * cdef class STSP(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	STSP(G, source, target, storePred)
 */
struct __pyx_obj_9networkit_8distance_STSP {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
  std::vector<__pyx_t_9networkit_10structures_node>  targets;
};


/* "networkit/distance.pyx":171
 * 		void setTarget(node t) except +
 * 
 * cdef class SSSP(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	SSSP(G, source, storePaths, storeNodesSortedByDistance, target)
 */
struct __pyx_obj_9networkit_8distance_SSSP {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/distance.pyx":353
 * 		void setTargetNode(node t) except +
 * 
 * cdef class DynSSSP(SSSP, DynAlgorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	DynSSSP(G, source, storePredecessors, target)
 */
struct __pyx_obj_9networkit_8distance_DynSSSP {
  struct __pyx_obj_9networkit_8distance_SSSP __pyx_base;
};


/* "networkit/distance.pyx":400
 * 		vector[double] &getEdgeScores() except +
 * 
 * cdef class AdamicAdarDistance:             # <<<<<<<<<<<<<<
 * 	"""
 * 	AdamicAdarDistance(G)
 */
struct __pyx_obj_9networkit_8distance_AdamicAdarDistance {
  PyObject_HEAD
  NetworKit::AdamicAdarDistance *_this;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/distance.pyx":487
 * 		pair[count, count] getDiameter() nogil except +
 * 
 * cdef class Diameter(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Diameter(G, algo = networkit.DiameterAlgo.AUTOMATIC, error = -1., nSamples = 0)
 */
struct __pyx_obj_9networkit_8distance_Diameter {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/distance.pyx":533
 * 	pair[node, count] getValue(_Graph G, node v) except +
 * 
 * cdef class Eccentricity:             # <<<<<<<<<<<<<<
 * 	"""
 * 	Eccentricity()
 */
struct __pyx_obj_9networkit_8distance_Eccentricity {
  PyObject_HEAD
};


/* "networkit/distance.pyx":565
 * 		double getEffectiveDiameter() except +
 * 
 * cdef class EffectiveDiameterApproximation(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	EffectiveDiameterApproximation(G, ratio=0.9, k=64, r=7)
 */
struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/distance.pyx":610
 * 		double getEffectiveDiameter() except +
 * 
 * cdef class EffectiveDiameter(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	EffectiveDiameter(G, ratio=0.9)
 */
struct __pyx_obj_9networkit_8distance_EffectiveDiameter {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/distance.pyx":647
 * 		map[count, double] &getHopPlot() except +
 * 
 * cdef class HopPlotApproximation(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	HopPlotApproximation(G, maxDistance=0, k=64, r=7)
 */
struct __pyx_obj_9networkit_8distance_HopPlotApproximation {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/distance.pyx":700
 * 		vector[count] &getNeighborhoodFunction() except +
 * 
 * cdef class NeighborhoodFunction(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	NeighborhoodFunction(G)
 */
struct __pyx_obj_9networkit_8distance_NeighborhoodFunction {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/distance.pyx":738
 * 		vector[count] &getNeighborhoodFunction() except +
 * 
 * cdef class NeighborhoodFunctionApproximation(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	NeighborhoodFunctionApproximation(G, k=64, r=7)
 */
struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/distance.pyx":783
 * 	vector[double] volume(const _Graph G, const vector[double] r, const count samples) nogil except +
 * 
 * cdef class Volume:             # <<<<<<<<<<<<<<
 * 	"""
 * 	Volume()
 */
struct __pyx_obj_9networkit_8distance_Volume {
  PyObject_HEAD
};


/* "networkit/distance.pyx":848
 * 		vector[double] &getEdgeScores() except +
 * 
 * cdef class JaccardDistance:             # <<<<<<<<<<<<<<
 * 	"""
 * 	JaccardDistance(G, triangles)
 */
struct __pyx_obj_9networkit_8distance_JaccardDistance {
  PyObject_HEAD
  NetworKit::JaccardDistance *_this;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
  std::vector<__pyx_t_9networkit_10structures_count>  _triangles;
};


/* "networkit/distance.pyx":889
 * 		return self._this.getEdgeScores()
 * 
 * cdef class JaccardSimilarityAttributizer:             # <<<<<<<<<<<<<<
 * 	"""
 * 	JaccardSimilarityAtrributizer(G, triangles)
 */
struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer {
  PyObject_HEAD
  NetworKit::JaccardDistance *_this;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
  std::vector<__pyx_t_9networkit_10structures_count>  _triangles;
};


/* "networkit/distance.pyx":941
 * 
 * 
 * cdef class AlgebraicDistance:             # <<<<<<<<<<<<<<
 * 	"""
 * 	AlgebraicDistance(G, numberSystems=10, numberIterations=30, omega=0.5, norm=0, withEdgeScores=False)
 */
struct __pyx_obj_9networkit_8distance_AlgebraicDistance {
  PyObject_HEAD
  NetworKit::AlgebraicDistance *_this;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/distance.pyx":996
 * 
 * 
 * cdef class CommuteTimeDistance(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	CommuteTimeDistance(G, tol=0.1)
 */
struct __pyx_obj_9networkit_8distance_CommuteTimeDistance {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/distance.pyx":1107
 * 		vector[count] &getNeighborhoodFunction() except +
 * 
 * cdef class NeighborhoodFunctionHeuristic(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	NeighborhoodFunctionHeuristic(G, nSamples=0, strategy=SelectionStrategy.SPLIT)
 */
struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/distance.pyx":1154
 * 		edgeweight getDistance(node u, node v) except +
 * 
 * cdef class APSP(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	APSP(G)
 */
struct __pyx_obj_9networkit_8distance_APSP {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/distance.pyx":1225
 * 		void setTargets(vector[node].iterator targetsFirst, vector[node].iterator targetsLast)
 * 
 * cdef class SPSP(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	SPSP(G, sources)
 */
struct __pyx_obj_9networkit_8distance_SPSP {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/distance.pyx":1329
 * 		_DynAPSP(_Graph G) except +
 * 
 * cdef class DynAPSP(APSP, DynAlgorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	DynAPSP(G)
 */
struct __pyx_obj_9networkit_8distance_DynAPSP {
  struct __pyx_obj_9networkit_8distance_APSP __pyx_base;
};


/* "networkit/distance.pyx":1352
 * 		_BFS(_Graph G, node source, bool_t storePaths, bool_t storeNodesSortedByDistance, node target) except +
 * 
 * cdef class BFS(SSSP):             # <<<<<<<<<<<<<<
 * 	"""
 * 	BFS(G, source, storePaths=True, storeNodesSortedByDistance=False, target=None)
 */
struct __pyx_obj_9networkit_8distance_BFS {
  struct __pyx_obj_9networkit_8distance_SSSP __pyx_base;
};


/* "networkit/distance.pyx":1381
 * 		_Dijkstra(_Graph G, node source, bool_t storePaths, bool_t storeNodesSortedByDistance, node target) except +
 * 
 * cdef class Dijkstra(SSSP):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Dijkstra(G, source, storePaths=True, storeNodesSortedByDistance=False, target=None)
 */
struct __pyx_obj_9networkit_8distance_Dijkstra {
  struct __pyx_obj_9networkit_8distance_SSSP __pyx_base;
};


/* "networkit/distance.pyx":1409
 * 		_MultiTargetBFS(_Graph G, node source, vector[node].iterator targetsFirst, vector[node].iterator targetsLast) except +
 * 
 * cdef class MultiTargetBFS(STSP):             # <<<<<<<<<<<<<<
 * 	"""
 * 	MultiTargetBFS(G, source, targets)
 */
struct __pyx_obj_9networkit_8distance_MultiTargetBFS {
  struct __pyx_obj_9networkit_8distance_STSP __pyx_base;
};


/* "networkit/distance.pyx":1434
 * 		_MultiTargetDijkstra(_Graph G, node source, vector[node].iterator targetsFirst, vector[node].iterator targetsLast) except +
 * 
 * cdef class MultiTargetDijkstra(STSP):             # <<<<<<<<<<<<<<
 * 	"""
 * 	MultiTargetDijkstra(G, source, targets)
 */
struct __pyx_obj_9networkit_8distance_MultiTargetDijkstra {
  struct __pyx_obj_9networkit_8distance_STSP __pyx_base;
};


/* "networkit/distance.pyx":1460
 * 		_DynBFS(_Graph G, node source) except +
 * 
 * cdef class DynBFS(DynSSSP):             # <<<<<<<<<<<<<<
 * 	"""
 * 	DynBFS(G, source)
 */
struct __pyx_obj_9networkit_8distance_DynBFS {
  struct __pyx_obj_9networkit_8distance_DynSSSP __pyx_base;
};


/* "networkit/distance.pyx":1482
 * 		_DynDijkstra(_Graph G, node source) except +
 * 
 * cdef class DynDijkstra(DynSSSP):             # <<<<<<<<<<<<<<
 * 	"""
 * 	DynDijkstra(G, source)
 */
struct __pyx_obj_9networkit_8distance_DynDijkstra {
  struct __pyx_obj_9networkit_8distance_DynSSSP __pyx_base;
};


/* "networkit/distance.pyx":1519
 * 		_BidirectionalBFS(_Graph G, node source, node target, bool_t storePred) except +
 * 
 * cdef class BidirectionalBFS(STSP):             # <<<<<<<<<<<<<<
 * 	"""
 * 	BidirectionalBFS(G, source, target, storePre=True)
 */
struct __pyx_obj_9networkit_8distance_BidirectionalBFS {
  struct __pyx_obj_9networkit_8distance_STSP __pyx_base;
};


/* "networkit/distance.pyx":1547
 * 		_BidirectionalDijkstra(_Graph G, node source, node target, bool_t storePred) except +
 * 
 * cdef class BidirectionalDijkstra(STSP):             # <<<<<<<<<<<<<<
 * 	"""
 * 	BidirectionalDijkstra(G, source, target, storePred=True)
 */
struct __pyx_obj_9networkit_8distance_BidirectionalDijkstra {
  struct __pyx_obj_9networkit_8distance_STSP __pyx_base;
};


/* "networkit/distance.pyx":1577
 * 		_AStar(_Graph G, vector[double] &heu, node source, node target, bool_t storePred) except +
 * 
 * cdef class AStar(STSP):             # <<<<<<<<<<<<<<
 * 	"""
 * 	AStar(G, heu, source, target, storePred=True)
 */
struct __pyx_obj_9networkit_8distance_AStar {
  struct __pyx_obj_9networkit_8distance_STSP __pyx_base;
  std::vector<double>  heu;
};


/* "networkit/distance.pyx":1612
 * 		void forAllSimplePaths[Callback](Callback c) except +
 * 
 * cdef class AllSimplePaths:             # <<<<<<<<<<<<<<
 * 	"""
 * 	AllSimplePaths(G, source, target, cutoff=None)
 */
struct __pyx_obj_9networkit_8distance_AllSimplePaths {
  PyObject_HEAD
  NetworKit::AllSimplePaths *_this;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/distance.pyx":1696
 * 		_ReverseBFS(_Graph G, node source, bool_t storePaths, bool_t storeNodesSortedByDistance, node target) except +
 * 
 * cdef class ReverseBFS(SSSP):             # <<<<<<<<<<<<<<
 * 	"""
 * 	ReverseBFS(G, source, storePaths=True, storeNodesSortedByDistance=False, target=None)
 */
struct __pyx_obj_9networkit_8distance_ReverseBFS {
  struct __pyx_obj_9networkit_8distance_SSSP __pyx_base;
};


/* "networkit/distance.pyx":1726
 * 		count query(node u, node v) except +
 * 
 * cdef class PrunedLandmarkLabeling(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	PrunedLandmarkLabeling(G)
 */
struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/distance.pyx":1777
 * 		count query(node u, node v) except +
 * 
 * cdef class DynPrunedLandmarkLabeling(Algorithm, DynAlgorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	DynPrunedLandmarkLabeling(G)
 */
struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/distance.pyx":794
 * 	"""
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def volume(Graph G, r, count samples=500):
 * 		"""
 */
struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume {
  PyObject_HEAD
  PyObject *__pyx_v_is_number;
};


/* "networkit/distance.pyx":833
 * 				_v = volume(<_Graph> G._this, <double> _r, <count> samples)
 * 			return _v
 * 		elif type(r) is list and all(is_number(item) for item in r):             # <<<<<<<<<<<<<<
 * 			_rs = r
 * 			with nogil:
 */
struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume *__pyx_outer_scope;
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_item;
};



/* "structures.pxd":50
 * 		set[index] getSubsetIds() except +
 * 
 * cdef class Cover:             # <<<<<<<<<<<<<<
 * 	cdef _Cover _this
 * 	cdef setThis(self, _Cover& other)
 */

struct __pyx_vtabstruct_9networkit_10structures_Cover {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_10structures_Cover *, NetworKit::Cover &);
};
static struct __pyx_vtabstruct_9networkit_10structures_Cover *__pyx_vtabptr_9networkit_10structures_Cover;


/* "structures.pxd":86
 * 		index operator[](index) except +
 * 
 * cdef class Partition:             # <<<<<<<<<<<<<<
 * 	cdef _Partition _this
 * 	cdef setThis(self, _Partition& other)
 */

struct __pyx_vtabstruct_9networkit_10structures_Partition {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_10structures_Partition *, NetworKit::Partition &);
};
static struct __pyx_vtabstruct_9networkit_10structures_Partition *__pyx_vtabptr_9networkit_10structures_Partition;


/* "graph.pxd":283
 * 		void swap(_EdgeStringAttribute& other)
 * 
 * cdef class Graph:             # <<<<<<<<<<<<<<
 * 	cdef _Graph _this
 * 	cdef setThis(self, _Graph& other)
 */

struct __pyx_vtabstruct_9networkit_5graph_Graph {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_5graph_Graph *, NetworKit::Graph &);
};
static struct __pyx_vtabstruct_9networkit_5graph_Graph *__pyx_vtabptr_9networkit_5graph_Graph;


/* "graph.pxd":287
 * 	cdef setThis(self, _Graph& other)
 * 
 * cdef class NodeIntAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _NodeIntAttribute _this
 * 	cdef _NodeIntAttribute._AttributeIterator _iter
 */

struct __pyx_vtabstruct_9networkit_5graph_NodeIntAttribute {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_5graph_NodeIntAttribute *, NetworKit::Graph::NodeIntAttribute &, NetworKit::Graph *);
};
static struct __pyx_vtabstruct_9networkit_5graph_NodeIntAttribute *__pyx_vtabptr_9networkit_5graph_NodeIntAttribute;


/* "graph.pxd":294
 * 	cdef setThis(self, _NodeIntAttribute& other, _Graph* graph)
 * 
 * cdef class NodeDoubleAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _NodeDoubleAttribute _this
 * 	cdef _NodeDoubleAttribute._AttributeIterator _iter
 */

struct __pyx_vtabstruct_9networkit_5graph_NodeDoubleAttribute {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_5graph_NodeDoubleAttribute *, NetworKit::Graph::NodeDoubleAttribute &, NetworKit::Graph *);
};
static struct __pyx_vtabstruct_9networkit_5graph_NodeDoubleAttribute *__pyx_vtabptr_9networkit_5graph_NodeDoubleAttribute;


/* "graph.pxd":301
 * 	cdef setThis(self, _NodeDoubleAttribute& other, _Graph* graph)
 * 
 * cdef class NodeStringAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _NodeStringAttribute _this
 * 	cdef _NodeStringAttribute._AttributeIterator _iter
 */

struct __pyx_vtabstruct_9networkit_5graph_NodeStringAttribute {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_5graph_NodeStringAttribute *, NetworKit::Graph::NodeStringAttribute &, NetworKit::Graph *);
};
static struct __pyx_vtabstruct_9networkit_5graph_NodeStringAttribute *__pyx_vtabptr_9networkit_5graph_NodeStringAttribute;


/* "graph.pxd":308
 * 	cdef setThis(self, _NodeStringAttribute& other, _Graph* graph)
 * 
 * cdef class EdgeIntAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _EdgeIntAttribute _this
 * 	cdef _EdgeIntAttribute._AttributeIterator _iter
 */

struct __pyx_vtabstruct_9networkit_5graph_EdgeIntAttribute {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_5graph_EdgeIntAttribute *, NetworKit::Graph::EdgeIntAttribute &, NetworKit::Graph *);
};
static struct __pyx_vtabstruct_9networkit_5graph_EdgeIntAttribute *__pyx_vtabptr_9networkit_5graph_EdgeIntAttribute;


/* "graph.pxd":315
 * 	cdef setThis(self, _EdgeIntAttribute& other, _Graph* graph)
 * 
 * cdef class EdgeDoubleAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _EdgeDoubleAttribute _this
 * 	cdef _EdgeDoubleAttribute._AttributeIterator _iter
 */

struct __pyx_vtabstruct_9networkit_5graph_EdgeDoubleAttribute {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_5graph_EdgeDoubleAttribute *, NetworKit::Graph::EdgeDoubleAttribute &, NetworKit::Graph *);
};
static struct __pyx_vtabstruct_9networkit_5graph_EdgeDoubleAttribute *__pyx_vtabptr_9networkit_5graph_EdgeDoubleAttribute;


/* "graph.pxd":322
 * 	cdef setThis(self, _EdgeDoubleAttribute& other, _Graph* graph)
 * 
 * cdef class EdgeStringAttribute:             # <<<<<<<<<<<<<<
 * 	cdef _EdgeStringAttribute _this
 * 	cdef _EdgeStringAttribute._AttributeIterator _iter
 */

struct __pyx_vtabstruct_9networkit_5graph_EdgeStringAttribute {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_5graph_EdgeStringAttribute *, NetworKit::Graph::EdgeStringAttribute &, NetworKit::Graph *);
};
static struct __pyx_vtabstruct_9networkit_5graph_EdgeStringAttribute *__pyx_vtabptr_9networkit_5graph_EdgeStringAttribute;


/* "matching.pxd":32
 * 		vector[node] getVector() except +
 * 
 * cdef class Matching:             # <<<<<<<<<<<<<<
 * 	cdef _Matching _this
 * 	cdef setThis(self,  _Matching& other)
 */

struct __pyx_vtabstruct_9networkit_8matching_Matching {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_8matching_Matching *, NetworKit::Matching &);
};
static struct __pyx_vtabstruct_9networkit_8matching_Matching *__pyx_vtabptr_9networkit_8matching_Matching;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* pybytes_as_double.proto */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj);
static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length);
static CYTHON_INLINE double __Pyx_PyBytes_AsDouble(PyObject *obj) {
    char* as_c_string;
    Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
    as_c_string = PyBytes_AS_STRING(obj);
    size = PyBytes_GET_SIZE(obj);
#else
    if (PyBytes_AsStringAndSize(obj, &as_c_string, &size) < 0) {
        return (double)-1;
    }
#endif
    return __Pyx__PyBytes_AsDouble(obj, as_c_string, size);
}
static CYTHON_INLINE double __Pyx_PyByteArray_AsDouble(PyObject *obj) {
    char* as_c_string;
    Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
    as_c_string = PyByteArray_AS_STRING(obj);
    size = PyByteArray_GET_SIZE(obj);
#else
    as_c_string = PyByteArray_AsString(obj);
    if (as_c_string == NULL) {
        return (double)-1;
    }
    size = PyByteArray_Size(obj);
#endif
    return __Pyx__PyBytes_AsDouble(obj, as_c_string, size);
}

/* pyunicode_as_double.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY && CYTHON_ASSUME_SAFE_MACROS
static const char* __Pyx__PyUnicode_AsDouble_Copy(const void* data, const int kind, char* buffer, Py_ssize_t start, Py_ssize_t end) {
    int last_was_punctuation;
    Py_ssize_t i;
    last_was_punctuation = 1;
    for (i=start; i <= end; i++) {
        Py_UCS4 chr = PyUnicode_READ(kind, data, i);
        int is_punctuation = (chr == '_') | (chr == '.');
        *buffer = (char)chr;
        buffer += (chr != '_');
        if (unlikely(chr > 127)) goto parse_failure;
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyUnicode_AsDouble_inf_nan(const void* data, int kind, Py_ssize_t start, Py_ssize_t length) {
    int matches = 1;
    Py_UCS4 chr;
    Py_UCS4 sign = PyUnicode_READ(kind, data, start);
    int is_signed = (sign == '-') | (sign == '+');
    start += is_signed;
    length -= is_signed;
    switch (PyUnicode_READ(kind, data, start)) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'a') | (chr == 'A');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'n') | (chr == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'f') | (chr == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+3);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+4);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+5);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+6);
            matches &= (chr == 't') | (chr == 'T');
            chr = PyUnicode_READ(kind, data, start+7);
            matches &= (chr == 'y') | (chr == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static double __Pyx_PyUnicode_AsDouble_WithSpaces(PyObject *obj) {
    double value;
    const char *last;
    char *end;
    Py_ssize_t start, length = PyUnicode_GET_LENGTH(obj);
    const int kind = PyUnicode_KIND(obj);
    const void* data = PyUnicode_DATA(obj);
    start = 0;
    while (Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, start)))
        start++;
    while (start < length - 1 && Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, length - 1)))
        length--;
    length -= start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyUnicode_AsDouble_inf_nan(data, kind, start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    if (length < 40) {
        char number[40];
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((length + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}
#endif
static CYTHON_INLINE double __Pyx_PyUnicode_AsDouble(PyObject *obj) {
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY && CYTHON_ASSUME_SAFE_MACROS
    if (unlikely(__Pyx_PyUnicode_READY(obj) == -1))
        return (double)-1;
    if (likely(PyUnicode_IS_ASCII(obj))) {
        const char *s;
        Py_ssize_t length;
        s = PyUnicode_AsUTF8AndSize(obj, &length);
        return __Pyx__PyBytes_AsDouble(obj, s, length);
    }
    return __Pyx_PyUnicode_AsDouble_WithSpaces(obj);
#else
    return __Pyx_SlowPyString_AsDouble(obj);
#endif
}

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?  PyFloat_AS_DOUBLE(obj) :\
 likely(PyLong_CheckExact(obj)) ?\
 PyLong_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* RaiseUnboundLocalError.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* RaiseClosureNameError.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* pep479.proto */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
#define __Pyx_HasAttr(o, n)  PyObject_HasAttrWithError(o, n)
#else
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_8
#define __PYX_HAVE_RT_ImportType_proto_3_0_8
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_8(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_8(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_8 {
   __Pyx_ImportType_CheckSize_Error_3_0_8 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_8 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_8 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_8(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_8 check_size);
#endif

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* Py3UpdateBases.proto */
static PyObject* __Pyx_PEP560_update_bases(PyObject *bases);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NetworKit_3a__3a_DiameterAlgo(enum NetworKit::DiameterAlgo value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NetworKit_3a__3a_NeighborhoodFunctionHeuristic_3a__3a_SelectionStrategy(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum NetworKit::DiameterAlgo __Pyx_PyInt_As_enum__NetworKit_3a__3a_DiameterAlgo(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy __Pyx_PyInt_As_enum__NetworKit_3a__3a_NeighborhoodFunctionHeuristic_3a__3a_SelectionStrategy(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
struct __pyx_CoroutineObject;
typedef PyObject *(*__pyx_coroutine_body_t)(struct __pyx_CoroutineObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct __pyx_CoroutineObject {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
#define __Pyx_Generator_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(PyObject *module);

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* FunctionImport.proto */
static int __Pyx_ImportFunction_3_0_8(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.map" */

/* Module declarations from "libcpp" */

/* Module declarations from "libc.string" */

/* Module declarations from "libcpp.string" */

/* Module declarations from "libcpp.set" */

/* Module declarations from "libcpp.unordered_map" */

/* Module declarations from "networkit.base" */

/* Module declarations from "libc.stdint" */

/* Module declarations from "networkit.structures" */

/* Module declarations from "networkit.dynamics" */

/* Module declarations from "networkit.dynbase" */

/* Module declarations from "libcpp.unordered_set" */

/* Module declarations from "networkit.graph" */

/* Module declarations from "networkit.matching" */

/* Module declarations from "networkit.helpers" */
static PyObject *(*__pyx_fuse_0__pyx_f_9networkit_7helpers_asarray_1d)(std::vector<__pyx_t_9networkit_10structures_edgeweight>  *); /*proto*/
static PyObject *(*__pyx_fuse_1__pyx_f_9networkit_7helpers_asarray_1d)(std::vector<__pyx_t_9networkit_10structures_node>  *); /*proto*/
static PyObject *(*__pyx_fuse_2__pyx_f_9networkit_7helpers_asarray_1d)(std::vector<double>  *); /*proto*/
static PyObject *(*__pyx_fuse_0__pyx_f_9networkit_7helpers_asarray_2d)(std::vector<std::vector<__pyx_t_9networkit_10structures_edgeweight> >  *); /*proto*/
static PyObject *(*__pyx_fuse_1__pyx_f_9networkit_7helpers_asarray_2d)(std::vector<std::vector<__pyx_t_9networkit_10structures_node> >  *); /*proto*/
static PyObject *(*__pyx_fuse_2__pyx_f_9networkit_7helpers_asarray_2d)(std::vector<std::vector<double> >  *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_fuse_2__pyx_f_9networkit_7helpers_maybe_asarray_1d(std::vector<double>  *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_fuse_2__pyx_f_9networkit_7helpers_maybe_asarray_2d(std::vector<std::vector<double> >  *, PyObject *); /*proto*/

/* Module declarations from "networkit.distance" */
static PyObject *__pyx_f_9networkit_8distance___pyx_unpickle_Eccentricity__set_state(struct __pyx_obj_9networkit_8distance_Eccentricity *, PyObject *); /*proto*/
static PyObject *__pyx_f_9networkit_8distance___pyx_unpickle_Volume__set_state(struct __pyx_obj_9networkit_8distance_Volume *, PyObject *); /*proto*/
static std::vector<__pyx_t_9networkit_10structures_node>  __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(PyObject *); /*proto*/
static std::vector<__pyx_t_9networkit_10structures_count>  __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_count(PyObject *); /*proto*/
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(std::vector<__pyx_t_9networkit_10structures_node>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_double(std::vector<double>  const &); /*proto*/
static PyObject *__pyx_convert_pair_to_py___pyx_t_9networkit_10structures_count______pyx_t_9networkit_10structures_count(std::pair<__pyx_t_9networkit_10structures_count,__pyx_t_9networkit_10structures_count>  const &); /*proto*/
static PyObject *__pyx_convert_pair_to_py___pyx_t_9networkit_10structures_node______pyx_t_9networkit_10structures_count(std::pair<__pyx_t_9networkit_10structures_node,__pyx_t_9networkit_10structures_count>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(std::vector<__pyx_t_9networkit_10structures_count>  const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_node_3e___(std::vector<std::vector<__pyx_t_9networkit_10structures_node> >  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_edgeweight(std::vector<__pyx_t_9networkit_10structures_edgeweight>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_edgeweight_3e___(std::vector<std::vector<__pyx_t_9networkit_10structures_edgeweight> >  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(std::vector<std::vector<double> >  const &); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "networkit.distance"
extern int __pyx_module_is_main_networkit__distance;
int __pyx_module_is_main_networkit__distance = 0;

/* Implementation of "networkit.distance" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_range;
/* #### Code section: string_decls ### */
static const char __pyx_k_G[] = "G";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_u[] = "u";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_hp[] = "hp";
static const char __pyx_k_rs[] = "_rs";
static const char __pyx_k_vs[] = "_vs";
static const char __pyx_k_BFS[] = "BFS";
static const char __pyx_k__12[] = ".";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_heu[] = "heu";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_r_2[] = "_r";
static const char __pyx_k_run[] = "run";
static const char __pyx_k_tol[] = "tol";
static const char __pyx_k_v_2[] = "_v";
static const char __pyx_k_APSP[] = "APSP";
static const char __pyx_k_SPSP[] = "SPSP";
static const char __pyx_k_SSSP[] = "SSSP";
static const char __pyx_k_STSP[] = "STSP";
static const char __pyx_k__164[] = "?";
static const char __pyx_k_algo[] = "algo";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_elem[] = "elem";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_none[] = "none";
static const char __pyx_k_norm[] = "norm";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_tmap[] = "tmap";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_AStar[] = "AStar";
static const char __pyx_k_EXACT[] = "EXACT";
static const char __pyx_k_Exact[] = "Exact";
static const char __pyx_k_SPLIT[] = "SPLIT";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_omega[] = "omega";
static const char __pyx_k_paths[] = "paths";
static const char __pyx_k_query[] = "query";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_ratio[] = "ratio";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_DynBFS[] = "DynBFS";
static const char __pyx_k_RANDOM[] = "RANDOM";
static const char __pyx_k_Volume[] = "Volume";
static const char __pyx_k_cutoff[] = "cutoff";
static const char __pyx_k_dict_2[] = "_dict";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_source[] = "source";
static const char __pyx_k_target[] = "target";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_volume[] = "volume";
static const char __pyx_k_DynAPSP[] = "DynAPSP";
static const char __pyx_k_DynSSSP[] = "DynSSSP";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_dynbase[] = "dynbase";
static const char __pyx_k_forward[] = "forward";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_getPath[] = "getPath";
static const char __pyx_k_helpers[] = "helpers";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_samples[] = "samples";
static const char __pyx_k_sources[] = "sources";
static const char __pyx_k_targets[] = "targets";
static const char __pyx_k_wrapper[] = "wrapper";
static const char __pyx_k_Diameter[] = "Diameter";
static const char __pyx_k_Dijkstra[] = "Dijkstra";
static const char __pyx_k_callback[] = "callback";
static const char __pyx_k_distance[] = "distance";
static const char __pyx_k_getPaths[] = "getPaths";
static const char __pyx_k_getValue[] = "getValue";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_modified[] = "modified";
static const char __pyx_k_nSamples[] = "nSamples";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_strategy[] = "strategy";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_AUTOMATIC[] = "AUTOMATIC";
static const char __pyx_k_Automatic[] = "Automatic";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_distances[] = "distances";
static const char __pyx_k_is_number[] = "is_number";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_newSource[] = "newSource";
static const char __pyx_k_newTarget[] = "newTarget";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_setSource[] = "setSource";
static const char __pyx_k_setTarget[] = "setTarget";
static const char __pyx_k_stdstring[] = "stdstring";
static const char __pyx_k_storePred[] = "storePred";
static const char __pyx_k_triangles[] = "triangles";
static const char __pyx_k_ReverseBFS[] = "ReverseBFS";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_getHopPlot[] = "getHopPlot";
static const char __pyx_k_newTargets[] = "newTargets";
static const char __pyx_k_preprocess[] = "preprocess";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_setSources[] = "setSources";
static const char __pyx_k_setTargets[] = "setTargets";
static const char __pyx_k_storePaths[] = "storePaths";
static const char __pyx_k_DynDijkstra[] = "DynDijkstra";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_getDiameter[] = "getDiameter";
static const char __pyx_k_getDistance[] = "getDistance";
static const char __pyx_k_maxDistance[] = "maxDistance";
static const char __pyx_k_mro_entries[] = "__mro_entries__";
static const char __pyx_k_DiameterAlgo[] = "DiameterAlgo";
static const char __pyx_k_DynAlgorithm[] = "DynAlgorithm";
static const char __pyx_k_Eccentricity[] = "Eccentricity";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_SSSP_getPath[] = "SSSP.getPath";
static const char __pyx_k_STSP_getPath[] = "STSP.getPath";
static const char __pyx_k_getAttribute[] = "getAttribute";
static const char __pyx_k_getDistances[] = "getDistances";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_use_setstate[] = "use_setstate";
static const char __pyx_k_SSSP_distance[] = "SSSP.distance";
static const char __pyx_k_SSSP_getPaths[] = "SSSP.getPaths";
static const char __pyx_k_Volume_volume[] = "Volume.volume";
static const char __pyx_k_getEdgeScores[] = "getEdgeScores";
static const char __pyx_k_init_subclass[] = "__init_subclass__";
static const char __pyx_k_numberOfPaths[] = "numberOfPaths";
static const char __pyx_k_numberSystems[] = "numberSystems";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_runSinglePair[] = "runSinglePair";
static const char __pyx_k_setTargetNode[] = "setTargetNode";
static const char __pyx_k_AllSimplePaths[] = "AllSimplePaths";
static const char __pyx_k_EstimatedRange[] = "EstimatedRange";
static const char __pyx_k_MultiTargetBFS[] = "MultiTargetBFS";
static const char __pyx_k_SSSP_setSource[] = "SSSP.setSource";
static const char __pyx_k_SSSP_setTarget[] = "SSSP.setTarget";
static const char __pyx_k_STSP_setSource[] = "STSP.setSource";
static const char __pyx_k_STSP_setTarget[] = "STSP.setTarget";
static const char __pyx_k_withEdgeScores[] = "withEdgeScores";
static const char __pyx_k_ESTIMATED_RANGE[] = "ESTIMATED_RANGE";
static const char __pyx_k_JaccardDistance[] = "JaccardDistance";
static const char __pyx_k_SPSP_setSources[] = "SPSP.setSources";
static const char __pyx_k_SPSP_setTargets[] = "SPSP.setTargets";
static const char __pyx_k_STSP_setTargets[] = "STSP.setTargets";
static const char __pyx_k_getPredecessors[] = "getPredecessors";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_runSingleSource[] = "runSingleSource";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_APSP_getDistance[] = "APSP.getDistance";
static const char __pyx_k_BidirectionalBFS[] = "BidirectionalBFS";
static const char __pyx_k_DynSSSP_modified[] = "DynSSSP.modified";
static const char __pyx_k_EstimatedSamples[] = "EstimatedSamples";
static const char __pyx_k_SPSP_getDistance[] = "SPSP.getDistance";
static const char __pyx_k_STSP_getDistance[] = "STSP.getDistance";
static const char __pyx_k_numberIterations[] = "numberIterations";
static const char __pyx_k_runApproximation[] = "runApproximation";
static const char __pyx_k_APSP_getDistances[] = "APSP.getDistances";
static const char __pyx_k_AlgebraicDistance[] = "AlgebraicDistance";
static const char __pyx_k_ESTIMATED_SAMPLES[] = "ESTIMATED_SAMPLES";
static const char __pyx_k_EffectiveDiameter[] = "EffectiveDiameter";
static const char __pyx_k_EstimatedPedantic[] = "EstimatedPedantic";
static const char __pyx_k_SPSP_getDistances[] = "SPSP.getDistances";
static const char __pyx_k_SSSP_getDistances[] = "SSSP.getDistances";
static const char __pyx_k_STSP_getDistances[] = "STSP.getDistances";
static const char __pyx_k_SelectionStrategy[] = "SelectionStrategy";
static const char __pyx_k_forAllSimplePaths[] = "forAllSimplePaths";
static const char __pyx_k_getAllSimplePaths[] = "getAllSimplePaths";
static const char __pyx_k_AdamicAdarDistance[] = "AdamicAdarDistance";
static const char __pyx_k_AllSimplePaths_run[] = "AllSimplePaths.run";
static const char __pyx_k_ESTIMATED_PEDANTIC[] = "ESTIMATED_PEDANTIC";
static const char __pyx_k_SSSP_numberOfPaths[] = "SSSP.numberOfPaths";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_networkit_distance[] = "networkit.distance";
static const char __pyx_k_BFS___reduce_cython[] = "BFS.__reduce_cython__";
static const char __pyx_k_CommuteTimeDistance[] = "CommuteTimeDistance";
static const char __pyx_k_MultiTargetDijkstra[] = "MultiTargetDijkstra";
static const char __pyx_k_numberOfSimplePaths[] = "numberOfSimplePaths";
static const char __pyx_k_pyx_unpickle_Volume[] = "__pyx_unpickle_Volume";
static const char __pyx_k_APSP___reduce_cython[] = "APSP.__reduce_cython__";
static const char __pyx_k_Diameter_getDiameter[] = "Diameter.getDiameter";
static const char __pyx_k_HopPlotApproximation[] = "HopPlotApproximation";
static const char __pyx_k_NeighborhoodFunction[] = "NeighborhoodFunction";
static const char __pyx_k_SPSP___reduce_cython[] = "SPSP.__reduce_cython__";
static const char __pyx_k_SSSP___reduce_cython[] = "SSSP.__reduce_cython__";
static const char __pyx_k_SSSP_getPredecessors[] = "SSSP.getPredecessors";
static const char __pyx_k_STSP___reduce_cython[] = "STSP.__reduce_cython__";
static const char __pyx_k_STSP_getPredecessors[] = "STSP.getPredecessors";
static const char __pyx_k_getEffectiveDiameter[] = "getEffectiveDiameter";
static const char __pyx_k_AStar___reduce_cython[] = "AStar.__reduce_cython__";
static const char __pyx_k_BFS___setstate_cython[] = "BFS.__setstate_cython__";
static const char __pyx_k_BidirectionalDijkstra[] = "BidirectionalDijkstra";
static const char __pyx_k_DynSSSP_setTargetNode[] = "DynSSSP.setTargetNode";
static const char __pyx_k_Eccentricity_getValue[] = "Eccentricity.getValue";
static const char __pyx_k_volume_locals_genexpr[] = "volume.<locals>.genexpr";
static const char __pyx_k_APSP___setstate_cython[] = "APSP.__setstate_cython__";
static const char __pyx_k_DynBFS___reduce_cython[] = "DynBFS.__reduce_cython__";
static const char __pyx_k_PrunedLandmarkLabeling[] = "PrunedLandmarkLabeling";
static const char __pyx_k_SPSP___setstate_cython[] = "SPSP.__setstate_cython__";
static const char __pyx_k_SSSP___setstate_cython[] = "SSSP.__setstate_cython__";
static const char __pyx_k_STSP___setstate_cython[] = "STSP.__setstate_cython__";
static const char __pyx_k_Volume___reduce_cython[] = "Volume.__reduce_cython__";
static const char __pyx_k_networkit_distance_pyx[] = "networkit/distance.pyx";
static const char __pyx_k_AStar___setstate_cython[] = "AStar.__setstate_cython__";
static const char __pyx_k_DynAPSP___reduce_cython[] = "DynAPSP.__reduce_cython__";
static const char __pyx_k_DynSSSP___reduce_cython[] = "DynSSSP.__reduce_cython__";
static const char __pyx_k_getNeighborhoodFunction[] = "getNeighborhoodFunction";
static const char __pyx_k_volume_locals_is_number[] = "volume.<locals>.is_number";
static const char __pyx_k_Diameter___reduce_cython[] = "Diameter.__reduce_cython__";
static const char __pyx_k_Dijkstra___reduce_cython[] = "Dijkstra.__reduce_cython__";
static const char __pyx_k_DynBFS___setstate_cython[] = "DynBFS.__setstate_cython__";
static const char __pyx_k_Volume___setstate_cython[] = "Volume.__setstate_cython__";
static const char __pyx_k_getNodesSortedByDistance[] = "getNodesSortedByDistance";
static const char __pyx_k_runParallelApproximation[] = "runParallelApproximation";
static const char __pyx_k_DynAPSP___setstate_cython[] = "DynAPSP.__setstate_cython__";
static const char __pyx_k_DynPrunedLandmarkLabeling[] = "DynPrunedLandmarkLabeling";
static const char __pyx_k_DynSSSP___setstate_cython[] = "DynSSSP.__setstate_cython__";
static const char __pyx_k_pyx_unpickle_Eccentricity[] = "__pyx_unpickle_Eccentricity";
static const char __pyx_k_AlgebraicDistance_distance[] = "AlgebraicDistance.distance";
static const char __pyx_k_Diameter___setstate_cython[] = "Diameter.__setstate_cython__";
static const char __pyx_k_Dijkstra___setstate_cython[] = "Dijkstra.__setstate_cython__";
static const char __pyx_k_ReverseBFS___reduce_cython[] = "ReverseBFS.__reduce_cython__";
static const char __pyx_k_storeNodesSortedByDistance[] = "storeNodesSortedByDistance";
static const char __pyx_k_AdamicAdarDistance_distance[] = "AdamicAdarDistance.distance";
static const char __pyx_k_DynDijkstra___reduce_cython[] = "DynDijkstra.__reduce_cython__";
static const char __pyx_k_AlgebraicDistance_preprocess[] = "AlgebraicDistance.preprocess";
static const char __pyx_k_CommuteTimeDistance_distance[] = "CommuteTimeDistance.distance";
static const char __pyx_k_Eccentricity___reduce_cython[] = "Eccentricity.__reduce_cython__";
static const char __pyx_k_JaccardDistance_getAttribute[] = "JaccardDistance.getAttribute";
static const char __pyx_k_PrunedLandmarkLabeling_query[] = "PrunedLandmarkLabeling.query";
static const char __pyx_k_ReverseBFS___setstate_cython[] = "ReverseBFS.__setstate_cython__";
static const char __pyx_k_AdamicAdarDistance_preprocess[] = "AdamicAdarDistance.preprocess";
static const char __pyx_k_DynDijkstra___setstate_cython[] = "DynDijkstra.__setstate_cython__";
static const char __pyx_k_JaccardSimilarityAttributizer[] = "JaccardSimilarityAttributizer";
static const char __pyx_k_NeighborhoodFunctionHeuristic[] = "NeighborhoodFunctionHeuristic";
static const char __pyx_k_SSSP_getNodesSortedByDistance[] = "SSSP.getNodesSortedByDistance";
static const char __pyx_k_AllSimplePaths___reduce_cython[] = "AllSimplePaths.__reduce_cython__";
static const char __pyx_k_Eccentricity___setstate_cython[] = "Eccentricity.__setstate_cython__";
static const char __pyx_k_EffectiveDiameterApproximation[] = "EffectiveDiameterApproximation";
static const char __pyx_k_MultiTargetBFS___reduce_cython[] = "MultiTargetBFS.__reduce_cython__";
static const char __pyx_k_AdamicAdarDistance_getAttribute[] = "AdamicAdarDistance.getAttribute";
static const char __pyx_k_AlgebraicDistance_getEdgeScores[] = "AlgebraicDistance.getEdgeScores";
static const char __pyx_k_DynPrunedLandmarkLabeling_query[] = "DynPrunedLandmarkLabeling.query";
static const char __pyx_k_HopPlotApproximation___setstate[] = "HopPlotApproximation.__setstate_cython__";
static const char __pyx_k_HopPlotApproximation_getHopPlot[] = "HopPlotApproximation.getHopPlot";
static const char __pyx_k_JaccardDistance___reduce_cython[] = "JaccardDistance.__reduce_cython__";
static const char __pyx_k_JaccardSimilarityAttributizer_2[] = "JaccardSimilarityAttributizer.__reduce_cython__";
static const char __pyx_k_JaccardSimilarityAttributizer_3[] = "JaccardSimilarityAttributizer.__setstate_cython__";
static const char __pyx_k_NeighborhoodFunctionHeuristic_2[] = "NeighborhoodFunctionHeuristic.__reduce_cython__";
static const char __pyx_k_NeighborhoodFunctionHeuristic_3[] = "NeighborhoodFunctionHeuristic.__setstate_cython__";
static const char __pyx_k_NeighborhoodFunction___setstate[] = "NeighborhoodFunction.__setstate_cython__";
static const char __pyx_k_PrunedLandmarkLabeling___reduce[] = "PrunedLandmarkLabeling.__reduce_cython__";
static const char __pyx_k_AdamicAdarDistance___reduce_cyth[] = "AdamicAdarDistance.__reduce_cython__";
static const char __pyx_k_AdamicAdarDistance___setstate_cy[] = "AdamicAdarDistance.__setstate_cython__";
static const char __pyx_k_AlgebraicDistance___reduce_cytho[] = "AlgebraicDistance.__reduce_cython__";
static const char __pyx_k_AlgebraicDistance___setstate_cyt[] = "AlgebraicDistance.__setstate_cython__";
static const char __pyx_k_AllSimplePaths___setstate_cython[] = "AllSimplePaths.__setstate_cython__";
static const char __pyx_k_AllSimplePaths_forAllSimplePaths[] = "AllSimplePaths.forAllSimplePaths";
static const char __pyx_k_AllSimplePaths_getAllSimplePaths[] = "AllSimplePaths.getAllSimplePaths";
static const char __pyx_k_AllSimplePaths_numberOfSimplePat[] = "AllSimplePaths.numberOfSimplePaths";
static const char __pyx_k_An_Exception_occurred_aborting_e[] = "An Exception occurred, aborting execution of iterator: {0}";
static const char __pyx_k_BidirectionalBFS___reduce_cython[] = "BidirectionalBFS.__reduce_cython__";
static const char __pyx_k_BidirectionalBFS___setstate_cyth[] = "BidirectionalBFS.__setstate_cython__";
static const char __pyx_k_BidirectionalDijkstra___reduce_c[] = "BidirectionalDijkstra.__reduce_cython__";
static const char __pyx_k_BidirectionalDijkstra___setstate[] = "BidirectionalDijkstra.__setstate_cython__";
static const char __pyx_k_CommuteTimeDistance___reduce_cyt[] = "CommuteTimeDistance.__reduce_cython__";
static const char __pyx_k_CommuteTimeDistance___setstate_c[] = "CommuteTimeDistance.__setstate_cython__";
static const char __pyx_k_CommuteTimeDistance_runApproxima[] = "CommuteTimeDistance.runApproximation";
static const char __pyx_k_CommuteTimeDistance_runParallelA[] = "CommuteTimeDistance.runParallelApproximation";
static const char __pyx_k_CommuteTimeDistance_runSinglePai[] = "CommuteTimeDistance.runSinglePair";
static const char __pyx_k_CommuteTimeDistance_runSingleSou[] = "CommuteTimeDistance.runSingleSource";
static const char __pyx_k_DynPrunedLandmarkLabeling___redu[] = "DynPrunedLandmarkLabeling.__reduce_cython__";
static const char __pyx_k_DynPrunedLandmarkLabeling___sets[] = "DynPrunedLandmarkLabeling.__setstate_cython__";
static const char __pyx_k_EffectiveDiameterApproximation_2[] = "EffectiveDiameterApproximation.__reduce_cython__";
static const char __pyx_k_EffectiveDiameterApproximation_3[] = "EffectiveDiameterApproximation.__setstate_cython__";
static const char __pyx_k_EffectiveDiameterApproximation_g[] = "EffectiveDiameterApproximation.getEffectiveDiameter";
static const char __pyx_k_EffectiveDiameter___reduce_cytho[] = "EffectiveDiameter.__reduce_cython__";
static const char __pyx_k_EffectiveDiameter___setstate_cyt[] = "EffectiveDiameter.__setstate_cython__";
static const char __pyx_k_EffectiveDiameter_getEffectiveDi[] = "EffectiveDiameter.getEffectiveDiameter";
static const char __pyx_k_Error_you_may_not_use_DynSSSP_di[] = "Error, you may not use DynSSSP directly, use a sub-class instead";
static const char __pyx_k_Error_you_may_not_use_SSSP_direc[] = "Error, you may not use SSSP directly, use a sub-class instead";
static const char __pyx_k_Error_you_may_not_use_STSP_direc[] = "Error, you may not use STSP directly, use a sub-class instead";
static const char __pyx_k_HopPlotApproximation___reduce_cy[] = "HopPlotApproximation.__reduce_cython__";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())";
static const char __pyx_k_JaccardDistance___setstate_cytho[] = "JaccardDistance.__setstate_cython__";
static const char __pyx_k_JaccardSimilarityAttributizer_ge[] = "JaccardSimilarityAttributizer.getAttribute";
static const char __pyx_k_MultiTargetBFS___setstate_cython[] = "MultiTargetBFS.__setstate_cython__";
static const char __pyx_k_MultiTargetDijkstra___reduce_cyt[] = "MultiTargetDijkstra.__reduce_cython__";
static const char __pyx_k_MultiTargetDijkstra___setstate_c[] = "MultiTargetDijkstra.__setstate_cython__";
static const char __pyx_k_NeighborhoodFunctionApproximatio[] = "NeighborhoodFunctionApproximation";
static const char __pyx_k_NeighborhoodFunctionHeuristic_ge[] = "NeighborhoodFunctionHeuristic.getNeighborhoodFunction";
static const char __pyx_k_NeighborhoodFunction___reduce_cy[] = "NeighborhoodFunction.__reduce_cython__";
static const char __pyx_k_NeighborhoodFunction_getNeighbor[] = "NeighborhoodFunction.getNeighborhoodFunction";
static const char __pyx_k_PrunedLandmarkLabeling___setstat[] = "PrunedLandmarkLabeling.__setstate_cython__";
static const char __pyx_k_networkit_distance_AllSimplePath[] = "networkit.distance.AllSimplePaths is deprecated, use networkit.reachability.AllSimplePaths";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_self__this_cannot_be_converted_t[] = "self._this cannot be converted to a Python object for pickling";
static const char __pyx_k_NeighborhoodFunctionApproximatio_2[] = "NeighborhoodFunctionApproximation.getNeighborhoodFunction";
static const char __pyx_k_NeighborhoodFunctionApproximatio_3[] = "NeighborhoodFunctionApproximation.__reduce_cython__";
static const char __pyx_k_NeighborhoodFunctionApproximatio_4[] = "NeighborhoodFunctionApproximation.__setstate_cython__";
/* #### Code section: decls ### */
static int __pyx_pf_9networkit_8distance_4STSP___init__(struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4STSP_2setSource(struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_newSource); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4STSP_4setTarget(struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_newTarget); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4STSP_6setTargets(struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self, std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_newTargets); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4STSP_8getPath(struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4STSP_10getPredecessors(struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4STSP_12getDistance(struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4STSP_14getDistances(struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4STSP_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4STSP_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_4SSSP___init__(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SSSP_2getDistances(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, PyObject *__pyx_v_asarray); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SSSP_4distance(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SSSP_6getPredecessors(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SSSP_8getPath(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, PyObject *__pyx_v_t, PyObject *__pyx_v_forward); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SSSP_10getPaths(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, PyObject *__pyx_v_t, PyObject *__pyx_v_forward); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SSSP_12getNodesSortedByDistance(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SSSP_14numberOfPaths(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SSSP_16setSource(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SSSP_18setTarget(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SSSP_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SSSP_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_7DynSSSP___init__(struct __pyx_obj_9networkit_8distance_DynSSSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_7DynSSSP_2modified(struct __pyx_obj_9networkit_8distance_DynSSSP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_7DynSSSP_4setTargetNode(struct __pyx_obj_9networkit_8distance_DynSSSP *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_7DynSSSP_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynSSSP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_7DynSSSP_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynSSSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_18AdamicAdarDistance___cinit__(struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static void __pyx_pf_9networkit_8distance_18AdamicAdarDistance_2__dealloc__(struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_18AdamicAdarDistance_4preprocess(struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_18AdamicAdarDistance_6getAttribute(struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_18AdamicAdarDistance_8distance(struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_u, __pyx_t_9networkit_10structures_node __pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_18AdamicAdarDistance_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_18AdamicAdarDistance_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_8Diameter___cinit__(struct __pyx_obj_9networkit_8distance_Diameter *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_algo, PyObject *__pyx_v_error, PyObject *__pyx_v_nSamples); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_8Diameter_2getDiameter(struct __pyx_obj_9networkit_8distance_Diameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_8Diameter_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_Diameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_8Diameter_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_Diameter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_12Eccentricity_getValue(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_12Eccentricity_2__reduce_cython__(struct __pyx_obj_9networkit_8distance_Eccentricity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_12Eccentricity_4__setstate_cython__(struct __pyx_obj_9networkit_8distance_Eccentricity *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_30EffectiveDiameterApproximation___cinit__(struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_ratio, __pyx_t_9networkit_10structures_count __pyx_v_k, __pyx_t_9networkit_10structures_count __pyx_v_r); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_30EffectiveDiameterApproximation_2getEffectiveDiameter(struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_30EffectiveDiameterApproximation_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_30EffectiveDiameterApproximation_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_17EffectiveDiameter___cinit__(struct __pyx_obj_9networkit_8distance_EffectiveDiameter *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_ratio); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_17EffectiveDiameter_2getEffectiveDiameter(struct __pyx_obj_9networkit_8distance_EffectiveDiameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_17EffectiveDiameter_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_EffectiveDiameter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_17EffectiveDiameter_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_EffectiveDiameter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_20HopPlotApproximation___cinit__(struct __pyx_obj_9networkit_8distance_HopPlotApproximation *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_count __pyx_v_maxDistance, __pyx_t_9networkit_10structures_count __pyx_v_k, __pyx_t_9networkit_10structures_count __pyx_v_r); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_20HopPlotApproximation_2getHopPlot(struct __pyx_obj_9networkit_8distance_HopPlotApproximation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_20HopPlotApproximation_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_HopPlotApproximation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_20HopPlotApproximation_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_HopPlotApproximation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_20NeighborhoodFunction___cinit__(struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_20NeighborhoodFunction_2getNeighborhoodFunction(struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_20NeighborhoodFunction_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_20NeighborhoodFunction_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_33NeighborhoodFunctionApproximation___cinit__(struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_count __pyx_v_k, __pyx_t_9networkit_10structures_count __pyx_v_r); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_33NeighborhoodFunctionApproximation_2getNeighborhoodFunction(struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_33NeighborhoodFunctionApproximation_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_33NeighborhoodFunctionApproximation_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_6Volume_6volume_is_number(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_6Volume_6volume_2genexpr(PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_6Volume_volume(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_r, __pyx_t_9networkit_10structures_count __pyx_v_samples); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_6Volume_2__reduce_cython__(struct __pyx_obj_9networkit_8distance_Volume *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_6Volume_4__setstate_cython__(struct __pyx_obj_9networkit_8distance_Volume *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_15JaccardDistance___cinit__(struct __pyx_obj_9networkit_8distance_JaccardDistance *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<__pyx_t_9networkit_10structures_count>  __pyx_v_triangles); /* proto */
static void __pyx_pf_9networkit_8distance_15JaccardDistance_2__dealloc__(struct __pyx_obj_9networkit_8distance_JaccardDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_15JaccardDistance_4getAttribute(struct __pyx_obj_9networkit_8distance_JaccardDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_15JaccardDistance_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_JaccardDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_15JaccardDistance_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_JaccardDistance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_29JaccardSimilarityAttributizer___cinit__(struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<__pyx_t_9networkit_10structures_count>  __pyx_v_triangles); /* proto */
static void __pyx_pf_9networkit_8distance_29JaccardSimilarityAttributizer_2__dealloc__(struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_29JaccardSimilarityAttributizer_4getAttribute(struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_29JaccardSimilarityAttributizer_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_29JaccardSimilarityAttributizer_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_17AlgebraicDistance___cinit__(struct __pyx_obj_9networkit_8distance_AlgebraicDistance *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_count __pyx_v_numberSystems, __pyx_t_9networkit_10structures_count __pyx_v_numberIterations, double __pyx_v_omega, __pyx_t_9networkit_10structures_index __pyx_v_norm, bool __pyx_v_withEdgeScores); /* proto */
static void __pyx_pf_9networkit_8distance_17AlgebraicDistance_2__dealloc__(struct __pyx_obj_9networkit_8distance_AlgebraicDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_17AlgebraicDistance_4preprocess(struct __pyx_obj_9networkit_8distance_AlgebraicDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_17AlgebraicDistance_6distance(struct __pyx_obj_9networkit_8distance_AlgebraicDistance *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_u, __pyx_t_9networkit_10structures_node __pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_17AlgebraicDistance_8getEdgeScores(struct __pyx_obj_9networkit_8distance_AlgebraicDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_17AlgebraicDistance_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_AlgebraicDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_17AlgebraicDistance_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_AlgebraicDistance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_19CommuteTimeDistance___cinit__(struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_tol); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_19CommuteTimeDistance_2runApproximation(struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_19CommuteTimeDistance_4runParallelApproximation(struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_19CommuteTimeDistance_6distance(struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *__pyx_v_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_19CommuteTimeDistance_8runSinglePair(struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *__pyx_v_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_19CommuteTimeDistance_10runSingleSource(struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *__pyx_v_self, PyObject *__pyx_v_u); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_19CommuteTimeDistance_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_19CommuteTimeDistance_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_29NeighborhoodFunctionHeuristic___cinit__(struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_count __pyx_v_nSamples, PyObject *__pyx_v_strategy); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_29NeighborhoodFunctionHeuristic_2getNeighborhoodFunction(struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_29NeighborhoodFunctionHeuristic_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_29NeighborhoodFunctionHeuristic_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_4APSP___cinit__(struct __pyx_obj_9networkit_8distance_APSP *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static void __pyx_pf_9networkit_8distance_4APSP_2__dealloc__(struct __pyx_obj_9networkit_8distance_APSP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4APSP_4getDistances(struct __pyx_obj_9networkit_8distance_APSP *__pyx_v_self, PyObject *__pyx_v_asarray); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4APSP_6getDistance(struct __pyx_obj_9networkit_8distance_APSP *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_u, __pyx_t_9networkit_10structures_node __pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4APSP_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_APSP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4APSP_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_APSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_4SPSP___cinit__(struct __pyx_obj_9networkit_8distance_SPSP *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_sources, std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_targets); /* proto */
static void __pyx_pf_9networkit_8distance_4SPSP_2__dealloc__(struct __pyx_obj_9networkit_8distance_SPSP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SPSP_4getDistances(struct __pyx_obj_9networkit_8distance_SPSP *__pyx_v_self, PyObject *__pyx_v_asarray); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SPSP_6getDistance(struct __pyx_obj_9networkit_8distance_SPSP *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_u, __pyx_t_9networkit_10structures_node __pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SPSP_8setSources(struct __pyx_obj_9networkit_8distance_SPSP *__pyx_v_self, std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_sources); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SPSP_10setTargets(struct __pyx_obj_9networkit_8distance_SPSP *__pyx_v_self, std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_targets); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SPSP_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_SPSP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_4SPSP_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_SPSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_7DynAPSP___init__(struct __pyx_obj_9networkit_8distance_DynAPSP *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_7DynAPSP_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynAPSP *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_7DynAPSP_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynAPSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_3BFS___cinit__(struct __pyx_obj_9networkit_8distance_BFS *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_source, PyObject *__pyx_v_storePaths, PyObject *__pyx_v_storeNodesSortedByDistance, PyObject *__pyx_v_target); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_3BFS_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_BFS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_3BFS_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_BFS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_8Dijkstra___cinit__(struct __pyx_obj_9networkit_8distance_Dijkstra *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_source, PyObject *__pyx_v_storePaths, PyObject *__pyx_v_storeNodesSortedByDistance, __pyx_t_9networkit_10structures_node __pyx_v_target); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_8Dijkstra_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_Dijkstra *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_8Dijkstra_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_Dijkstra *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_14MultiTargetBFS___cinit__(struct __pyx_obj_9networkit_8distance_MultiTargetBFS *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_node __pyx_v_source, std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_targets); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_14MultiTargetBFS_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_MultiTargetBFS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_14MultiTargetBFS_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_MultiTargetBFS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_19MultiTargetDijkstra___cinit__(struct __pyx_obj_9networkit_8distance_MultiTargetDijkstra *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_node __pyx_v_source, std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_targets); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_19MultiTargetDijkstra_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_MultiTargetDijkstra *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_19MultiTargetDijkstra_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_MultiTargetDijkstra *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_6DynBFS___cinit__(struct __pyx_obj_9networkit_8distance_DynBFS *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_source); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_6DynBFS_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynBFS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_6DynBFS_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynBFS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_11DynDijkstra___cinit__(struct __pyx_obj_9networkit_8distance_DynDijkstra *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_source); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_11DynDijkstra_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynDijkstra *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_11DynDijkstra_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynDijkstra *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_16BidirectionalBFS___cinit__(struct __pyx_obj_9networkit_8distance_BidirectionalBFS *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_node __pyx_v_source, __pyx_t_9networkit_10structures_node __pyx_v_target, bool __pyx_v_storePred); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_16BidirectionalBFS_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_BidirectionalBFS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_16BidirectionalBFS_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_BidirectionalBFS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_21BidirectionalDijkstra___cinit__(struct __pyx_obj_9networkit_8distance_BidirectionalDijkstra *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_node __pyx_v_source, __pyx_t_9networkit_10structures_node __pyx_v_target, bool __pyx_v_storePred); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_21BidirectionalDijkstra_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_BidirectionalDijkstra *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_21BidirectionalDijkstra_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_BidirectionalDijkstra *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_5AStar___cinit__(struct __pyx_obj_9networkit_8distance_AStar *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_heu, __pyx_t_9networkit_10structures_node __pyx_v_source, __pyx_t_9networkit_10structures_node __pyx_v_target, bool __pyx_v_storePred); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_5AStar_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_AStar *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_5AStar_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_AStar *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_14AllSimplePaths___cinit__(struct __pyx_obj_9networkit_8distance_AllSimplePaths *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_source, PyObject *__pyx_v_target, PyObject *__pyx_v_cutoff); /* proto */
static void __pyx_pf_9networkit_8distance_14AllSimplePaths_2__dealloc__(struct __pyx_obj_9networkit_8distance_AllSimplePaths *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_14AllSimplePaths_4run(struct __pyx_obj_9networkit_8distance_AllSimplePaths *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_14AllSimplePaths_6numberOfSimplePaths(struct __pyx_obj_9networkit_8distance_AllSimplePaths *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_14AllSimplePaths_8getAllSimplePaths(struct __pyx_obj_9networkit_8distance_AllSimplePaths *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_14AllSimplePaths_10forAllSimplePaths(struct __pyx_obj_9networkit_8distance_AllSimplePaths *__pyx_v_self, PyObject *__pyx_v_callback); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_14AllSimplePaths_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_AllSimplePaths *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_14AllSimplePaths_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_AllSimplePaths *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_10ReverseBFS___cinit__(struct __pyx_obj_9networkit_8distance_ReverseBFS *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_source, PyObject *__pyx_v_storePaths, PyObject *__pyx_v_storeNodesSortedByDistance, PyObject *__pyx_v_target); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_10ReverseBFS_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_ReverseBFS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_10ReverseBFS_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_ReverseBFS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_22PrunedLandmarkLabeling___cinit__(struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static void __pyx_pf_9networkit_8distance_22PrunedLandmarkLabeling_2__dealloc__(struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_22PrunedLandmarkLabeling_4query(struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_u, __pyx_t_9networkit_10structures_node __pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_22PrunedLandmarkLabeling_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_22PrunedLandmarkLabeling_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_8distance_25DynPrunedLandmarkLabeling___cinit__(struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static void __pyx_pf_9networkit_8distance_25DynPrunedLandmarkLabeling_2__dealloc__(struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_25DynPrunedLandmarkLabeling_4query(struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_u, __pyx_t_9networkit_10structures_node __pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_25DynPrunedLandmarkLabeling_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_25DynPrunedLandmarkLabeling_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_8distance___pyx_unpickle_Eccentricity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_8distance_2__pyx_unpickle_Volume(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_9networkit_8distance_STSP(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_SSSP(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_AdamicAdarDistance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_Diameter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_Eccentricity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_EffectiveDiameterApproximation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_EffectiveDiameter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_HopPlotApproximation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_NeighborhoodFunction(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_NeighborhoodFunctionApproximation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_Volume(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_JaccardDistance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_JaccardSimilarityAttributizer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_AlgebraicDistance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_CommuteTimeDistance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_NeighborhoodFunctionHeuristic(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_APSP(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_SPSP(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_BFS(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_Dijkstra(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_MultiTargetBFS(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_MultiTargetDijkstra(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_DynBFS(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_DynDijkstra(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_BidirectionalBFS(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_BidirectionalDijkstra(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_AStar(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_AllSimplePaths(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_ReverseBFS(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_PrunedLandmarkLabeling(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance_DynPrunedLandmarkLabeling(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance___pyx_scope_struct__volume(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_8distance___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_9networkit_4base__CythonParentClass;
  PyTypeObject *__pyx_ptype_9networkit_4base_Algorithm;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_9networkit_10structures_Cover;
  PyTypeObject *__pyx_ptype_9networkit_10structures_Partition;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_9networkit_8dynamics_GraphEvent;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_9networkit_5graph_Graph;
  PyTypeObject *__pyx_ptype_9networkit_5graph_NodeIntAttribute;
  PyTypeObject *__pyx_ptype_9networkit_5graph_NodeDoubleAttribute;
  PyTypeObject *__pyx_ptype_9networkit_5graph_NodeStringAttribute;
  PyTypeObject *__pyx_ptype_9networkit_5graph_EdgeIntAttribute;
  PyTypeObject *__pyx_ptype_9networkit_5graph_EdgeDoubleAttribute;
  PyTypeObject *__pyx_ptype_9networkit_5graph_EdgeStringAttribute;
  PyTypeObject *__pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest;
  PyTypeObject *__pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_9networkit_8matching_Matching;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_9networkit_8distance_STSP;
  PyObject *__pyx_type_9networkit_8distance_SSSP;
  PyObject *__pyx_type_9networkit_8distance_DynSSSP;
  PyObject *__pyx_type_9networkit_8distance_AdamicAdarDistance;
  PyObject *__pyx_type_9networkit_8distance_Diameter;
  PyObject *__pyx_type_9networkit_8distance_Eccentricity;
  PyObject *__pyx_type_9networkit_8distance_EffectiveDiameterApproximation;
  PyObject *__pyx_type_9networkit_8distance_EffectiveDiameter;
  PyObject *__pyx_type_9networkit_8distance_HopPlotApproximation;
  PyObject *__pyx_type_9networkit_8distance_NeighborhoodFunction;
  PyObject *__pyx_type_9networkit_8distance_NeighborhoodFunctionApproximation;
  PyObject *__pyx_type_9networkit_8distance_Volume;
  PyObject *__pyx_type_9networkit_8distance_JaccardDistance;
  PyObject *__pyx_type_9networkit_8distance_JaccardSimilarityAttributizer;
  PyObject *__pyx_type_9networkit_8distance_AlgebraicDistance;
  PyObject *__pyx_type_9networkit_8distance_CommuteTimeDistance;
  PyObject *__pyx_type_9networkit_8distance_NeighborhoodFunctionHeuristic;
  PyObject *__pyx_type_9networkit_8distance_APSP;
  PyObject *__pyx_type_9networkit_8distance_SPSP;
  PyObject *__pyx_type_9networkit_8distance_DynAPSP;
  PyObject *__pyx_type_9networkit_8distance_BFS;
  PyObject *__pyx_type_9networkit_8distance_Dijkstra;
  PyObject *__pyx_type_9networkit_8distance_MultiTargetBFS;
  PyObject *__pyx_type_9networkit_8distance_MultiTargetDijkstra;
  PyObject *__pyx_type_9networkit_8distance_DynBFS;
  PyObject *__pyx_type_9networkit_8distance_DynDijkstra;
  PyObject *__pyx_type_9networkit_8distance_BidirectionalBFS;
  PyObject *__pyx_type_9networkit_8distance_BidirectionalDijkstra;
  PyObject *__pyx_type_9networkit_8distance_AStar;
  PyObject *__pyx_type_9networkit_8distance_AllSimplePaths;
  PyObject *__pyx_type_9networkit_8distance_ReverseBFS;
  PyObject *__pyx_type_9networkit_8distance_PrunedLandmarkLabeling;
  PyObject *__pyx_type_9networkit_8distance_DynPrunedLandmarkLabeling;
  PyObject *__pyx_type_9networkit_8distance___pyx_scope_struct__volume;
  PyObject *__pyx_type_9networkit_8distance___pyx_scope_struct_1_genexpr;
  #endif
  PyTypeObject *__pyx_ptype_9networkit_8distance_STSP;
  PyTypeObject *__pyx_ptype_9networkit_8distance_SSSP;
  PyTypeObject *__pyx_ptype_9networkit_8distance_DynSSSP;
  PyTypeObject *__pyx_ptype_9networkit_8distance_AdamicAdarDistance;
  PyTypeObject *__pyx_ptype_9networkit_8distance_Diameter;
  PyTypeObject *__pyx_ptype_9networkit_8distance_Eccentricity;
  PyTypeObject *__pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation;
  PyTypeObject *__pyx_ptype_9networkit_8distance_EffectiveDiameter;
  PyTypeObject *__pyx_ptype_9networkit_8distance_HopPlotApproximation;
  PyTypeObject *__pyx_ptype_9networkit_8distance_NeighborhoodFunction;
  PyTypeObject *__pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation;
  PyTypeObject *__pyx_ptype_9networkit_8distance_Volume;
  PyTypeObject *__pyx_ptype_9networkit_8distance_JaccardDistance;
  PyTypeObject *__pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer;
  PyTypeObject *__pyx_ptype_9networkit_8distance_AlgebraicDistance;
  PyTypeObject *__pyx_ptype_9networkit_8distance_CommuteTimeDistance;
  PyTypeObject *__pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic;
  PyTypeObject *__pyx_ptype_9networkit_8distance_APSP;
  PyTypeObject *__pyx_ptype_9networkit_8distance_SPSP;
  PyTypeObject *__pyx_ptype_9networkit_8distance_DynAPSP;
  PyTypeObject *__pyx_ptype_9networkit_8distance_BFS;
  PyTypeObject *__pyx_ptype_9networkit_8distance_Dijkstra;
  PyTypeObject *__pyx_ptype_9networkit_8distance_MultiTargetBFS;
  PyTypeObject *__pyx_ptype_9networkit_8distance_MultiTargetDijkstra;
  PyTypeObject *__pyx_ptype_9networkit_8distance_DynBFS;
  PyTypeObject *__pyx_ptype_9networkit_8distance_DynDijkstra;
  PyTypeObject *__pyx_ptype_9networkit_8distance_BidirectionalBFS;
  PyTypeObject *__pyx_ptype_9networkit_8distance_BidirectionalDijkstra;
  PyTypeObject *__pyx_ptype_9networkit_8distance_AStar;
  PyTypeObject *__pyx_ptype_9networkit_8distance_AllSimplePaths;
  PyTypeObject *__pyx_ptype_9networkit_8distance_ReverseBFS;
  PyTypeObject *__pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling;
  PyTypeObject *__pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling;
  PyTypeObject *__pyx_ptype_9networkit_8distance___pyx_scope_struct__volume;
  PyTypeObject *__pyx_ptype_9networkit_8distance___pyx_scope_struct_1_genexpr;
  PyObject *__pyx_n_s_APSP;
  PyObject *__pyx_n_s_APSP___reduce_cython;
  PyObject *__pyx_n_s_APSP___setstate_cython;
  PyObject *__pyx_n_s_APSP_getDistance;
  PyObject *__pyx_n_s_APSP_getDistances;
  PyObject *__pyx_n_s_AStar;
  PyObject *__pyx_n_s_AStar___reduce_cython;
  PyObject *__pyx_n_s_AStar___setstate_cython;
  PyObject *__pyx_n_s_AUTOMATIC;
  PyObject *__pyx_n_s_AdamicAdarDistance;
  PyObject *__pyx_n_s_AdamicAdarDistance___reduce_cyth;
  PyObject *__pyx_n_s_AdamicAdarDistance___setstate_cy;
  PyObject *__pyx_n_s_AdamicAdarDistance_distance;
  PyObject *__pyx_n_s_AdamicAdarDistance_getAttribute;
  PyObject *__pyx_n_s_AdamicAdarDistance_preprocess;
  PyObject *__pyx_n_s_AlgebraicDistance;
  PyObject *__pyx_n_s_AlgebraicDistance___reduce_cytho;
  PyObject *__pyx_n_s_AlgebraicDistance___setstate_cyt;
  PyObject *__pyx_n_s_AlgebraicDistance_distance;
  PyObject *__pyx_n_s_AlgebraicDistance_getEdgeScores;
  PyObject *__pyx_n_s_AlgebraicDistance_preprocess;
  PyObject *__pyx_n_s_AllSimplePaths;
  PyObject *__pyx_n_s_AllSimplePaths___reduce_cython;
  PyObject *__pyx_n_s_AllSimplePaths___setstate_cython;
  PyObject *__pyx_n_s_AllSimplePaths_forAllSimplePaths;
  PyObject *__pyx_n_s_AllSimplePaths_getAllSimplePaths;
  PyObject *__pyx_n_s_AllSimplePaths_numberOfSimplePat;
  PyObject *__pyx_n_s_AllSimplePaths_run;
  PyObject *__pyx_kp_u_An_Exception_occurred_aborting_e;
  PyObject *__pyx_n_s_Automatic;
  PyObject *__pyx_n_s_BFS;
  PyObject *__pyx_n_s_BFS___reduce_cython;
  PyObject *__pyx_n_s_BFS___setstate_cython;
  PyObject *__pyx_n_s_BidirectionalBFS;
  PyObject *__pyx_n_s_BidirectionalBFS___reduce_cython;
  PyObject *__pyx_n_s_BidirectionalBFS___setstate_cyth;
  PyObject *__pyx_n_s_BidirectionalDijkstra;
  PyObject *__pyx_n_s_BidirectionalDijkstra___reduce_c;
  PyObject *__pyx_n_s_BidirectionalDijkstra___setstate;
  PyObject *__pyx_n_s_CommuteTimeDistance;
  PyObject *__pyx_n_s_CommuteTimeDistance___reduce_cyt;
  PyObject *__pyx_n_s_CommuteTimeDistance___setstate_c;
  PyObject *__pyx_n_s_CommuteTimeDistance_distance;
  PyObject *__pyx_n_s_CommuteTimeDistance_runApproxima;
  PyObject *__pyx_n_s_CommuteTimeDistance_runParallelA;
  PyObject *__pyx_n_s_CommuteTimeDistance_runSinglePai;
  PyObject *__pyx_n_s_CommuteTimeDistance_runSingleSou;
  PyObject *__pyx_n_s_Diameter;
  PyObject *__pyx_n_s_DiameterAlgo;
  PyObject *__pyx_n_s_Diameter___reduce_cython;
  PyObject *__pyx_n_s_Diameter___setstate_cython;
  PyObject *__pyx_n_s_Diameter_getDiameter;
  PyObject *__pyx_n_s_Dijkstra;
  PyObject *__pyx_n_s_Dijkstra___reduce_cython;
  PyObject *__pyx_n_s_Dijkstra___setstate_cython;
  PyObject *__pyx_n_s_DynAPSP;
  PyObject *__pyx_n_s_DynAPSP___reduce_cython;
  PyObject *__pyx_n_s_DynAPSP___setstate_cython;
  PyObject *__pyx_n_s_DynAlgorithm;
  PyObject *__pyx_n_s_DynBFS;
  PyObject *__pyx_n_s_DynBFS___reduce_cython;
  PyObject *__pyx_n_s_DynBFS___setstate_cython;
  PyObject *__pyx_n_s_DynDijkstra;
  PyObject *__pyx_n_s_DynDijkstra___reduce_cython;
  PyObject *__pyx_n_s_DynDijkstra___setstate_cython;
  PyObject *__pyx_n_s_DynPrunedLandmarkLabeling;
  PyObject *__pyx_n_s_DynPrunedLandmarkLabeling___redu;
  PyObject *__pyx_n_s_DynPrunedLandmarkLabeling___sets;
  PyObject *__pyx_n_s_DynPrunedLandmarkLabeling_query;
  PyObject *__pyx_n_s_DynSSSP;
  PyObject *__pyx_n_s_DynSSSP___reduce_cython;
  PyObject *__pyx_n_s_DynSSSP___setstate_cython;
  PyObject *__pyx_n_s_DynSSSP_modified;
  PyObject *__pyx_n_s_DynSSSP_setTargetNode;
  PyObject *__pyx_n_s_ESTIMATED_PEDANTIC;
  PyObject *__pyx_n_s_ESTIMATED_RANGE;
  PyObject *__pyx_n_s_ESTIMATED_SAMPLES;
  PyObject *__pyx_n_s_EXACT;
  PyObject *__pyx_n_s_Eccentricity;
  PyObject *__pyx_n_s_Eccentricity___reduce_cython;
  PyObject *__pyx_n_s_Eccentricity___setstate_cython;
  PyObject *__pyx_n_s_Eccentricity_getValue;
  PyObject *__pyx_n_s_EffectiveDiameter;
  PyObject *__pyx_n_s_EffectiveDiameterApproximation;
  PyObject *__pyx_n_s_EffectiveDiameterApproximation_2;
  PyObject *__pyx_n_s_EffectiveDiameterApproximation_3;
  PyObject *__pyx_n_s_EffectiveDiameterApproximation_g;
  PyObject *__pyx_n_s_EffectiveDiameter___reduce_cytho;
  PyObject *__pyx_n_s_EffectiveDiameter___setstate_cyt;
  PyObject *__pyx_n_s_EffectiveDiameter_getEffectiveDi;
  PyObject *__pyx_kp_u_Error_you_may_not_use_DynSSSP_di;
  PyObject *__pyx_kp_u_Error_you_may_not_use_SSSP_direc;
  PyObject *__pyx_kp_u_Error_you_may_not_use_STSP_direc;
  PyObject *__pyx_n_s_EstimatedPedantic;
  PyObject *__pyx_n_s_EstimatedRange;
  PyObject *__pyx_n_s_EstimatedSamples;
  PyObject *__pyx_n_s_Exact;
  PyObject *__pyx_n_s_G;
  PyObject *__pyx_n_s_HopPlotApproximation;
  PyObject *__pyx_n_s_HopPlotApproximation___reduce_cy;
  PyObject *__pyx_n_s_HopPlotApproximation___setstate;
  PyObject *__pyx_n_s_HopPlotApproximation_getHopPlot;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
  PyObject *__pyx_n_s_JaccardDistance;
  PyObject *__pyx_n_s_JaccardDistance___reduce_cython;
  PyObject *__pyx_n_s_JaccardDistance___setstate_cytho;
  PyObject *__pyx_n_s_JaccardDistance_getAttribute;
  PyObject *__pyx_n_s_JaccardSimilarityAttributizer;
  PyObject *__pyx_n_s_JaccardSimilarityAttributizer_2;
  PyObject *__pyx_n_s_JaccardSimilarityAttributizer_3;
  PyObject *__pyx_n_s_JaccardSimilarityAttributizer_ge;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_n_s_MultiTargetBFS;
  PyObject *__pyx_n_s_MultiTargetBFS___reduce_cython;
  PyObject *__pyx_n_s_MultiTargetBFS___setstate_cython;
  PyObject *__pyx_n_s_MultiTargetDijkstra;
  PyObject *__pyx_n_s_MultiTargetDijkstra___reduce_cyt;
  PyObject *__pyx_n_s_MultiTargetDijkstra___setstate_c;
  PyObject *__pyx_n_s_NeighborhoodFunction;
  PyObject *__pyx_n_s_NeighborhoodFunctionApproximatio;
  PyObject *__pyx_n_s_NeighborhoodFunctionApproximatio_2;
  PyObject *__pyx_n_s_NeighborhoodFunctionApproximatio_3;
  PyObject *__pyx_n_s_NeighborhoodFunctionApproximatio_4;
  PyObject *__pyx_n_s_NeighborhoodFunctionHeuristic;
  PyObject *__pyx_n_s_NeighborhoodFunctionHeuristic_2;
  PyObject *__pyx_n_s_NeighborhoodFunctionHeuristic_3;
  PyObject *__pyx_n_s_NeighborhoodFunctionHeuristic_ge;
  PyObject *__pyx_n_s_NeighborhoodFunction___reduce_cy;
  PyObject *__pyx_n_s_NeighborhoodFunction___setstate;
  PyObject *__pyx_n_s_NeighborhoodFunction_getNeighbor;
  PyObject *__pyx_n_s_PickleError;
  PyObject *__pyx_n_s_PrunedLandmarkLabeling;
  PyObject *__pyx_n_s_PrunedLandmarkLabeling___reduce;
  PyObject *__pyx_n_s_PrunedLandmarkLabeling___setstat;
  PyObject *__pyx_n_s_PrunedLandmarkLabeling_query;
  PyObject *__pyx_n_s_RANDOM;
  PyObject *__pyx_n_s_ReverseBFS;
  PyObject *__pyx_n_s_ReverseBFS___reduce_cython;
  PyObject *__pyx_n_s_ReverseBFS___setstate_cython;
  PyObject *__pyx_n_s_RuntimeError;
  PyObject *__pyx_n_s_SPLIT;
  PyObject *__pyx_n_s_SPSP;
  PyObject *__pyx_n_s_SPSP___reduce_cython;
  PyObject *__pyx_n_s_SPSP___setstate_cython;
  PyObject *__pyx_n_s_SPSP_getDistance;
  PyObject *__pyx_n_s_SPSP_getDistances;
  PyObject *__pyx_n_s_SPSP_setSources;
  PyObject *__pyx_n_s_SPSP_setTargets;
  PyObject *__pyx_n_s_SSSP;
  PyObject *__pyx_n_s_SSSP___reduce_cython;
  PyObject *__pyx_n_s_SSSP___setstate_cython;
  PyObject *__pyx_n_s_SSSP_distance;
  PyObject *__pyx_n_s_SSSP_getDistances;
  PyObject *__pyx_n_s_SSSP_getNodesSortedByDistance;
  PyObject *__pyx_n_s_SSSP_getPath;
  PyObject *__pyx_n_s_SSSP_getPaths;
  PyObject *__pyx_n_s_SSSP_getPredecessors;
  PyObject *__pyx_n_s_SSSP_numberOfPaths;
  PyObject *__pyx_n_s_SSSP_setSource;
  PyObject *__pyx_n_s_SSSP_setTarget;
  PyObject *__pyx_n_s_STSP;
  PyObject *__pyx_n_s_STSP___reduce_cython;
  PyObject *__pyx_n_s_STSP___setstate_cython;
  PyObject *__pyx_n_s_STSP_getDistance;
  PyObject *__pyx_n_s_STSP_getDistances;
  PyObject *__pyx_n_s_STSP_getPath;
  PyObject *__pyx_n_s_STSP_getPredecessors;
  PyObject *__pyx_n_s_STSP_setSource;
  PyObject *__pyx_n_s_STSP_setTarget;
  PyObject *__pyx_n_s_STSP_setTargets;
  PyObject *__pyx_n_s_SelectionStrategy;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s_Volume;
  PyObject *__pyx_n_s_Volume___reduce_cython;
  PyObject *__pyx_n_s_Volume___setstate_cython;
  PyObject *__pyx_n_s_Volume_volume;
  PyObject *__pyx_kp_u__12;
  PyObject *__pyx_n_s__164;
  PyObject *__pyx_n_s_algo;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_n_s_asarray;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_callback;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_close;
  PyObject *__pyx_n_s_cutoff;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_dict_2;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_distance;
  PyObject *__pyx_n_s_distances;
  PyObject *__pyx_n_s_doc;
  PyObject *__pyx_n_s_dynbase;
  PyObject *__pyx_n_s_elem;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_error;
  PyObject *__pyx_n_s_forAllSimplePaths;
  PyObject *__pyx_n_s_format;
  PyObject *__pyx_n_s_forward;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_genexpr;
  PyObject *__pyx_n_s_getAllSimplePaths;
  PyObject *__pyx_n_s_getAttribute;
  PyObject *__pyx_n_s_getDiameter;
  PyObject *__pyx_n_s_getDistance;
  PyObject *__pyx_n_s_getDistances;
  PyObject *__pyx_n_s_getEdgeScores;
  PyObject *__pyx_n_s_getEffectiveDiameter;
  PyObject *__pyx_n_s_getHopPlot;
  PyObject *__pyx_n_s_getNeighborhoodFunction;
  PyObject *__pyx_n_s_getNodesSortedByDistance;
  PyObject *__pyx_n_s_getPath;
  PyObject *__pyx_n_s_getPaths;
  PyObject *__pyx_n_s_getPredecessors;
  PyObject *__pyx_n_s_getValue;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_helpers;
  PyObject *__pyx_n_s_heu;
  PyObject *__pyx_n_s_hp;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_init_subclass;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_is_number;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_k;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_maxDistance;
  PyObject *__pyx_n_s_metaclass;
  PyObject *__pyx_n_s_modified;
  PyObject *__pyx_n_s_module;
  PyObject *__pyx_n_s_mro_entries;
  PyObject *__pyx_n_s_nSamples;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_networkit_distance;
  PyObject *__pyx_kp_u_networkit_distance_AllSimplePath;
  PyObject *__pyx_kp_s_networkit_distance_pyx;
  PyObject *__pyx_n_s_new;
  PyObject *__pyx_n_s_newSource;
  PyObject *__pyx_n_s_newTarget;
  PyObject *__pyx_n_s_newTargets;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_s_none;
  PyObject *__pyx_n_s_norm;
  PyObject *__pyx_n_s_numberIterations;
  PyObject *__pyx_n_s_numberOfPaths;
  PyObject *__pyx_n_s_numberOfSimplePaths;
  PyObject *__pyx_n_s_numberSystems;
  PyObject *__pyx_n_s_object;
  PyObject *__pyx_n_s_omega;
  PyObject *__pyx_n_s_paths;
  PyObject *__pyx_n_s_pickle;
  PyObject *__pyx_n_s_prepare;
  PyObject *__pyx_n_s_preprocess;
  PyObject *__pyx_n_s_pyx_PickleError;
  PyObject *__pyx_n_s_pyx_checksum;
  PyObject *__pyx_n_s_pyx_result;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_type;
  PyObject *__pyx_n_s_pyx_unpickle_Eccentricity;
  PyObject *__pyx_n_s_pyx_unpickle_Volume;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_qualname;
  PyObject *__pyx_n_s_query;
  PyObject *__pyx_n_s_r;
  PyObject *__pyx_n_s_r_2;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_ratio;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_result;
  PyObject *__pyx_n_s_rs;
  PyObject *__pyx_n_s_run;
  PyObject *__pyx_n_s_runApproximation;
  PyObject *__pyx_n_s_runParallelApproximation;
  PyObject *__pyx_n_s_runSinglePair;
  PyObject *__pyx_n_s_runSingleSource;
  PyObject *__pyx_n_s_s;
  PyObject *__pyx_n_s_samples;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self__this_cannot_be_converted_t;
  PyObject *__pyx_n_s_send;
  PyObject *__pyx_n_s_setSource;
  PyObject *__pyx_n_s_setSources;
  PyObject *__pyx_n_s_setTarget;
  PyObject *__pyx_n_s_setTargetNode;
  PyObject *__pyx_n_s_setTargets;
  PyObject *__pyx_n_s_set_name;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_source;
  PyObject *__pyx_n_s_sources;
  PyObject *__pyx_n_s_state;
  PyObject *__pyx_n_s_staticmethod;
  PyObject *__pyx_n_s_stdstring;
  PyObject *__pyx_n_s_storeNodesSortedByDistance;
  PyObject *__pyx_n_s_storePaths;
  PyObject *__pyx_n_s_storePred;
  PyObject *__pyx_n_s_strategy;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_t;
  PyObject *__pyx_n_s_target;
  PyObject *__pyx_n_s_targets;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_throw;
  PyObject *__pyx_n_s_tmap;
  PyObject *__pyx_n_s_tol;
  PyObject *__pyx_n_s_triangles;
  PyObject *__pyx_n_s_u;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_use_setstate;
  PyObject *__pyx_n_s_v;
  PyObject *__pyx_n_s_v_2;
  PyObject *__pyx_n_s_volume;
  PyObject *__pyx_n_s_volume_locals_genexpr;
  PyObject *__pyx_n_s_volume_locals_is_number;
  PyObject *__pyx_n_s_vs;
  PyObject *__pyx_n_s_warn;
  PyObject *__pyx_n_s_warnings;
  PyObject *__pyx_n_s_withEdgeScores;
  PyObject *__pyx_n_s_wrapper;
  PyObject *__pyx_n_s_x;
  PyObject *__pyx_float_neg_1_;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_500;
  PyObject *__pyx_int_222419149;
  PyObject *__pyx_int_228825662;
  PyObject *__pyx_int_238750788;
  PyObject *__pyx_k__4;
  PyObject *__pyx_k__7;
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_k__8;
  PyObject *__pyx_k__9;
  __pyx_t_9networkit_10structures_node __pyx_k__10;
  PyObject *__pyx_k__11;
  PyObject *__pyx_k__13;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_tuple__30;
  PyObject *__pyx_tuple__32;
  PyObject *__pyx_tuple__33;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__38;
  PyObject *__pyx_tuple__39;
  PyObject *__pyx_tuple__43;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__58;
  PyObject *__pyx_tuple__59;
  PyObject *__pyx_tuple__63;
  PyObject *__pyx_tuple__65;
  PyObject *__pyx_tuple__74;
  PyObject *__pyx_tuple__84;
  PyObject *__pyx_tuple__86;
  PyObject *__pyx_tuple__92;
  PyObject *__pyx_codeobj__6;
  PyObject *__pyx_tuple__105;
  PyObject *__pyx_tuple__109;
  PyObject *__pyx_tuple__110;
  PyObject *__pyx_tuple__120;
  PyObject *__pyx_tuple__122;
  PyObject *__pyx_tuple__149;
  PyObject *__pyx_tuple__161;
  PyObject *__pyx_codeobj__16;
  PyObject *__pyx_codeobj__18;
  PyObject *__pyx_codeobj__20;
  PyObject *__pyx_codeobj__22;
  PyObject *__pyx_codeobj__23;
  PyObject *__pyx_codeobj__24;
  PyObject *__pyx_codeobj__26;
  PyObject *__pyx_codeobj__27;
  PyObject *__pyx_codeobj__29;
  PyObject *__pyx_codeobj__31;
  PyObject *__pyx_codeobj__34;
  PyObject *__pyx_codeobj__35;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__40;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__42;
  PyObject *__pyx_codeobj__44;
  PyObject *__pyx_codeobj__45;
  PyObject *__pyx_codeobj__46;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__48;
  PyObject *__pyx_codeobj__49;
  PyObject *__pyx_codeobj__50;
  PyObject *__pyx_codeobj__51;
  PyObject *__pyx_codeobj__52;
  PyObject *__pyx_codeobj__53;
  PyObject *__pyx_codeobj__55;
  PyObject *__pyx_codeobj__56;
  PyObject *__pyx_codeobj__57;
  PyObject *__pyx_codeobj__60;
  PyObject *__pyx_codeobj__61;
  PyObject *__pyx_codeobj__62;
  PyObject *__pyx_codeobj__64;
  PyObject *__pyx_codeobj__66;
  PyObject *__pyx_codeobj__67;
  PyObject *__pyx_codeobj__68;
  PyObject *__pyx_codeobj__69;
  PyObject *__pyx_codeobj__70;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__72;
  PyObject *__pyx_codeobj__73;
  PyObject *__pyx_codeobj__75;
  PyObject *__pyx_codeobj__76;
  PyObject *__pyx_codeobj__77;
  PyObject *__pyx_codeobj__78;
  PyObject *__pyx_codeobj__79;
  PyObject *__pyx_codeobj__80;
  PyObject *__pyx_codeobj__81;
  PyObject *__pyx_codeobj__82;
  PyObject *__pyx_codeobj__83;
  PyObject *__pyx_codeobj__85;
  PyObject *__pyx_codeobj__87;
  PyObject *__pyx_codeobj__88;
  PyObject *__pyx_codeobj__89;
  PyObject *__pyx_codeobj__90;
  PyObject *__pyx_codeobj__91;
  PyObject *__pyx_codeobj__93;
  PyObject *__pyx_codeobj__94;
  PyObject *__pyx_codeobj__95;
  PyObject *__pyx_codeobj__96;
  PyObject *__pyx_codeobj__97;
  PyObject *__pyx_codeobj__98;
  PyObject *__pyx_codeobj__99;
  PyObject *__pyx_codeobj__100;
  PyObject *__pyx_codeobj__101;
  PyObject *__pyx_codeobj__102;
  PyObject *__pyx_codeobj__103;
  PyObject *__pyx_codeobj__104;
  PyObject *__pyx_codeobj__106;
  PyObject *__pyx_codeobj__107;
  PyObject *__pyx_codeobj__108;
  PyObject *__pyx_codeobj__111;
  PyObject *__pyx_codeobj__112;
  PyObject *__pyx_codeobj__113;
  PyObject *__pyx_codeobj__114;
  PyObject *__pyx_codeobj__115;
  PyObject *__pyx_codeobj__116;
  PyObject *__pyx_codeobj__117;
  PyObject *__pyx_codeobj__118;
  PyObject *__pyx_codeobj__119;
  PyObject *__pyx_codeobj__121;
  PyObject *__pyx_codeobj__123;
  PyObject *__pyx_codeobj__124;
  PyObject *__pyx_codeobj__125;
  PyObject *__pyx_codeobj__126;
  PyObject *__pyx_codeobj__127;
  PyObject *__pyx_codeobj__128;
  PyObject *__pyx_codeobj__129;
  PyObject *__pyx_codeobj__130;
  PyObject *__pyx_codeobj__131;
  PyObject *__pyx_codeobj__132;
  PyObject *__pyx_codeobj__133;
  PyObject *__pyx_codeobj__134;
  PyObject *__pyx_codeobj__135;
  PyObject *__pyx_codeobj__136;
  PyObject *__pyx_codeobj__137;
  PyObject *__pyx_codeobj__138;
  PyObject *__pyx_codeobj__139;
  PyObject *__pyx_codeobj__140;
  PyObject *__pyx_codeobj__141;
  PyObject *__pyx_codeobj__142;
  PyObject *__pyx_codeobj__143;
  PyObject *__pyx_codeobj__144;
  PyObject *__pyx_codeobj__145;
  PyObject *__pyx_codeobj__146;
  PyObject *__pyx_codeobj__147;
  PyObject *__pyx_codeobj__148;
  PyObject *__pyx_codeobj__150;
  PyObject *__pyx_codeobj__151;
  PyObject *__pyx_codeobj__152;
  PyObject *__pyx_codeobj__153;
  PyObject *__pyx_codeobj__154;
  PyObject *__pyx_codeobj__155;
  PyObject *__pyx_codeobj__156;
  PyObject *__pyx_codeobj__157;
  PyObject *__pyx_codeobj__158;
  PyObject *__pyx_codeobj__159;
  PyObject *__pyx_codeobj__160;
  PyObject *__pyx_codeobj__162;
  PyObject *__pyx_codeobj__163;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_4base__CythonParentClass);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_4base_Algorithm);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_10structures_Cover);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_10structures_Partition);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8dynamics_GraphEvent);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_Graph);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_NodeIntAttribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_NodeDoubleAttribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_NodeStringAttribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_EdgeIntAttribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_EdgeDoubleAttribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_EdgeStringAttribute);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8matching_Matching);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_STSP);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_STSP);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_SSSP);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_SSSP);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_DynSSSP);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_DynSSSP);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_AdamicAdarDistance);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_AdamicAdarDistance);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_Diameter);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_Diameter);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_Eccentricity);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_Eccentricity);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_EffectiveDiameterApproximation);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_EffectiveDiameter);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_EffectiveDiameter);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_HopPlotApproximation);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_HopPlotApproximation);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_NeighborhoodFunction);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_NeighborhoodFunction);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_NeighborhoodFunctionApproximation);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_Volume);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_Volume);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_JaccardDistance);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_JaccardDistance);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_JaccardSimilarityAttributizer);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_AlgebraicDistance);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_AlgebraicDistance);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_CommuteTimeDistance);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_CommuteTimeDistance);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_NeighborhoodFunctionHeuristic);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_APSP);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_APSP);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_SPSP);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_SPSP);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_DynAPSP);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_DynAPSP);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_BFS);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_BFS);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_Dijkstra);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_Dijkstra);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_MultiTargetBFS);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_MultiTargetBFS);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_MultiTargetDijkstra);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_MultiTargetDijkstra);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_DynBFS);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_DynBFS);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_DynDijkstra);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_DynDijkstra);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_BidirectionalBFS);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_BidirectionalBFS);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_BidirectionalDijkstra);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_BidirectionalDijkstra);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_AStar);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_AStar);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_AllSimplePaths);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_AllSimplePaths);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_ReverseBFS);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_ReverseBFS);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_PrunedLandmarkLabeling);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance_DynPrunedLandmarkLabeling);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance___pyx_scope_struct__volume);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance___pyx_scope_struct__volume);
  Py_CLEAR(clear_module_state->__pyx_ptype_9networkit_8distance___pyx_scope_struct_1_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_9networkit_8distance___pyx_scope_struct_1_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_APSP);
  Py_CLEAR(clear_module_state->__pyx_n_s_APSP___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_APSP___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_APSP_getDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_APSP_getDistances);
  Py_CLEAR(clear_module_state->__pyx_n_s_AStar);
  Py_CLEAR(clear_module_state->__pyx_n_s_AStar___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_AStar___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_AUTOMATIC);
  Py_CLEAR(clear_module_state->__pyx_n_s_AdamicAdarDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_AdamicAdarDistance___reduce_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_AdamicAdarDistance___setstate_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_AdamicAdarDistance_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_AdamicAdarDistance_getAttribute);
  Py_CLEAR(clear_module_state->__pyx_n_s_AdamicAdarDistance_preprocess);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlgebraicDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlgebraicDistance___reduce_cytho);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlgebraicDistance___setstate_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlgebraicDistance_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlgebraicDistance_getEdgeScores);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlgebraicDistance_preprocess);
  Py_CLEAR(clear_module_state->__pyx_n_s_AllSimplePaths);
  Py_CLEAR(clear_module_state->__pyx_n_s_AllSimplePaths___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_AllSimplePaths___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_AllSimplePaths_forAllSimplePaths);
  Py_CLEAR(clear_module_state->__pyx_n_s_AllSimplePaths_getAllSimplePaths);
  Py_CLEAR(clear_module_state->__pyx_n_s_AllSimplePaths_numberOfSimplePat);
  Py_CLEAR(clear_module_state->__pyx_n_s_AllSimplePaths_run);
  Py_CLEAR(clear_module_state->__pyx_kp_u_An_Exception_occurred_aborting_e);
  Py_CLEAR(clear_module_state->__pyx_n_s_Automatic);
  Py_CLEAR(clear_module_state->__pyx_n_s_BFS);
  Py_CLEAR(clear_module_state->__pyx_n_s_BFS___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_BFS___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_BidirectionalBFS);
  Py_CLEAR(clear_module_state->__pyx_n_s_BidirectionalBFS___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_BidirectionalBFS___setstate_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_BidirectionalDijkstra);
  Py_CLEAR(clear_module_state->__pyx_n_s_BidirectionalDijkstra___reduce_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_BidirectionalDijkstra___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_CommuteTimeDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_CommuteTimeDistance___reduce_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_CommuteTimeDistance___setstate_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_CommuteTimeDistance_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_CommuteTimeDistance_runApproxima);
  Py_CLEAR(clear_module_state->__pyx_n_s_CommuteTimeDistance_runParallelA);
  Py_CLEAR(clear_module_state->__pyx_n_s_CommuteTimeDistance_runSinglePai);
  Py_CLEAR(clear_module_state->__pyx_n_s_CommuteTimeDistance_runSingleSou);
  Py_CLEAR(clear_module_state->__pyx_n_s_Diameter);
  Py_CLEAR(clear_module_state->__pyx_n_s_DiameterAlgo);
  Py_CLEAR(clear_module_state->__pyx_n_s_Diameter___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Diameter___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Diameter_getDiameter);
  Py_CLEAR(clear_module_state->__pyx_n_s_Dijkstra);
  Py_CLEAR(clear_module_state->__pyx_n_s_Dijkstra___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Dijkstra___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynAPSP);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynAPSP___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynAPSP___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynAlgorithm);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynBFS);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynBFS___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynBFS___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynDijkstra);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynDijkstra___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynDijkstra___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynPrunedLandmarkLabeling);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynPrunedLandmarkLabeling___redu);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynPrunedLandmarkLabeling___sets);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynPrunedLandmarkLabeling_query);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynSSSP);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynSSSP___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynSSSP___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynSSSP_modified);
  Py_CLEAR(clear_module_state->__pyx_n_s_DynSSSP_setTargetNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_ESTIMATED_PEDANTIC);
  Py_CLEAR(clear_module_state->__pyx_n_s_ESTIMATED_RANGE);
  Py_CLEAR(clear_module_state->__pyx_n_s_ESTIMATED_SAMPLES);
  Py_CLEAR(clear_module_state->__pyx_n_s_EXACT);
  Py_CLEAR(clear_module_state->__pyx_n_s_Eccentricity);
  Py_CLEAR(clear_module_state->__pyx_n_s_Eccentricity___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Eccentricity___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Eccentricity_getValue);
  Py_CLEAR(clear_module_state->__pyx_n_s_EffectiveDiameter);
  Py_CLEAR(clear_module_state->__pyx_n_s_EffectiveDiameterApproximation);
  Py_CLEAR(clear_module_state->__pyx_n_s_EffectiveDiameterApproximation_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_EffectiveDiameterApproximation_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_EffectiveDiameterApproximation_g);
  Py_CLEAR(clear_module_state->__pyx_n_s_EffectiveDiameter___reduce_cytho);
  Py_CLEAR(clear_module_state->__pyx_n_s_EffectiveDiameter___setstate_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_EffectiveDiameter_getEffectiveDi);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_you_may_not_use_DynSSSP_di);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_you_may_not_use_SSSP_direc);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_you_may_not_use_STSP_direc);
  Py_CLEAR(clear_module_state->__pyx_n_s_EstimatedPedantic);
  Py_CLEAR(clear_module_state->__pyx_n_s_EstimatedRange);
  Py_CLEAR(clear_module_state->__pyx_n_s_EstimatedSamples);
  Py_CLEAR(clear_module_state->__pyx_n_s_Exact);
  Py_CLEAR(clear_module_state->__pyx_n_s_G);
  Py_CLEAR(clear_module_state->__pyx_n_s_HopPlotApproximation);
  Py_CLEAR(clear_module_state->__pyx_n_s_HopPlotApproximation___reduce_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_HopPlotApproximation___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_HopPlotApproximation_getHopPlot);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_JaccardDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_JaccardDistance___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_JaccardDistance___setstate_cytho);
  Py_CLEAR(clear_module_state->__pyx_n_s_JaccardDistance_getAttribute);
  Py_CLEAR(clear_module_state->__pyx_n_s_JaccardSimilarityAttributizer);
  Py_CLEAR(clear_module_state->__pyx_n_s_JaccardSimilarityAttributizer_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_JaccardSimilarityAttributizer_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_JaccardSimilarityAttributizer_ge);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_n_s_MultiTargetBFS);
  Py_CLEAR(clear_module_state->__pyx_n_s_MultiTargetBFS___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_MultiTargetBFS___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_MultiTargetDijkstra);
  Py_CLEAR(clear_module_state->__pyx_n_s_MultiTargetDijkstra___reduce_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_MultiTargetDijkstra___setstate_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_NeighborhoodFunction);
  Py_CLEAR(clear_module_state->__pyx_n_s_NeighborhoodFunctionApproximatio);
  Py_CLEAR(clear_module_state->__pyx_n_s_NeighborhoodFunctionApproximatio_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_NeighborhoodFunctionApproximatio_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_NeighborhoodFunctionApproximatio_4);
  Py_CLEAR(clear_module_state->__pyx_n_s_NeighborhoodFunctionHeuristic);
  Py_CLEAR(clear_module_state->__pyx_n_s_NeighborhoodFunctionHeuristic_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_NeighborhoodFunctionHeuristic_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_NeighborhoodFunctionHeuristic_ge);
  Py_CLEAR(clear_module_state->__pyx_n_s_NeighborhoodFunction___reduce_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_NeighborhoodFunction___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_NeighborhoodFunction_getNeighbor);
  Py_CLEAR(clear_module_state->__pyx_n_s_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_PrunedLandmarkLabeling);
  Py_CLEAR(clear_module_state->__pyx_n_s_PrunedLandmarkLabeling___reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_PrunedLandmarkLabeling___setstat);
  Py_CLEAR(clear_module_state->__pyx_n_s_PrunedLandmarkLabeling_query);
  Py_CLEAR(clear_module_state->__pyx_n_s_RANDOM);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReverseBFS);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReverseBFS___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReverseBFS___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_RuntimeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_SPLIT);
  Py_CLEAR(clear_module_state->__pyx_n_s_SPSP);
  Py_CLEAR(clear_module_state->__pyx_n_s_SPSP___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_SPSP___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_SPSP_getDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_SPSP_getDistances);
  Py_CLEAR(clear_module_state->__pyx_n_s_SPSP_setSources);
  Py_CLEAR(clear_module_state->__pyx_n_s_SPSP_setTargets);
  Py_CLEAR(clear_module_state->__pyx_n_s_SSSP);
  Py_CLEAR(clear_module_state->__pyx_n_s_SSSP___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_SSSP___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_SSSP_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_SSSP_getDistances);
  Py_CLEAR(clear_module_state->__pyx_n_s_SSSP_getNodesSortedByDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_SSSP_getPath);
  Py_CLEAR(clear_module_state->__pyx_n_s_SSSP_getPaths);
  Py_CLEAR(clear_module_state->__pyx_n_s_SSSP_getPredecessors);
  Py_CLEAR(clear_module_state->__pyx_n_s_SSSP_numberOfPaths);
  Py_CLEAR(clear_module_state->__pyx_n_s_SSSP_setSource);
  Py_CLEAR(clear_module_state->__pyx_n_s_SSSP_setTarget);
  Py_CLEAR(clear_module_state->__pyx_n_s_STSP);
  Py_CLEAR(clear_module_state->__pyx_n_s_STSP___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_STSP___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_STSP_getDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_STSP_getDistances);
  Py_CLEAR(clear_module_state->__pyx_n_s_STSP_getPath);
  Py_CLEAR(clear_module_state->__pyx_n_s_STSP_getPredecessors);
  Py_CLEAR(clear_module_state->__pyx_n_s_STSP_setSource);
  Py_CLEAR(clear_module_state->__pyx_n_s_STSP_setTarget);
  Py_CLEAR(clear_module_state->__pyx_n_s_STSP_setTargets);
  Py_CLEAR(clear_module_state->__pyx_n_s_SelectionStrategy);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Volume);
  Py_CLEAR(clear_module_state->__pyx_n_s_Volume___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Volume___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Volume_volume);
  Py_CLEAR(clear_module_state->__pyx_kp_u__12);
  Py_CLEAR(clear_module_state->__pyx_n_s__164);
  Py_CLEAR(clear_module_state->__pyx_n_s_algo);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_n_s_asarray);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_callback);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_cutoff);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_distance);
  Py_CLEAR(clear_module_state->__pyx_n_s_distances);
  Py_CLEAR(clear_module_state->__pyx_n_s_doc);
  Py_CLEAR(clear_module_state->__pyx_n_s_dynbase);
  Py_CLEAR(clear_module_state->__pyx_n_s_elem);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_forAllSimplePaths);
  Py_CLEAR(clear_module_state->__pyx_n_s_format);
  Py_CLEAR(clear_module_state->__pyx_n_s_forward);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_getAllSimplePaths);
  Py_CLEAR(clear_module_state->__pyx_n_s_getAttribute);
  Py_CLEAR(clear_module_state->__pyx_n_s_getDiameter);
  Py_CLEAR(clear_module_state->__pyx_n_s_getDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_getDistances);
  Py_CLEAR(clear_module_state->__pyx_n_s_getEdgeScores);
  Py_CLEAR(clear_module_state->__pyx_n_s_getEffectiveDiameter);
  Py_CLEAR(clear_module_state->__pyx_n_s_getHopPlot);
  Py_CLEAR(clear_module_state->__pyx_n_s_getNeighborhoodFunction);
  Py_CLEAR(clear_module_state->__pyx_n_s_getNodesSortedByDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_getPath);
  Py_CLEAR(clear_module_state->__pyx_n_s_getPaths);
  Py_CLEAR(clear_module_state->__pyx_n_s_getPredecessors);
  Py_CLEAR(clear_module_state->__pyx_n_s_getValue);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_helpers);
  Py_CLEAR(clear_module_state->__pyx_n_s_heu);
  Py_CLEAR(clear_module_state->__pyx_n_s_hp);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_subclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_number);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_k);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_maxDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_metaclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_modified);
  Py_CLEAR(clear_module_state->__pyx_n_s_module);
  Py_CLEAR(clear_module_state->__pyx_n_s_mro_entries);
  Py_CLEAR(clear_module_state->__pyx_n_s_nSamples);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_networkit_distance);
  Py_CLEAR(clear_module_state->__pyx_kp_u_networkit_distance_AllSimplePath);
  Py_CLEAR(clear_module_state->__pyx_kp_s_networkit_distance_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_new);
  Py_CLEAR(clear_module_state->__pyx_n_s_newSource);
  Py_CLEAR(clear_module_state->__pyx_n_s_newTarget);
  Py_CLEAR(clear_module_state->__pyx_n_s_newTargets);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_none);
  Py_CLEAR(clear_module_state->__pyx_n_s_norm);
  Py_CLEAR(clear_module_state->__pyx_n_s_numberIterations);
  Py_CLEAR(clear_module_state->__pyx_n_s_numberOfPaths);
  Py_CLEAR(clear_module_state->__pyx_n_s_numberOfSimplePaths);
  Py_CLEAR(clear_module_state->__pyx_n_s_numberSystems);
  Py_CLEAR(clear_module_state->__pyx_n_s_object);
  Py_CLEAR(clear_module_state->__pyx_n_s_omega);
  Py_CLEAR(clear_module_state->__pyx_n_s_paths);
  Py_CLEAR(clear_module_state->__pyx_n_s_pickle);
  Py_CLEAR(clear_module_state->__pyx_n_s_prepare);
  Py_CLEAR(clear_module_state->__pyx_n_s_preprocess);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_checksum);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_Eccentricity);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_Volume);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_qualname);
  Py_CLEAR(clear_module_state->__pyx_n_s_query);
  Py_CLEAR(clear_module_state->__pyx_n_s_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_r_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_rs);
  Py_CLEAR(clear_module_state->__pyx_n_s_run);
  Py_CLEAR(clear_module_state->__pyx_n_s_runApproximation);
  Py_CLEAR(clear_module_state->__pyx_n_s_runParallelApproximation);
  Py_CLEAR(clear_module_state->__pyx_n_s_runSinglePair);
  Py_CLEAR(clear_module_state->__pyx_n_s_runSingleSource);
  Py_CLEAR(clear_module_state->__pyx_n_s_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_samples);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__this_cannot_be_converted_t);
  Py_CLEAR(clear_module_state->__pyx_n_s_send);
  Py_CLEAR(clear_module_state->__pyx_n_s_setSource);
  Py_CLEAR(clear_module_state->__pyx_n_s_setSources);
  Py_CLEAR(clear_module_state->__pyx_n_s_setTarget);
  Py_CLEAR(clear_module_state->__pyx_n_s_setTargetNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_setTargets);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_source);
  Py_CLEAR(clear_module_state->__pyx_n_s_sources);
  Py_CLEAR(clear_module_state->__pyx_n_s_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_staticmethod);
  Py_CLEAR(clear_module_state->__pyx_n_s_stdstring);
  Py_CLEAR(clear_module_state->__pyx_n_s_storeNodesSortedByDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_storePaths);
  Py_CLEAR(clear_module_state->__pyx_n_s_storePred);
  Py_CLEAR(clear_module_state->__pyx_n_s_strategy);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_s_t);
  Py_CLEAR(clear_module_state->__pyx_n_s_target);
  Py_CLEAR(clear_module_state->__pyx_n_s_targets);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_throw);
  Py_CLEAR(clear_module_state->__pyx_n_s_tmap);
  Py_CLEAR(clear_module_state->__pyx_n_s_tol);
  Py_CLEAR(clear_module_state->__pyx_n_s_triangles);
  Py_CLEAR(clear_module_state->__pyx_n_s_u);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_v);
  Py_CLEAR(clear_module_state->__pyx_n_s_v_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_volume);
  Py_CLEAR(clear_module_state->__pyx_n_s_volume_locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_volume_locals_is_number);
  Py_CLEAR(clear_module_state->__pyx_n_s_vs);
  Py_CLEAR(clear_module_state->__pyx_n_s_warn);
  Py_CLEAR(clear_module_state->__pyx_n_s_warnings);
  Py_CLEAR(clear_module_state->__pyx_n_s_withEdgeScores);
  Py_CLEAR(clear_module_state->__pyx_n_s_wrapper);
  Py_CLEAR(clear_module_state->__pyx_n_s_x);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1_);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_500);
  Py_CLEAR(clear_module_state->__pyx_int_222419149);
  Py_CLEAR(clear_module_state->__pyx_int_228825662);
  Py_CLEAR(clear_module_state->__pyx_int_238750788);
  Py_CLEAR(clear_module_state->__pyx_k__4);
  Py_CLEAR(clear_module_state->__pyx_k__7);
  Py_CLEAR(clear_module_state->__pyx_k__9);
  Py_CLEAR(clear_module_state->__pyx_k__11);
  Py_CLEAR(clear_module_state->__pyx_k__13);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__28);
  Py_CLEAR(clear_module_state->__pyx_tuple__30);
  Py_CLEAR(clear_module_state->__pyx_tuple__32);
  Py_CLEAR(clear_module_state->__pyx_tuple__33);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__38);
  Py_CLEAR(clear_module_state->__pyx_tuple__39);
  Py_CLEAR(clear_module_state->__pyx_tuple__43);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__58);
  Py_CLEAR(clear_module_state->__pyx_tuple__59);
  Py_CLEAR(clear_module_state->__pyx_tuple__63);
  Py_CLEAR(clear_module_state->__pyx_tuple__65);
  Py_CLEAR(clear_module_state->__pyx_tuple__74);
  Py_CLEAR(clear_module_state->__pyx_tuple__84);
  Py_CLEAR(clear_module_state->__pyx_tuple__86);
  Py_CLEAR(clear_module_state->__pyx_tuple__92);
  Py_CLEAR(clear_module_state->__pyx_codeobj__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__105);
  Py_CLEAR(clear_module_state->__pyx_tuple__109);
  Py_CLEAR(clear_module_state->__pyx_tuple__110);
  Py_CLEAR(clear_module_state->__pyx_tuple__120);
  Py_CLEAR(clear_module_state->__pyx_tuple__122);
  Py_CLEAR(clear_module_state->__pyx_tuple__149);
  Py_CLEAR(clear_module_state->__pyx_tuple__161);
  Py_CLEAR(clear_module_state->__pyx_codeobj__16);
  Py_CLEAR(clear_module_state->__pyx_codeobj__18);
  Py_CLEAR(clear_module_state->__pyx_codeobj__20);
  Py_CLEAR(clear_module_state->__pyx_codeobj__22);
  Py_CLEAR(clear_module_state->__pyx_codeobj__23);
  Py_CLEAR(clear_module_state->__pyx_codeobj__24);
  Py_CLEAR(clear_module_state->__pyx_codeobj__26);
  Py_CLEAR(clear_module_state->__pyx_codeobj__27);
  Py_CLEAR(clear_module_state->__pyx_codeobj__29);
  Py_CLEAR(clear_module_state->__pyx_codeobj__31);
  Py_CLEAR(clear_module_state->__pyx_codeobj__34);
  Py_CLEAR(clear_module_state->__pyx_codeobj__35);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__40);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__42);
  Py_CLEAR(clear_module_state->__pyx_codeobj__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__45);
  Py_CLEAR(clear_module_state->__pyx_codeobj__46);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__48);
  Py_CLEAR(clear_module_state->__pyx_codeobj__49);
  Py_CLEAR(clear_module_state->__pyx_codeobj__50);
  Py_CLEAR(clear_module_state->__pyx_codeobj__51);
  Py_CLEAR(clear_module_state->__pyx_codeobj__52);
  Py_CLEAR(clear_module_state->__pyx_codeobj__53);
  Py_CLEAR(clear_module_state->__pyx_codeobj__55);
  Py_CLEAR(clear_module_state->__pyx_codeobj__56);
  Py_CLEAR(clear_module_state->__pyx_codeobj__57);
  Py_CLEAR(clear_module_state->__pyx_codeobj__60);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  Py_CLEAR(clear_module_state->__pyx_codeobj__62);
  Py_CLEAR(clear_module_state->__pyx_codeobj__64);
  Py_CLEAR(clear_module_state->__pyx_codeobj__66);
  Py_CLEAR(clear_module_state->__pyx_codeobj__67);
  Py_CLEAR(clear_module_state->__pyx_codeobj__68);
  Py_CLEAR(clear_module_state->__pyx_codeobj__69);
  Py_CLEAR(clear_module_state->__pyx_codeobj__70);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__72);
  Py_CLEAR(clear_module_state->__pyx_codeobj__73);
  Py_CLEAR(clear_module_state->__pyx_codeobj__75);
  Py_CLEAR(clear_module_state->__pyx_codeobj__76);
  Py_CLEAR(clear_module_state->__pyx_codeobj__77);
  Py_CLEAR(clear_module_state->__pyx_codeobj__78);
  Py_CLEAR(clear_module_state->__pyx_codeobj__79);
  Py_CLEAR(clear_module_state->__pyx_codeobj__80);
  Py_CLEAR(clear_module_state->__pyx_codeobj__81);
  Py_CLEAR(clear_module_state->__pyx_codeobj__82);
  Py_CLEAR(clear_module_state->__pyx_codeobj__83);
  Py_CLEAR(clear_module_state->__pyx_codeobj__85);
  Py_CLEAR(clear_module_state->__pyx_codeobj__87);
  Py_CLEAR(clear_module_state->__pyx_codeobj__88);
  Py_CLEAR(clear_module_state->__pyx_codeobj__89);
  Py_CLEAR(clear_module_state->__pyx_codeobj__90);
  Py_CLEAR(clear_module_state->__pyx_codeobj__91);
  Py_CLEAR(clear_module_state->__pyx_codeobj__93);
  Py_CLEAR(clear_module_state->__pyx_codeobj__94);
  Py_CLEAR(clear_module_state->__pyx_codeobj__95);
  Py_CLEAR(clear_module_state->__pyx_codeobj__96);
  Py_CLEAR(clear_module_state->__pyx_codeobj__97);
  Py_CLEAR(clear_module_state->__pyx_codeobj__98);
  Py_CLEAR(clear_module_state->__pyx_codeobj__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__100);
  Py_CLEAR(clear_module_state->__pyx_codeobj__101);
  Py_CLEAR(clear_module_state->__pyx_codeobj__102);
  Py_CLEAR(clear_module_state->__pyx_codeobj__103);
  Py_CLEAR(clear_module_state->__pyx_codeobj__104);
  Py_CLEAR(clear_module_state->__pyx_codeobj__106);
  Py_CLEAR(clear_module_state->__pyx_codeobj__107);
  Py_CLEAR(clear_module_state->__pyx_codeobj__108);
  Py_CLEAR(clear_module_state->__pyx_codeobj__111);
  Py_CLEAR(clear_module_state->__pyx_codeobj__112);
  Py_CLEAR(clear_module_state->__pyx_codeobj__113);
  Py_CLEAR(clear_module_state->__pyx_codeobj__114);
  Py_CLEAR(clear_module_state->__pyx_codeobj__115);
  Py_CLEAR(clear_module_state->__pyx_codeobj__116);
  Py_CLEAR(clear_module_state->__pyx_codeobj__117);
  Py_CLEAR(clear_module_state->__pyx_codeobj__118);
  Py_CLEAR(clear_module_state->__pyx_codeobj__119);
  Py_CLEAR(clear_module_state->__pyx_codeobj__121);
  Py_CLEAR(clear_module_state->__pyx_codeobj__123);
  Py_CLEAR(clear_module_state->__pyx_codeobj__124);
  Py_CLEAR(clear_module_state->__pyx_codeobj__125);
  Py_CLEAR(clear_module_state->__pyx_codeobj__126);
  Py_CLEAR(clear_module_state->__pyx_codeobj__127);
  Py_CLEAR(clear_module_state->__pyx_codeobj__128);
  Py_CLEAR(clear_module_state->__pyx_codeobj__129);
  Py_CLEAR(clear_module_state->__pyx_codeobj__130);
  Py_CLEAR(clear_module_state->__pyx_codeobj__131);
  Py_CLEAR(clear_module_state->__pyx_codeobj__132);
  Py_CLEAR(clear_module_state->__pyx_codeobj__133);
  Py_CLEAR(clear_module_state->__pyx_codeobj__134);
  Py_CLEAR(clear_module_state->__pyx_codeobj__135);
  Py_CLEAR(clear_module_state->__pyx_codeobj__136);
  Py_CLEAR(clear_module_state->__pyx_codeobj__137);
  Py_CLEAR(clear_module_state->__pyx_codeobj__138);
  Py_CLEAR(clear_module_state->__pyx_codeobj__139);
  Py_CLEAR(clear_module_state->__pyx_codeobj__140);
  Py_CLEAR(clear_module_state->__pyx_codeobj__141);
  Py_CLEAR(clear_module_state->__pyx_codeobj__142);
  Py_CLEAR(clear_module_state->__pyx_codeobj__143);
  Py_CLEAR(clear_module_state->__pyx_codeobj__144);
  Py_CLEAR(clear_module_state->__pyx_codeobj__145);
  Py_CLEAR(clear_module_state->__pyx_codeobj__146);
  Py_CLEAR(clear_module_state->__pyx_codeobj__147);
  Py_CLEAR(clear_module_state->__pyx_codeobj__148);
  Py_CLEAR(clear_module_state->__pyx_codeobj__150);
  Py_CLEAR(clear_module_state->__pyx_codeobj__151);
  Py_CLEAR(clear_module_state->__pyx_codeobj__152);
  Py_CLEAR(clear_module_state->__pyx_codeobj__153);
  Py_CLEAR(clear_module_state->__pyx_codeobj__154);
  Py_CLEAR(clear_module_state->__pyx_codeobj__155);
  Py_CLEAR(clear_module_state->__pyx_codeobj__156);
  Py_CLEAR(clear_module_state->__pyx_codeobj__157);
  Py_CLEAR(clear_module_state->__pyx_codeobj__158);
  Py_CLEAR(clear_module_state->__pyx_codeobj__159);
  Py_CLEAR(clear_module_state->__pyx_codeobj__160);
  Py_CLEAR(clear_module_state->__pyx_codeobj__162);
  Py_CLEAR(clear_module_state->__pyx_codeobj__163);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_4base__CythonParentClass);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_4base_Algorithm);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_10structures_Cover);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_10structures_Partition);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8dynamics_GraphEvent);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_Graph);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_NodeIntAttribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_NodeDoubleAttribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_NodeStringAttribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_EdgeIntAttribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_EdgeDoubleAttribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_EdgeStringAttribute);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8matching_Matching);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_STSP);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_STSP);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_SSSP);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_SSSP);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_DynSSSP);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_DynSSSP);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_AdamicAdarDistance);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_AdamicAdarDistance);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_Diameter);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_Diameter);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_Eccentricity);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_Eccentricity);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_EffectiveDiameterApproximation);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_EffectiveDiameter);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_EffectiveDiameter);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_HopPlotApproximation);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_HopPlotApproximation);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_NeighborhoodFunction);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_NeighborhoodFunction);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_NeighborhoodFunctionApproximation);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_Volume);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_Volume);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_JaccardDistance);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_JaccardDistance);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_JaccardSimilarityAttributizer);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_AlgebraicDistance);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_AlgebraicDistance);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_CommuteTimeDistance);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_CommuteTimeDistance);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_NeighborhoodFunctionHeuristic);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_APSP);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_APSP);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_SPSP);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_SPSP);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_DynAPSP);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_DynAPSP);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_BFS);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_BFS);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_Dijkstra);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_Dijkstra);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_MultiTargetBFS);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_MultiTargetBFS);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_MultiTargetDijkstra);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_MultiTargetDijkstra);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_DynBFS);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_DynBFS);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_DynDijkstra);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_DynDijkstra);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_BidirectionalBFS);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_BidirectionalBFS);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_BidirectionalDijkstra);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_BidirectionalDijkstra);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_AStar);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_AStar);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_AllSimplePaths);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_AllSimplePaths);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_ReverseBFS);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_ReverseBFS);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_PrunedLandmarkLabeling);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance_DynPrunedLandmarkLabeling);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance___pyx_scope_struct__volume);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance___pyx_scope_struct__volume);
  Py_VISIT(traverse_module_state->__pyx_ptype_9networkit_8distance___pyx_scope_struct_1_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_9networkit_8distance___pyx_scope_struct_1_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_APSP);
  Py_VISIT(traverse_module_state->__pyx_n_s_APSP___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_APSP___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_APSP_getDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_APSP_getDistances);
  Py_VISIT(traverse_module_state->__pyx_n_s_AStar);
  Py_VISIT(traverse_module_state->__pyx_n_s_AStar___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_AStar___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_AUTOMATIC);
  Py_VISIT(traverse_module_state->__pyx_n_s_AdamicAdarDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_AdamicAdarDistance___reduce_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_AdamicAdarDistance___setstate_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_AdamicAdarDistance_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_AdamicAdarDistance_getAttribute);
  Py_VISIT(traverse_module_state->__pyx_n_s_AdamicAdarDistance_preprocess);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlgebraicDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlgebraicDistance___reduce_cytho);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlgebraicDistance___setstate_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlgebraicDistance_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlgebraicDistance_getEdgeScores);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlgebraicDistance_preprocess);
  Py_VISIT(traverse_module_state->__pyx_n_s_AllSimplePaths);
  Py_VISIT(traverse_module_state->__pyx_n_s_AllSimplePaths___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_AllSimplePaths___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_AllSimplePaths_forAllSimplePaths);
  Py_VISIT(traverse_module_state->__pyx_n_s_AllSimplePaths_getAllSimplePaths);
  Py_VISIT(traverse_module_state->__pyx_n_s_AllSimplePaths_numberOfSimplePat);
  Py_VISIT(traverse_module_state->__pyx_n_s_AllSimplePaths_run);
  Py_VISIT(traverse_module_state->__pyx_kp_u_An_Exception_occurred_aborting_e);
  Py_VISIT(traverse_module_state->__pyx_n_s_Automatic);
  Py_VISIT(traverse_module_state->__pyx_n_s_BFS);
  Py_VISIT(traverse_module_state->__pyx_n_s_BFS___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_BFS___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_BidirectionalBFS);
  Py_VISIT(traverse_module_state->__pyx_n_s_BidirectionalBFS___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_BidirectionalBFS___setstate_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_BidirectionalDijkstra);
  Py_VISIT(traverse_module_state->__pyx_n_s_BidirectionalDijkstra___reduce_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_BidirectionalDijkstra___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_CommuteTimeDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_CommuteTimeDistance___reduce_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_CommuteTimeDistance___setstate_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_CommuteTimeDistance_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_CommuteTimeDistance_runApproxima);
  Py_VISIT(traverse_module_state->__pyx_n_s_CommuteTimeDistance_runParallelA);
  Py_VISIT(traverse_module_state->__pyx_n_s_CommuteTimeDistance_runSinglePai);
  Py_VISIT(traverse_module_state->__pyx_n_s_CommuteTimeDistance_runSingleSou);
  Py_VISIT(traverse_module_state->__pyx_n_s_Diameter);
  Py_VISIT(traverse_module_state->__pyx_n_s_DiameterAlgo);
  Py_VISIT(traverse_module_state->__pyx_n_s_Diameter___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Diameter___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Diameter_getDiameter);
  Py_VISIT(traverse_module_state->__pyx_n_s_Dijkstra);
  Py_VISIT(traverse_module_state->__pyx_n_s_Dijkstra___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Dijkstra___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynAPSP);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynAPSP___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynAPSP___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynAlgorithm);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynBFS);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynBFS___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynBFS___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynDijkstra);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynDijkstra___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynDijkstra___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynPrunedLandmarkLabeling);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynPrunedLandmarkLabeling___redu);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynPrunedLandmarkLabeling___sets);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynPrunedLandmarkLabeling_query);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynSSSP);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynSSSP___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynSSSP___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynSSSP_modified);
  Py_VISIT(traverse_module_state->__pyx_n_s_DynSSSP_setTargetNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_ESTIMATED_PEDANTIC);
  Py_VISIT(traverse_module_state->__pyx_n_s_ESTIMATED_RANGE);
  Py_VISIT(traverse_module_state->__pyx_n_s_ESTIMATED_SAMPLES);
  Py_VISIT(traverse_module_state->__pyx_n_s_EXACT);
  Py_VISIT(traverse_module_state->__pyx_n_s_Eccentricity);
  Py_VISIT(traverse_module_state->__pyx_n_s_Eccentricity___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Eccentricity___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Eccentricity_getValue);
  Py_VISIT(traverse_module_state->__pyx_n_s_EffectiveDiameter);
  Py_VISIT(traverse_module_state->__pyx_n_s_EffectiveDiameterApproximation);
  Py_VISIT(traverse_module_state->__pyx_n_s_EffectiveDiameterApproximation_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_EffectiveDiameterApproximation_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_EffectiveDiameterApproximation_g);
  Py_VISIT(traverse_module_state->__pyx_n_s_EffectiveDiameter___reduce_cytho);
  Py_VISIT(traverse_module_state->__pyx_n_s_EffectiveDiameter___setstate_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_EffectiveDiameter_getEffectiveDi);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_you_may_not_use_DynSSSP_di);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_you_may_not_use_SSSP_direc);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_you_may_not_use_STSP_direc);
  Py_VISIT(traverse_module_state->__pyx_n_s_EstimatedPedantic);
  Py_VISIT(traverse_module_state->__pyx_n_s_EstimatedRange);
  Py_VISIT(traverse_module_state->__pyx_n_s_EstimatedSamples);
  Py_VISIT(traverse_module_state->__pyx_n_s_Exact);
  Py_VISIT(traverse_module_state->__pyx_n_s_G);
  Py_VISIT(traverse_module_state->__pyx_n_s_HopPlotApproximation);
  Py_VISIT(traverse_module_state->__pyx_n_s_HopPlotApproximation___reduce_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_HopPlotApproximation___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_HopPlotApproximation_getHopPlot);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_JaccardDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_JaccardDistance___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_JaccardDistance___setstate_cytho);
  Py_VISIT(traverse_module_state->__pyx_n_s_JaccardDistance_getAttribute);
  Py_VISIT(traverse_module_state->__pyx_n_s_JaccardSimilarityAttributizer);
  Py_VISIT(traverse_module_state->__pyx_n_s_JaccardSimilarityAttributizer_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_JaccardSimilarityAttributizer_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_JaccardSimilarityAttributizer_ge);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_n_s_MultiTargetBFS);
  Py_VISIT(traverse_module_state->__pyx_n_s_MultiTargetBFS___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_MultiTargetBFS___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_MultiTargetDijkstra);
  Py_VISIT(traverse_module_state->__pyx_n_s_MultiTargetDijkstra___reduce_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_MultiTargetDijkstra___setstate_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_NeighborhoodFunction);
  Py_VISIT(traverse_module_state->__pyx_n_s_NeighborhoodFunctionApproximatio);
  Py_VISIT(traverse_module_state->__pyx_n_s_NeighborhoodFunctionApproximatio_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_NeighborhoodFunctionApproximatio_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_NeighborhoodFunctionApproximatio_4);
  Py_VISIT(traverse_module_state->__pyx_n_s_NeighborhoodFunctionHeuristic);
  Py_VISIT(traverse_module_state->__pyx_n_s_NeighborhoodFunctionHeuristic_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_NeighborhoodFunctionHeuristic_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_NeighborhoodFunctionHeuristic_ge);
  Py_VISIT(traverse_module_state->__pyx_n_s_NeighborhoodFunction___reduce_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_NeighborhoodFunction___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_NeighborhoodFunction_getNeighbor);
  Py_VISIT(traverse_module_state->__pyx_n_s_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_PrunedLandmarkLabeling);
  Py_VISIT(traverse_module_state->__pyx_n_s_PrunedLandmarkLabeling___reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_PrunedLandmarkLabeling___setstat);
  Py_VISIT(traverse_module_state->__pyx_n_s_PrunedLandmarkLabeling_query);
  Py_VISIT(traverse_module_state->__pyx_n_s_RANDOM);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReverseBFS);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReverseBFS___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReverseBFS___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_RuntimeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_SPLIT);
  Py_VISIT(traverse_module_state->__pyx_n_s_SPSP);
  Py_VISIT(traverse_module_state->__pyx_n_s_SPSP___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_SPSP___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_SPSP_getDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_SPSP_getDistances);
  Py_VISIT(traverse_module_state->__pyx_n_s_SPSP_setSources);
  Py_VISIT(traverse_module_state->__pyx_n_s_SPSP_setTargets);
  Py_VISIT(traverse_module_state->__pyx_n_s_SSSP);
  Py_VISIT(traverse_module_state->__pyx_n_s_SSSP___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_SSSP___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_SSSP_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_SSSP_getDistances);
  Py_VISIT(traverse_module_state->__pyx_n_s_SSSP_getNodesSortedByDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_SSSP_getPath);
  Py_VISIT(traverse_module_state->__pyx_n_s_SSSP_getPaths);
  Py_VISIT(traverse_module_state->__pyx_n_s_SSSP_getPredecessors);
  Py_VISIT(traverse_module_state->__pyx_n_s_SSSP_numberOfPaths);
  Py_VISIT(traverse_module_state->__pyx_n_s_SSSP_setSource);
  Py_VISIT(traverse_module_state->__pyx_n_s_SSSP_setTarget);
  Py_VISIT(traverse_module_state->__pyx_n_s_STSP);
  Py_VISIT(traverse_module_state->__pyx_n_s_STSP___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_STSP___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_STSP_getDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_STSP_getDistances);
  Py_VISIT(traverse_module_state->__pyx_n_s_STSP_getPath);
  Py_VISIT(traverse_module_state->__pyx_n_s_STSP_getPredecessors);
  Py_VISIT(traverse_module_state->__pyx_n_s_STSP_setSource);
  Py_VISIT(traverse_module_state->__pyx_n_s_STSP_setTarget);
  Py_VISIT(traverse_module_state->__pyx_n_s_STSP_setTargets);
  Py_VISIT(traverse_module_state->__pyx_n_s_SelectionStrategy);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Volume);
  Py_VISIT(traverse_module_state->__pyx_n_s_Volume___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Volume___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Volume_volume);
  Py_VISIT(traverse_module_state->__pyx_kp_u__12);
  Py_VISIT(traverse_module_state->__pyx_n_s__164);
  Py_VISIT(traverse_module_state->__pyx_n_s_algo);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_n_s_asarray);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_callback);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_cutoff);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_distance);
  Py_VISIT(traverse_module_state->__pyx_n_s_distances);
  Py_VISIT(traverse_module_state->__pyx_n_s_doc);
  Py_VISIT(traverse_module_state->__pyx_n_s_dynbase);
  Py_VISIT(traverse_module_state->__pyx_n_s_elem);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_forAllSimplePaths);
  Py_VISIT(traverse_module_state->__pyx_n_s_format);
  Py_VISIT(traverse_module_state->__pyx_n_s_forward);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_getAllSimplePaths);
  Py_VISIT(traverse_module_state->__pyx_n_s_getAttribute);
  Py_VISIT(traverse_module_state->__pyx_n_s_getDiameter);
  Py_VISIT(traverse_module_state->__pyx_n_s_getDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_getDistances);
  Py_VISIT(traverse_module_state->__pyx_n_s_getEdgeScores);
  Py_VISIT(traverse_module_state->__pyx_n_s_getEffectiveDiameter);
  Py_VISIT(traverse_module_state->__pyx_n_s_getHopPlot);
  Py_VISIT(traverse_module_state->__pyx_n_s_getNeighborhoodFunction);
  Py_VISIT(traverse_module_state->__pyx_n_s_getNodesSortedByDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_getPath);
  Py_VISIT(traverse_module_state->__pyx_n_s_getPaths);
  Py_VISIT(traverse_module_state->__pyx_n_s_getPredecessors);
  Py_VISIT(traverse_module_state->__pyx_n_s_getValue);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_helpers);
  Py_VISIT(traverse_module_state->__pyx_n_s_heu);
  Py_VISIT(traverse_module_state->__pyx_n_s_hp);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_subclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_number);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_k);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_maxDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_metaclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_modified);
  Py_VISIT(traverse_module_state->__pyx_n_s_module);
  Py_VISIT(traverse_module_state->__pyx_n_s_mro_entries);
  Py_VISIT(traverse_module_state->__pyx_n_s_nSamples);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_networkit_distance);
  Py_VISIT(traverse_module_state->__pyx_kp_u_networkit_distance_AllSimplePath);
  Py_VISIT(traverse_module_state->__pyx_kp_s_networkit_distance_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_new);
  Py_VISIT(traverse_module_state->__pyx_n_s_newSource);
  Py_VISIT(traverse_module_state->__pyx_n_s_newTarget);
  Py_VISIT(traverse_module_state->__pyx_n_s_newTargets);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_none);
  Py_VISIT(traverse_module_state->__pyx_n_s_norm);
  Py_VISIT(traverse_module_state->__pyx_n_s_numberIterations);
  Py_VISIT(traverse_module_state->__pyx_n_s_numberOfPaths);
  Py_VISIT(traverse_module_state->__pyx_n_s_numberOfSimplePaths);
  Py_VISIT(traverse_module_state->__pyx_n_s_numberSystems);
  Py_VISIT(traverse_module_state->__pyx_n_s_object);
  Py_VISIT(traverse_module_state->__pyx_n_s_omega);
  Py_VISIT(traverse_module_state->__pyx_n_s_paths);
  Py_VISIT(traverse_module_state->__pyx_n_s_pickle);
  Py_VISIT(traverse_module_state->__pyx_n_s_prepare);
  Py_VISIT(traverse_module_state->__pyx_n_s_preprocess);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_checksum);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_Eccentricity);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_Volume);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_qualname);
  Py_VISIT(traverse_module_state->__pyx_n_s_query);
  Py_VISIT(traverse_module_state->__pyx_n_s_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_r_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_rs);
  Py_VISIT(traverse_module_state->__pyx_n_s_run);
  Py_VISIT(traverse_module_state->__pyx_n_s_runApproximation);
  Py_VISIT(traverse_module_state->__pyx_n_s_runParallelApproximation);
  Py_VISIT(traverse_module_state->__pyx_n_s_runSinglePair);
  Py_VISIT(traverse_module_state->__pyx_n_s_runSingleSource);
  Py_VISIT(traverse_module_state->__pyx_n_s_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_samples);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__this_cannot_be_converted_t);
  Py_VISIT(traverse_module_state->__pyx_n_s_send);
  Py_VISIT(traverse_module_state->__pyx_n_s_setSource);
  Py_VISIT(traverse_module_state->__pyx_n_s_setSources);
  Py_VISIT(traverse_module_state->__pyx_n_s_setTarget);
  Py_VISIT(traverse_module_state->__pyx_n_s_setTargetNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_setTargets);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_source);
  Py_VISIT(traverse_module_state->__pyx_n_s_sources);
  Py_VISIT(traverse_module_state->__pyx_n_s_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_staticmethod);
  Py_VISIT(traverse_module_state->__pyx_n_s_stdstring);
  Py_VISIT(traverse_module_state->__pyx_n_s_storeNodesSortedByDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_storePaths);
  Py_VISIT(traverse_module_state->__pyx_n_s_storePred);
  Py_VISIT(traverse_module_state->__pyx_n_s_strategy);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_s_t);
  Py_VISIT(traverse_module_state->__pyx_n_s_target);
  Py_VISIT(traverse_module_state->__pyx_n_s_targets);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_throw);
  Py_VISIT(traverse_module_state->__pyx_n_s_tmap);
  Py_VISIT(traverse_module_state->__pyx_n_s_tol);
  Py_VISIT(traverse_module_state->__pyx_n_s_triangles);
  Py_VISIT(traverse_module_state->__pyx_n_s_u);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_v);
  Py_VISIT(traverse_module_state->__pyx_n_s_v_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_volume);
  Py_VISIT(traverse_module_state->__pyx_n_s_volume_locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_volume_locals_is_number);
  Py_VISIT(traverse_module_state->__pyx_n_s_vs);
  Py_VISIT(traverse_module_state->__pyx_n_s_warn);
  Py_VISIT(traverse_module_state->__pyx_n_s_warnings);
  Py_VISIT(traverse_module_state->__pyx_n_s_withEdgeScores);
  Py_VISIT(traverse_module_state->__pyx_n_s_wrapper);
  Py_VISIT(traverse_module_state->__pyx_n_s_x);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1_);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_500);
  Py_VISIT(traverse_module_state->__pyx_int_222419149);
  Py_VISIT(traverse_module_state->__pyx_int_228825662);
  Py_VISIT(traverse_module_state->__pyx_int_238750788);
  Py_VISIT(traverse_module_state->__pyx_k__4);
  Py_VISIT(traverse_module_state->__pyx_k__7);
  Py_VISIT(traverse_module_state->__pyx_k__9);
  Py_VISIT(traverse_module_state->__pyx_k__11);
  Py_VISIT(traverse_module_state->__pyx_k__13);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__28);
  Py_VISIT(traverse_module_state->__pyx_tuple__30);
  Py_VISIT(traverse_module_state->__pyx_tuple__32);
  Py_VISIT(traverse_module_state->__pyx_tuple__33);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__38);
  Py_VISIT(traverse_module_state->__pyx_tuple__39);
  Py_VISIT(traverse_module_state->__pyx_tuple__43);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__58);
  Py_VISIT(traverse_module_state->__pyx_tuple__59);
  Py_VISIT(traverse_module_state->__pyx_tuple__63);
  Py_VISIT(traverse_module_state->__pyx_tuple__65);
  Py_VISIT(traverse_module_state->__pyx_tuple__74);
  Py_VISIT(traverse_module_state->__pyx_tuple__84);
  Py_VISIT(traverse_module_state->__pyx_tuple__86);
  Py_VISIT(traverse_module_state->__pyx_tuple__92);
  Py_VISIT(traverse_module_state->__pyx_codeobj__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__105);
  Py_VISIT(traverse_module_state->__pyx_tuple__109);
  Py_VISIT(traverse_module_state->__pyx_tuple__110);
  Py_VISIT(traverse_module_state->__pyx_tuple__120);
  Py_VISIT(traverse_module_state->__pyx_tuple__122);
  Py_VISIT(traverse_module_state->__pyx_tuple__149);
  Py_VISIT(traverse_module_state->__pyx_tuple__161);
  Py_VISIT(traverse_module_state->__pyx_codeobj__16);
  Py_VISIT(traverse_module_state->__pyx_codeobj__18);
  Py_VISIT(traverse_module_state->__pyx_codeobj__20);
  Py_VISIT(traverse_module_state->__pyx_codeobj__22);
  Py_VISIT(traverse_module_state->__pyx_codeobj__23);
  Py_VISIT(traverse_module_state->__pyx_codeobj__24);
  Py_VISIT(traverse_module_state->__pyx_codeobj__26);
  Py_VISIT(traverse_module_state->__pyx_codeobj__27);
  Py_VISIT(traverse_module_state->__pyx_codeobj__29);
  Py_VISIT(traverse_module_state->__pyx_codeobj__31);
  Py_VISIT(traverse_module_state->__pyx_codeobj__34);
  Py_VISIT(traverse_module_state->__pyx_codeobj__35);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__40);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__42);
  Py_VISIT(traverse_module_state->__pyx_codeobj__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__45);
  Py_VISIT(traverse_module_state->__pyx_codeobj__46);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__48);
  Py_VISIT(traverse_module_state->__pyx_codeobj__49);
  Py_VISIT(traverse_module_state->__pyx_codeobj__50);
  Py_VISIT(traverse_module_state->__pyx_codeobj__51);
  Py_VISIT(traverse_module_state->__pyx_codeobj__52);
  Py_VISIT(traverse_module_state->__pyx_codeobj__53);
  Py_VISIT(traverse_module_state->__pyx_codeobj__55);
  Py_VISIT(traverse_module_state->__pyx_codeobj__56);
  Py_VISIT(traverse_module_state->__pyx_codeobj__57);
  Py_VISIT(traverse_module_state->__pyx_codeobj__60);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  Py_VISIT(traverse_module_state->__pyx_codeobj__62);
  Py_VISIT(traverse_module_state->__pyx_codeobj__64);
  Py_VISIT(traverse_module_state->__pyx_codeobj__66);
  Py_VISIT(traverse_module_state->__pyx_codeobj__67);
  Py_VISIT(traverse_module_state->__pyx_codeobj__68);
  Py_VISIT(traverse_module_state->__pyx_codeobj__69);
  Py_VISIT(traverse_module_state->__pyx_codeobj__70);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__72);
  Py_VISIT(traverse_module_state->__pyx_codeobj__73);
  Py_VISIT(traverse_module_state->__pyx_codeobj__75);
  Py_VISIT(traverse_module_state->__pyx_codeobj__76);
  Py_VISIT(traverse_module_state->__pyx_codeobj__77);
  Py_VISIT(traverse_module_state->__pyx_codeobj__78);
  Py_VISIT(traverse_module_state->__pyx_codeobj__79);
  Py_VISIT(traverse_module_state->__pyx_codeobj__80);
  Py_VISIT(traverse_module_state->__pyx_codeobj__81);
  Py_VISIT(traverse_module_state->__pyx_codeobj__82);
  Py_VISIT(traverse_module_state->__pyx_codeobj__83);
  Py_VISIT(traverse_module_state->__pyx_codeobj__85);
  Py_VISIT(traverse_module_state->__pyx_codeobj__87);
  Py_VISIT(traverse_module_state->__pyx_codeobj__88);
  Py_VISIT(traverse_module_state->__pyx_codeobj__89);
  Py_VISIT(traverse_module_state->__pyx_codeobj__90);
  Py_VISIT(traverse_module_state->__pyx_codeobj__91);
  Py_VISIT(traverse_module_state->__pyx_codeobj__93);
  Py_VISIT(traverse_module_state->__pyx_codeobj__94);
  Py_VISIT(traverse_module_state->__pyx_codeobj__95);
  Py_VISIT(traverse_module_state->__pyx_codeobj__96);
  Py_VISIT(traverse_module_state->__pyx_codeobj__97);
  Py_VISIT(traverse_module_state->__pyx_codeobj__98);
  Py_VISIT(traverse_module_state->__pyx_codeobj__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__100);
  Py_VISIT(traverse_module_state->__pyx_codeobj__101);
  Py_VISIT(traverse_module_state->__pyx_codeobj__102);
  Py_VISIT(traverse_module_state->__pyx_codeobj__103);
  Py_VISIT(traverse_module_state->__pyx_codeobj__104);
  Py_VISIT(traverse_module_state->__pyx_codeobj__106);
  Py_VISIT(traverse_module_state->__pyx_codeobj__107);
  Py_VISIT(traverse_module_state->__pyx_codeobj__108);
  Py_VISIT(traverse_module_state->__pyx_codeobj__111);
  Py_VISIT(traverse_module_state->__pyx_codeobj__112);
  Py_VISIT(traverse_module_state->__pyx_codeobj__113);
  Py_VISIT(traverse_module_state->__pyx_codeobj__114);
  Py_VISIT(traverse_module_state->__pyx_codeobj__115);
  Py_VISIT(traverse_module_state->__pyx_codeobj__116);
  Py_VISIT(traverse_module_state->__pyx_codeobj__117);
  Py_VISIT(traverse_module_state->__pyx_codeobj__118);
  Py_VISIT(traverse_module_state->__pyx_codeobj__119);
  Py_VISIT(traverse_module_state->__pyx_codeobj__121);
  Py_VISIT(traverse_module_state->__pyx_codeobj__123);
  Py_VISIT(traverse_module_state->__pyx_codeobj__124);
  Py_VISIT(traverse_module_state->__pyx_codeobj__125);
  Py_VISIT(traverse_module_state->__pyx_codeobj__126);
  Py_VISIT(traverse_module_state->__pyx_codeobj__127);
  Py_VISIT(traverse_module_state->__pyx_codeobj__128);
  Py_VISIT(traverse_module_state->__pyx_codeobj__129);
  Py_VISIT(traverse_module_state->__pyx_codeobj__130);
  Py_VISIT(traverse_module_state->__pyx_codeobj__131);
  Py_VISIT(traverse_module_state->__pyx_codeobj__132);
  Py_VISIT(traverse_module_state->__pyx_codeobj__133);
  Py_VISIT(traverse_module_state->__pyx_codeobj__134);
  Py_VISIT(traverse_module_state->__pyx_codeobj__135);
  Py_VISIT(traverse_module_state->__pyx_codeobj__136);
  Py_VISIT(traverse_module_state->__pyx_codeobj__137);
  Py_VISIT(traverse_module_state->__pyx_codeobj__138);
  Py_VISIT(traverse_module_state->__pyx_codeobj__139);
  Py_VISIT(traverse_module_state->__pyx_codeobj__140);
  Py_VISIT(traverse_module_state->__pyx_codeobj__141);
  Py_VISIT(traverse_module_state->__pyx_codeobj__142);
  Py_VISIT(traverse_module_state->__pyx_codeobj__143);
  Py_VISIT(traverse_module_state->__pyx_codeobj__144);
  Py_VISIT(traverse_module_state->__pyx_codeobj__145);
  Py_VISIT(traverse_module_state->__pyx_codeobj__146);
  Py_VISIT(traverse_module_state->__pyx_codeobj__147);
  Py_VISIT(traverse_module_state->__pyx_codeobj__148);
  Py_VISIT(traverse_module_state->__pyx_codeobj__150);
  Py_VISIT(traverse_module_state->__pyx_codeobj__151);
  Py_VISIT(traverse_module_state->__pyx_codeobj__152);
  Py_VISIT(traverse_module_state->__pyx_codeobj__153);
  Py_VISIT(traverse_module_state->__pyx_codeobj__154);
  Py_VISIT(traverse_module_state->__pyx_codeobj__155);
  Py_VISIT(traverse_module_state->__pyx_codeobj__156);
  Py_VISIT(traverse_module_state->__pyx_codeobj__157);
  Py_VISIT(traverse_module_state->__pyx_codeobj__158);
  Py_VISIT(traverse_module_state->__pyx_codeobj__159);
  Py_VISIT(traverse_module_state->__pyx_codeobj__160);
  Py_VISIT(traverse_module_state->__pyx_codeobj__162);
  Py_VISIT(traverse_module_state->__pyx_codeobj__163);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_9networkit_4base__CythonParentClass __pyx_mstate_global->__pyx_ptype_9networkit_4base__CythonParentClass
#define __pyx_ptype_9networkit_4base_Algorithm __pyx_mstate_global->__pyx_ptype_9networkit_4base_Algorithm
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_9networkit_10structures_Cover __pyx_mstate_global->__pyx_ptype_9networkit_10structures_Cover
#define __pyx_ptype_9networkit_10structures_Partition __pyx_mstate_global->__pyx_ptype_9networkit_10structures_Partition
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_9networkit_8dynamics_GraphEvent __pyx_mstate_global->__pyx_ptype_9networkit_8dynamics_GraphEvent
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_9networkit_5graph_Graph __pyx_mstate_global->__pyx_ptype_9networkit_5graph_Graph
#define __pyx_ptype_9networkit_5graph_NodeIntAttribute __pyx_mstate_global->__pyx_ptype_9networkit_5graph_NodeIntAttribute
#define __pyx_ptype_9networkit_5graph_NodeDoubleAttribute __pyx_mstate_global->__pyx_ptype_9networkit_5graph_NodeDoubleAttribute
#define __pyx_ptype_9networkit_5graph_NodeStringAttribute __pyx_mstate_global->__pyx_ptype_9networkit_5graph_NodeStringAttribute
#define __pyx_ptype_9networkit_5graph_EdgeIntAttribute __pyx_mstate_global->__pyx_ptype_9networkit_5graph_EdgeIntAttribute
#define __pyx_ptype_9networkit_5graph_EdgeDoubleAttribute __pyx_mstate_global->__pyx_ptype_9networkit_5graph_EdgeDoubleAttribute
#define __pyx_ptype_9networkit_5graph_EdgeStringAttribute __pyx_mstate_global->__pyx_ptype_9networkit_5graph_EdgeStringAttribute
#define __pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest __pyx_mstate_global->__pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest
#define __pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest __pyx_mstate_global->__pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_9networkit_8matching_Matching __pyx_mstate_global->__pyx_ptype_9networkit_8matching_Matching
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_9networkit_8distance_STSP __pyx_mstate_global->__pyx_type_9networkit_8distance_STSP
#define __pyx_type_9networkit_8distance_SSSP __pyx_mstate_global->__pyx_type_9networkit_8distance_SSSP
#define __pyx_type_9networkit_8distance_DynSSSP __pyx_mstate_global->__pyx_type_9networkit_8distance_DynSSSP
#define __pyx_type_9networkit_8distance_AdamicAdarDistance __pyx_mstate_global->__pyx_type_9networkit_8distance_AdamicAdarDistance
#define __pyx_type_9networkit_8distance_Diameter __pyx_mstate_global->__pyx_type_9networkit_8distance_Diameter
#define __pyx_type_9networkit_8distance_Eccentricity __pyx_mstate_global->__pyx_type_9networkit_8distance_Eccentricity
#define __pyx_type_9networkit_8distance_EffectiveDiameterApproximation __pyx_mstate_global->__pyx_type_9networkit_8distance_EffectiveDiameterApproximation
#define __pyx_type_9networkit_8distance_EffectiveDiameter __pyx_mstate_global->__pyx_type_9networkit_8distance_EffectiveDiameter
#define __pyx_type_9networkit_8distance_HopPlotApproximation __pyx_mstate_global->__pyx_type_9networkit_8distance_HopPlotApproximation
#define __pyx_type_9networkit_8distance_NeighborhoodFunction __pyx_mstate_global->__pyx_type_9networkit_8distance_NeighborhoodFunction
#define __pyx_type_9networkit_8distance_NeighborhoodFunctionApproximation __pyx_mstate_global->__pyx_type_9networkit_8distance_NeighborhoodFunctionApproximation
#define __pyx_type_9networkit_8distance_Volume __pyx_mstate_global->__pyx_type_9networkit_8distance_Volume
#define __pyx_type_9networkit_8distance_JaccardDistance __pyx_mstate_global->__pyx_type_9networkit_8distance_JaccardDistance
#define __pyx_type_9networkit_8distance_JaccardSimilarityAttributizer __pyx_mstate_global->__pyx_type_9networkit_8distance_JaccardSimilarityAttributizer
#define __pyx_type_9networkit_8distance_AlgebraicDistance __pyx_mstate_global->__pyx_type_9networkit_8distance_AlgebraicDistance
#define __pyx_type_9networkit_8distance_CommuteTimeDistance __pyx_mstate_global->__pyx_type_9networkit_8distance_CommuteTimeDistance
#define __pyx_type_9networkit_8distance_NeighborhoodFunctionHeuristic __pyx_mstate_global->__pyx_type_9networkit_8distance_NeighborhoodFunctionHeuristic
#define __pyx_type_9networkit_8distance_APSP __pyx_mstate_global->__pyx_type_9networkit_8distance_APSP
#define __pyx_type_9networkit_8distance_SPSP __pyx_mstate_global->__pyx_type_9networkit_8distance_SPSP
#define __pyx_type_9networkit_8distance_DynAPSP __pyx_mstate_global->__pyx_type_9networkit_8distance_DynAPSP
#define __pyx_type_9networkit_8distance_BFS __pyx_mstate_global->__pyx_type_9networkit_8distance_BFS
#define __pyx_type_9networkit_8distance_Dijkstra __pyx_mstate_global->__pyx_type_9networkit_8distance_Dijkstra
#define __pyx_type_9networkit_8distance_MultiTargetBFS __pyx_mstate_global->__pyx_type_9networkit_8distance_MultiTargetBFS
#define __pyx_type_9networkit_8distance_MultiTargetDijkstra __pyx_mstate_global->__pyx_type_9networkit_8distance_MultiTargetDijkstra
#define __pyx_type_9networkit_8distance_DynBFS __pyx_mstate_global->__pyx_type_9networkit_8distance_DynBFS
#define __pyx_type_9networkit_8distance_DynDijkstra __pyx_mstate_global->__pyx_type_9networkit_8distance_DynDijkstra
#define __pyx_type_9networkit_8distance_BidirectionalBFS __pyx_mstate_global->__pyx_type_9networkit_8distance_BidirectionalBFS
#define __pyx_type_9networkit_8distance_BidirectionalDijkstra __pyx_mstate_global->__pyx_type_9networkit_8distance_BidirectionalDijkstra
#define __pyx_type_9networkit_8distance_AStar __pyx_mstate_global->__pyx_type_9networkit_8distance_AStar
#define __pyx_type_9networkit_8distance_AllSimplePaths __pyx_mstate_global->__pyx_type_9networkit_8distance_AllSimplePaths
#define __pyx_type_9networkit_8distance_ReverseBFS __pyx_mstate_global->__pyx_type_9networkit_8distance_ReverseBFS
#define __pyx_type_9networkit_8distance_PrunedLandmarkLabeling __pyx_mstate_global->__pyx_type_9networkit_8distance_PrunedLandmarkLabeling
#define __pyx_type_9networkit_8distance_DynPrunedLandmarkLabeling __pyx_mstate_global->__pyx_type_9networkit_8distance_DynPrunedLandmarkLabeling
#define __pyx_type_9networkit_8distance___pyx_scope_struct__volume __pyx_mstate_global->__pyx_type_9networkit_8distance___pyx_scope_struct__volume
#define __pyx_type_9networkit_8distance___pyx_scope_struct_1_genexpr __pyx_mstate_global->__pyx_type_9networkit_8distance___pyx_scope_struct_1_genexpr
#endif
#define __pyx_ptype_9networkit_8distance_STSP __pyx_mstate_global->__pyx_ptype_9networkit_8distance_STSP
#define __pyx_ptype_9networkit_8distance_SSSP __pyx_mstate_global->__pyx_ptype_9networkit_8distance_SSSP
#define __pyx_ptype_9networkit_8distance_DynSSSP __pyx_mstate_global->__pyx_ptype_9networkit_8distance_DynSSSP
#define __pyx_ptype_9networkit_8distance_AdamicAdarDistance __pyx_mstate_global->__pyx_ptype_9networkit_8distance_AdamicAdarDistance
#define __pyx_ptype_9networkit_8distance_Diameter __pyx_mstate_global->__pyx_ptype_9networkit_8distance_Diameter
#define __pyx_ptype_9networkit_8distance_Eccentricity __pyx_mstate_global->__pyx_ptype_9networkit_8distance_Eccentricity
#define __pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation __pyx_mstate_global->__pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation
#define __pyx_ptype_9networkit_8distance_EffectiveDiameter __pyx_mstate_global->__pyx_ptype_9networkit_8distance_EffectiveDiameter
#define __pyx_ptype_9networkit_8distance_HopPlotApproximation __pyx_mstate_global->__pyx_ptype_9networkit_8distance_HopPlotApproximation
#define __pyx_ptype_9networkit_8distance_NeighborhoodFunction __pyx_mstate_global->__pyx_ptype_9networkit_8distance_NeighborhoodFunction
#define __pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation __pyx_mstate_global->__pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation
#define __pyx_ptype_9networkit_8distance_Volume __pyx_mstate_global->__pyx_ptype_9networkit_8distance_Volume
#define __pyx_ptype_9networkit_8distance_JaccardDistance __pyx_mstate_global->__pyx_ptype_9networkit_8distance_JaccardDistance
#define __pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer __pyx_mstate_global->__pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer
#define __pyx_ptype_9networkit_8distance_AlgebraicDistance __pyx_mstate_global->__pyx_ptype_9networkit_8distance_AlgebraicDistance
#define __pyx_ptype_9networkit_8distance_CommuteTimeDistance __pyx_mstate_global->__pyx_ptype_9networkit_8distance_CommuteTimeDistance
#define __pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic __pyx_mstate_global->__pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic
#define __pyx_ptype_9networkit_8distance_APSP __pyx_mstate_global->__pyx_ptype_9networkit_8distance_APSP
#define __pyx_ptype_9networkit_8distance_SPSP __pyx_mstate_global->__pyx_ptype_9networkit_8distance_SPSP
#define __pyx_ptype_9networkit_8distance_DynAPSP __pyx_mstate_global->__pyx_ptype_9networkit_8distance_DynAPSP
#define __pyx_ptype_9networkit_8distance_BFS __pyx_mstate_global->__pyx_ptype_9networkit_8distance_BFS
#define __pyx_ptype_9networkit_8distance_Dijkstra __pyx_mstate_global->__pyx_ptype_9networkit_8distance_Dijkstra
#define __pyx_ptype_9networkit_8distance_MultiTargetBFS __pyx_mstate_global->__pyx_ptype_9networkit_8distance_MultiTargetBFS
#define __pyx_ptype_9networkit_8distance_MultiTargetDijkstra __pyx_mstate_global->__pyx_ptype_9networkit_8distance_MultiTargetDijkstra
#define __pyx_ptype_9networkit_8distance_DynBFS __pyx_mstate_global->__pyx_ptype_9networkit_8distance_DynBFS
#define __pyx_ptype_9networkit_8distance_DynDijkstra __pyx_mstate_global->__pyx_ptype_9networkit_8distance_DynDijkstra
#define __pyx_ptype_9networkit_8distance_BidirectionalBFS __pyx_mstate_global->__pyx_ptype_9networkit_8distance_BidirectionalBFS
#define __pyx_ptype_9networkit_8distance_BidirectionalDijkstra __pyx_mstate_global->__pyx_ptype_9networkit_8distance_BidirectionalDijkstra
#define __pyx_ptype_9networkit_8distance_AStar __pyx_mstate_global->__pyx_ptype_9networkit_8distance_AStar
#define __pyx_ptype_9networkit_8distance_AllSimplePaths __pyx_mstate_global->__pyx_ptype_9networkit_8distance_AllSimplePaths
#define __pyx_ptype_9networkit_8distance_ReverseBFS __pyx_mstate_global->__pyx_ptype_9networkit_8distance_ReverseBFS
#define __pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling __pyx_mstate_global->__pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling
#define __pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling __pyx_mstate_global->__pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling
#define __pyx_ptype_9networkit_8distance___pyx_scope_struct__volume __pyx_mstate_global->__pyx_ptype_9networkit_8distance___pyx_scope_struct__volume
#define __pyx_ptype_9networkit_8distance___pyx_scope_struct_1_genexpr __pyx_mstate_global->__pyx_ptype_9networkit_8distance___pyx_scope_struct_1_genexpr
#define __pyx_n_s_APSP __pyx_mstate_global->__pyx_n_s_APSP
#define __pyx_n_s_APSP___reduce_cython __pyx_mstate_global->__pyx_n_s_APSP___reduce_cython
#define __pyx_n_s_APSP___setstate_cython __pyx_mstate_global->__pyx_n_s_APSP___setstate_cython
#define __pyx_n_s_APSP_getDistance __pyx_mstate_global->__pyx_n_s_APSP_getDistance
#define __pyx_n_s_APSP_getDistances __pyx_mstate_global->__pyx_n_s_APSP_getDistances
#define __pyx_n_s_AStar __pyx_mstate_global->__pyx_n_s_AStar
#define __pyx_n_s_AStar___reduce_cython __pyx_mstate_global->__pyx_n_s_AStar___reduce_cython
#define __pyx_n_s_AStar___setstate_cython __pyx_mstate_global->__pyx_n_s_AStar___setstate_cython
#define __pyx_n_s_AUTOMATIC __pyx_mstate_global->__pyx_n_s_AUTOMATIC
#define __pyx_n_s_AdamicAdarDistance __pyx_mstate_global->__pyx_n_s_AdamicAdarDistance
#define __pyx_n_s_AdamicAdarDistance___reduce_cyth __pyx_mstate_global->__pyx_n_s_AdamicAdarDistance___reduce_cyth
#define __pyx_n_s_AdamicAdarDistance___setstate_cy __pyx_mstate_global->__pyx_n_s_AdamicAdarDistance___setstate_cy
#define __pyx_n_s_AdamicAdarDistance_distance __pyx_mstate_global->__pyx_n_s_AdamicAdarDistance_distance
#define __pyx_n_s_AdamicAdarDistance_getAttribute __pyx_mstate_global->__pyx_n_s_AdamicAdarDistance_getAttribute
#define __pyx_n_s_AdamicAdarDistance_preprocess __pyx_mstate_global->__pyx_n_s_AdamicAdarDistance_preprocess
#define __pyx_n_s_AlgebraicDistance __pyx_mstate_global->__pyx_n_s_AlgebraicDistance
#define __pyx_n_s_AlgebraicDistance___reduce_cytho __pyx_mstate_global->__pyx_n_s_AlgebraicDistance___reduce_cytho
#define __pyx_n_s_AlgebraicDistance___setstate_cyt __pyx_mstate_global->__pyx_n_s_AlgebraicDistance___setstate_cyt
#define __pyx_n_s_AlgebraicDistance_distance __pyx_mstate_global->__pyx_n_s_AlgebraicDistance_distance
#define __pyx_n_s_AlgebraicDistance_getEdgeScores __pyx_mstate_global->__pyx_n_s_AlgebraicDistance_getEdgeScores
#define __pyx_n_s_AlgebraicDistance_preprocess __pyx_mstate_global->__pyx_n_s_AlgebraicDistance_preprocess
#define __pyx_n_s_AllSimplePaths __pyx_mstate_global->__pyx_n_s_AllSimplePaths
#define __pyx_n_s_AllSimplePaths___reduce_cython __pyx_mstate_global->__pyx_n_s_AllSimplePaths___reduce_cython
#define __pyx_n_s_AllSimplePaths___setstate_cython __pyx_mstate_global->__pyx_n_s_AllSimplePaths___setstate_cython
#define __pyx_n_s_AllSimplePaths_forAllSimplePaths __pyx_mstate_global->__pyx_n_s_AllSimplePaths_forAllSimplePaths
#define __pyx_n_s_AllSimplePaths_getAllSimplePaths __pyx_mstate_global->__pyx_n_s_AllSimplePaths_getAllSimplePaths
#define __pyx_n_s_AllSimplePaths_numberOfSimplePat __pyx_mstate_global->__pyx_n_s_AllSimplePaths_numberOfSimplePat
#define __pyx_n_s_AllSimplePaths_run __pyx_mstate_global->__pyx_n_s_AllSimplePaths_run
#define __pyx_kp_u_An_Exception_occurred_aborting_e __pyx_mstate_global->__pyx_kp_u_An_Exception_occurred_aborting_e
#define __pyx_n_s_Automatic __pyx_mstate_global->__pyx_n_s_Automatic
#define __pyx_n_s_BFS __pyx_mstate_global->__pyx_n_s_BFS
#define __pyx_n_s_BFS___reduce_cython __pyx_mstate_global->__pyx_n_s_BFS___reduce_cython
#define __pyx_n_s_BFS___setstate_cython __pyx_mstate_global->__pyx_n_s_BFS___setstate_cython
#define __pyx_n_s_BidirectionalBFS __pyx_mstate_global->__pyx_n_s_BidirectionalBFS
#define __pyx_n_s_BidirectionalBFS___reduce_cython __pyx_mstate_global->__pyx_n_s_BidirectionalBFS___reduce_cython
#define __pyx_n_s_BidirectionalBFS___setstate_cyth __pyx_mstate_global->__pyx_n_s_BidirectionalBFS___setstate_cyth
#define __pyx_n_s_BidirectionalDijkstra __pyx_mstate_global->__pyx_n_s_BidirectionalDijkstra
#define __pyx_n_s_BidirectionalDijkstra___reduce_c __pyx_mstate_global->__pyx_n_s_BidirectionalDijkstra___reduce_c
#define __pyx_n_s_BidirectionalDijkstra___setstate __pyx_mstate_global->__pyx_n_s_BidirectionalDijkstra___setstate
#define __pyx_n_s_CommuteTimeDistance __pyx_mstate_global->__pyx_n_s_CommuteTimeDistance
#define __pyx_n_s_CommuteTimeDistance___reduce_cyt __pyx_mstate_global->__pyx_n_s_CommuteTimeDistance___reduce_cyt
#define __pyx_n_s_CommuteTimeDistance___setstate_c __pyx_mstate_global->__pyx_n_s_CommuteTimeDistance___setstate_c
#define __pyx_n_s_CommuteTimeDistance_distance __pyx_mstate_global->__pyx_n_s_CommuteTimeDistance_distance
#define __pyx_n_s_CommuteTimeDistance_runApproxima __pyx_mstate_global->__pyx_n_s_CommuteTimeDistance_runApproxima
#define __pyx_n_s_CommuteTimeDistance_runParallelA __pyx_mstate_global->__pyx_n_s_CommuteTimeDistance_runParallelA
#define __pyx_n_s_CommuteTimeDistance_runSinglePai __pyx_mstate_global->__pyx_n_s_CommuteTimeDistance_runSinglePai
#define __pyx_n_s_CommuteTimeDistance_runSingleSou __pyx_mstate_global->__pyx_n_s_CommuteTimeDistance_runSingleSou
#define __pyx_n_s_Diameter __pyx_mstate_global->__pyx_n_s_Diameter
#define __pyx_n_s_DiameterAlgo __pyx_mstate_global->__pyx_n_s_DiameterAlgo
#define __pyx_n_s_Diameter___reduce_cython __pyx_mstate_global->__pyx_n_s_Diameter___reduce_cython
#define __pyx_n_s_Diameter___setstate_cython __pyx_mstate_global->__pyx_n_s_Diameter___setstate_cython
#define __pyx_n_s_Diameter_getDiameter __pyx_mstate_global->__pyx_n_s_Diameter_getDiameter
#define __pyx_n_s_Dijkstra __pyx_mstate_global->__pyx_n_s_Dijkstra
#define __pyx_n_s_Dijkstra___reduce_cython __pyx_mstate_global->__pyx_n_s_Dijkstra___reduce_cython
#define __pyx_n_s_Dijkstra___setstate_cython __pyx_mstate_global->__pyx_n_s_Dijkstra___setstate_cython
#define __pyx_n_s_DynAPSP __pyx_mstate_global->__pyx_n_s_DynAPSP
#define __pyx_n_s_DynAPSP___reduce_cython __pyx_mstate_global->__pyx_n_s_DynAPSP___reduce_cython
#define __pyx_n_s_DynAPSP___setstate_cython __pyx_mstate_global->__pyx_n_s_DynAPSP___setstate_cython
#define __pyx_n_s_DynAlgorithm __pyx_mstate_global->__pyx_n_s_DynAlgorithm
#define __pyx_n_s_DynBFS __pyx_mstate_global->__pyx_n_s_DynBFS
#define __pyx_n_s_DynBFS___reduce_cython __pyx_mstate_global->__pyx_n_s_DynBFS___reduce_cython
#define __pyx_n_s_DynBFS___setstate_cython __pyx_mstate_global->__pyx_n_s_DynBFS___setstate_cython
#define __pyx_n_s_DynDijkstra __pyx_mstate_global->__pyx_n_s_DynDijkstra
#define __pyx_n_s_DynDijkstra___reduce_cython __pyx_mstate_global->__pyx_n_s_DynDijkstra___reduce_cython
#define __pyx_n_s_DynDijkstra___setstate_cython __pyx_mstate_global->__pyx_n_s_DynDijkstra___setstate_cython
#define __pyx_n_s_DynPrunedLandmarkLabeling __pyx_mstate_global->__pyx_n_s_DynPrunedLandmarkLabeling
#define __pyx_n_s_DynPrunedLandmarkLabeling___redu __pyx_mstate_global->__pyx_n_s_DynPrunedLandmarkLabeling___redu
#define __pyx_n_s_DynPrunedLandmarkLabeling___sets __pyx_mstate_global->__pyx_n_s_DynPrunedLandmarkLabeling___sets
#define __pyx_n_s_DynPrunedLandmarkLabeling_query __pyx_mstate_global->__pyx_n_s_DynPrunedLandmarkLabeling_query
#define __pyx_n_s_DynSSSP __pyx_mstate_global->__pyx_n_s_DynSSSP
#define __pyx_n_s_DynSSSP___reduce_cython __pyx_mstate_global->__pyx_n_s_DynSSSP___reduce_cython
#define __pyx_n_s_DynSSSP___setstate_cython __pyx_mstate_global->__pyx_n_s_DynSSSP___setstate_cython
#define __pyx_n_s_DynSSSP_modified __pyx_mstate_global->__pyx_n_s_DynSSSP_modified
#define __pyx_n_s_DynSSSP_setTargetNode __pyx_mstate_global->__pyx_n_s_DynSSSP_setTargetNode
#define __pyx_n_s_ESTIMATED_PEDANTIC __pyx_mstate_global->__pyx_n_s_ESTIMATED_PEDANTIC
#define __pyx_n_s_ESTIMATED_RANGE __pyx_mstate_global->__pyx_n_s_ESTIMATED_RANGE
#define __pyx_n_s_ESTIMATED_SAMPLES __pyx_mstate_global->__pyx_n_s_ESTIMATED_SAMPLES
#define __pyx_n_s_EXACT __pyx_mstate_global->__pyx_n_s_EXACT
#define __pyx_n_s_Eccentricity __pyx_mstate_global->__pyx_n_s_Eccentricity
#define __pyx_n_s_Eccentricity___reduce_cython __pyx_mstate_global->__pyx_n_s_Eccentricity___reduce_cython
#define __pyx_n_s_Eccentricity___setstate_cython __pyx_mstate_global->__pyx_n_s_Eccentricity___setstate_cython
#define __pyx_n_s_Eccentricity_getValue __pyx_mstate_global->__pyx_n_s_Eccentricity_getValue
#define __pyx_n_s_EffectiveDiameter __pyx_mstate_global->__pyx_n_s_EffectiveDiameter
#define __pyx_n_s_EffectiveDiameterApproximation __pyx_mstate_global->__pyx_n_s_EffectiveDiameterApproximation
#define __pyx_n_s_EffectiveDiameterApproximation_2 __pyx_mstate_global->__pyx_n_s_EffectiveDiameterApproximation_2
#define __pyx_n_s_EffectiveDiameterApproximation_3 __pyx_mstate_global->__pyx_n_s_EffectiveDiameterApproximation_3
#define __pyx_n_s_EffectiveDiameterApproximation_g __pyx_mstate_global->__pyx_n_s_EffectiveDiameterApproximation_g
#define __pyx_n_s_EffectiveDiameter___reduce_cytho __pyx_mstate_global->__pyx_n_s_EffectiveDiameter___reduce_cytho
#define __pyx_n_s_EffectiveDiameter___setstate_cyt __pyx_mstate_global->__pyx_n_s_EffectiveDiameter___setstate_cyt
#define __pyx_n_s_EffectiveDiameter_getEffectiveDi __pyx_mstate_global->__pyx_n_s_EffectiveDiameter_getEffectiveDi
#define __pyx_kp_u_Error_you_may_not_use_DynSSSP_di __pyx_mstate_global->__pyx_kp_u_Error_you_may_not_use_DynSSSP_di
#define __pyx_kp_u_Error_you_may_not_use_SSSP_direc __pyx_mstate_global->__pyx_kp_u_Error_you_may_not_use_SSSP_direc
#define __pyx_kp_u_Error_you_may_not_use_STSP_direc __pyx_mstate_global->__pyx_kp_u_Error_you_may_not_use_STSP_direc
#define __pyx_n_s_EstimatedPedantic __pyx_mstate_global->__pyx_n_s_EstimatedPedantic
#define __pyx_n_s_EstimatedRange __pyx_mstate_global->__pyx_n_s_EstimatedRange
#define __pyx_n_s_EstimatedSamples __pyx_mstate_global->__pyx_n_s_EstimatedSamples
#define __pyx_n_s_Exact __pyx_mstate_global->__pyx_n_s_Exact
#define __pyx_n_s_G __pyx_mstate_global->__pyx_n_s_G
#define __pyx_n_s_HopPlotApproximation __pyx_mstate_global->__pyx_n_s_HopPlotApproximation
#define __pyx_n_s_HopPlotApproximation___reduce_cy __pyx_mstate_global->__pyx_n_s_HopPlotApproximation___reduce_cy
#define __pyx_n_s_HopPlotApproximation___setstate __pyx_mstate_global->__pyx_n_s_HopPlotApproximation___setstate
#define __pyx_n_s_HopPlotApproximation_getHopPlot __pyx_mstate_global->__pyx_n_s_HopPlotApproximation_getHopPlot
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0
#define __pyx_n_s_JaccardDistance __pyx_mstate_global->__pyx_n_s_JaccardDistance
#define __pyx_n_s_JaccardDistance___reduce_cython __pyx_mstate_global->__pyx_n_s_JaccardDistance___reduce_cython
#define __pyx_n_s_JaccardDistance___setstate_cytho __pyx_mstate_global->__pyx_n_s_JaccardDistance___setstate_cytho
#define __pyx_n_s_JaccardDistance_getAttribute __pyx_mstate_global->__pyx_n_s_JaccardDistance_getAttribute
#define __pyx_n_s_JaccardSimilarityAttributizer __pyx_mstate_global->__pyx_n_s_JaccardSimilarityAttributizer
#define __pyx_n_s_JaccardSimilarityAttributizer_2 __pyx_mstate_global->__pyx_n_s_JaccardSimilarityAttributizer_2
#define __pyx_n_s_JaccardSimilarityAttributizer_3 __pyx_mstate_global->__pyx_n_s_JaccardSimilarityAttributizer_3
#define __pyx_n_s_JaccardSimilarityAttributizer_ge __pyx_mstate_global->__pyx_n_s_JaccardSimilarityAttributizer_ge
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_n_s_MultiTargetBFS __pyx_mstate_global->__pyx_n_s_MultiTargetBFS
#define __pyx_n_s_MultiTargetBFS___reduce_cython __pyx_mstate_global->__pyx_n_s_MultiTargetBFS___reduce_cython
#define __pyx_n_s_MultiTargetBFS___setstate_cython __pyx_mstate_global->__pyx_n_s_MultiTargetBFS___setstate_cython
#define __pyx_n_s_MultiTargetDijkstra __pyx_mstate_global->__pyx_n_s_MultiTargetDijkstra
#define __pyx_n_s_MultiTargetDijkstra___reduce_cyt __pyx_mstate_global->__pyx_n_s_MultiTargetDijkstra___reduce_cyt
#define __pyx_n_s_MultiTargetDijkstra___setstate_c __pyx_mstate_global->__pyx_n_s_MultiTargetDijkstra___setstate_c
#define __pyx_n_s_NeighborhoodFunction __pyx_mstate_global->__pyx_n_s_NeighborhoodFunction
#define __pyx_n_s_NeighborhoodFunctionApproximatio __pyx_mstate_global->__pyx_n_s_NeighborhoodFunctionApproximatio
#define __pyx_n_s_NeighborhoodFunctionApproximatio_2 __pyx_mstate_global->__pyx_n_s_NeighborhoodFunctionApproximatio_2
#define __pyx_n_s_NeighborhoodFunctionApproximatio_3 __pyx_mstate_global->__pyx_n_s_NeighborhoodFunctionApproximatio_3
#define __pyx_n_s_NeighborhoodFunctionApproximatio_4 __pyx_mstate_global->__pyx_n_s_NeighborhoodFunctionApproximatio_4
#define __pyx_n_s_NeighborhoodFunctionHeuristic __pyx_mstate_global->__pyx_n_s_NeighborhoodFunctionHeuristic
#define __pyx_n_s_NeighborhoodFunctionHeuristic_2 __pyx_mstate_global->__pyx_n_s_NeighborhoodFunctionHeuristic_2
#define __pyx_n_s_NeighborhoodFunctionHeuristic_3 __pyx_mstate_global->__pyx_n_s_NeighborhoodFunctionHeuristic_3
#define __pyx_n_s_NeighborhoodFunctionHeuristic_ge __pyx_mstate_global->__pyx_n_s_NeighborhoodFunctionHeuristic_ge
#define __pyx_n_s_NeighborhoodFunction___reduce_cy __pyx_mstate_global->__pyx_n_s_NeighborhoodFunction___reduce_cy
#define __pyx_n_s_NeighborhoodFunction___setstate __pyx_mstate_global->__pyx_n_s_NeighborhoodFunction___setstate
#define __pyx_n_s_NeighborhoodFunction_getNeighbor __pyx_mstate_global->__pyx_n_s_NeighborhoodFunction_getNeighbor
#define __pyx_n_s_PickleError __pyx_mstate_global->__pyx_n_s_PickleError
#define __pyx_n_s_PrunedLandmarkLabeling __pyx_mstate_global->__pyx_n_s_PrunedLandmarkLabeling
#define __pyx_n_s_PrunedLandmarkLabeling___reduce __pyx_mstate_global->__pyx_n_s_PrunedLandmarkLabeling___reduce
#define __pyx_n_s_PrunedLandmarkLabeling___setstat __pyx_mstate_global->__pyx_n_s_PrunedLandmarkLabeling___setstat
#define __pyx_n_s_PrunedLandmarkLabeling_query __pyx_mstate_global->__pyx_n_s_PrunedLandmarkLabeling_query
#define __pyx_n_s_RANDOM __pyx_mstate_global->__pyx_n_s_RANDOM
#define __pyx_n_s_ReverseBFS __pyx_mstate_global->__pyx_n_s_ReverseBFS
#define __pyx_n_s_ReverseBFS___reduce_cython __pyx_mstate_global->__pyx_n_s_ReverseBFS___reduce_cython
#define __pyx_n_s_ReverseBFS___setstate_cython __pyx_mstate_global->__pyx_n_s_ReverseBFS___setstate_cython
#define __pyx_n_s_RuntimeError __pyx_mstate_global->__pyx_n_s_RuntimeError
#define __pyx_n_s_SPLIT __pyx_mstate_global->__pyx_n_s_SPLIT
#define __pyx_n_s_SPSP __pyx_mstate_global->__pyx_n_s_SPSP
#define __pyx_n_s_SPSP___reduce_cython __pyx_mstate_global->__pyx_n_s_SPSP___reduce_cython
#define __pyx_n_s_SPSP___setstate_cython __pyx_mstate_global->__pyx_n_s_SPSP___setstate_cython
#define __pyx_n_s_SPSP_getDistance __pyx_mstate_global->__pyx_n_s_SPSP_getDistance
#define __pyx_n_s_SPSP_getDistances __pyx_mstate_global->__pyx_n_s_SPSP_getDistances
#define __pyx_n_s_SPSP_setSources __pyx_mstate_global->__pyx_n_s_SPSP_setSources
#define __pyx_n_s_SPSP_setTargets __pyx_mstate_global->__pyx_n_s_SPSP_setTargets
#define __pyx_n_s_SSSP __pyx_mstate_global->__pyx_n_s_SSSP
#define __pyx_n_s_SSSP___reduce_cython __pyx_mstate_global->__pyx_n_s_SSSP___reduce_cython
#define __pyx_n_s_SSSP___setstate_cython __pyx_mstate_global->__pyx_n_s_SSSP___setstate_cython
#define __pyx_n_s_SSSP_distance __pyx_mstate_global->__pyx_n_s_SSSP_distance
#define __pyx_n_s_SSSP_getDistances __pyx_mstate_global->__pyx_n_s_SSSP_getDistances
#define __pyx_n_s_SSSP_getNodesSortedByDistance __pyx_mstate_global->__pyx_n_s_SSSP_getNodesSortedByDistance
#define __pyx_n_s_SSSP_getPath __pyx_mstate_global->__pyx_n_s_SSSP_getPath
#define __pyx_n_s_SSSP_getPaths __pyx_mstate_global->__pyx_n_s_SSSP_getPaths
#define __pyx_n_s_SSSP_getPredecessors __pyx_mstate_global->__pyx_n_s_SSSP_getPredecessors
#define __pyx_n_s_SSSP_numberOfPaths __pyx_mstate_global->__pyx_n_s_SSSP_numberOfPaths
#define __pyx_n_s_SSSP_setSource __pyx_mstate_global->__pyx_n_s_SSSP_setSource
#define __pyx_n_s_SSSP_setTarget __pyx_mstate_global->__pyx_n_s_SSSP_setTarget
#define __pyx_n_s_STSP __pyx_mstate_global->__pyx_n_s_STSP
#define __pyx_n_s_STSP___reduce_cython __pyx_mstate_global->__pyx_n_s_STSP___reduce_cython
#define __pyx_n_s_STSP___setstate_cython __pyx_mstate_global->__pyx_n_s_STSP___setstate_cython
#define __pyx_n_s_STSP_getDistance __pyx_mstate_global->__pyx_n_s_STSP_getDistance
#define __pyx_n_s_STSP_getDistances __pyx_mstate_global->__pyx_n_s_STSP_getDistances
#define __pyx_n_s_STSP_getPath __pyx_mstate_global->__pyx_n_s_STSP_getPath
#define __pyx_n_s_STSP_getPredecessors __pyx_mstate_global->__pyx_n_s_STSP_getPredecessors
#define __pyx_n_s_STSP_setSource __pyx_mstate_global->__pyx_n_s_STSP_setSource
#define __pyx_n_s_STSP_setTarget __pyx_mstate_global->__pyx_n_s_STSP_setTarget
#define __pyx_n_s_STSP_setTargets __pyx_mstate_global->__pyx_n_s_STSP_setTargets
#define __pyx_n_s_SelectionStrategy __pyx_mstate_global->__pyx_n_s_SelectionStrategy
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s_Volume __pyx_mstate_global->__pyx_n_s_Volume
#define __pyx_n_s_Volume___reduce_cython __pyx_mstate_global->__pyx_n_s_Volume___reduce_cython
#define __pyx_n_s_Volume___setstate_cython __pyx_mstate_global->__pyx_n_s_Volume___setstate_cython
#define __pyx_n_s_Volume_volume __pyx_mstate_global->__pyx_n_s_Volume_volume
#define __pyx_kp_u__12 __pyx_mstate_global->__pyx_kp_u__12
#define __pyx_n_s__164 __pyx_mstate_global->__pyx_n_s__164
#define __pyx_n_s_algo __pyx_mstate_global->__pyx_n_s_algo
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_n_s_asarray __pyx_mstate_global->__pyx_n_s_asarray
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_callback __pyx_mstate_global->__pyx_n_s_callback
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_close __pyx_mstate_global->__pyx_n_s_close
#define __pyx_n_s_cutoff __pyx_mstate_global->__pyx_n_s_cutoff
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_dict_2 __pyx_mstate_global->__pyx_n_s_dict_2
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_distance __pyx_mstate_global->__pyx_n_s_distance
#define __pyx_n_s_distances __pyx_mstate_global->__pyx_n_s_distances
#define __pyx_n_s_doc __pyx_mstate_global->__pyx_n_s_doc
#define __pyx_n_s_dynbase __pyx_mstate_global->__pyx_n_s_dynbase
#define __pyx_n_s_elem __pyx_mstate_global->__pyx_n_s_elem
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_error __pyx_mstate_global->__pyx_n_s_error
#define __pyx_n_s_forAllSimplePaths __pyx_mstate_global->__pyx_n_s_forAllSimplePaths
#define __pyx_n_s_format __pyx_mstate_global->__pyx_n_s_format
#define __pyx_n_s_forward __pyx_mstate_global->__pyx_n_s_forward
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_genexpr __pyx_mstate_global->__pyx_n_s_genexpr
#define __pyx_n_s_getAllSimplePaths __pyx_mstate_global->__pyx_n_s_getAllSimplePaths
#define __pyx_n_s_getAttribute __pyx_mstate_global->__pyx_n_s_getAttribute
#define __pyx_n_s_getDiameter __pyx_mstate_global->__pyx_n_s_getDiameter
#define __pyx_n_s_getDistance __pyx_mstate_global->__pyx_n_s_getDistance
#define __pyx_n_s_getDistances __pyx_mstate_global->__pyx_n_s_getDistances
#define __pyx_n_s_getEdgeScores __pyx_mstate_global->__pyx_n_s_getEdgeScores
#define __pyx_n_s_getEffectiveDiameter __pyx_mstate_global->__pyx_n_s_getEffectiveDiameter
#define __pyx_n_s_getHopPlot __pyx_mstate_global->__pyx_n_s_getHopPlot
#define __pyx_n_s_getNeighborhoodFunction __pyx_mstate_global->__pyx_n_s_getNeighborhoodFunction
#define __pyx_n_s_getNodesSortedByDistance __pyx_mstate_global->__pyx_n_s_getNodesSortedByDistance
#define __pyx_n_s_getPath __pyx_mstate_global->__pyx_n_s_getPath
#define __pyx_n_s_getPaths __pyx_mstate_global->__pyx_n_s_getPaths
#define __pyx_n_s_getPredecessors __pyx_mstate_global->__pyx_n_s_getPredecessors
#define __pyx_n_s_getValue __pyx_mstate_global->__pyx_n_s_getValue
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_helpers __pyx_mstate_global->__pyx_n_s_helpers
#define __pyx_n_s_heu __pyx_mstate_global->__pyx_n_s_heu
#define __pyx_n_s_hp __pyx_mstate_global->__pyx_n_s_hp
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_init_subclass __pyx_mstate_global->__pyx_n_s_init_subclass
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_is_number __pyx_mstate_global->__pyx_n_s_is_number
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_k __pyx_mstate_global->__pyx_n_s_k
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_maxDistance __pyx_mstate_global->__pyx_n_s_maxDistance
#define __pyx_n_s_metaclass __pyx_mstate_global->__pyx_n_s_metaclass
#define __pyx_n_s_modified __pyx_mstate_global->__pyx_n_s_modified
#define __pyx_n_s_module __pyx_mstate_global->__pyx_n_s_module
#define __pyx_n_s_mro_entries __pyx_mstate_global->__pyx_n_s_mro_entries
#define __pyx_n_s_nSamples __pyx_mstate_global->__pyx_n_s_nSamples
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_networkit_distance __pyx_mstate_global->__pyx_n_s_networkit_distance
#define __pyx_kp_u_networkit_distance_AllSimplePath __pyx_mstate_global->__pyx_kp_u_networkit_distance_AllSimplePath
#define __pyx_kp_s_networkit_distance_pyx __pyx_mstate_global->__pyx_kp_s_networkit_distance_pyx
#define __pyx_n_s_new __pyx_mstate_global->__pyx_n_s_new
#define __pyx_n_s_newSource __pyx_mstate_global->__pyx_n_s_newSource
#define __pyx_n_s_newTarget __pyx_mstate_global->__pyx_n_s_newTarget
#define __pyx_n_s_newTargets __pyx_mstate_global->__pyx_n_s_newTargets
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_s_none __pyx_mstate_global->__pyx_n_s_none
#define __pyx_n_s_norm __pyx_mstate_global->__pyx_n_s_norm
#define __pyx_n_s_numberIterations __pyx_mstate_global->__pyx_n_s_numberIterations
#define __pyx_n_s_numberOfPaths __pyx_mstate_global->__pyx_n_s_numberOfPaths
#define __pyx_n_s_numberOfSimplePaths __pyx_mstate_global->__pyx_n_s_numberOfSimplePaths
#define __pyx_n_s_numberSystems __pyx_mstate_global->__pyx_n_s_numberSystems
#define __pyx_n_s_object __pyx_mstate_global->__pyx_n_s_object
#define __pyx_n_s_omega __pyx_mstate_global->__pyx_n_s_omega
#define __pyx_n_s_paths __pyx_mstate_global->__pyx_n_s_paths
#define __pyx_n_s_pickle __pyx_mstate_global->__pyx_n_s_pickle
#define __pyx_n_s_prepare __pyx_mstate_global->__pyx_n_s_prepare
#define __pyx_n_s_preprocess __pyx_mstate_global->__pyx_n_s_preprocess
#define __pyx_n_s_pyx_PickleError __pyx_mstate_global->__pyx_n_s_pyx_PickleError
#define __pyx_n_s_pyx_checksum __pyx_mstate_global->__pyx_n_s_pyx_checksum
#define __pyx_n_s_pyx_result __pyx_mstate_global->__pyx_n_s_pyx_result
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_type __pyx_mstate_global->__pyx_n_s_pyx_type
#define __pyx_n_s_pyx_unpickle_Eccentricity __pyx_mstate_global->__pyx_n_s_pyx_unpickle_Eccentricity
#define __pyx_n_s_pyx_unpickle_Volume __pyx_mstate_global->__pyx_n_s_pyx_unpickle_Volume
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_qualname __pyx_mstate_global->__pyx_n_s_qualname
#define __pyx_n_s_query __pyx_mstate_global->__pyx_n_s_query
#define __pyx_n_s_r __pyx_mstate_global->__pyx_n_s_r
#define __pyx_n_s_r_2 __pyx_mstate_global->__pyx_n_s_r_2
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_ratio __pyx_mstate_global->__pyx_n_s_ratio
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_result __pyx_mstate_global->__pyx_n_s_result
#define __pyx_n_s_rs __pyx_mstate_global->__pyx_n_s_rs
#define __pyx_n_s_run __pyx_mstate_global->__pyx_n_s_run
#define __pyx_n_s_runApproximation __pyx_mstate_global->__pyx_n_s_runApproximation
#define __pyx_n_s_runParallelApproximation __pyx_mstate_global->__pyx_n_s_runParallelApproximation
#define __pyx_n_s_runSinglePair __pyx_mstate_global->__pyx_n_s_runSinglePair
#define __pyx_n_s_runSingleSource __pyx_mstate_global->__pyx_n_s_runSingleSource
#define __pyx_n_s_s __pyx_mstate_global->__pyx_n_s_s
#define __pyx_n_s_samples __pyx_mstate_global->__pyx_n_s_samples
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self__this_cannot_be_converted_t __pyx_mstate_global->__pyx_kp_s_self__this_cannot_be_converted_t
#define __pyx_n_s_send __pyx_mstate_global->__pyx_n_s_send
#define __pyx_n_s_setSource __pyx_mstate_global->__pyx_n_s_setSource
#define __pyx_n_s_setSources __pyx_mstate_global->__pyx_n_s_setSources
#define __pyx_n_s_setTarget __pyx_mstate_global->__pyx_n_s_setTarget
#define __pyx_n_s_setTargetNode __pyx_mstate_global->__pyx_n_s_setTargetNode
#define __pyx_n_s_setTargets __pyx_mstate_global->__pyx_n_s_setTargets
#define __pyx_n_s_set_name __pyx_mstate_global->__pyx_n_s_set_name
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_source __pyx_mstate_global->__pyx_n_s_source
#define __pyx_n_s_sources __pyx_mstate_global->__pyx_n_s_sources
#define __pyx_n_s_state __pyx_mstate_global->__pyx_n_s_state
#define __pyx_n_s_staticmethod __pyx_mstate_global->__pyx_n_s_staticmethod
#define __pyx_n_s_stdstring __pyx_mstate_global->__pyx_n_s_stdstring
#define __pyx_n_s_storeNodesSortedByDistance __pyx_mstate_global->__pyx_n_s_storeNodesSortedByDistance
#define __pyx_n_s_storePaths __pyx_mstate_global->__pyx_n_s_storePaths
#define __pyx_n_s_storePred __pyx_mstate_global->__pyx_n_s_storePred
#define __pyx_n_s_strategy __pyx_mstate_global->__pyx_n_s_strategy
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_s_t __pyx_mstate_global->__pyx_n_s_t
#define __pyx_n_s_target __pyx_mstate_global->__pyx_n_s_target
#define __pyx_n_s_targets __pyx_mstate_global->__pyx_n_s_targets
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_throw __pyx_mstate_global->__pyx_n_s_throw
#define __pyx_n_s_tmap __pyx_mstate_global->__pyx_n_s_tmap
#define __pyx_n_s_tol __pyx_mstate_global->__pyx_n_s_tol
#define __pyx_n_s_triangles __pyx_mstate_global->__pyx_n_s_triangles
#define __pyx_n_s_u __pyx_mstate_global->__pyx_n_s_u
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_use_setstate __pyx_mstate_global->__pyx_n_s_use_setstate
#define __pyx_n_s_v __pyx_mstate_global->__pyx_n_s_v
#define __pyx_n_s_v_2 __pyx_mstate_global->__pyx_n_s_v_2
#define __pyx_n_s_volume __pyx_mstate_global->__pyx_n_s_volume
#define __pyx_n_s_volume_locals_genexpr __pyx_mstate_global->__pyx_n_s_volume_locals_genexpr
#define __pyx_n_s_volume_locals_is_number __pyx_mstate_global->__pyx_n_s_volume_locals_is_number
#define __pyx_n_s_vs __pyx_mstate_global->__pyx_n_s_vs
#define __pyx_n_s_warn __pyx_mstate_global->__pyx_n_s_warn
#define __pyx_n_s_warnings __pyx_mstate_global->__pyx_n_s_warnings
#define __pyx_n_s_withEdgeScores __pyx_mstate_global->__pyx_n_s_withEdgeScores
#define __pyx_n_s_wrapper __pyx_mstate_global->__pyx_n_s_wrapper
#define __pyx_n_s_x __pyx_mstate_global->__pyx_n_s_x
#define __pyx_float_neg_1_ __pyx_mstate_global->__pyx_float_neg_1_
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_500 __pyx_mstate_global->__pyx_int_500
#define __pyx_int_222419149 __pyx_mstate_global->__pyx_int_222419149
#define __pyx_int_228825662 __pyx_mstate_global->__pyx_int_228825662
#define __pyx_int_238750788 __pyx_mstate_global->__pyx_int_238750788
#define __pyx_k__4 __pyx_mstate_global->__pyx_k__4
#define __pyx_k__7 __pyx_mstate_global->__pyx_k__7
#define __pyx_k__8 __pyx_mstate_global->__pyx_k__8
#define __pyx_k__9 __pyx_mstate_global->__pyx_k__9
#define __pyx_k__10 __pyx_mstate_global->__pyx_k__10
#define __pyx_k__11 __pyx_mstate_global->__pyx_k__11
#define __pyx_k__13 __pyx_mstate_global->__pyx_k__13
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__28 __pyx_mstate_global->__pyx_tuple__28
#define __pyx_tuple__30 __pyx_mstate_global->__pyx_tuple__30
#define __pyx_tuple__32 __pyx_mstate_global->__pyx_tuple__32
#define __pyx_tuple__33 __pyx_mstate_global->__pyx_tuple__33
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__38 __pyx_mstate_global->__pyx_tuple__38
#define __pyx_tuple__39 __pyx_mstate_global->__pyx_tuple__39
#define __pyx_tuple__43 __pyx_mstate_global->__pyx_tuple__43
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__58 __pyx_mstate_global->__pyx_tuple__58
#define __pyx_tuple__59 __pyx_mstate_global->__pyx_tuple__59
#define __pyx_tuple__63 __pyx_mstate_global->__pyx_tuple__63
#define __pyx_tuple__65 __pyx_mstate_global->__pyx_tuple__65
#define __pyx_tuple__74 __pyx_mstate_global->__pyx_tuple__74
#define __pyx_tuple__84 __pyx_mstate_global->__pyx_tuple__84
#define __pyx_tuple__86 __pyx_mstate_global->__pyx_tuple__86
#define __pyx_tuple__92 __pyx_mstate_global->__pyx_tuple__92
#define __pyx_codeobj__6 __pyx_mstate_global->__pyx_codeobj__6
#define __pyx_tuple__105 __pyx_mstate_global->__pyx_tuple__105
#define __pyx_tuple__109 __pyx_mstate_global->__pyx_tuple__109
#define __pyx_tuple__110 __pyx_mstate_global->__pyx_tuple__110
#define __pyx_tuple__120 __pyx_mstate_global->__pyx_tuple__120
#define __pyx_tuple__122 __pyx_mstate_global->__pyx_tuple__122
#define __pyx_tuple__149 __pyx_mstate_global->__pyx_tuple__149
#define __pyx_tuple__161 __pyx_mstate_global->__pyx_tuple__161
#define __pyx_codeobj__16 __pyx_mstate_global->__pyx_codeobj__16
#define __pyx_codeobj__18 __pyx_mstate_global->__pyx_codeobj__18
#define __pyx_codeobj__20 __pyx_mstate_global->__pyx_codeobj__20
#define __pyx_codeobj__22 __pyx_mstate_global->__pyx_codeobj__22
#define __pyx_codeobj__23 __pyx_mstate_global->__pyx_codeobj__23
#define __pyx_codeobj__24 __pyx_mstate_global->__pyx_codeobj__24
#define __pyx_codeobj__26 __pyx_mstate_global->__pyx_codeobj__26
#define __pyx_codeobj__27 __pyx_mstate_global->__pyx_codeobj__27
#define __pyx_codeobj__29 __pyx_mstate_global->__pyx_codeobj__29
#define __pyx_codeobj__31 __pyx_mstate_global->__pyx_codeobj__31
#define __pyx_codeobj__34 __pyx_mstate_global->__pyx_codeobj__34
#define __pyx_codeobj__35 __pyx_mstate_global->__pyx_codeobj__35
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__40 __pyx_mstate_global->__pyx_codeobj__40
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__42 __pyx_mstate_global->__pyx_codeobj__42
#define __pyx_codeobj__44 __pyx_mstate_global->__pyx_codeobj__44
#define __pyx_codeobj__45 __pyx_mstate_global->__pyx_codeobj__45
#define __pyx_codeobj__46 __pyx_mstate_global->__pyx_codeobj__46
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__48 __pyx_mstate_global->__pyx_codeobj__48
#define __pyx_codeobj__49 __pyx_mstate_global->__pyx_codeobj__49
#define __pyx_codeobj__50 __pyx_mstate_global->__pyx_codeobj__50
#define __pyx_codeobj__51 __pyx_mstate_global->__pyx_codeobj__51
#define __pyx_codeobj__52 __pyx_mstate_global->__pyx_codeobj__52
#define __pyx_codeobj__53 __pyx_mstate_global->__pyx_codeobj__53
#define __pyx_codeobj__55 __pyx_mstate_global->__pyx_codeobj__55
#define __pyx_codeobj__56 __pyx_mstate_global->__pyx_codeobj__56
#define __pyx_codeobj__57 __pyx_mstate_global->__pyx_codeobj__57
#define __pyx_codeobj__60 __pyx_mstate_global->__pyx_codeobj__60
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
#define __pyx_codeobj__62 __pyx_mstate_global->__pyx_codeobj__62
#define __pyx_codeobj__64 __pyx_mstate_global->__pyx_codeobj__64
#define __pyx_codeobj__66 __pyx_mstate_global->__pyx_codeobj__66
#define __pyx_codeobj__67 __pyx_mstate_global->__pyx_codeobj__67
#define __pyx_codeobj__68 __pyx_mstate_global->__pyx_codeobj__68
#define __pyx_codeobj__69 __pyx_mstate_global->__pyx_codeobj__69
#define __pyx_codeobj__70 __pyx_mstate_global->__pyx_codeobj__70
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__72 __pyx_mstate_global->__pyx_codeobj__72
#define __pyx_codeobj__73 __pyx_mstate_global->__pyx_codeobj__73
#define __pyx_codeobj__75 __pyx_mstate_global->__pyx_codeobj__75
#define __pyx_codeobj__76 __pyx_mstate_global->__pyx_codeobj__76
#define __pyx_codeobj__77 __pyx_mstate_global->__pyx_codeobj__77
#define __pyx_codeobj__78 __pyx_mstate_global->__pyx_codeobj__78
#define __pyx_codeobj__79 __pyx_mstate_global->__pyx_codeobj__79
#define __pyx_codeobj__80 __pyx_mstate_global->__pyx_codeobj__80
#define __pyx_codeobj__81 __pyx_mstate_global->__pyx_codeobj__81
#define __pyx_codeobj__82 __pyx_mstate_global->__pyx_codeobj__82
#define __pyx_codeobj__83 __pyx_mstate_global->__pyx_codeobj__83
#define __pyx_codeobj__85 __pyx_mstate_global->__pyx_codeobj__85
#define __pyx_codeobj__87 __pyx_mstate_global->__pyx_codeobj__87
#define __pyx_codeobj__88 __pyx_mstate_global->__pyx_codeobj__88
#define __pyx_codeobj__89 __pyx_mstate_global->__pyx_codeobj__89
#define __pyx_codeobj__90 __pyx_mstate_global->__pyx_codeobj__90
#define __pyx_codeobj__91 __pyx_mstate_global->__pyx_codeobj__91
#define __pyx_codeobj__93 __pyx_mstate_global->__pyx_codeobj__93
#define __pyx_codeobj__94 __pyx_mstate_global->__pyx_codeobj__94
#define __pyx_codeobj__95 __pyx_mstate_global->__pyx_codeobj__95
#define __pyx_codeobj__96 __pyx_mstate_global->__pyx_codeobj__96
#define __pyx_codeobj__97 __pyx_mstate_global->__pyx_codeobj__97
#define __pyx_codeobj__98 __pyx_mstate_global->__pyx_codeobj__98
#define __pyx_codeobj__99 __pyx_mstate_global->__pyx_codeobj__99
#define __pyx_codeobj__100 __pyx_mstate_global->__pyx_codeobj__100
#define __pyx_codeobj__101 __pyx_mstate_global->__pyx_codeobj__101
#define __pyx_codeobj__102 __pyx_mstate_global->__pyx_codeobj__102
#define __pyx_codeobj__103 __pyx_mstate_global->__pyx_codeobj__103
#define __pyx_codeobj__104 __pyx_mstate_global->__pyx_codeobj__104
#define __pyx_codeobj__106 __pyx_mstate_global->__pyx_codeobj__106
#define __pyx_codeobj__107 __pyx_mstate_global->__pyx_codeobj__107
#define __pyx_codeobj__108 __pyx_mstate_global->__pyx_codeobj__108
#define __pyx_codeobj__111 __pyx_mstate_global->__pyx_codeobj__111
#define __pyx_codeobj__112 __pyx_mstate_global->__pyx_codeobj__112
#define __pyx_codeobj__113 __pyx_mstate_global->__pyx_codeobj__113
#define __pyx_codeobj__114 __pyx_mstate_global->__pyx_codeobj__114
#define __pyx_codeobj__115 __pyx_mstate_global->__pyx_codeobj__115
#define __pyx_codeobj__116 __pyx_mstate_global->__pyx_codeobj__116
#define __pyx_codeobj__117 __pyx_mstate_global->__pyx_codeobj__117
#define __pyx_codeobj__118 __pyx_mstate_global->__pyx_codeobj__118
#define __pyx_codeobj__119 __pyx_mstate_global->__pyx_codeobj__119
#define __pyx_codeobj__121 __pyx_mstate_global->__pyx_codeobj__121
#define __pyx_codeobj__123 __pyx_mstate_global->__pyx_codeobj__123
#define __pyx_codeobj__124 __pyx_mstate_global->__pyx_codeobj__124
#define __pyx_codeobj__125 __pyx_mstate_global->__pyx_codeobj__125
#define __pyx_codeobj__126 __pyx_mstate_global->__pyx_codeobj__126
#define __pyx_codeobj__127 __pyx_mstate_global->__pyx_codeobj__127
#define __pyx_codeobj__128 __pyx_mstate_global->__pyx_codeobj__128
#define __pyx_codeobj__129 __pyx_mstate_global->__pyx_codeobj__129
#define __pyx_codeobj__130 __pyx_mstate_global->__pyx_codeobj__130
#define __pyx_codeobj__131 __pyx_mstate_global->__pyx_codeobj__131
#define __pyx_codeobj__132 __pyx_mstate_global->__pyx_codeobj__132
#define __pyx_codeobj__133 __pyx_mstate_global->__pyx_codeobj__133
#define __pyx_codeobj__134 __pyx_mstate_global->__pyx_codeobj__134
#define __pyx_codeobj__135 __pyx_mstate_global->__pyx_codeobj__135
#define __pyx_codeobj__136 __pyx_mstate_global->__pyx_codeobj__136
#define __pyx_codeobj__137 __pyx_mstate_global->__pyx_codeobj__137
#define __pyx_codeobj__138 __pyx_mstate_global->__pyx_codeobj__138
#define __pyx_codeobj__139 __pyx_mstate_global->__pyx_codeobj__139
#define __pyx_codeobj__140 __pyx_mstate_global->__pyx_codeobj__140
#define __pyx_codeobj__141 __pyx_mstate_global->__pyx_codeobj__141
#define __pyx_codeobj__142 __pyx_mstate_global->__pyx_codeobj__142
#define __pyx_codeobj__143 __pyx_mstate_global->__pyx_codeobj__143
#define __pyx_codeobj__144 __pyx_mstate_global->__pyx_codeobj__144
#define __pyx_codeobj__145 __pyx_mstate_global->__pyx_codeobj__145
#define __pyx_codeobj__146 __pyx_mstate_global->__pyx_codeobj__146
#define __pyx_codeobj__147 __pyx_mstate_global->__pyx_codeobj__147
#define __pyx_codeobj__148 __pyx_mstate_global->__pyx_codeobj__148
#define __pyx_codeobj__150 __pyx_mstate_global->__pyx_codeobj__150
#define __pyx_codeobj__151 __pyx_mstate_global->__pyx_codeobj__151
#define __pyx_codeobj__152 __pyx_mstate_global->__pyx_codeobj__152
#define __pyx_codeobj__153 __pyx_mstate_global->__pyx_codeobj__153
#define __pyx_codeobj__154 __pyx_mstate_global->__pyx_codeobj__154
#define __pyx_codeobj__155 __pyx_mstate_global->__pyx_codeobj__155
#define __pyx_codeobj__156 __pyx_mstate_global->__pyx_codeobj__156
#define __pyx_codeobj__157 __pyx_mstate_global->__pyx_codeobj__157
#define __pyx_codeobj__158 __pyx_mstate_global->__pyx_codeobj__158
#define __pyx_codeobj__159 __pyx_mstate_global->__pyx_codeobj__159
#define __pyx_codeobj__160 __pyx_mstate_global->__pyx_codeobj__160
#define __pyx_codeobj__162 __pyx_mstate_global->__pyx_codeobj__162
#define __pyx_codeobj__163 __pyx_mstate_global->__pyx_codeobj__163
/* #### Code section: module_code ### */

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<__pyx_t_9networkit_10structures_node>  __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(PyObject *__pyx_v_o) {
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_9networkit_10structures_node __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node", 1);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_uint64_t(__pyx_v_item); if (unlikely((__pyx_t_5 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(((__pyx_t_9networkit_10structures_node)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 48, __pyx_L1_error)
    }

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<__pyx_t_9networkit_10structures_count>  __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_count(PyObject *__pyx_v_o) {
  std::vector<__pyx_t_9networkit_10structures_count>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<__pyx_t_9networkit_10structures_count>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_9networkit_10structures_count __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py___pyx_t_9networkit_10structures_count", 1);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_count(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_uint64_t(__pyx_v_item); if (unlikely((__pyx_t_5 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(((__pyx_t_9networkit_10structures_count)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 48, __pyx_L1_error)
    }

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_count(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_9networkit_10structures_count")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_count(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py___pyx_t_9networkit_10structures_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 1);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(((double)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 48, __pyx_L1_error)
    }

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(std::vector<__pyx_t_9networkit_10structures_node>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __Pyx_PyInt_From_uint64_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_double(std::vector<double>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_double", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_double(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":190
 * 
 * @cname("__pyx_convert_pair_to_py___pyx_t_9networkit_10structures_count______pyx_t_9networkit_10structures_count")
 * cdef object __pyx_convert_pair_to_py___pyx_t_9networkit_10structures_count______pyx_t_9networkit_10structures_count(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py___pyx_t_9networkit_10structures_count______pyx_t_9networkit_10structures_count(std::pair<__pyx_t_9networkit_10structures_count,__pyx_t_9networkit_10structures_count>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py___pyx_t_9networkit_10structures_count______pyx_t_9networkit_10structures_count", 1);

  /* "pair.to_py":191
 * @cname("__pyx_convert_pair_to_py___pyx_t_9networkit_10structures_count______pyx_t_9networkit_10structures_count")
 * cdef object __pyx_convert_pair_to_py___pyx_t_9networkit_10structures_count______pyx_t_9networkit_10structures_count(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(1, 191, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":190
 * 
 * @cname("__pyx_convert_pair_to_py___pyx_t_9networkit_10structures_count______pyx_t_9networkit_10structures_count")
 * cdef object __pyx_convert_pair_to_py___pyx_t_9networkit_10structures_count______pyx_t_9networkit_10structures_count(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py___pyx_t_9networkit_10structures_count______pyx_t_9networkit_10structures_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_pair_to_py___pyx_t_9networkit_10structures_node______pyx_t_9networkit_10structures_count(std::pair<__pyx_t_9networkit_10structures_node,__pyx_t_9networkit_10structures_count>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py___pyx_t_9networkit_10structures_node______pyx_t_9networkit_10structures_count", 1);

  /* "pair.to_py":191
 * @cname("__pyx_convert_pair_to_py___pyx_t_9networkit_10structures_node______pyx_t_9networkit_10structures_count")
 * cdef object __pyx_convert_pair_to_py___pyx_t_9networkit_10structures_node______pyx_t_9networkit_10structures_count(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(1, 191, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":190
 * 
 * @cname("__pyx_convert_pair_to_py___pyx_t_9networkit_10structures_node______pyx_t_9networkit_10structures_count")
 * cdef object __pyx_convert_pair_to_py___pyx_t_9networkit_10structures_node______pyx_t_9networkit_10structures_count(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py___pyx_t_9networkit_10structures_node______pyx_t_9networkit_10structures_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(std::vector<__pyx_t_9networkit_10structures_count>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __Pyx_PyInt_From_uint64_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  char const *__pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_2 = std::string(__pyx_v_data, __pyx_v_length);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 16, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  return __pyx_r;
}

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_node_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_node_3e___(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_node_3e___(std::vector<std::vector<__pyx_t_9networkit_10structures_node> >  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_node_3e___", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_node_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_node_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_node_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_node_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_node_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_node_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_node_3e___(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_node_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_edgeweight(std::vector<__pyx_t_9networkit_10structures_edgeweight>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_edgeweight", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_edgeweight")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_edgeweight(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_edgeweight(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_edgeweight")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_edgeweight(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_edgeweight")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_edgeweight(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_t_9networkit_10structures_edgeweight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_edgeweight_3e___(std::vector<std::vector<__pyx_t_9networkit_10structures_edgeweight> >  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_edgeweight_3e___", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_edgeweight_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_edgeweight_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_edgeweight_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_edgeweight_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_edgeweight_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_edgeweight((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_edgeweight_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_edgeweight_3e___(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_edgeweight_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(std::vector<std::vector<double> >  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_double((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "helpers.pxd":37
 * cdef asarray_2d(vector[vector[element_t]]* nested)
 * 
 * cdef inline maybe_asarray_1d(vector[element_t]* vec, asarray):             # <<<<<<<<<<<<<<
 * 	return asarray_1d[element_t](vec) if asarray else dereference(vec)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_fuse_0__pyx_f_9networkit_7helpers_maybe_asarray_1d(std::vector<__pyx_t_9networkit_10structures_edgeweight>  *__pyx_v_vec, PyObject *__pyx_v_asarray) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0maybe_asarray_1d", 1);

  /* "helpers.pxd":38
 * 
 * cdef inline maybe_asarray_1d(vector[element_t]* vec, asarray):
 * 	return asarray_1d[element_t](vec) if asarray else dereference(vec)             # <<<<<<<<<<<<<<
 * 
 * cdef inline maybe_asarray_2d(vector[vector[element_t]]* nested, asarray):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_asarray); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(2, 38, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_3 = __pyx_fuse_0__pyx_f_9networkit_7helpers_asarray_1d(__pyx_v_vec); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __pyx_t_3 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_edgeweight((*__pyx_v_vec)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "helpers.pxd":37
 * cdef asarray_2d(vector[vector[element_t]]* nested)
 * 
 * cdef inline maybe_asarray_1d(vector[element_t]* vec, asarray):             # <<<<<<<<<<<<<<
 * 	return asarray_1d[element_t](vec) if asarray else dereference(vec)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.helpers.maybe_asarray_1d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static CYTHON_INLINE PyObject *__pyx_fuse_1__pyx_f_9networkit_7helpers_maybe_asarray_1d(std::vector<__pyx_t_9networkit_10structures_node>  *__pyx_v_vec, PyObject *__pyx_v_asarray) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1maybe_asarray_1d", 1);

  /* "helpers.pxd":38
 * 
 * cdef inline maybe_asarray_1d(vector[element_t]* vec, asarray):
 * 	return asarray_1d[element_t](vec) if asarray else dereference(vec)             # <<<<<<<<<<<<<<
 * 
 * cdef inline maybe_asarray_2d(vector[vector[element_t]]* nested, asarray):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_asarray); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(2, 38, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_3 = __pyx_fuse_1__pyx_f_9networkit_7helpers_asarray_1d(__pyx_v_vec); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __pyx_t_3 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node((*__pyx_v_vec)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "helpers.pxd":37
 * cdef asarray_2d(vector[vector[element_t]]* nested)
 * 
 * cdef inline maybe_asarray_1d(vector[element_t]* vec, asarray):             # <<<<<<<<<<<<<<
 * 	return asarray_1d[element_t](vec) if asarray else dereference(vec)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.helpers.maybe_asarray_1d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static CYTHON_INLINE PyObject *__pyx_fuse_2__pyx_f_9networkit_7helpers_maybe_asarray_1d(std::vector<double>  *__pyx_v_vec, PyObject *__pyx_v_asarray) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_2maybe_asarray_1d", 1);

  /* "helpers.pxd":38
 * 
 * cdef inline maybe_asarray_1d(vector[element_t]* vec, asarray):
 * 	return asarray_1d[element_t](vec) if asarray else dereference(vec)             # <<<<<<<<<<<<<<
 * 
 * cdef inline maybe_asarray_2d(vector[vector[element_t]]* nested, asarray):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_asarray); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(2, 38, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_3 = __pyx_fuse_2__pyx_f_9networkit_7helpers_asarray_1d(__pyx_v_vec); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __pyx_t_3 = __pyx_convert_vector_to_py_double((*__pyx_v_vec)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "helpers.pxd":37
 * cdef asarray_2d(vector[vector[element_t]]* nested)
 * 
 * cdef inline maybe_asarray_1d(vector[element_t]* vec, asarray):             # <<<<<<<<<<<<<<
 * 	return asarray_1d[element_t](vec) if asarray else dereference(vec)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.helpers.maybe_asarray_1d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "helpers.pxd":40
 * 	return asarray_1d[element_t](vec) if asarray else dereference(vec)
 * 
 * cdef inline maybe_asarray_2d(vector[vector[element_t]]* nested, asarray):             # <<<<<<<<<<<<<<
 * 	return asarray_2d[element_t](nested) if asarray else dereference(nested)
 */

static CYTHON_INLINE PyObject *__pyx_fuse_0__pyx_f_9networkit_7helpers_maybe_asarray_2d(std::vector<std::vector<__pyx_t_9networkit_10structures_edgeweight> >  *__pyx_v_nested, PyObject *__pyx_v_asarray) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0maybe_asarray_2d", 1);

  /* "helpers.pxd":41
 * 
 * cdef inline maybe_asarray_2d(vector[vector[element_t]]* nested, asarray):
 * 	return asarray_2d[element_t](nested) if asarray else dereference(nested)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_asarray); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(2, 41, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_3 = __pyx_fuse_0__pyx_f_9networkit_7helpers_asarray_2d(__pyx_v_nested); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_edgeweight_3e___((*__pyx_v_nested)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "helpers.pxd":40
 * 	return asarray_1d[element_t](vec) if asarray else dereference(vec)
 * 
 * cdef inline maybe_asarray_2d(vector[vector[element_t]]* nested, asarray):             # <<<<<<<<<<<<<<
 * 	return asarray_2d[element_t](nested) if asarray else dereference(nested)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.helpers.maybe_asarray_2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static CYTHON_INLINE PyObject *__pyx_fuse_1__pyx_f_9networkit_7helpers_maybe_asarray_2d(std::vector<std::vector<__pyx_t_9networkit_10structures_node> >  *__pyx_v_nested, PyObject *__pyx_v_asarray) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1maybe_asarray_2d", 1);

  /* "helpers.pxd":41
 * 
 * cdef inline maybe_asarray_2d(vector[vector[element_t]]* nested, asarray):
 * 	return asarray_2d[element_t](nested) if asarray else dereference(nested)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_asarray); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(2, 41, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_3 = __pyx_fuse_1__pyx_f_9networkit_7helpers_asarray_2d(__pyx_v_nested); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_node_3e___((*__pyx_v_nested)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "helpers.pxd":40
 * 	return asarray_1d[element_t](vec) if asarray else dereference(vec)
 * 
 * cdef inline maybe_asarray_2d(vector[vector[element_t]]* nested, asarray):             # <<<<<<<<<<<<<<
 * 	return asarray_2d[element_t](nested) if asarray else dereference(nested)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.helpers.maybe_asarray_2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static CYTHON_INLINE PyObject *__pyx_fuse_2__pyx_f_9networkit_7helpers_maybe_asarray_2d(std::vector<std::vector<double> >  *__pyx_v_nested, PyObject *__pyx_v_asarray) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_2maybe_asarray_2d", 1);

  /* "helpers.pxd":41
 * 
 * cdef inline maybe_asarray_2d(vector[vector[element_t]]* nested, asarray):
 * 	return asarray_2d[element_t](nested) if asarray else dereference(nested)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_asarray); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(2, 41, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_3 = __pyx_fuse_2__pyx_f_9networkit_7helpers_asarray_2d(__pyx_v_nested); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___((*__pyx_v_nested)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "helpers.pxd":40
 * 	return asarray_1d[element_t](vec) if asarray else dereference(vec)
 * 
 * cdef inline maybe_asarray_2d(vector[vector[element_t]]* nested, asarray):             # <<<<<<<<<<<<<<
 * 	return asarray_2d[element_t](nested) if asarray else dereference(nested)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.helpers.maybe_asarray_2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":54
 * 	cdef vector[node] targets
 * 
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == STSP:
 * 			raise RuntimeError("Error, you may not use STSP directly, use a sub-class instead")
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_4STSP_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_4STSP_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_namedargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_9networkit_8distance_4STSP___init__(((struct __pyx_obj_9networkit_8distance_STSP *)__pyx_v_self), __pyx_v_args, __pyx_v_namedargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_namedargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_4STSP___init__(struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "networkit/distance.pyx":55
 * 
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == STSP:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use STSP directly, use a sub-class instead")
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), ((PyObject *)__pyx_ptype_9networkit_8distance_STSP), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "networkit/distance.pyx":56
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == STSP:
 * 			raise RuntimeError("Error, you may not use STSP directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def setSource(self, node newSource):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 56, __pyx_L1_error)

    /* "networkit/distance.pyx":55
 * 
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == STSP:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use STSP directly, use a sub-class instead")
 * 
 */
  }

  /* "networkit/distance.pyx":54
 * 	cdef vector[node] targets
 * 
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == STSP:
 * 			raise RuntimeError("Error, you may not use STSP directly, use a sub-class instead")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.distance.STSP.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":58
 * 			raise RuntimeError("Error, you may not use STSP directly, use a sub-class instead")
 * 
 * 	def setSource(self, node newSource):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setSource(newSource)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4STSP_3setSource(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4STSP_2setSource, "\n\t\tsetSource(newSource)\n\n\t\tSets the source node.\n\n\t\tParameters\n\t\t----------\n\t\tnewSource : int\n\t\t\tThe new source node.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4STSP_3setSource = {"setSource", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_3setSource, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4STSP_2setSource};
static PyObject *__pyx_pw_9networkit_8distance_4STSP_3setSource(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __pyx_t_9networkit_10structures_node __pyx_v_newSource;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setSource (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_newSource,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_newSource)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 58, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setSource") < 0)) __PYX_ERR(0, 58, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_newSource = __Pyx_PyInt_As_uint64_t(values[0]); if (unlikely((__pyx_v_newSource == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 58, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setSource", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 58, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.STSP.setSource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4STSP_2setSource(((struct __pyx_obj_9networkit_8distance_STSP *)__pyx_v_self), __pyx_v_newSource);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4STSP_2setSource(struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_newSource) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setSource", 1);

  /* "networkit/distance.pyx":69
 * 			The new source node.
 * 		"""
 * 		(<_STSP*>(self._this)).setSource(newSource)             # <<<<<<<<<<<<<<
 * 
 * 	def setTarget(self, node newTarget):
 */
  try {
    ((NetworKit::STSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->setSource(__pyx_v_newSource);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 69, __pyx_L1_error)
  }

  /* "networkit/distance.pyx":58
 * 			raise RuntimeError("Error, you may not use STSP directly, use a sub-class instead")
 * 
 * 	def setSource(self, node newSource):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setSource(newSource)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.STSP.setSource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":71
 * 		(<_STSP*>(self._this)).setSource(newSource)
 * 
 * 	def setTarget(self, node newTarget):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTarget(newTarget)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4STSP_5setTarget(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4STSP_4setTarget, "\n\t\tsetTarget(newTarget)\n\n\t\tSets the target node.\n\n\t\tParameters\n\t\t----------\n\t\tnewTarget : int\n\t\t\tThe new target node.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4STSP_5setTarget = {"setTarget", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_5setTarget, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4STSP_4setTarget};
static PyObject *__pyx_pw_9networkit_8distance_4STSP_5setTarget(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __pyx_t_9networkit_10structures_node __pyx_v_newTarget;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setTarget (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_newTarget,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_newTarget)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 71, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setTarget") < 0)) __PYX_ERR(0, 71, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_newTarget = __Pyx_PyInt_As_uint64_t(values[0]); if (unlikely((__pyx_v_newTarget == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 71, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setTarget", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 71, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.STSP.setTarget", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4STSP_4setTarget(((struct __pyx_obj_9networkit_8distance_STSP *)__pyx_v_self), __pyx_v_newTarget);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4STSP_4setTarget(struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_newTarget) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setTarget", 1);

  /* "networkit/distance.pyx":82
 * 			The new target node.
 * 		"""
 * 		(<_STSP*>(self._this)).setTarget(newTarget)             # <<<<<<<<<<<<<<
 * 
 * 	def setTargets(self, vector[node] newTargets):
 */
  try {
    ((NetworKit::STSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->setTarget(__pyx_v_newTarget);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 82, __pyx_L1_error)
  }

  /* "networkit/distance.pyx":71
 * 		(<_STSP*>(self._this)).setSource(newSource)
 * 
 * 	def setTarget(self, node newTarget):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTarget(newTarget)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.STSP.setTarget", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":84
 * 		(<_STSP*>(self._this)).setTarget(newTarget)
 * 
 * 	def setTargets(self, vector[node] newTargets):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTargets(newTargets)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4STSP_7setTargets(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4STSP_6setTargets, "\n\t\tsetTargets(newTargets)\n\n\t\tSets multiple target nodes.\n\n\t\tParameters\n\t\t----------\n\t\tnewTargets : list(int)\n\t\t\tThe new target nodes.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4STSP_7setTargets = {"setTargets", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_7setTargets, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4STSP_6setTargets};
static PyObject *__pyx_pw_9networkit_8distance_4STSP_7setTargets(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_newTargets;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setTargets (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_newTargets,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_newTargets)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 84, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setTargets") < 0)) __PYX_ERR(0, 84, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_newTargets = __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 84, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setTargets", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 84, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.STSP.setTargets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4STSP_6setTargets(((struct __pyx_obj_9networkit_8distance_STSP *)__pyx_v_self), __PYX_STD_MOVE_IF_SUPPORTED(__pyx_v_newTargets));

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4STSP_6setTargets(struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self, std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_newTargets) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setTargets", 1);

  /* "networkit/distance.pyx":95
 * 			The new target nodes.
 * 		"""
 * 		self.targets = newTargets             # <<<<<<<<<<<<<<
 * 		(<_STSP*>(self._this)).setTargets(newTargets.begin(), newTargets.end())
 * 
 */
  __pyx_v_self->targets = __pyx_v_newTargets;

  /* "networkit/distance.pyx":96
 * 		"""
 * 		self.targets = newTargets
 * 		(<_STSP*>(self._this)).setTargets(newTargets.begin(), newTargets.end())             # <<<<<<<<<<<<<<
 * 
 * 	def getPath(self):
 */
  try {
    ((NetworKit::STSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->setTargets(__pyx_v_newTargets.begin(), __pyx_v_newTargets.end());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 96, __pyx_L1_error)
  }

  /* "networkit/distance.pyx":84
 * 		(<_STSP*>(self._this)).setTarget(newTarget)
 * 
 * 	def setTargets(self, vector[node] newTargets):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTargets(newTargets)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.STSP.setTargets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":98
 * 		(<_STSP*>(self._this)).setTargets(newTargets.begin(), newTargets.end())
 * 
 * 	def getPath(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPath()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4STSP_9getPath(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4STSP_8getPath, "\n\t\tgetPath()\n\t\t\n\t\tReturns a shortest path from the source node to the target node (without\n\t\tincluding them). Note: the shortest path can be constructed only if the\n\t\talgorithm is executed with @a storePred set to true.\n\n\t\tReturns\n\t\t-------\n\t\tlist(int)\n\t\t\tA shortest path from the source node to the target node.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4STSP_9getPath = {"getPath", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_9getPath, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4STSP_8getPath};
static PyObject *__pyx_pw_9networkit_8distance_4STSP_9getPath(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPath (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getPath", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getPath", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_4STSP_8getPath(((struct __pyx_obj_9networkit_8distance_STSP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4STSP_8getPath(struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPath", 1);

  /* "networkit/distance.pyx":111
 * 			A shortest path from the source node to the target node.
 * 		"""
 * 		return (<_STSP*>(self._this)).getPath()             # <<<<<<<<<<<<<<
 * 
 * 	def getPredecessors(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::STSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->getPath();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 111, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":98
 * 		(<_STSP*>(self._this)).setTargets(newTargets.begin(), newTargets.end())
 * 
 * 	def getPath(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPath()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.STSP.getPath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":113
 * 		return (<_STSP*>(self._this)).getPath()
 * 
 * 	def getPredecessors(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPredecessors()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4STSP_11getPredecessors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4STSP_10getPredecessors, "\n\t\tgetPredecessors()\n\n\t\tReturns the predecessor nodes from the target node to the source node,\n\t\tNote: predecessors are stored only if the algorithm is executed with\n\t\tstorePred set to true.\n\n\t\tReturns\n\t\t-------\n\t\tlist(int)\n\t\t\tThe list of predecessors from a target to a source.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4STSP_11getPredecessors = {"getPredecessors", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_11getPredecessors, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4STSP_10getPredecessors};
static PyObject *__pyx_pw_9networkit_8distance_4STSP_11getPredecessors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPredecessors (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getPredecessors", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getPredecessors", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_4STSP_10getPredecessors(((struct __pyx_obj_9networkit_8distance_STSP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4STSP_10getPredecessors(struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPredecessors", 1);

  /* "networkit/distance.pyx":126
 * 			The list of predecessors from a target to a source.
 * 		"""
 * 		return (<_STSP*>(self._this)).getPredecessors()             # <<<<<<<<<<<<<<
 * 
 * 	def getDistance(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::STSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->getPredecessors();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 126, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":113
 * 		return (<_STSP*>(self._this)).getPath()
 * 
 * 	def getPredecessors(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPredecessors()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.STSP.getPredecessors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":128
 * 		return (<_STSP*>(self._this)).getPredecessors()
 * 
 * 	def getDistance(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistance()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4STSP_13getDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4STSP_12getDistance, "\n\t\tgetDistance()\n\n\t\tReturns the distance from the source node to the target node\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tThe distance from source to the target node.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4STSP_13getDistance = {"getDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_13getDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4STSP_12getDistance};
static PyObject *__pyx_pw_9networkit_8distance_4STSP_13getDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDistance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getDistance", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getDistance", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_4STSP_12getDistance(((struct __pyx_obj_9networkit_8distance_STSP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4STSP_12getDistance(struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_edgeweight __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDistance", 1);

  /* "networkit/distance.pyx":139
 * 			The distance from source to the target node.
 * 		"""
 * 		return (<_STSP*>(self._this)).getDistance()             # <<<<<<<<<<<<<<
 * 
 * 	def getDistances(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::STSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->getDistance();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 139, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":128
 * 		return (<_STSP*>(self._this)).getPredecessors()
 * 
 * 	def getDistance(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistance()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.STSP.getDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":141
 * 		return (<_STSP*>(self._this)).getDistance()
 * 
 * 	def getDistances(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistances()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4STSP_15getDistances(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4STSP_14getDistances, "\n\t\tgetDistances()\n\n\t\tIn case of multiple target nodes: returns the distance from the source node to the target\n\t\tnodes.\n\n\t\tReturns\n\t\t-------\n\t\tlist(float)\n\t\t\tDistances from the source to the target nodes.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4STSP_15getDistances = {"getDistances", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_15getDistances, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4STSP_14getDistances};
static PyObject *__pyx_pw_9networkit_8distance_4STSP_15getDistances(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDistances (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getDistances", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getDistances", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_4STSP_14getDistances(((struct __pyx_obj_9networkit_8distance_STSP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4STSP_14getDistances(struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self) {
  std::unordered_map<__pyx_t_9networkit_10structures_node,__pyx_t_9networkit_10structures_index>  __pyx_v_tmap;
  std::vector<__pyx_t_9networkit_10structures_edgeweight>  __pyx_v_distances;
  __pyx_t_9networkit_10structures_node __pyx_7genexpr__pyx_v_u;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::unordered_map<__pyx_t_9networkit_10structures_node,__pyx_t_9networkit_10structures_index> > __pyx_t_1;
  __Pyx_FakeReference<std::vector<__pyx_t_9networkit_10structures_edgeweight> > __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::vector<__pyx_t_9networkit_10structures_node> ::iterator __pyx_t_4;
  __pyx_t_9networkit_10structures_node __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDistances", 1);

  /* "networkit/distance.pyx":153
 * 			Distances from the source to the target nodes.
 * 		"""
 * 		tmap = (<_STSP*>(self._this)).getTargetIndexMap()             # <<<<<<<<<<<<<<
 * 		distances = (<_STSP*>(self._this)).getDistances()
 * 		return [distances[tmap[u]] for u in self.targets]
 */
  try {
    __pyx_t_1 = ((NetworKit::STSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->getTargetIndexMap();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 153, __pyx_L1_error)
  }
  __pyx_v_tmap = __pyx_t_1;

  /* "networkit/distance.pyx":154
 * 		"""
 * 		tmap = (<_STSP*>(self._this)).getTargetIndexMap()
 * 		distances = (<_STSP*>(self._this)).getDistances()             # <<<<<<<<<<<<<<
 * 		return [distances[tmap[u]] for u in self.targets]
 * 
 */
  try {
    __pyx_t_2 = ((NetworKit::STSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->getDistances();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 154, __pyx_L1_error)
  }
  __pyx_v_distances = __pyx_t_2;

  /* "networkit/distance.pyx":155
 * 		tmap = (<_STSP*>(self._this)).getTargetIndexMap()
 * 		distances = (<_STSP*>(self._this)).getDistances()
 * 		return [distances[tmap[u]] for u in self.targets]             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/SSSP.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_v_self->targets.begin();
    for (;;) {
      if (!(__pyx_t_4 != __pyx_v_self->targets.end())) break;
      __pyx_t_5 = *__pyx_t_4;
      ++__pyx_t_4;
      __pyx_7genexpr__pyx_v_u = __pyx_t_5;
      __pyx_t_6 = PyFloat_FromDouble((__pyx_v_distances[(__pyx_v_tmap[__pyx_7genexpr__pyx_v_u])])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":141
 * 		return (<_STSP*>(self._this)).getDistance()
 * 
 * 	def getDistances(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistances()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("networkit.distance.STSP.getDistances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4STSP_17__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_4STSP_17__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_17__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_4STSP_17__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_4STSP_16__reduce_cython__(((struct __pyx_obj_9networkit_8distance_STSP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4STSP_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.STSP.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4STSP_19__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_4STSP_19__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_19__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_4STSP_19__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.STSP.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4STSP_18__setstate_cython__(((struct __pyx_obj_9networkit_8distance_STSP *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4STSP_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_STSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.STSP.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":179
 * 	cdef Graph _G
 * 
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == SSSP:
 * 			raise RuntimeError("Error, you may not use SSSP directly, use a sub-class instead")
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_4SSSP_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_4SSSP_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_namedargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_9networkit_8distance_4SSSP___init__(((struct __pyx_obj_9networkit_8distance_SSSP *)__pyx_v_self), __pyx_v_args, __pyx_v_namedargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_namedargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_4SSSP___init__(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "networkit/distance.pyx":180
 * 
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == SSSP:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use SSSP directly, use a sub-class instead")
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), ((PyObject *)__pyx_ptype_9networkit_8distance_SSSP), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "networkit/distance.pyx":181
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == SSSP:
 * 			raise RuntimeError("Error, you may not use SSSP directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def getDistances(self, asarray=None):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 181, __pyx_L1_error)

    /* "networkit/distance.pyx":180
 * 
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == SSSP:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use SSSP directly, use a sub-class instead")
 * 
 */
  }

  /* "networkit/distance.pyx":179
 * 	cdef Graph _G
 * 
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == SSSP:
 * 			raise RuntimeError("Error, you may not use SSSP directly, use a sub-class instead")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.distance.SSSP.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":183
 * 			raise RuntimeError("Error, you may not use SSSP directly, use a sub-class instead")
 * 
 * 	def getDistances(self, asarray=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistances(asarray=None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_3getDistances(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4SSSP_2getDistances, "\n\t\tgetDistances(asarray=None)\n\n\t\tReturns a list of weighted distances from the source node, i.e. the\n \t \tlength of the shortest path from the source node to any other node.\n\n\t\tParameters\n\t\t----------\n\t\tasarray : optional\n\t\t\tReturn the result as a numpy array. Default: None\n\n \t \tReturns\n \t \t-------\n\t\tlist or np.ndarray\n \t \t\tThe weighted distances from the source node to any other node in the graph.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4SSSP_3getDistances = {"getDistances", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_3getDistances, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_2getDistances};
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_3getDistances(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_asarray = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDistances (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_asarray,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_asarray);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 183, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getDistances") < 0)) __PYX_ERR(0, 183, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_asarray = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getDistances", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 183, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.SSSP.getDistances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4SSSP_2getDistances(((struct __pyx_obj_9networkit_8distance_SSSP *)__pyx_v_self), __pyx_v_asarray);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SSSP_2getDistances(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, PyObject *__pyx_v_asarray) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::vector<__pyx_t_9networkit_10structures_edgeweight> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDistances", 1);

  /* "networkit/distance.pyx":200
 *  	 		The weighted distances from the source node to any other node in the graph.
 * 		"""
 * 		return maybe_asarray_1d(&(<_SSSP*>(self._this)).getDistances(), asarray)             # <<<<<<<<<<<<<<
 * 
 * 	def distance(self, t):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::SSSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->getDistances();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 200, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_fuse_2__pyx_f_9networkit_7helpers_maybe_asarray_1d((&__pyx_t_1), __pyx_v_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":183
 * 			raise RuntimeError("Error, you may not use SSSP directly, use a sub-class instead")
 * 
 * 	def getDistances(self, asarray=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistances(asarray=None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.SSSP.getDistances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":202
 * 		return maybe_asarray_1d(&(<_SSSP*>(self._this)).getDistances(), asarray)
 * 
 * 	def distance(self, t):             # <<<<<<<<<<<<<<
 * 		"""
 * 		distance(t)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_5distance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4SSSP_4distance, "\n\t\tdistance(t)\n\n\t\tReturns the distance from the source node to t.\n\n\t\tParameters\n\t\t----------\n\t\tt : int\n\t\t\tTarget node.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tDistance from the source node to t.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4SSSP_5distance = {"distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_5distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_4distance};
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_5distance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_t = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_t)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "distance") < 0)) __PYX_ERR(0, 202, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_t = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 202, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.SSSP.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4SSSP_4distance(((struct __pyx_obj_9networkit_8distance_SSSP *)__pyx_v_self), __pyx_v_t);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SSSP_4distance(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  __pyx_t_9networkit_10structures_edgeweight __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 1);

  /* "networkit/distance.pyx":218
 * 			Distance from the source node to t.
 * 		"""
 * 		return (<_SSSP*>(self._this)).distance(t)             # <<<<<<<<<<<<<<
 * 
 * 	def getPredecessors(self, t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_t); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L1_error)
  try {
    __pyx_t_2 = ((NetworKit::SSSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->distance(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 218, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":202
 * 		return maybe_asarray_1d(&(<_SSSP*>(self._this)).getDistances(), asarray)
 * 
 * 	def distance(self, t):             # <<<<<<<<<<<<<<
 * 		"""
 * 		distance(t)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.distance.SSSP.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":220
 * 		return (<_SSSP*>(self._this)).distance(t)
 * 
 * 	def getPredecessors(self, t):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPredecessors(t)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_7getPredecessors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4SSSP_6getPredecessors, "\n\t\tgetPredecessors(t)\n\n\t\tReturns the predecessor nodes of t on all shortest paths from source\n\t\tto t.\n\n\t\tParameters\n\t\t----------\n\t\tt : int\n\t\t\tTarget node.\n\n\t\tReturns\n\t\t-------\n\t\tlist\n\t\t\tThe predecessors of t on all shortest paths from source to t.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4SSSP_7getPredecessors = {"getPredecessors", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_7getPredecessors, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_6getPredecessors};
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_7getPredecessors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_t = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPredecessors (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_t)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 220, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getPredecessors") < 0)) __PYX_ERR(0, 220, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_t = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getPredecessors", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 220, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.SSSP.getPredecessors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4SSSP_6getPredecessors(((struct __pyx_obj_9networkit_8distance_SSSP *)__pyx_v_self), __pyx_v_t);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SSSP_6getPredecessors(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPredecessors", 1);

  /* "networkit/distance.pyx":237
 * 			The predecessors of t on all shortest paths from source to t.
 * 		"""
 * 		return (<_SSSP*>(self._this)).getPredecessors(t)             # <<<<<<<<<<<<<<
 * 
 * 	def getPath(self, t, forward=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_t); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 237, __pyx_L1_error)
  try {
    __pyx_t_2 = ((NetworKit::SSSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->getPredecessors(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 237, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":220
 * 		return (<_SSSP*>(self._this)).distance(t)
 * 
 * 	def getPredecessors(self, t):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPredecessors(t)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.distance.SSSP.getPredecessors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":239
 * 		return (<_SSSP*>(self._this)).getPredecessors(t)
 * 
 * 	def getPath(self, t, forward=True):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPath(t, forward=True)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_9getPath(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4SSSP_8getPath, "\n\t\tgetPath(t, forward=True)\n\n\t\tReturns a shortest path from source to t and an empty path if source and t\n\t\tare not connected.\n\n\t\tParameters\n\t\t----------\n\t\tt : int\n\t\t\tTarget node.\n\t\tforward : bool, optional\n\t\t\tIf True (default) the path is directed from source to t, otherwise the path\n\t\t\tis reversed.\n\n\t\tReturns\n\t\t-------\n\t\tlist\n\t\t\tA shortest path from source to t or an empty path.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4SSSP_9getPath = {"getPath", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_9getPath, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_8getPath};
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_9getPath(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_v_forward = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPath (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_forward,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_t)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 239, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_forward);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 239, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getPath") < 0)) __PYX_ERR(0, 239, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = values[0];
    __pyx_v_forward = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getPath", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 239, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.SSSP.getPath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4SSSP_8getPath(((struct __pyx_obj_9networkit_8distance_SSSP *)__pyx_v_self), __pyx_v_t, __pyx_v_forward);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SSSP_8getPath(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, PyObject *__pyx_v_t, PyObject *__pyx_v_forward) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  bool __pyx_t_2;
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPath", 1);

  /* "networkit/distance.pyx":259
 * 			A shortest path from source to t or an empty path.
 * 		"""
 * 		return (<_SSSP*>(self._this)).getPath(t, forward)             # <<<<<<<<<<<<<<
 * 
 * 	def getPaths(self, t, forward=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_t); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 259, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_forward); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 259, __pyx_L1_error)
  try {
    __pyx_t_3 = ((NetworKit::SSSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->getPath(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 259, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":239
 * 		return (<_SSSP*>(self._this)).getPredecessors(t)
 * 
 * 	def getPath(self, t, forward=True):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPath(t, forward=True)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.distance.SSSP.getPath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":261
 * 		return (<_SSSP*>(self._this)).getPath(t, forward)
 * 
 * 	def getPaths(self, t, forward=True):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPaths(t, forward=True)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_11getPaths(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4SSSP_10getPaths, "\n\t\tgetPaths(t, forward=True)\n\n\t\tReturns all shortest paths from source to t and an empty set if source\n\t\tand t are not connected.\n\n\t\tParameters\n\t\t----------\n\t\tt : int\n\t\t\tTarget node.\n\t\tforward : bool, optional\n\t\t\tIf True (default) the path is directed from source to\n\t\t\tt, otherwise the path is reversed.\n\n\t\tReturns\n\t\t-------\n\t\t\tAll shortest paths from source node to target node t.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4SSSP_11getPaths = {"getPaths", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_11getPaths, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_10getPaths};
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_11getPaths(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_v_forward = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPaths (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_forward,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_t)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 261, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_forward);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 261, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getPaths") < 0)) __PYX_ERR(0, 261, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = values[0];
    __pyx_v_forward = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getPaths", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 261, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.SSSP.getPaths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4SSSP_10getPaths(((struct __pyx_obj_9networkit_8distance_SSSP *)__pyx_v_self), __pyx_v_t, __pyx_v_forward);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SSSP_10getPaths(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, PyObject *__pyx_v_t, PyObject *__pyx_v_forward) {
  std::set<std::vector<__pyx_t_9networkit_10structures_node> >  __pyx_v_paths;
  PyObject *__pyx_v_result = NULL;
  std::set<std::vector<__pyx_t_9networkit_10structures_node> > ::value_type __pyx_v_elem;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  bool __pyx_t_2;
  std::set<std::vector<__pyx_t_9networkit_10structures_node> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::set<std::vector<__pyx_t_9networkit_10structures_node> > ::iterator __pyx_t_5;
  std::set<std::vector<__pyx_t_9networkit_10structures_node> > ::value_type __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPaths", 1);

  /* "networkit/distance.pyx":280
 * 			All shortest paths from source node to target node t.
 * 		"""
 * 		cdef set[vector[node]] paths = (<_SSSP*>(self._this)).getPaths(t, forward)             # <<<<<<<<<<<<<<
 * 		result = []
 * 		for elem in paths:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_t); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 280, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_forward); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 280, __pyx_L1_error)
  try {
    __pyx_t_3 = ((NetworKit::SSSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->getPaths(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 280, __pyx_L1_error)
  }
  __pyx_v_paths = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "networkit/distance.pyx":281
 * 		"""
 * 		cdef set[vector[node]] paths = (<_SSSP*>(self._this)).getPaths(t, forward)
 * 		result = []             # <<<<<<<<<<<<<<
 * 		for elem in paths:
 * 			result.append(list(elem))
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_result = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "networkit/distance.pyx":282
 * 		cdef set[vector[node]] paths = (<_SSSP*>(self._this)).getPaths(t, forward)
 * 		result = []
 * 		for elem in paths:             # <<<<<<<<<<<<<<
 * 			result.append(list(elem))
 * 		return result
 */
  __pyx_t_5 = __pyx_v_paths.begin();
  for (;;) {
    if (!(__pyx_t_5 != __pyx_v_paths.end())) break;
    __pyx_t_6 = *__pyx_t_5;
    ++__pyx_t_5;
    __pyx_v_elem = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

    /* "networkit/distance.pyx":283
 * 		result = []
 * 		for elem in paths:
 * 			result.append(list(elem))             # <<<<<<<<<<<<<<
 * 		return result
 * 
 */
    __pyx_t_4 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(__pyx_v_elem); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PySequence_ListKeepNew(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "networkit/distance.pyx":282
 * 		cdef set[vector[node]] paths = (<_SSSP*>(self._this)).getPaths(t, forward)
 * 		result = []
 * 		for elem in paths:             # <<<<<<<<<<<<<<
 * 			result.append(list(elem))
 * 		return result
 */
  }

  /* "networkit/distance.pyx":284
 * 		for elem in paths:
 * 			result.append(list(elem))
 * 		return result             # <<<<<<<<<<<<<<
 * 
 * 	def getNodesSortedByDistance(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/distance.pyx":261
 * 		return (<_SSSP*>(self._this)).getPath(t, forward)
 * 
 * 	def getPaths(self, t, forward=True):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPaths(t, forward=True)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("networkit.distance.SSSP.getPaths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":286
 * 		return result
 * 
 * 	def getNodesSortedByDistance(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getNodesSortedByDistance()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_13getNodesSortedByDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4SSSP_12getNodesSortedByDistance, " \n\t\tgetNodesSortedByDistance()\n\t\t\n\t\tReturns a list of nodes ordered in increasing distance from the source.\n\n\t\tFor this functionality to be available, storeNodesSortedByDistance has to be set to true in the constructor.\n\t\tThere are no guarantees regarding the ordering of two nodes with the same distance to the source.\n\n\t\tReturns\n\t\t-------\n\t\tlist\n\t\t\tNodes ordered in increasing distance from the source.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4SSSP_13getNodesSortedByDistance = {"getNodesSortedByDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_13getNodesSortedByDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_12getNodesSortedByDistance};
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_13getNodesSortedByDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodesSortedByDistance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getNodesSortedByDistance", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getNodesSortedByDistance", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_4SSSP_12getNodesSortedByDistance(((struct __pyx_obj_9networkit_8distance_SSSP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SSSP_12getNodesSortedByDistance(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodesSortedByDistance", 1);

  /* "networkit/distance.pyx":300
 * 			Nodes ordered in increasing distance from the source.
 * 		"""
 * 		return (<_SSSP*>(self._this)).getNodesSortedByDistance()             # <<<<<<<<<<<<<<
 * 
 * 	def numberOfPaths(self, t):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::SSSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->getNodesSortedByDistance();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 300, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":286
 * 		return result
 * 
 * 	def getNodesSortedByDistance(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getNodesSortedByDistance()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.SSSP.getNodesSortedByDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":302
 * 		return (<_SSSP*>(self._this)).getNodesSortedByDistance()
 * 
 * 	def numberOfPaths(self, t):             # <<<<<<<<<<<<<<
 * 		"""
 * 		numberOfPaths(t)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_15numberOfPaths(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4SSSP_14numberOfPaths, "\n\t\tnumberOfPaths(t)\n\n\t\tReturns the number of paths from the source node to t.\n\n\t\tParameters\n\t\t----------\n\t\tt : int\n\t\t\tTarget node.\n\n\t\tReturns\n\t\t-------\n\t\tint\n\t\t\tThe number of paths from the source node to t.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4SSSP_15numberOfPaths = {"numberOfPaths", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_15numberOfPaths, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_14numberOfPaths};
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_15numberOfPaths(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_t = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("numberOfPaths (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_t)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 302, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "numberOfPaths") < 0)) __PYX_ERR(0, 302, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_t = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("numberOfPaths", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 302, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.SSSP.numberOfPaths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4SSSP_14numberOfPaths(((struct __pyx_obj_9networkit_8distance_SSSP *)__pyx_v_self), __pyx_v_t);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SSSP_14numberOfPaths(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("numberOfPaths", 1);

  /* "networkit/distance.pyx":318
 * 			The number of paths from the source node to t.
 * 		"""
 * 		return (<_SSSP*>(self._this))._numberOfPaths(t)             # <<<<<<<<<<<<<<
 * 
 * 	def setSource(self, s not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_t); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L1_error)
  try {
    __pyx_t_2 = ((NetworKit::SSSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->_numberOfPaths(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 318, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":302
 * 		return (<_SSSP*>(self._this)).getNodesSortedByDistance()
 * 
 * 	def numberOfPaths(self, t):             # <<<<<<<<<<<<<<
 * 		"""
 * 		numberOfPaths(t)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.distance.SSSP.numberOfPaths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":320
 * 		return (<_SSSP*>(self._this))._numberOfPaths(t)
 * 
 * 	def setSource(self, s not None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setSource(s)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_17setSource(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4SSSP_16setSource, "\n\t\tsetSource(s)\n\n\t\tSets a new source node.\n\n\t\tParameters\n\t\t----------\n\t\ts : int\n\t\t\tNew source node.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4SSSP_17setSource = {"setSource", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_17setSource, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_16setSource};
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_17setSource(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setSource (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setSource") < 0)) __PYX_ERR(0, 320, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_s = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setSource", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 320, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.SSSP.setSource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(((PyObject *)__pyx_v_s) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "s"); __PYX_ERR(0, 320, __pyx_L1_error)
  }
  __pyx_r = __pyx_pf_9networkit_8distance_4SSSP_16setSource(((struct __pyx_obj_9networkit_8distance_SSSP *)__pyx_v_self), __pyx_v_s);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SSSP_16setSource(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setSource", 1);

  /* "networkit/distance.pyx":331
 * 			New source node.
 * 		"""
 * 		(<_SSSP*>(self._this)).setSource(s)             # <<<<<<<<<<<<<<
 * 
 * 	def setTarget(self, t not None):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_s); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 331, __pyx_L1_error)
  try {
    ((NetworKit::SSSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->setSource(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 331, __pyx_L1_error)
  }

  /* "networkit/distance.pyx":320
 * 		return (<_SSSP*>(self._this))._numberOfPaths(t)
 * 
 * 	def setSource(self, s not None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setSource(s)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.SSSP.setSource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":333
 * 		(<_SSSP*>(self._this)).setSource(s)
 * 
 * 	def setTarget(self, t not None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTarget(t)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_19setTarget(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4SSSP_18setTarget, "\n\t\tsetTarget(t)\n\n\t\tSets a new target node.\n\n\t\tParameters\n\t\t----------\n\t\tt : int\n\t\t\tNew target node.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4SSSP_19setTarget = {"setTarget", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_19setTarget, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_18setTarget};
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_19setTarget(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_t = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setTarget (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_t)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 333, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setTarget") < 0)) __PYX_ERR(0, 333, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_t = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setTarget", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 333, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.SSSP.setTarget", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(((PyObject *)__pyx_v_t) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "t"); __PYX_ERR(0, 333, __pyx_L1_error)
  }
  __pyx_r = __pyx_pf_9networkit_8distance_4SSSP_18setTarget(((struct __pyx_obj_9networkit_8distance_SSSP *)__pyx_v_self), __pyx_v_t);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SSSP_18setTarget(struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setTarget", 1);

  /* "networkit/distance.pyx":344
 * 			New target node.
 * 		"""
 * 		(<_SSSP*>(self._this)).setTarget(t)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/DynSSSP.hpp>":
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_t); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 344, __pyx_L1_error)
  try {
    ((NetworKit::SSSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->setTarget(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 344, __pyx_L1_error)
  }

  /* "networkit/distance.pyx":333
 * 		(<_SSSP*>(self._this)).setSource(s)
 * 
 * 	def setTarget(self, t not None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTarget(t)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.SSSP.setTarget", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_21__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_4SSSP_21__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_21__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_21__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_4SSSP_20__reduce_cython__(((struct __pyx_obj_9networkit_8distance_SSSP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SSSP_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.SSSP.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_23__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_4SSSP_23__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_23__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_4SSSP_23__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.SSSP.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4SSSP_22__setstate_cython__(((struct __pyx_obj_9networkit_8distance_SSSP *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SSSP_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_SSSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.SSSP.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":359
 * 	Base class for single source shortest path algorithms in dynamic graphs.
 * 	"""
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == SSSP:
 * 			raise RuntimeError("Error, you may not use DynSSSP directly, use a sub-class instead")
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_7DynSSSP_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_7DynSSSP_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_namedargs = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_9networkit_8distance_7DynSSSP___init__(((struct __pyx_obj_9networkit_8distance_DynSSSP *)__pyx_v_self), __pyx_v_args, __pyx_v_namedargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_namedargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_7DynSSSP___init__(struct __pyx_obj_9networkit_8distance_DynSSSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "networkit/distance.pyx":360
 * 	"""
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == SSSP:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use DynSSSP directly, use a sub-class instead")
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), ((PyObject *)__pyx_ptype_9networkit_8distance_SSSP), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "networkit/distance.pyx":361
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == SSSP:
 * 			raise RuntimeError("Error, you may not use DynSSSP directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def modified(self):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 361, __pyx_L1_error)

    /* "networkit/distance.pyx":360
 * 	"""
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == SSSP:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use DynSSSP directly, use a sub-class instead")
 * 
 */
  }

  /* "networkit/distance.pyx":359
 * 	Base class for single source shortest path algorithms in dynamic graphs.
 * 	"""
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == SSSP:
 * 			raise RuntimeError("Error, you may not use DynSSSP directly, use a sub-class instead")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.distance.DynSSSP.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":363
 * 			raise RuntimeError("Error, you may not use DynSSSP directly, use a sub-class instead")
 * 
 * 	def modified(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		modified()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_7DynSSSP_3modified(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_7DynSSSP_2modified, " \n\t\tmodified()\n\n\t\tReturns True or False depending on whether the node previoulsy specified with \n\t\tsetTargetNode(t) has been modified by the update or not.\n\n\t\tReturns\n\t\t-------\n\t\tbool\n\t\t\tIndicator for whether the target node was modified or not.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_7DynSSSP_3modified = {"modified", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_7DynSSSP_3modified, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_7DynSSSP_2modified};
static PyObject *__pyx_pw_9networkit_8distance_7DynSSSP_3modified(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("modified (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("modified", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "modified", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_7DynSSSP_2modified(((struct __pyx_obj_9networkit_8distance_DynSSSP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_7DynSSSP_2modified(struct __pyx_obj_9networkit_8distance_DynSSSP *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("modified", 1);

  /* "networkit/distance.pyx":375
 * 			Indicator for whether the target node was modified or not.
 * 		"""
 * 		return (<_DynSSSP*>(self._this)).modified()             # <<<<<<<<<<<<<<
 * 
 * 	def setTargetNode(self, t):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::DynSSSP *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this)->modified();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 375, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":363
 * 			raise RuntimeError("Error, you may not use DynSSSP directly, use a sub-class instead")
 * 
 * 	def modified(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		modified()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.DynSSSP.modified", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":377
 * 		return (<_DynSSSP*>(self._this)).modified()
 * 
 * 	def setTargetNode(self, t):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTargetNode(t)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_7DynSSSP_5setTargetNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_7DynSSSP_4setTargetNode, " \n\t\tsetTargetNode(t)\n\n\t\tSet a target node to be observed during the update. If a node t is set as\n\t\ttarget before the update, the function modified() will return True or False\n\t\tdepending on whether node t has been modified by the update.\n\n\t\tParameters\n\t\t----------\n\t\tt : int\n\t\t\tTarget node to be observed during update.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_7DynSSSP_5setTargetNode = {"setTargetNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_7DynSSSP_5setTargetNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_7DynSSSP_4setTargetNode};
static PyObject *__pyx_pw_9networkit_8distance_7DynSSSP_5setTargetNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_t = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setTargetNode (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_t)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 377, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setTargetNode") < 0)) __PYX_ERR(0, 377, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_t = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setTargetNode", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 377, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.DynSSSP.setTargetNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_7DynSSSP_4setTargetNode(((struct __pyx_obj_9networkit_8distance_DynSSSP *)__pyx_v_self), __pyx_v_t);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_7DynSSSP_4setTargetNode(struct __pyx_obj_9networkit_8distance_DynSSSP *__pyx_v_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setTargetNode", 1);

  /* "networkit/distance.pyx":390
 * 			Target node to be observed during update.
 * 		"""
 * 		(<_DynSSSP*>(self._this)).setTargetNode(t)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/AdamicAdarDistance.hpp>":
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_t); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 390, __pyx_L1_error)
  try {
    ((NetworKit::DynSSSP *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this)->setTargetNode(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 390, __pyx_L1_error)
  }

  /* "networkit/distance.pyx":377
 * 		return (<_DynSSSP*>(self._this)).modified()
 * 
 * 	def setTargetNode(self, t):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTargetNode(t)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.DynSSSP.setTargetNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_7DynSSSP_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_7DynSSSP_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_7DynSSSP_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_7DynSSSP_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_7DynSSSP_6__reduce_cython__(((struct __pyx_obj_9networkit_8distance_DynSSSP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_7DynSSSP_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynSSSP *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.DynSSSP.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_7DynSSSP_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_7DynSSSP_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_7DynSSSP_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_7DynSSSP_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.DynSSSP.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_7DynSSSP_8__setstate_cython__(((struct __pyx_obj_9networkit_8distance_DynSSSP *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_7DynSSSP_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynSSSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__this_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.DynSSSP.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":414
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _AdamicAdarDistance(G._this)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_18AdamicAdarDistance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_18AdamicAdarDistance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 414, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 414, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 414, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.AdamicAdarDistance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 414, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_18AdamicAdarDistance___cinit__(((struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_18AdamicAdarDistance___cinit__(struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::AdamicAdarDistance *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":415
 * 
 * 	def __cinit__(self, Graph G):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _AdamicAdarDistance(G._this)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":416
 * 	def __cinit__(self, Graph G):
 * 		self._G = G
 * 		self._this = new _AdamicAdarDistance(G._this)             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new NetworKit::AdamicAdarDistance(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 416, __pyx_L1_error)
  }
  __pyx_v_self->_this = __pyx_t_1;

  /* "networkit/distance.pyx":414
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _AdamicAdarDistance(G._this)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.AdamicAdarDistance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":418
 * 		self._this = new _AdamicAdarDistance(G._this)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self._this
 * 
 */

/* Python wrapper */
static void __pyx_pw_9networkit_8distance_18AdamicAdarDistance_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_8distance_18AdamicAdarDistance_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_9networkit_8distance_18AdamicAdarDistance_2__dealloc__(((struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_8distance_18AdamicAdarDistance_2__dealloc__(struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *__pyx_v_self) {

  /* "networkit/distance.pyx":419
 * 
 * 	def __dealloc__(self):
 * 		del self._this             # <<<<<<<<<<<<<<
 * 
 * 	def preprocess(self):
 */
  delete __pyx_v_self->_this;

  /* "networkit/distance.pyx":418
 * 		self._this = new _AdamicAdarDistance(G._this)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self._this
 * 
 */

  /* function exit code */
}

/* "networkit/distance.pyx":421
 * 		del self._this
 * 
 * 	def preprocess(self):             # <<<<<<<<<<<<<<
 * 		self._this.preprocess()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_18AdamicAdarDistance_5preprocess(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_18AdamicAdarDistance_5preprocess = {"preprocess", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_18AdamicAdarDistance_5preprocess, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_18AdamicAdarDistance_5preprocess(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("preprocess (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("preprocess", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "preprocess", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_18AdamicAdarDistance_4preprocess(((struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_18AdamicAdarDistance_4preprocess(struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("preprocess", 1);

  /* "networkit/distance.pyx":422
 * 
 * 	def preprocess(self):
 * 		self._this.preprocess()             # <<<<<<<<<<<<<<
 * 
 * 	def getAttribute(self):
 */
  try {
    __pyx_v_self->_this->preprocess();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 422, __pyx_L1_error)
  }

  /* "networkit/distance.pyx":421
 * 		del self._this
 * 
 * 	def preprocess(self):             # <<<<<<<<<<<<<<
 * 		self._this.preprocess()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.AdamicAdarDistance.preprocess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":424
 * 		self._this.preprocess()
 * 
 * 	def getAttribute(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getAttribute()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_18AdamicAdarDistance_7getAttribute(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_18AdamicAdarDistance_6getAttribute, "\n\t\tgetAttribute()\n\n\t\tGet the Adamic Adar similiraty score for every edge.\n\n\t\tReturns\n\t\t-------\n\t\tlist(float)\n\t\t\tAdamic Adar similiraty score for every edge.\n\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_18AdamicAdarDistance_7getAttribute = {"getAttribute", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_18AdamicAdarDistance_7getAttribute, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_18AdamicAdarDistance_6getAttribute};
static PyObject *__pyx_pw_9networkit_8distance_18AdamicAdarDistance_7getAttribute(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAttribute (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getAttribute", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getAttribute", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_18AdamicAdarDistance_6getAttribute(((struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_18AdamicAdarDistance_6getAttribute(struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::vector<double> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAttribute", 1);

  /* "networkit/distance.pyx":437
 * 		"""
 * 		#### TODO: convert distance to similarity!?! ####
 * 		return self._this.getEdgeScores()             # <<<<<<<<<<<<<<
 * 
 * 	def distance(self, node u, node v):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_this->getEdgeScores();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 437, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":424
 * 		self._this.preprocess()
 * 
 * 	def getAttribute(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getAttribute()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.AdamicAdarDistance.getAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":439
 * 		return self._this.getEdgeScores()
 * 
 * 	def distance(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		distance(self, u, v)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_18AdamicAdarDistance_9distance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_18AdamicAdarDistance_8distance, "\n\t\tdistance(self, u, v)\n\n\t\tCalculate the distance from node u to node v.\n\n\t\tParameters\n\t\t----------\n\t\tu : int\n\t\t\tSource node\n\t\tv : int\n\t\t\tTarget node\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tDistance from node u to node v.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_18AdamicAdarDistance_9distance = {"distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_18AdamicAdarDistance_9distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_18AdamicAdarDistance_8distance};
static PyObject *__pyx_pw_9networkit_8distance_18AdamicAdarDistance_9distance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __pyx_t_9networkit_10structures_node __pyx_v_u;
  __pyx_t_9networkit_10structures_node __pyx_v_v;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,&__pyx_n_s_v,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_u)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 439, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_v)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 439, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 2, 2, 1); __PYX_ERR(0, 439, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "distance") < 0)) __PYX_ERR(0, 439, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_u = __Pyx_PyInt_As_uint64_t(values[0]); if (unlikely((__pyx_v_u == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 439, __pyx_L3_error)
    __pyx_v_v = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_v == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 439, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 439, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.AdamicAdarDistance.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_18AdamicAdarDistance_8distance(((struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *)__pyx_v_self), __pyx_v_u, __pyx_v_v);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_18AdamicAdarDistance_8distance(struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_u, __pyx_t_9networkit_10structures_node __pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 1);

  /* "networkit/distance.pyx":457
 * 			Distance from node u to node v.
 * 		"""
 * 		return self._this.distance(u, v)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/Diameter.hpp>" namespace "NetworKit":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_this->distance(__pyx_v_u, __pyx_v_v);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 457, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":439
 * 		return self._this.getEdgeScores()
 * 
 * 	def distance(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		distance(self, u, v)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.AdamicAdarDistance.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_18AdamicAdarDistance_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_18AdamicAdarDistance_11__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_18AdamicAdarDistance_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_18AdamicAdarDistance_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_18AdamicAdarDistance_10__reduce_cython__(((struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_18AdamicAdarDistance_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.AdamicAdarDistance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_18AdamicAdarDistance_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_18AdamicAdarDistance_13__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_18AdamicAdarDistance_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_18AdamicAdarDistance_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.AdamicAdarDistance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_18AdamicAdarDistance_12__setstate_cython__(((struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_18AdamicAdarDistance_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.AdamicAdarDistance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":514
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, algo = DiameterAlgo.AUTOMATIC, error = -1., nSamples = 0):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _Diameter(G._this, algo, error, nSamples)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_8Diameter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_8Diameter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_algo = 0;
  PyObject *__pyx_v_error = 0;
  PyObject *__pyx_v_nSamples = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_algo,&__pyx_n_s_error,&__pyx_n_s_nSamples,0};
    values[1] = __Pyx_Arg_NewRef_VARARGS(__pyx_k__4);
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_float_neg_1_));
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_algo);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_error);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_nSamples);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 514, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_algo = values[1];
    __pyx_v_error = values[2];
    __pyx_v_nSamples = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, __pyx_nargs); __PYX_ERR(0, 514, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.Diameter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 514, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_8Diameter___cinit__(((struct __pyx_obj_9networkit_8distance_Diameter *)__pyx_v_self), __pyx_v_G, __pyx_v_algo, __pyx_v_error, __pyx_v_nSamples);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_8Diameter___cinit__(struct __pyx_obj_9networkit_8distance_Diameter *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_algo, PyObject *__pyx_v_error, PyObject *__pyx_v_nSamples) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  enum NetworKit::DiameterAlgo __pyx_t_1;
  double __pyx_t_2;
  __pyx_t_9networkit_10structures_count __pyx_t_3;
  NetworKit::Diameter *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":515
 * 
 * 	def __cinit__(self, Graph G not None, algo = DiameterAlgo.AUTOMATIC, error = -1., nSamples = 0):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _Diameter(G._this, algo, error, nSamples)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":516
 * 	def __cinit__(self, Graph G not None, algo = DiameterAlgo.AUTOMATIC, error = -1., nSamples = 0):
 * 		self._G = G
 * 		self._this = new _Diameter(G._this, algo, error, nSamples)             # <<<<<<<<<<<<<<
 * 
 * 	def getDiameter(self):
 */
  __pyx_t_1 = ((enum NetworKit::DiameterAlgo)__Pyx_PyInt_As_enum__NetworKit_3a__3a_DiameterAlgo(__pyx_v_algo)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 516, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_error); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 516, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_v_nSamples); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 516, __pyx_L1_error)
  try {
    __pyx_t_4 = new NetworKit::Diameter(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 516, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_4;

  /* "networkit/distance.pyx":514
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, algo = DiameterAlgo.AUTOMATIC, error = -1., nSamples = 0):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _Diameter(G._this, algo, error, nSamples)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.Diameter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":518
 * 		self._this = new _Diameter(G._this, algo, error, nSamples)
 * 
 * 	def getDiameter(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDiameter()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_8Diameter_3getDiameter(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_8Diameter_2getDiameter, "\n\t\tgetDiameter()\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tDiameter of the graph.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_8Diameter_3getDiameter = {"getDiameter", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_8Diameter_3getDiameter, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_8Diameter_2getDiameter};
static PyObject *__pyx_pw_9networkit_8distance_8Diameter_3getDiameter(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDiameter (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getDiameter", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getDiameter", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_8Diameter_2getDiameter(((struct __pyx_obj_9networkit_8distance_Diameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_8Diameter_2getDiameter(struct __pyx_obj_9networkit_8distance_Diameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::pair<__pyx_t_9networkit_10structures_count,__pyx_t_9networkit_10structures_count>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDiameter", 1);

  /* "networkit/distance.pyx":527
 * 			Diameter of the graph.
 * 		"""
 * 		return (<_Diameter*>(self._this)).getDiameter()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/Eccentricity.hpp>" namespace "NetworKit::Eccentricity":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::Diameter *)__pyx_v_self->__pyx_base.__pyx_base._this)->getDiameter();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 527, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_pair_to_py___pyx_t_9networkit_10structures_count______pyx_t_9networkit_10structures_count(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":518
 * 		self._this = new _Diameter(G._this, algo, error, nSamples)
 * 
 * 	def getDiameter(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDiameter()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.Diameter.getDiameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_8Diameter_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_8Diameter_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_8Diameter_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_8Diameter_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_8Diameter_4__reduce_cython__(((struct __pyx_obj_9networkit_8distance_Diameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_8Diameter_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_Diameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.Diameter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_8Diameter_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_8Diameter_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_8Diameter_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_8Diameter_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.Diameter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_8Diameter_6__setstate_cython__(((struct __pyx_obj_9networkit_8distance_Diameter *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_8Diameter_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_Diameter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.Diameter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":540
 * 	"""
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def getValue(Graph G, v):
 * 		"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_12Eccentricity_1getValue(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_12Eccentricity_getValue, "\n\t\tgetValue(G, v)\n\n\t\tGet eccentricity value of node v from graph G.\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tThe input graph.\t\t\n\n\t\tReturns\n\t\t-------\n\t\ttuple(int, float)\n\t\t\tFirst index is the farthest node v from u, and the second index is the length of the shortest path from u to v.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_12Eccentricity_1getValue = {"getValue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_12Eccentricity_1getValue, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_12Eccentricity_getValue};
static PyObject *__pyx_pw_9networkit_8distance_12Eccentricity_1getValue(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_v = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValue (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_v,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 540, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_v)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 540, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getValue", 1, 2, 2, 1); __PYX_ERR(0, 540, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getValue") < 0)) __PYX_ERR(0, 540, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_v = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValue", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 540, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.Eccentricity.getValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 541, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_12Eccentricity_getValue(__pyx_v_G, __pyx_v_v);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_12Eccentricity_getValue(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  std::pair<__pyx_t_9networkit_10structures_node,__pyx_t_9networkit_10structures_count>  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValue", 1);

  /* "networkit/distance.pyx":557
 * 			First index is the farthest node v from u, and the second index is the length of the shortest path from u to v.
 * 		"""
 * 		return getValue(G._this, v)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/EffectiveDiameterApproximation.hpp>" namespace "NetworKit::EffectiveDiameterApproximation":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_v); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 557, __pyx_L1_error)
  try {
    __pyx_t_2 = NetworKit::Eccentricity::getValue(__pyx_v_G->_this, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 557, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_pair_to_py___pyx_t_9networkit_10structures_node______pyx_t_9networkit_10structures_count(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":540
 * 	"""
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def getValue(Graph G, v):
 * 		"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.distance.Eccentricity.getValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_12Eccentricity_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_12Eccentricity_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_12Eccentricity_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_12Eccentricity_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_12Eccentricity_2__reduce_cython__(((struct __pyx_obj_9networkit_8distance_Eccentricity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_12Eccentricity_2__reduce_cython__(struct __pyx_obj_9networkit_8distance_Eccentricity *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Eccentricity, (type(self), 0xe3b0c44, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Eccentricity, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_Eccentricity, (type(self), 0xe3b0c44, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Eccentricity, (type(self), 0xe3b0c44, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_Eccentricity); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Eccentricity, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Eccentricity, (type(self), 0xe3b0c44, None), state
 *     else:
 *         return __pyx_unpickle_Eccentricity, (type(self), 0xe3b0c44, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Eccentricity__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Eccentricity); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.distance.Eccentricity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Eccentricity, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Eccentricity__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_12Eccentricity_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_12Eccentricity_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_12Eccentricity_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_12Eccentricity_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.Eccentricity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_12Eccentricity_4__setstate_cython__(((struct __pyx_obj_9networkit_8distance_Eccentricity *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_12Eccentricity_4__setstate_cython__(struct __pyx_obj_9networkit_8distance_Eccentricity *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Eccentricity, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Eccentricity__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9networkit_8distance___pyx_unpickle_Eccentricity__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Eccentricity, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Eccentricity__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.distance.Eccentricity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":589
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, double ratio=0.9, count k=64, count r=7):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _EffectiveDiameterApproximation(G._this, ratio, k, r)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_30EffectiveDiameterApproximation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_30EffectiveDiameterApproximation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  double __pyx_v_ratio;
  __pyx_t_9networkit_10structures_count __pyx_v_k;
  __pyx_t_9networkit_10structures_count __pyx_v_r;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_ratio,&__pyx_n_s_k,&__pyx_n_s_r,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 589, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ratio);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 589, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 589, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_r);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 589, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 589, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_ratio = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_ratio == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 589, __pyx_L3_error)
    } else {
      __pyx_v_ratio = ((double)0.9);
    }
    if (values[2]) {
      __pyx_v_k = __Pyx_PyInt_As_uint64_t(values[2]); if (unlikely((__pyx_v_k == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 589, __pyx_L3_error)
    } else {
      __pyx_v_k = ((__pyx_t_9networkit_10structures_count)64);
    }
    if (values[3]) {
      __pyx_v_r = __Pyx_PyInt_As_uint64_t(values[3]); if (unlikely((__pyx_v_r == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 589, __pyx_L3_error)
    } else {
      __pyx_v_r = ((__pyx_t_9networkit_10structures_count)7);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, __pyx_nargs); __PYX_ERR(0, 589, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.EffectiveDiameterApproximation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 589, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_30EffectiveDiameterApproximation___cinit__(((struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *)__pyx_v_self), __pyx_v_G, __pyx_v_ratio, __pyx_v_k, __pyx_v_r);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_30EffectiveDiameterApproximation___cinit__(struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_ratio, __pyx_t_9networkit_10structures_count __pyx_v_k, __pyx_t_9networkit_10structures_count __pyx_v_r) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::EffectiveDiameterApproximation *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":590
 * 
 * 	def __cinit__(self, Graph G not None, double ratio=0.9, count k=64, count r=7):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _EffectiveDiameterApproximation(G._this, ratio, k, r)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":591
 * 	def __cinit__(self, Graph G not None, double ratio=0.9, count k=64, count r=7):
 * 		self._G = G
 * 		self._this = new _EffectiveDiameterApproximation(G._this, ratio, k, r)             # <<<<<<<<<<<<<<
 * 
 * 	def getEffectiveDiameter(self):
 */
  try {
    __pyx_t_1 = new NetworKit::EffectiveDiameterApproximation(__pyx_v_G->_this, __pyx_v_ratio, __pyx_v_k, __pyx_v_r);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 591, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/distance.pyx":589
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, double ratio=0.9, count k=64, count r=7):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _EffectiveDiameterApproximation(G._this, ratio, k, r)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.EffectiveDiameterApproximation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":593
 * 		self._this = new _EffectiveDiameterApproximation(G._this, ratio, k, r)
 * 
 * 	def getEffectiveDiameter(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getEffectiveDiameter()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_30EffectiveDiameterApproximation_3getEffectiveDiameter(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_30EffectiveDiameterApproximation_2getEffectiveDiameter, "\n\t\tgetEffectiveDiameter()\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tThe approximated effective diameter\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_30EffectiveDiameterApproximation_3getEffectiveDiameter = {"getEffectiveDiameter", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_30EffectiveDiameterApproximation_3getEffectiveDiameter, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_30EffectiveDiameterApproximation_2getEffectiveDiameter};
static PyObject *__pyx_pw_9networkit_8distance_30EffectiveDiameterApproximation_3getEffectiveDiameter(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getEffectiveDiameter (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getEffectiveDiameter", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getEffectiveDiameter", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_30EffectiveDiameterApproximation_2getEffectiveDiameter(((struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_30EffectiveDiameterApproximation_2getEffectiveDiameter(struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getEffectiveDiameter", 1);

  /* "networkit/distance.pyx":602
 * 			The approximated effective diameter
 * 		"""
 * 		return (<_EffectiveDiameterApproximation*>(self._this)).getEffectiveDiameter()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/EffectiveDiameter.hpp>" namespace "NetworKit::EffectiveDiameter":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::EffectiveDiameterApproximation *)__pyx_v_self->__pyx_base.__pyx_base._this)->getEffectiveDiameter();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 602, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":593
 * 		self._this = new _EffectiveDiameterApproximation(G._this, ratio, k, r)
 * 
 * 	def getEffectiveDiameter(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getEffectiveDiameter()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.EffectiveDiameterApproximation.getEffectiveDiameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_30EffectiveDiameterApproximation_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_30EffectiveDiameterApproximation_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_30EffectiveDiameterApproximation_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_30EffectiveDiameterApproximation_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_30EffectiveDiameterApproximation_4__reduce_cython__(((struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_30EffectiveDiameterApproximation_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.EffectiveDiameterApproximation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_30EffectiveDiameterApproximation_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_30EffectiveDiameterApproximation_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_30EffectiveDiameterApproximation_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_30EffectiveDiameterApproximation_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.EffectiveDiameterApproximation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_30EffectiveDiameterApproximation_6__setstate_cython__(((struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_30EffectiveDiameterApproximation_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.EffectiveDiameterApproximation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":626
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, double ratio=0.9):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _EffectiveDiameter(G._this, ratio)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_17EffectiveDiameter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_17EffectiveDiameter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  double __pyx_v_ratio;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_ratio,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 626, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ratio);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 626, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 626, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_ratio = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_ratio == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 626, __pyx_L3_error)
    } else {
      __pyx_v_ratio = ((double)0.9);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 626, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.EffectiveDiameter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 626, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_17EffectiveDiameter___cinit__(((struct __pyx_obj_9networkit_8distance_EffectiveDiameter *)__pyx_v_self), __pyx_v_G, __pyx_v_ratio);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_17EffectiveDiameter___cinit__(struct __pyx_obj_9networkit_8distance_EffectiveDiameter *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_ratio) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::EffectiveDiameter *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":627
 * 
 * 	def __cinit__(self, Graph G not None, double ratio=0.9):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _EffectiveDiameter(G._this, ratio)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":628
 * 	def __cinit__(self, Graph G not None, double ratio=0.9):
 * 		self._G = G
 * 		self._this = new _EffectiveDiameter(G._this, ratio)             # <<<<<<<<<<<<<<
 * 
 * 	def getEffectiveDiameter(self):
 */
  try {
    __pyx_t_1 = new NetworKit::EffectiveDiameter(__pyx_v_G->_this, __pyx_v_ratio);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 628, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/distance.pyx":626
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, double ratio=0.9):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _EffectiveDiameter(G._this, ratio)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.EffectiveDiameter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":630
 * 		self._this = new _EffectiveDiameter(G._this, ratio)
 * 
 * 	def getEffectiveDiameter(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getEffectiveDiameter()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_17EffectiveDiameter_3getEffectiveDiameter(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_17EffectiveDiameter_2getEffectiveDiameter, "\n\t\tgetEffectiveDiameter()\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tThe effective diameter\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_17EffectiveDiameter_3getEffectiveDiameter = {"getEffectiveDiameter", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_17EffectiveDiameter_3getEffectiveDiameter, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_17EffectiveDiameter_2getEffectiveDiameter};
static PyObject *__pyx_pw_9networkit_8distance_17EffectiveDiameter_3getEffectiveDiameter(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getEffectiveDiameter (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getEffectiveDiameter", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getEffectiveDiameter", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_17EffectiveDiameter_2getEffectiveDiameter(((struct __pyx_obj_9networkit_8distance_EffectiveDiameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_17EffectiveDiameter_2getEffectiveDiameter(struct __pyx_obj_9networkit_8distance_EffectiveDiameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getEffectiveDiameter", 1);

  /* "networkit/distance.pyx":639
 * 			The effective diameter
 * 		"""
 * 		return (<_EffectiveDiameter*>(self._this)).getEffectiveDiameter()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/HopPlotApproximation.hpp>" namespace "NetworKit::HopPlotApproximation":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::EffectiveDiameter *)__pyx_v_self->__pyx_base.__pyx_base._this)->getEffectiveDiameter();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 639, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":630
 * 		self._this = new _EffectiveDiameter(G._this, ratio)
 * 
 * 	def getEffectiveDiameter(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getEffectiveDiameter()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.EffectiveDiameter.getEffectiveDiameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_17EffectiveDiameter_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_17EffectiveDiameter_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_17EffectiveDiameter_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_17EffectiveDiameter_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_17EffectiveDiameter_4__reduce_cython__(((struct __pyx_obj_9networkit_8distance_EffectiveDiameter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_17EffectiveDiameter_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_EffectiveDiameter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.EffectiveDiameter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_17EffectiveDiameter_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_17EffectiveDiameter_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_17EffectiveDiameter_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_17EffectiveDiameter_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.EffectiveDiameter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_17EffectiveDiameter_6__setstate_cython__(((struct __pyx_obj_9networkit_8distance_EffectiveDiameter *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_17EffectiveDiameter_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_EffectiveDiameter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.EffectiveDiameter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":673
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, count maxDistance=0, count k=64, count r=7):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _HopPlotApproximation(G._this, maxDistance, k, r)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_20HopPlotApproximation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_20HopPlotApproximation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  __pyx_t_9networkit_10structures_count __pyx_v_maxDistance;
  __pyx_t_9networkit_10structures_count __pyx_v_k;
  __pyx_t_9networkit_10structures_count __pyx_v_r;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_maxDistance,&__pyx_n_s_k,&__pyx_n_s_r,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxDistance);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_r);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 673, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_maxDistance = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_maxDistance == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L3_error)
    } else {
      __pyx_v_maxDistance = ((__pyx_t_9networkit_10structures_count)0);
    }
    if (values[2]) {
      __pyx_v_k = __Pyx_PyInt_As_uint64_t(values[2]); if (unlikely((__pyx_v_k == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L3_error)
    } else {
      __pyx_v_k = ((__pyx_t_9networkit_10structures_count)64);
    }
    if (values[3]) {
      __pyx_v_r = __Pyx_PyInt_As_uint64_t(values[3]); if (unlikely((__pyx_v_r == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L3_error)
    } else {
      __pyx_v_r = ((__pyx_t_9networkit_10structures_count)7);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, __pyx_nargs); __PYX_ERR(0, 673, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.HopPlotApproximation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 673, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_20HopPlotApproximation___cinit__(((struct __pyx_obj_9networkit_8distance_HopPlotApproximation *)__pyx_v_self), __pyx_v_G, __pyx_v_maxDistance, __pyx_v_k, __pyx_v_r);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_20HopPlotApproximation___cinit__(struct __pyx_obj_9networkit_8distance_HopPlotApproximation *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_count __pyx_v_maxDistance, __pyx_t_9networkit_10structures_count __pyx_v_k, __pyx_t_9networkit_10structures_count __pyx_v_r) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::HopPlotApproximation *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":674
 * 
 * 	def __cinit__(self, Graph G not None, count maxDistance=0, count k=64, count r=7):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _HopPlotApproximation(G._this, maxDistance, k, r)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":675
 * 	def __cinit__(self, Graph G not None, count maxDistance=0, count k=64, count r=7):
 * 		self._G = G
 * 		self._this = new _HopPlotApproximation(G._this, maxDistance, k, r)             # <<<<<<<<<<<<<<
 * 
 * 	def getHopPlot(self):
 */
  try {
    __pyx_t_1 = new NetworKit::HopPlotApproximation(__pyx_v_G->_this, __pyx_v_maxDistance, __pyx_v_k, __pyx_v_r);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 675, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/distance.pyx":673
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, count maxDistance=0, count k=64, count r=7):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _HopPlotApproximation(G._this, maxDistance, k, r)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.HopPlotApproximation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":677
 * 		self._this = new _HopPlotApproximation(G._this, maxDistance, k, r)
 * 
 * 	def getHopPlot(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getHopPlot()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_20HopPlotApproximation_3getHopPlot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_20HopPlotApproximation_2getHopPlot, "\n\t\tgetHopPlot()\n\n\t\tReturns the approximated hop-plot of the graph.\n\n\t\tReturns\n\t\t-------\n\t\tdict(int ``:`` float)\n\t\t\tNumber of connected nodes for each distance\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_20HopPlotApproximation_3getHopPlot = {"getHopPlot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_20HopPlotApproximation_3getHopPlot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_20HopPlotApproximation_2getHopPlot};
static PyObject *__pyx_pw_9networkit_8distance_20HopPlotApproximation_3getHopPlot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getHopPlot (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getHopPlot", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getHopPlot", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_20HopPlotApproximation_2getHopPlot(((struct __pyx_obj_9networkit_8distance_HopPlotApproximation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_20HopPlotApproximation_2getHopPlot(struct __pyx_obj_9networkit_8distance_HopPlotApproximation *__pyx_v_self) {
  std::map<__pyx_t_9networkit_10structures_count,double>  __pyx_v_hp;
  PyObject *__pyx_v_result = NULL;
  std::pair<__pyx_t_9networkit_10structures_count,double>  __pyx_v_elem;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::map<__pyx_t_9networkit_10structures_count,double> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::map<__pyx_t_9networkit_10structures_count,double> ::iterator __pyx_t_3;
  std::pair<__pyx_t_9networkit_10structures_count,double>  __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getHopPlot", 1);

  /* "networkit/distance.pyx":688
 * 			Number of connected nodes for each distance
 * 		"""
 * 		cdef map[count, double] hp = (<_HopPlotApproximation*>(self._this)).getHopPlot()             # <<<<<<<<<<<<<<
 * 		result = dict()
 * 		for elem in hp:
 */
  try {
    __pyx_t_1 = ((NetworKit::HopPlotApproximation *)__pyx_v_self->__pyx_base.__pyx_base._this)->getHopPlot();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 688, __pyx_L1_error)
  }
  __pyx_v_hp = __pyx_t_1;

  /* "networkit/distance.pyx":689
 * 		"""
 * 		cdef map[count, double] hp = (<_HopPlotApproximation*>(self._this)).getHopPlot()
 * 		result = dict()             # <<<<<<<<<<<<<<
 * 		for elem in hp:
 * 			result[elem.first] = elem.second
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/distance.pyx":690
 * 		cdef map[count, double] hp = (<_HopPlotApproximation*>(self._this)).getHopPlot()
 * 		result = dict()
 * 		for elem in hp:             # <<<<<<<<<<<<<<
 * 			result[elem.first] = elem.second
 * 		return result
 */
  __pyx_t_3 = __pyx_v_hp.begin();
  for (;;) {
    if (!(__pyx_t_3 != __pyx_v_hp.end())) break;
    __pyx_t_4 = *__pyx_t_3;
    ++__pyx_t_3;
    __pyx_v_elem = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

    /* "networkit/distance.pyx":691
 * 		result = dict()
 * 		for elem in hp:
 * 			result[elem.first] = elem.second             # <<<<<<<<<<<<<<
 * 		return result
 * 
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_elem.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_From_uint64_t(__pyx_v_elem.first); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely((PyDict_SetItem(__pyx_v_result, __pyx_t_5, __pyx_t_2) < 0))) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "networkit/distance.pyx":690
 * 		cdef map[count, double] hp = (<_HopPlotApproximation*>(self._this)).getHopPlot()
 * 		result = dict()
 * 		for elem in hp:             # <<<<<<<<<<<<<<
 * 			result[elem.first] = elem.second
 * 		return result
 */
  }

  /* "networkit/distance.pyx":692
 * 		for elem in hp:
 * 			result[elem.first] = elem.second
 * 		return result             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/NeighborhoodFunction.hpp>" namespace "NetworKit::NeighborhoodFunction":
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/distance.pyx":677
 * 		self._this = new _HopPlotApproximation(G._this, maxDistance, k, r)
 * 
 * 	def getHopPlot(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getHopPlot()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.distance.HopPlotApproximation.getHopPlot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_20HopPlotApproximation_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_20HopPlotApproximation_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_20HopPlotApproximation_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_20HopPlotApproximation_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_20HopPlotApproximation_4__reduce_cython__(((struct __pyx_obj_9networkit_8distance_HopPlotApproximation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_20HopPlotApproximation_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_HopPlotApproximation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.HopPlotApproximation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_20HopPlotApproximation_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_20HopPlotApproximation_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_20HopPlotApproximation_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_20HopPlotApproximation_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.HopPlotApproximation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_20HopPlotApproximation_6__setstate_cython__(((struct __pyx_obj_9networkit_8distance_HopPlotApproximation *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_20HopPlotApproximation_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_HopPlotApproximation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.HopPlotApproximation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":715
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _NeighborhoodFunction(G._this)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_20NeighborhoodFunction_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_20NeighborhoodFunction_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 715, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 715, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 715, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunction.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 715, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_20NeighborhoodFunction___cinit__(((struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_20NeighborhoodFunction___cinit__(struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::NeighborhoodFunction *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":716
 * 
 * 	def __cinit__(self, Graph G not None):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _NeighborhoodFunction(G._this)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":717
 * 	def __cinit__(self, Graph G not None):
 * 		self._G = G
 * 		self._this = new _NeighborhoodFunction(G._this)             # <<<<<<<<<<<<<<
 * 
 * 	def getNeighborhoodFunction(self):
 */
  try {
    __pyx_t_1 = new NetworKit::NeighborhoodFunction(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 717, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/distance.pyx":715
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _NeighborhoodFunction(G._this)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunction.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":719
 * 		self._this = new _NeighborhoodFunction(G._this)
 * 
 * 	def getNeighborhoodFunction(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getNeighborhoodFunction()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_20NeighborhoodFunction_3getNeighborhoodFunction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_20NeighborhoodFunction_2getNeighborhoodFunction, "\n\t\tgetNeighborhoodFunction()\n\n\t\tReturns the neighborhood function of the graph.\n\n\t\tReturns\n\t\t-------\n\t\tlist(int)\n\t\t\tThe i-th element denotes the number of node pairs that have a distance at most (i+1).\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_20NeighborhoodFunction_3getNeighborhoodFunction = {"getNeighborhoodFunction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_20NeighborhoodFunction_3getNeighborhoodFunction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_20NeighborhoodFunction_2getNeighborhoodFunction};
static PyObject *__pyx_pw_9networkit_8distance_20NeighborhoodFunction_3getNeighborhoodFunction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNeighborhoodFunction (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getNeighborhoodFunction", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getNeighborhoodFunction", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_20NeighborhoodFunction_2getNeighborhoodFunction(((struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_20NeighborhoodFunction_2getNeighborhoodFunction(struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::vector<__pyx_t_9networkit_10structures_count> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNeighborhoodFunction", 1);

  /* "networkit/distance.pyx":730
 * 			The i-th element denotes the number of node pairs that have a distance at most (i+1).
 * 		"""
 * 		return (<_NeighborhoodFunction*>(self._this)).getNeighborhoodFunction()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/NeighborhoodFunctionApproximation.hpp>" namespace "NetworKit::NeighborhoodFunctionApproximation":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::NeighborhoodFunction *)__pyx_v_self->__pyx_base.__pyx_base._this)->getNeighborhoodFunction();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 730, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":719
 * 		self._this = new _NeighborhoodFunction(G._this)
 * 
 * 	def getNeighborhoodFunction(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getNeighborhoodFunction()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunction.getNeighborhoodFunction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_20NeighborhoodFunction_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_20NeighborhoodFunction_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_20NeighborhoodFunction_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_20NeighborhoodFunction_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_20NeighborhoodFunction_4__reduce_cython__(((struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_20NeighborhoodFunction_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunction.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_20NeighborhoodFunction_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_20NeighborhoodFunction_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_20NeighborhoodFunction_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_20NeighborhoodFunction_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunction.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_20NeighborhoodFunction_6__setstate_cython__(((struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_20NeighborhoodFunction_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunction.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":761
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, count k=64, count r=7):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _NeighborhoodFunctionApproximation(G._this, k, r)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_33NeighborhoodFunctionApproximation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_33NeighborhoodFunctionApproximation_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  __pyx_t_9networkit_10structures_count __pyx_v_k;
  __pyx_t_9networkit_10structures_count __pyx_v_r;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_k,&__pyx_n_s_r,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 761, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 761, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_r);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 761, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 761, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_k = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_k == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 761, __pyx_L3_error)
    } else {
      __pyx_v_k = ((__pyx_t_9networkit_10structures_count)64);
    }
    if (values[2]) {
      __pyx_v_r = __Pyx_PyInt_As_uint64_t(values[2]); if (unlikely((__pyx_v_r == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 761, __pyx_L3_error)
    } else {
      __pyx_v_r = ((__pyx_t_9networkit_10structures_count)7);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 761, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunctionApproximation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 761, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_33NeighborhoodFunctionApproximation___cinit__(((struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *)__pyx_v_self), __pyx_v_G, __pyx_v_k, __pyx_v_r);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_33NeighborhoodFunctionApproximation___cinit__(struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_count __pyx_v_k, __pyx_t_9networkit_10structures_count __pyx_v_r) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::NeighborhoodFunctionApproximation *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":762
 * 
 * 	def __cinit__(self, Graph G not None, count k=64, count r=7):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _NeighborhoodFunctionApproximation(G._this, k, r)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":763
 * 	def __cinit__(self, Graph G not None, count k=64, count r=7):
 * 		self._G = G
 * 		self._this = new _NeighborhoodFunctionApproximation(G._this, k, r)             # <<<<<<<<<<<<<<
 * 
 * 	def getNeighborhoodFunction(self):
 */
  try {
    __pyx_t_1 = new NetworKit::NeighborhoodFunctionApproximation(__pyx_v_G->_this, __pyx_v_k, __pyx_v_r);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 763, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/distance.pyx":761
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, count k=64, count r=7):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _NeighborhoodFunctionApproximation(G._this, k, r)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunctionApproximation.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":765
 * 		self._this = new _NeighborhoodFunctionApproximation(G._this, k, r)
 * 
 * 	def getNeighborhoodFunction(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getNeighborhoodFunction()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_33NeighborhoodFunctionApproximation_3getNeighborhoodFunction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_33NeighborhoodFunctionApproximation_2getNeighborhoodFunction, "\n\t\tgetNeighborhoodFunction()\n\n\t\tReturns the neighborhood function of the graph.\n\n\t\tReturns\n\t\t-------\n\t\tlist(int)\n\t\t\tThe i-th element denotes the number of node pairs that have a distance at most (i+1).\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_33NeighborhoodFunctionApproximation_3getNeighborhoodFunction = {"getNeighborhoodFunction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_33NeighborhoodFunctionApproximation_3getNeighborhoodFunction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_33NeighborhoodFunctionApproximation_2getNeighborhoodFunction};
static PyObject *__pyx_pw_9networkit_8distance_33NeighborhoodFunctionApproximation_3getNeighborhoodFunction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNeighborhoodFunction (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getNeighborhoodFunction", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getNeighborhoodFunction", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_33NeighborhoodFunctionApproximation_2getNeighborhoodFunction(((struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_33NeighborhoodFunctionApproximation_2getNeighborhoodFunction(struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::vector<__pyx_t_9networkit_10structures_count> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNeighborhoodFunction", 1);

  /* "networkit/distance.pyx":776
 * 			The i-th element denotes the number of node pairs that have a distance at most (i+1).
 * 		"""
 * 		return (<_NeighborhoodFunctionApproximation*>(self._this)).getNeighborhoodFunction()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/Volume.hpp>" namespace "NetworKit::Volume":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::NeighborhoodFunctionApproximation *)__pyx_v_self->__pyx_base.__pyx_base._this)->getNeighborhoodFunction();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 776, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":765
 * 		self._this = new _NeighborhoodFunctionApproximation(G._this, k, r)
 * 
 * 	def getNeighborhoodFunction(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getNeighborhoodFunction()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunctionApproximation.getNeighborhoodFunction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_33NeighborhoodFunctionApproximation_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_33NeighborhoodFunctionApproximation_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_33NeighborhoodFunctionApproximation_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_33NeighborhoodFunctionApproximation_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_33NeighborhoodFunctionApproximation_4__reduce_cython__(((struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_33NeighborhoodFunctionApproximation_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunctionApproximation.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_33NeighborhoodFunctionApproximation_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_33NeighborhoodFunctionApproximation_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_33NeighborhoodFunctionApproximation_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_33NeighborhoodFunctionApproximation_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunctionApproximation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_33NeighborhoodFunctionApproximation_6__setstate_cython__(((struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_33NeighborhoodFunctionApproximation_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunctionApproximation.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":794
 * 	"""
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def volume(Graph G, r, count samples=500):
 * 		"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_6Volume_1volume(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_6Volume_volume, "\n\t\tvolume(G, r, samples=500)\n\n\t\tNumber of nodes within a given radius. If the radius is a list containing many radii,\n\t\ta list containing the number for every radius is returned.\n\n\t\tParameters\n\t\t----------\n\t\tG : networkit.Graph\n\t\t\tthe graph\n\t\tr : float\n\t\t\tthe radius (or radii)\n\t\tsamples : int, optional\n\t\t\tThe number of samples. Default: 500\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tNumber of nodes within a given radius.\n\t\tlist(float)\n\t\t\tNumber of nodes within every given radii.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_6Volume_1volume = {"volume", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_6Volume_1volume, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_6Volume_volume};
static PyObject *__pyx_pw_9networkit_8distance_6Volume_1volume(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_r = 0;
  __pyx_t_9networkit_10structures_count __pyx_v_samples;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("volume (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_r,&__pyx_n_s_samples,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_r)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("volume", 0, 2, 3, 1); __PYX_ERR(0, 794, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_samples);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "volume") < 0)) __PYX_ERR(0, 794, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_r = values[1];
    if (values[2]) {
      __pyx_v_samples = __Pyx_PyInt_As_uint64_t(values[2]); if (unlikely((__pyx_v_samples == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 795, __pyx_L3_error)
    } else {
      __pyx_v_samples = ((__pyx_t_9networkit_10structures_count)0x1F4);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("volume", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 794, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.Volume.volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 795, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_6Volume_volume(__pyx_v_G, __pyx_v_r, __pyx_v_samples);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":822
 * 		cdef double _v
 * 		cdef vector[double] _vs
 * 		def is_number(s):             # <<<<<<<<<<<<<<
 * 			try:
 * 				float(s)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_6Volume_6volume_1is_number(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_6Volume_6volume_1is_number = {"is_number", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_6Volume_6volume_1is_number, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_6Volume_6volume_1is_number(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_s = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_number (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 822, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "is_number") < 0)) __PYX_ERR(0, 822, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_s = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_number", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 822, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.Volume.volume.is_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_6Volume_6volume_is_number(__pyx_self, __pyx_v_s);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_6Volume_6volume_is_number(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_number", 1);

  /* "networkit/distance.pyx":823
 * 		cdef vector[double] _vs
 * 		def is_number(s):
 * 			try:             # <<<<<<<<<<<<<<
 * 				float(s)
 * 				return True
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "networkit/distance.pyx":824
 * 		def is_number(s):
 * 			try:
 * 				float(s)             # <<<<<<<<<<<<<<
 * 				return True
 * 			except ValueError:
 */
      __pyx_t_4 = __Pyx_PyObject_AsDouble(__pyx_v_s); if (unlikely(__pyx_t_4 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 824, __pyx_L3_error)

      /* "networkit/distance.pyx":825
 * 			try:
 * 				float(s)
 * 				return True             # <<<<<<<<<<<<<<
 * 			except ValueError:
 * 				return False
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L7_try_return;

      /* "networkit/distance.pyx":823
 * 		cdef vector[double] _vs
 * 		def is_number(s):
 * 			try:             # <<<<<<<<<<<<<<
 * 				float(s)
 * 				return True
 */
    }
    __pyx_L3_error:;

    /* "networkit/distance.pyx":826
 * 				float(s)
 * 				return True
 * 			except ValueError:             # <<<<<<<<<<<<<<
 * 				return False
 * 		if type(r) is float or type(r) is int:
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("networkit.distance.Volume.volume.is_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 826, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "networkit/distance.pyx":827
 * 				return True
 * 			except ValueError:
 * 				return False             # <<<<<<<<<<<<<<
 * 		if type(r) is float or type(r) is int:
 * 			_r = r
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;

    /* "networkit/distance.pyx":823
 * 		cdef vector[double] _vs
 * 		def is_number(s):
 * 			try:             # <<<<<<<<<<<<<<
 * 				float(s)
 * 				return True
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "networkit/distance.pyx":822
 * 		cdef double _v
 * 		cdef vector[double] _vs
 * 		def is_number(s):             # <<<<<<<<<<<<<<
 * 			try:
 * 				float(s)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("networkit.distance.Volume.volume.is_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_9networkit_8distance_6Volume_6volume_4generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "networkit/distance.pyx":833
 * 				_v = volume(<_Graph> G._this, <double> _r, <count> samples)
 * 			return _v
 * 		elif type(r) is list and all(is_number(item) for item in r):             # <<<<<<<<<<<<<<
 * 			_rs = r
 * 			with nogil:
 */

static PyObject *__pyx_pf_9networkit_8distance_6Volume_6volume_2genexpr(PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr *)__pyx_tp_new_9networkit_8distance___pyx_scope_struct_1_genexpr(__pyx_ptype_9networkit_8distance___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 833, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_9networkit_8distance_6Volume_6volume_4generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_volume_locals_genexpr, __pyx_n_s_networkit_distance); if (unlikely(!gen)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.Volume.volume.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_9networkit_8distance_6Volume_6volume_4generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 833, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 833, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_genexpr_arg_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 833, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 833, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 833, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 833, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 833, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 833, __pyx_L1_error)
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 833, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 833, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_item);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_item, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_is_number)) { __Pyx_RaiseClosureNameError("is_number"); __PYX_ERR(0, 833, __pyx_L1_error) }
    __pyx_t_4 = __pyx_pf_9networkit_8distance_6Volume_6volume_is_number(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_is_number, __pyx_cur_scope->__pyx_v_item); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = (!__pyx_t_5);
    if (__pyx_t_6) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":794
 * 	"""
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def volume(Graph G, r, count samples=500):
 * 		"""
 */

static PyObject *__pyx_pf_9networkit_8distance_6Volume_volume(struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_r, __pyx_t_9networkit_10structures_count __pyx_v_samples) {
  struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume *__pyx_cur_scope;
  double __pyx_v__r;
  std::vector<double>  __pyx_v__rs;
  double __pyx_v__v;
  std::vector<double>  __pyx_v__vs;
  PyObject *__pyx_gb_9networkit_8distance_6Volume_6volume_4generator = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<double>  __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("volume", 0);
  __pyx_cur_scope = (struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume *)__pyx_tp_new_9networkit_8distance___pyx_scope_struct__volume(__pyx_ptype_9networkit_8distance___pyx_scope_struct__volume, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 794, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }

  /* "networkit/distance.pyx":822
 * 		cdef double _v
 * 		cdef vector[double] _vs
 * 		def is_number(s):             # <<<<<<<<<<<<<<
 * 			try:
 * 				float(s)
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_6Volume_6volume_1is_number, 0, __pyx_n_s_volume_locals_is_number, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_is_number = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/distance.pyx":828
 * 			except ValueError:
 * 				return False
 * 		if type(r) is float or type(r) is int:             # <<<<<<<<<<<<<<
 * 			_r = r
 * 			with nogil:
 */
  __pyx_t_3 = (((PyObject *)Py_TYPE(__pyx_v_r)) == ((PyObject *)(&PyFloat_Type)));
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (((PyObject *)Py_TYPE(__pyx_v_r)) == ((PyObject *)(&PyInt_Type)));
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "networkit/distance.pyx":829
 * 				return False
 * 		if type(r) is float or type(r) is int:
 * 			_r = r             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				_v = volume(<_Graph> G._this, <double> _r, <count> samples)
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_r); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 829, __pyx_L1_error)
    __pyx_v__r = __pyx_t_4;

    /* "networkit/distance.pyx":830
 * 		if type(r) is float or type(r) is int:
 * 			_r = r
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				_v = volume(<_Graph> G._this, <double> _r, <count> samples)
 * 			return _v
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "networkit/distance.pyx":831
 * 			_r = r
 * 			with nogil:
 * 				_v = volume(<_Graph> G._this, <double> _r, <count> samples)             # <<<<<<<<<<<<<<
 * 			return _v
 * 		elif type(r) is list and all(is_number(item) for item in r):
 */
          try {
            __pyx_t_4 = NetworKit::Volume::volume(((NetworKit::Graph)__pyx_v_G->_this), ((double)__pyx_v__r), ((__pyx_t_9networkit_10structures_count)__pyx_v_samples));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 831, __pyx_L7_error)
          }
          __pyx_v__v = __pyx_t_4;
        }

        /* "networkit/distance.pyx":830
 * 		if type(r) is float or type(r) is int:
 * 			_r = r
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				_v = volume(<_Graph> G._this, <double> _r, <count> samples)
 * 			return _v
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L8;
          }
          __pyx_L7_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L8:;
        }
    }

    /* "networkit/distance.pyx":832
 * 			with nogil:
 * 				_v = volume(<_Graph> G._this, <double> _r, <count> samples)
 * 			return _v             # <<<<<<<<<<<<<<
 * 		elif type(r) is list and all(is_number(item) for item in r):
 * 			_rs = r
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v__v); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "networkit/distance.pyx":828
 * 			except ValueError:
 * 				return False
 * 		if type(r) is float or type(r) is int:             # <<<<<<<<<<<<<<
 * 			_r = r
 * 			with nogil:
 */
  }

  /* "networkit/distance.pyx":833
 * 				_v = volume(<_Graph> G._this, <double> _r, <count> samples)
 * 			return _v
 * 		elif type(r) is list and all(is_number(item) for item in r):             # <<<<<<<<<<<<<<
 * 			_rs = r
 * 			with nogil:
 */
  __pyx_t_3 = (((PyObject *)Py_TYPE(__pyx_v_r)) == ((PyObject *)(&PyList_Type)));
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_1 = __pyx_pf_9networkit_8distance_6Volume_6volume_2genexpr(((PyObject*)__pyx_cur_scope), __pyx_v_r); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __pyx_t_3;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_2) {

    /* "networkit/distance.pyx":834
 * 			return _v
 * 		elif type(r) is list and all(is_number(item) for item in r):
 * 			_rs = r             # <<<<<<<<<<<<<<
 * 			with nogil:
 * 				_vs = volume(<_Graph> G._this, <vector[double]> _rs, <count> samples)
 */
    __pyx_t_6 = __pyx_convert_vector_from_py_double(__pyx_v_r); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L1_error)
    __pyx_v__rs = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

    /* "networkit/distance.pyx":835
 * 		elif type(r) is list and all(is_number(item) for item in r):
 * 			_rs = r
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				_vs = volume(<_Graph> G._this, <vector[double]> _rs, <count> samples)
 * 			return _vs
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "networkit/distance.pyx":836
 * 			_rs = r
 * 			with nogil:
 * 				_vs = volume(<_Graph> G._this, <vector[double]> _rs, <count> samples)             # <<<<<<<<<<<<<<
 * 			return _vs
 * 		else:
 */
          try {
            __pyx_t_6 = NetworKit::Volume::volume(((NetworKit::Graph)__pyx_v_G->_this), ((std::vector<double> )__pyx_v__rs), ((__pyx_t_9networkit_10structures_count)__pyx_v_samples));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 836, __pyx_L12_error)
          }
          __pyx_v__vs = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);
        }

        /* "networkit/distance.pyx":835
 * 		elif type(r) is list and all(is_number(item) for item in r):
 * 			_rs = r
 * 			with nogil:             # <<<<<<<<<<<<<<
 * 				_vs = volume(<_Graph> G._this, <vector[double]> _rs, <count> samples)
 * 			return _vs
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L13;
          }
          __pyx_L12_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L13:;
        }
    }

    /* "networkit/distance.pyx":837
 * 			with nogil:
 * 				_vs = volume(<_Graph> G._this, <vector[double]> _rs, <count> samples)
 * 			return _vs             # <<<<<<<<<<<<<<
 * 		else:
 * 			pass
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __pyx_convert_vector_to_py_double(__pyx_v__vs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "networkit/distance.pyx":833
 * 				_v = volume(<_Graph> G._this, <double> _r, <count> samples)
 * 			return _v
 * 		elif type(r) is list and all(is_number(item) for item in r):             # <<<<<<<<<<<<<<
 * 			_rs = r
 * 			with nogil:
 */
  }

  /* "networkit/distance.pyx":839
 * 			return _vs
 * 		else:
 * 			pass             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/JaccardDistance.hpp>":
 */
  /*else*/ {
  }

  /* "networkit/distance.pyx":794
 * 	"""
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def volume(Graph G, r, count samples=500):
 * 		"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.distance.Volume.volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_9networkit_8distance_6Volume_6volume_4generator);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_6Volume_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_6Volume_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_6Volume_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_6Volume_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_6Volume_2__reduce_cython__(((struct __pyx_obj_9networkit_8distance_Volume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_6Volume_2__reduce_cython__(struct __pyx_obj_9networkit_8distance_Volume *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Volume, (type(self), 0xe3b0c44, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Volume, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_Volume, (type(self), 0xe3b0c44, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Volume, (type(self), 0xe3b0c44, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_Volume); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Volume, (type(self), 0xe3b0c44, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Volume, (type(self), 0xe3b0c44, None), state
 *     else:
 *         return __pyx_unpickle_Volume, (type(self), 0xe3b0c44, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Volume__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Volume); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_238750788);
    __Pyx_GIVEREF(__pyx_int_238750788);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_238750788)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.distance.Volume.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Volume, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Volume__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_6Volume_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_6Volume_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_6Volume_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_6Volume_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.Volume.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_6Volume_4__setstate_cython__(((struct __pyx_obj_9networkit_8distance_Volume *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_6Volume_4__setstate_cython__(struct __pyx_obj_9networkit_8distance_Volume *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Volume, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Volume__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9networkit_8distance___pyx_unpickle_Volume__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Volume, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Volume__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.distance.Volume.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":867
 * 	cdef vector[count] _triangles
 * 
 * 	def __cinit__(self, Graph G, vector[count] triangles):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._triangles = triangles
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_15JaccardDistance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_15JaccardDistance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  std::vector<__pyx_t_9networkit_10structures_count>  __pyx_v_triangles;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_triangles,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 867, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_triangles)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 867, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 867, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 867, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_triangles = __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_count(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 867, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 867, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.JaccardDistance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 867, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_15JaccardDistance___cinit__(((struct __pyx_obj_9networkit_8distance_JaccardDistance *)__pyx_v_self), __pyx_v_G, __PYX_STD_MOVE_IF_SUPPORTED(__pyx_v_triangles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_15JaccardDistance___cinit__(struct __pyx_obj_9networkit_8distance_JaccardDistance *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<__pyx_t_9networkit_10structures_count>  __pyx_v_triangles) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::JaccardDistance *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":868
 * 
 * 	def __cinit__(self, Graph G, vector[count] triangles):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._triangles = triangles
 * 		self._this = new _JaccardDistance(G._this, self._triangles)
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":869
 * 	def __cinit__(self, Graph G, vector[count] triangles):
 * 		self._G = G
 * 		self._triangles = triangles             # <<<<<<<<<<<<<<
 * 		self._this = new _JaccardDistance(G._this, self._triangles)
 * 
 */
  __pyx_v_self->_triangles = __pyx_v_triangles;

  /* "networkit/distance.pyx":870
 * 		self._G = G
 * 		self._triangles = triangles
 * 		self._this = new _JaccardDistance(G._this, self._triangles)             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new NetworKit::JaccardDistance(__pyx_v_G->_this, __pyx_v_self->_triangles);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 870, __pyx_L1_error)
  }
  __pyx_v_self->_this = __pyx_t_1;

  /* "networkit/distance.pyx":867
 * 	cdef vector[count] _triangles
 * 
 * 	def __cinit__(self, Graph G, vector[count] triangles):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._triangles = triangles
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.JaccardDistance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":872
 * 		self._this = new _JaccardDistance(G._this, self._triangles)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self._this
 * 
 */

/* Python wrapper */
static void __pyx_pw_9networkit_8distance_15JaccardDistance_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_8distance_15JaccardDistance_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_9networkit_8distance_15JaccardDistance_2__dealloc__(((struct __pyx_obj_9networkit_8distance_JaccardDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_8distance_15JaccardDistance_2__dealloc__(struct __pyx_obj_9networkit_8distance_JaccardDistance *__pyx_v_self) {

  /* "networkit/distance.pyx":873
 * 
 * 	def __dealloc__(self):
 * 		del self._this             # <<<<<<<<<<<<<<
 * 
 * 	def getAttribute(self):
 */
  delete __pyx_v_self->_this;

  /* "networkit/distance.pyx":872
 * 		self._this = new _JaccardDistance(G._this, self._triangles)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self._this
 * 
 */

  /* function exit code */
}

/* "networkit/distance.pyx":875
 * 		del self._this
 * 
 * 	def getAttribute(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getAttribute()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_15JaccardDistance_5getAttribute(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_15JaccardDistance_4getAttribute, "\n\t\tgetAttribute()\n\n\t\tGet the Jaccard distance for every edge.\n\n\t\tReturns\n\t\t-------\n\t\tlist(float)\n\t\t\tJaccard distance for every edge.\n\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_15JaccardDistance_5getAttribute = {"getAttribute", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_15JaccardDistance_5getAttribute, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_15JaccardDistance_4getAttribute};
static PyObject *__pyx_pw_9networkit_8distance_15JaccardDistance_5getAttribute(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAttribute (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getAttribute", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getAttribute", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_15JaccardDistance_4getAttribute(((struct __pyx_obj_9networkit_8distance_JaccardDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_15JaccardDistance_4getAttribute(struct __pyx_obj_9networkit_8distance_JaccardDistance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::vector<double> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAttribute", 1);

  /* "networkit/distance.pyx":887
 * 
 * 		"""
 * 		return self._this.getEdgeScores()             # <<<<<<<<<<<<<<
 * 
 * cdef class JaccardSimilarityAttributizer:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_this->getEdgeScores();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 887, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":875
 * 		del self._this
 * 
 * 	def getAttribute(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getAttribute()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.JaccardDistance.getAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_15JaccardDistance_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_15JaccardDistance_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_15JaccardDistance_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_15JaccardDistance_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_15JaccardDistance_6__reduce_cython__(((struct __pyx_obj_9networkit_8distance_JaccardDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_15JaccardDistance_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_JaccardDistance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.JaccardDistance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_15JaccardDistance_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_15JaccardDistance_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_15JaccardDistance_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_15JaccardDistance_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.JaccardDistance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_15JaccardDistance_8__setstate_cython__(((struct __pyx_obj_9networkit_8distance_JaccardDistance *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_15JaccardDistance_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_JaccardDistance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.JaccardDistance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":908
 * 	cdef vector[count] _triangles
 * 
 * 	def __cinit__(self, Graph G, vector[count] triangles):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._triangles = triangles
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  std::vector<__pyx_t_9networkit_10structures_count>  __pyx_v_triangles;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_triangles,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 908, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_triangles)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 908, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 908, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 908, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_triangles = __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_count(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 908, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 908, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.JaccardSimilarityAttributizer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 908, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_29JaccardSimilarityAttributizer___cinit__(((struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *)__pyx_v_self), __pyx_v_G, __PYX_STD_MOVE_IF_SUPPORTED(__pyx_v_triangles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_29JaccardSimilarityAttributizer___cinit__(struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<__pyx_t_9networkit_10structures_count>  __pyx_v_triangles) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::JaccardDistance *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":909
 * 
 * 	def __cinit__(self, Graph G, vector[count] triangles):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._triangles = triangles
 * 		self._this = new _JaccardDistance(G._this, self._triangles)
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":910
 * 	def __cinit__(self, Graph G, vector[count] triangles):
 * 		self._G = G
 * 		self._triangles = triangles             # <<<<<<<<<<<<<<
 * 		self._this = new _JaccardDistance(G._this, self._triangles)
 * 
 */
  __pyx_v_self->_triangles = __pyx_v_triangles;

  /* "networkit/distance.pyx":911
 * 		self._G = G
 * 		self._triangles = triangles
 * 		self._this = new _JaccardDistance(G._this, self._triangles)             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new NetworKit::JaccardDistance(__pyx_v_G->_this, __pyx_v_self->_triangles);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 911, __pyx_L1_error)
  }
  __pyx_v_self->_this = __pyx_t_1;

  /* "networkit/distance.pyx":908
 * 	cdef vector[count] _triangles
 * 
 * 	def __cinit__(self, Graph G, vector[count] triangles):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._triangles = triangles
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.JaccardSimilarityAttributizer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":913
 * 		self._this = new _JaccardDistance(G._this, self._triangles)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self._this
 * 
 */

/* Python wrapper */
static void __pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_9networkit_8distance_29JaccardSimilarityAttributizer_2__dealloc__(((struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_8distance_29JaccardSimilarityAttributizer_2__dealloc__(struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *__pyx_v_self) {

  /* "networkit/distance.pyx":914
 * 
 * 	def __dealloc__(self):
 * 		del self._this             # <<<<<<<<<<<<<<
 * 
 * 	def getAttribute(self):
 */
  delete __pyx_v_self->_this;

  /* "networkit/distance.pyx":913
 * 		self._this = new _JaccardDistance(G._this, self._triangles)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self._this
 * 
 */

  /* function exit code */
}

/* "networkit/distance.pyx":916
 * 		del self._this
 * 
 * 	def getAttribute(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getAttribute()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_5getAttribute(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_29JaccardSimilarityAttributizer_4getAttribute, "\n\t\tgetAttribute()\n\n\t\tGet the Jaccard similiraty score for every edge.\n\n\t\tReturns\n\t\t-------\n\t\tlist(float)\n\t\t\tJaccard similiraty score for every edge.\n\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_29JaccardSimilarityAttributizer_5getAttribute = {"getAttribute", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_5getAttribute, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_29JaccardSimilarityAttributizer_4getAttribute};
static PyObject *__pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_5getAttribute(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAttribute (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getAttribute", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getAttribute", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_29JaccardSimilarityAttributizer_4getAttribute(((struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_29JaccardSimilarityAttributizer_4getAttribute(struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *__pyx_v_self) {
  double __pyx_8genexpr2__pyx_v_x;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_FakeReference<std::vector<double> > __pyx_t_2;
  std::vector<double> ::iterator __pyx_t_3;
  std::vector<double>  *__pyx_t_4;
  double __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAttribute", 1);

  /* "networkit/distance.pyx":929
 * 		"""
 * 		#convert distance to similarity
 * 		self._this.preprocess()             # <<<<<<<<<<<<<<
 * 		return [1 - x for x in self._this.getEdgeScores()]
 * 
 */
  try {
    __pyx_v_self->_this->preprocess();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 929, __pyx_L1_error)
  }

  /* "networkit/distance.pyx":930
 * 		#convert distance to similarity
 * 		self._this.preprocess()
 * 		return [1 - x for x in self._this.getEdgeScores()]             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/AlgebraicDistance.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 930, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    try {
      __pyx_t_2 = __pyx_v_self->_this->getEdgeScores();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 930, __pyx_L1_error)
    }
    __pyx_t_4 = &__pyx_t_2;
    __pyx_t_3 = __pyx_t_4->begin();
    for (;;) {
      if (!(__pyx_t_3 != __pyx_t_4->end())) break;
      __pyx_t_5 = *__pyx_t_3;
      ++__pyx_t_3;
      __pyx_8genexpr2__pyx_v_x = __pyx_t_5;
      __pyx_t_6 = PyFloat_FromDouble((1.0 - __pyx_8genexpr2__pyx_v_x)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 930, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 930, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":916
 * 		del self._this
 * 
 * 	def getAttribute(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getAttribute()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("networkit.distance.JaccardSimilarityAttributizer.getAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_29JaccardSimilarityAttributizer_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_29JaccardSimilarityAttributizer_6__reduce_cython__(((struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_29JaccardSimilarityAttributizer_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.JaccardSimilarityAttributizer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_29JaccardSimilarityAttributizer_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.JaccardSimilarityAttributizer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_29JaccardSimilarityAttributizer_8__setstate_cython__(((struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_29JaccardSimilarityAttributizer_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.JaccardSimilarityAttributizer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":968
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G, count numberSystems=10, count numberIterations=30, double omega=0.5, index norm=0, bool_t withEdgeScores=False):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _AlgebraicDistance(G._this, numberSystems, numberIterations, omega, norm, withEdgeScores)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_17AlgebraicDistance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_17AlgebraicDistance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  __pyx_t_9networkit_10structures_count __pyx_v_numberSystems;
  __pyx_t_9networkit_10structures_count __pyx_v_numberIterations;
  double __pyx_v_omega;
  __pyx_t_9networkit_10structures_index __pyx_v_norm;
  bool __pyx_v_withEdgeScores;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_numberSystems,&__pyx_n_s_numberIterations,&__pyx_n_s_omega,&__pyx_n_s_norm,&__pyx_n_s_withEdgeScores,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_numberSystems);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_numberIterations);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_omega);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_norm);
          if (value) { values[4] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_withEdgeScores);
          if (value) { values[5] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 968, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_numberSystems = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_numberSystems == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L3_error)
    } else {
      __pyx_v_numberSystems = ((__pyx_t_9networkit_10structures_count)10);
    }
    if (values[2]) {
      __pyx_v_numberIterations = __Pyx_PyInt_As_uint64_t(values[2]); if (unlikely((__pyx_v_numberIterations == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L3_error)
    } else {
      __pyx_v_numberIterations = ((__pyx_t_9networkit_10structures_count)30);
    }
    if (values[3]) {
      __pyx_v_omega = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L3_error)
    } else {
      __pyx_v_omega = ((double)0.5);
    }
    if (values[4]) {
      __pyx_v_norm = __Pyx_PyInt_As_uint64_t(values[4]); if (unlikely((__pyx_v_norm == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L3_error)
    } else {
      __pyx_v_norm = ((__pyx_t_9networkit_10structures_index)0);
    }
    if (values[5]) {
      __pyx_v_withEdgeScores = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_withEdgeScores == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L3_error)
    } else {
      __pyx_v_withEdgeScores = ((bool)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 6, __pyx_nargs); __PYX_ERR(0, 968, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.AlgebraicDistance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 968, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_17AlgebraicDistance___cinit__(((struct __pyx_obj_9networkit_8distance_AlgebraicDistance *)__pyx_v_self), __pyx_v_G, __pyx_v_numberSystems, __pyx_v_numberIterations, __pyx_v_omega, __pyx_v_norm, __pyx_v_withEdgeScores);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_17AlgebraicDistance___cinit__(struct __pyx_obj_9networkit_8distance_AlgebraicDistance *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_count __pyx_v_numberSystems, __pyx_t_9networkit_10structures_count __pyx_v_numberIterations, double __pyx_v_omega, __pyx_t_9networkit_10structures_index __pyx_v_norm, bool __pyx_v_withEdgeScores) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::AlgebraicDistance *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":969
 * 
 * 	def __cinit__(self, Graph G, count numberSystems=10, count numberIterations=30, double omega=0.5, index norm=0, bool_t withEdgeScores=False):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _AlgebraicDistance(G._this, numberSystems, numberIterations, omega, norm, withEdgeScores)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":970
 * 	def __cinit__(self, Graph G, count numberSystems=10, count numberIterations=30, double omega=0.5, index norm=0, bool_t withEdgeScores=False):
 * 		self._G = G
 * 		self._this = new _AlgebraicDistance(G._this, numberSystems, numberIterations, omega, norm, withEdgeScores)             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new NetworKit::AlgebraicDistance(__pyx_v_G->_this, __pyx_v_numberSystems, __pyx_v_numberIterations, __pyx_v_omega, __pyx_v_norm, __pyx_v_withEdgeScores);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 970, __pyx_L1_error)
  }
  __pyx_v_self->_this = __pyx_t_1;

  /* "networkit/distance.pyx":968
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G, count numberSystems=10, count numberIterations=30, double omega=0.5, index norm=0, bool_t withEdgeScores=False):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _AlgebraicDistance(G._this, numberSystems, numberIterations, omega, norm, withEdgeScores)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.AlgebraicDistance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":972
 * 		self._this = new _AlgebraicDistance(G._this, numberSystems, numberIterations, omega, norm, withEdgeScores)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self._this
 * 
 */

/* Python wrapper */
static void __pyx_pw_9networkit_8distance_17AlgebraicDistance_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_8distance_17AlgebraicDistance_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_9networkit_8distance_17AlgebraicDistance_2__dealloc__(((struct __pyx_obj_9networkit_8distance_AlgebraicDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_8distance_17AlgebraicDistance_2__dealloc__(struct __pyx_obj_9networkit_8distance_AlgebraicDistance *__pyx_v_self) {

  /* "networkit/distance.pyx":973
 * 
 * 	def __dealloc__(self):
 * 		del self._this             # <<<<<<<<<<<<<<
 * 
 * 	def preprocess(self):
 */
  delete __pyx_v_self->_this;

  /* "networkit/distance.pyx":972
 * 		self._this = new _AlgebraicDistance(G._this, numberSystems, numberIterations, omega, norm, withEdgeScores)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self._this
 * 
 */

  /* function exit code */
}

/* "networkit/distance.pyx":975
 * 		del self._this
 * 
 * 	def preprocess(self):             # <<<<<<<<<<<<<<
 * 		self._this.preprocess()
 * 		return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_17AlgebraicDistance_5preprocess(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_17AlgebraicDistance_5preprocess = {"preprocess", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_17AlgebraicDistance_5preprocess, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_17AlgebraicDistance_5preprocess(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("preprocess (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("preprocess", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "preprocess", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_17AlgebraicDistance_4preprocess(((struct __pyx_obj_9networkit_8distance_AlgebraicDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_17AlgebraicDistance_4preprocess(struct __pyx_obj_9networkit_8distance_AlgebraicDistance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("preprocess", 1);

  /* "networkit/distance.pyx":976
 * 
 * 	def preprocess(self):
 * 		self._this.preprocess()             # <<<<<<<<<<<<<<
 * 		return self
 * 
 */
  try {
    __pyx_v_self->_this->preprocess();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 976, __pyx_L1_error)
  }

  /* "networkit/distance.pyx":977
 * 	def preprocess(self):
 * 		self._this.preprocess()
 * 		return self             # <<<<<<<<<<<<<<
 * 
 * 	def distance(self, node u, node v):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "networkit/distance.pyx":975
 * 		del self._this
 * 
 * 	def preprocess(self):             # <<<<<<<<<<<<<<
 * 		self._this.preprocess()
 * 		return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.AlgebraicDistance.preprocess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":979
 * 		return self
 * 
 * 	def distance(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		return self._this.distance(u, v)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_17AlgebraicDistance_7distance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_17AlgebraicDistance_7distance = {"distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_17AlgebraicDistance_7distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_17AlgebraicDistance_7distance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __pyx_t_9networkit_10structures_node __pyx_v_u;
  __pyx_t_9networkit_10structures_node __pyx_v_v;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,&__pyx_n_s_v,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_u)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 979, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_v)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 979, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 2, 2, 1); __PYX_ERR(0, 979, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "distance") < 0)) __PYX_ERR(0, 979, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_u = __Pyx_PyInt_As_uint64_t(values[0]); if (unlikely((__pyx_v_u == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 979, __pyx_L3_error)
    __pyx_v_v = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_v == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 979, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 979, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.AlgebraicDistance.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_17AlgebraicDistance_6distance(((struct __pyx_obj_9networkit_8distance_AlgebraicDistance *)__pyx_v_self), __pyx_v_u, __pyx_v_v);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_17AlgebraicDistance_6distance(struct __pyx_obj_9networkit_8distance_AlgebraicDistance *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_u, __pyx_t_9networkit_10structures_node __pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 1);

  /* "networkit/distance.pyx":980
 * 
 * 	def distance(self, node u, node v):
 * 		return self._this.distance(u, v)             # <<<<<<<<<<<<<<
 * 
 * 	def getEdgeScores(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_this->distance(__pyx_v_u, __pyx_v_v);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 980, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":979
 * 		return self
 * 
 * 	def distance(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		return self._this.distance(u, v)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.AlgebraicDistance.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":982
 * 		return self._this.distance(u, v)
 * 
 * 	def getEdgeScores(self):             # <<<<<<<<<<<<<<
 * 		return self._this.getEdgeScores()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_17AlgebraicDistance_9getEdgeScores(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_17AlgebraicDistance_9getEdgeScores = {"getEdgeScores", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_17AlgebraicDistance_9getEdgeScores, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_17AlgebraicDistance_9getEdgeScores(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getEdgeScores (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getEdgeScores", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getEdgeScores", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_17AlgebraicDistance_8getEdgeScores(((struct __pyx_obj_9networkit_8distance_AlgebraicDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_17AlgebraicDistance_8getEdgeScores(struct __pyx_obj_9networkit_8distance_AlgebraicDistance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::vector<double> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getEdgeScores", 1);

  /* "networkit/distance.pyx":983
 * 
 * 	def getEdgeScores(self):
 * 		return self._this.getEdgeScores()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/CommuteTimeDistance.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_this->getEdgeScores();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 983, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":982
 * 		return self._this.distance(u, v)
 * 
 * 	def getEdgeScores(self):             # <<<<<<<<<<<<<<
 * 		return self._this.getEdgeScores()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.AlgebraicDistance.getEdgeScores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_17AlgebraicDistance_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_17AlgebraicDistance_11__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_17AlgebraicDistance_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_17AlgebraicDistance_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_17AlgebraicDistance_10__reduce_cython__(((struct __pyx_obj_9networkit_8distance_AlgebraicDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_17AlgebraicDistance_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_AlgebraicDistance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.AlgebraicDistance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_17AlgebraicDistance_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_17AlgebraicDistance_13__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_17AlgebraicDistance_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_17AlgebraicDistance_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.AlgebraicDistance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_17AlgebraicDistance_12__setstate_cython__(((struct __pyx_obj_9networkit_8distance_AlgebraicDistance *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_17AlgebraicDistance_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_AlgebraicDistance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.AlgebraicDistance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1013
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self,  Graph G, double tol = 0.1):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _CommuteTimeDistance(G._this, tol)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_19CommuteTimeDistance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_19CommuteTimeDistance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  double __pyx_v_tol;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_tol,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1013, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tol);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1013, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1013, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_tol = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_tol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1013, __pyx_L3_error)
    } else {
      __pyx_v_tol = ((double)0.1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1013, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.CommuteTimeDistance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1013, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_19CommuteTimeDistance___cinit__(((struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *)__pyx_v_self), __pyx_v_G, __pyx_v_tol);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_19CommuteTimeDistance___cinit__(struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_tol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::CommuteTimeDistance *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":1014
 * 
 * 	def __cinit__(self,  Graph G, double tol = 0.1):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _CommuteTimeDistance(G._this, tol)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":1015
 * 	def __cinit__(self,  Graph G, double tol = 0.1):
 * 		self._G = G
 * 		self._this = new _CommuteTimeDistance(G._this, tol)             # <<<<<<<<<<<<<<
 * 
 * 	def runApproximation(self):
 */
  try {
    __pyx_t_1 = new NetworKit::CommuteTimeDistance(__pyx_v_G->_this, __pyx_v_tol);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1015, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/distance.pyx":1013
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self,  Graph G, double tol = 0.1):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _CommuteTimeDistance(G._this, tol)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.CommuteTimeDistance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1017
 * 		self._this = new _CommuteTimeDistance(G._this, tol)
 * 
 * 	def runApproximation(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		runApproximation()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_19CommuteTimeDistance_3runApproximation(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_19CommuteTimeDistance_2runApproximation, " \n\t\trunApproximation()\n\t\t\n\t\tComputes approximation of the ECTD. \n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_19CommuteTimeDistance_3runApproximation = {"runApproximation", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19CommuteTimeDistance_3runApproximation, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_19CommuteTimeDistance_2runApproximation};
static PyObject *__pyx_pw_9networkit_8distance_19CommuteTimeDistance_3runApproximation(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("runApproximation (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("runApproximation", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "runApproximation", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_19CommuteTimeDistance_2runApproximation(((struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_19CommuteTimeDistance_2runApproximation(struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("runApproximation", 1);

  /* "networkit/distance.pyx":1023
 * 		Computes approximation of the ECTD.
 * 		"""
 * 		return (<_CommuteTimeDistance*>(self._this)).runApproximation()             # <<<<<<<<<<<<<<
 * 
 * 	def runParallelApproximation(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    ((NetworKit::CommuteTimeDistance *)__pyx_v_self->__pyx_base.__pyx_base._this)->runApproximation();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1023, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":1017
 * 		self._this = new _CommuteTimeDistance(G._this, tol)
 * 
 * 	def runApproximation(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		runApproximation()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.distance.CommuteTimeDistance.runApproximation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1025
 * 		return (<_CommuteTimeDistance*>(self._this)).runApproximation()
 * 
 * 	def runParallelApproximation(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		runParallelApproximation()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_19CommuteTimeDistance_5runParallelApproximation(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_19CommuteTimeDistance_4runParallelApproximation, " \n\t\trunParallelApproximation()\n\t\t\n\t\tComputes approximation (in parallel) of the ECTD. \n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_19CommuteTimeDistance_5runParallelApproximation = {"runParallelApproximation", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19CommuteTimeDistance_5runParallelApproximation, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_19CommuteTimeDistance_4runParallelApproximation};
static PyObject *__pyx_pw_9networkit_8distance_19CommuteTimeDistance_5runParallelApproximation(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("runParallelApproximation (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("runParallelApproximation", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "runParallelApproximation", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_19CommuteTimeDistance_4runParallelApproximation(((struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_19CommuteTimeDistance_4runParallelApproximation(struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("runParallelApproximation", 1);

  /* "networkit/distance.pyx":1031
 * 		Computes approximation (in parallel) of the ECTD.
 * 		"""
 * 		return (<_CommuteTimeDistance*>(self._this)).runParallelApproximation()             # <<<<<<<<<<<<<<
 * 
 * 	def distance(self, u, v):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    ((NetworKit::CommuteTimeDistance *)__pyx_v_self->__pyx_base.__pyx_base._this)->runParallelApproximation();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1031, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":1025
 * 		return (<_CommuteTimeDistance*>(self._this)).runApproximation()
 * 
 * 	def runParallelApproximation(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		runParallelApproximation()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.distance.CommuteTimeDistance.runParallelApproximation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1033
 * 		return (<_CommuteTimeDistance*>(self._this)).runParallelApproximation()
 * 
 * 	def distance(self, u, v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		distance(u, v)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_19CommuteTimeDistance_7distance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_19CommuteTimeDistance_6distance, "\n\t\tdistance(u, v)\n\n\t\tReturns the ECTD between node u and node v.\n\n\t\tParameters\n\t\t----------\n\t\tu : int\n\t\t\tIndex of node u.\n\t\tv : int\n\t\t\tIndex of node v.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tECTD between node u and v.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_19CommuteTimeDistance_7distance = {"distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19CommuteTimeDistance_7distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_19CommuteTimeDistance_6distance};
static PyObject *__pyx_pw_9networkit_8distance_19CommuteTimeDistance_7distance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_u = 0;
  PyObject *__pyx_v_v = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,&__pyx_n_s_v,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_u)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1033, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_v)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1033, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 2, 2, 1); __PYX_ERR(0, 1033, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "distance") < 0)) __PYX_ERR(0, 1033, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_u = values[0];
    __pyx_v_v = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1033, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.CommuteTimeDistance.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_19CommuteTimeDistance_6distance(((struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *)__pyx_v_self), __pyx_v_u, __pyx_v_v);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_19CommuteTimeDistance_6distance(struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *__pyx_v_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  __pyx_t_9networkit_10structures_node __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 1);

  /* "networkit/distance.pyx":1051
 * 			ECTD between node u and v.
 * 		"""
 * 		return (<_CommuteTimeDistance*>(self._this)).distance(u, v)             # <<<<<<<<<<<<<<
 * 
 * 	def runSinglePair(self, u, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_u); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1051, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_v_v); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1051, __pyx_L1_error)
  try {
    __pyx_t_3 = ((NetworKit::CommuteTimeDistance *)__pyx_v_self->__pyx_base.__pyx_base._this)->distance(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1051, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":1033
 * 		return (<_CommuteTimeDistance*>(self._this)).runParallelApproximation()
 * 
 * 	def distance(self, u, v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		distance(u, v)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.distance.CommuteTimeDistance.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1053
 * 		return (<_CommuteTimeDistance*>(self._this)).distance(u, v)
 * 
 * 	def runSinglePair(self, u, v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		runSinglePair(u, v)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_19CommuteTimeDistance_9runSinglePair(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_19CommuteTimeDistance_8runSinglePair, "\n\t\trunSinglePair(u, v)\n\t\t\n\t\tReturns the ECTD between node u and node v, without preprocessing.\n\n\t\tParameters\n\t\t----------\n\t\tu : int\n\t\t\tIndex of node u.\n\t\tv : int\n\t\t\tIndex of node v.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tECTD (without preprocessing) between node u and v.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_19CommuteTimeDistance_9runSinglePair = {"runSinglePair", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19CommuteTimeDistance_9runSinglePair, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_19CommuteTimeDistance_8runSinglePair};
static PyObject *__pyx_pw_9networkit_8distance_19CommuteTimeDistance_9runSinglePair(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_u = 0;
  PyObject *__pyx_v_v = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("runSinglePair (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,&__pyx_n_s_v,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_u)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1053, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_v)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1053, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("runSinglePair", 1, 2, 2, 1); __PYX_ERR(0, 1053, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "runSinglePair") < 0)) __PYX_ERR(0, 1053, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_u = values[0];
    __pyx_v_v = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("runSinglePair", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1053, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.CommuteTimeDistance.runSinglePair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_19CommuteTimeDistance_8runSinglePair(((struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *)__pyx_v_self), __pyx_v_u, __pyx_v_v);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_19CommuteTimeDistance_8runSinglePair(struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *__pyx_v_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  __pyx_t_9networkit_10structures_node __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("runSinglePair", 1);

  /* "networkit/distance.pyx":1071
 * 			ECTD (without preprocessing) between node u and v.
 * 		"""
 * 		return (<_CommuteTimeDistance*>(self._this)).runSinglePair(u, v)             # <<<<<<<<<<<<<<
 * 
 * 	def runSingleSource(self, u):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_u); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1071, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_v_v); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1071, __pyx_L1_error)
  try {
    __pyx_t_3 = ((NetworKit::CommuteTimeDistance *)__pyx_v_self->__pyx_base.__pyx_base._this)->runSinglePair(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1071, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":1053
 * 		return (<_CommuteTimeDistance*>(self._this)).distance(u, v)
 * 
 * 	def runSinglePair(self, u, v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		runSinglePair(u, v)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.distance.CommuteTimeDistance.runSinglePair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1073
 * 		return (<_CommuteTimeDistance*>(self._this)).runSinglePair(u, v)
 * 
 * 	def runSingleSource(self, u):             # <<<<<<<<<<<<<<
 * 		"""
 * 		runSingleSource(u)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_19CommuteTimeDistance_11runSingleSource(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_19CommuteTimeDistance_10runSingleSource, "\n\t\trunSingleSource(u)\n\t\t\n\t\tReturns the sum of the ECTDs from u, without preprocessing.\n\n\t\tParameters\n\t\t----------\n\t\tu : int\n\t\t\tIndex of node u.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tSum of the ECTDs from u, without preprocessing.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_19CommuteTimeDistance_11runSingleSource = {"runSingleSource", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19CommuteTimeDistance_11runSingleSource, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_19CommuteTimeDistance_10runSingleSource};
static PyObject *__pyx_pw_9networkit_8distance_19CommuteTimeDistance_11runSingleSource(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_u = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("runSingleSource (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_u)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1073, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "runSingleSource") < 0)) __PYX_ERR(0, 1073, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_u = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("runSingleSource", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1073, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.CommuteTimeDistance.runSingleSource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_19CommuteTimeDistance_10runSingleSource(((struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *)__pyx_v_self), __pyx_v_u);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_19CommuteTimeDistance_10runSingleSource(struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *__pyx_v_self, PyObject *__pyx_v_u) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("runSingleSource", 1);

  /* "networkit/distance.pyx":1089
 * 			Sum of the ECTDs from u, without preprocessing.
 * 		"""
 * 		return (<_CommuteTimeDistance*>(self._this)).runSingleSource(u)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/NeighborhoodFunctionHeuristic.hpp>" namespace "NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_u); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1089, __pyx_L1_error)
  try {
    __pyx_t_2 = ((NetworKit::CommuteTimeDistance *)__pyx_v_self->__pyx_base.__pyx_base._this)->runSingleSource(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1089, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":1073
 * 		return (<_CommuteTimeDistance*>(self._this)).runSinglePair(u, v)
 * 
 * 	def runSingleSource(self, u):             # <<<<<<<<<<<<<<
 * 		"""
 * 		runSingleSource(u)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.distance.CommuteTimeDistance.runSingleSource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_19CommuteTimeDistance_13__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_19CommuteTimeDistance_13__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19CommuteTimeDistance_13__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_19CommuteTimeDistance_13__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_19CommuteTimeDistance_12__reduce_cython__(((struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_19CommuteTimeDistance_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.CommuteTimeDistance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_19CommuteTimeDistance_15__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_19CommuteTimeDistance_15__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19CommuteTimeDistance_15__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_19CommuteTimeDistance_15__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.CommuteTimeDistance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_19CommuteTimeDistance_14__setstate_cython__(((struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_19CommuteTimeDistance_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.CommuteTimeDistance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1130
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, count nSamples=0, strategy=SelectionStrategy.SPLIT):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _NeighborhoodFunctionHeuristic(G._this, nSamples, strategy)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_29NeighborhoodFunctionHeuristic_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_29NeighborhoodFunctionHeuristic_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  __pyx_t_9networkit_10structures_count __pyx_v_nSamples;
  PyObject *__pyx_v_strategy = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_nSamples,&__pyx_n_s_strategy,0};
    values[2] = __Pyx_Arg_NewRef_VARARGS(__pyx_k__7);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1130, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_nSamples);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1130, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_strategy);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1130, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1130, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_nSamples = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_nSamples == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1130, __pyx_L3_error)
    } else {
      __pyx_v_nSamples = ((__pyx_t_9networkit_10structures_count)0);
    }
    __pyx_v_strategy = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 1130, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunctionHeuristic.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 1130, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_29NeighborhoodFunctionHeuristic___cinit__(((struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *)__pyx_v_self), __pyx_v_G, __pyx_v_nSamples, __pyx_v_strategy);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_29NeighborhoodFunctionHeuristic___cinit__(struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_count __pyx_v_nSamples, PyObject *__pyx_v_strategy) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy __pyx_t_1;
  NetworKit::NeighborhoodFunctionHeuristic *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":1131
 * 
 * 	def __cinit__(self, Graph G not None, count nSamples=0, strategy=SelectionStrategy.SPLIT):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _NeighborhoodFunctionHeuristic(G._this, nSamples, strategy)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":1132
 * 	def __cinit__(self, Graph G not None, count nSamples=0, strategy=SelectionStrategy.SPLIT):
 * 		self._G = G
 * 		self._this = new _NeighborhoodFunctionHeuristic(G._this, nSamples, strategy)             # <<<<<<<<<<<<<<
 * 
 * 	def getNeighborhoodFunction(self):
 */
  __pyx_t_1 = ((enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)__Pyx_PyInt_As_enum__NetworKit_3a__3a_NeighborhoodFunctionHeuristic_3a__3a_SelectionStrategy(__pyx_v_strategy)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1132, __pyx_L1_error)
  try {
    __pyx_t_2 = new NetworKit::NeighborhoodFunctionHeuristic(__pyx_v_G->_this, __pyx_v_nSamples, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1132, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_2;

  /* "networkit/distance.pyx":1130
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, count nSamples=0, strategy=SelectionStrategy.SPLIT):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _NeighborhoodFunctionHeuristic(G._this, nSamples, strategy)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunctionHeuristic.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1134
 * 		self._this = new _NeighborhoodFunctionHeuristic(G._this, nSamples, strategy)
 * 
 * 	def getNeighborhoodFunction(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getNeighborhoodFunction()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_29NeighborhoodFunctionHeuristic_3getNeighborhoodFunction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_29NeighborhoodFunctionHeuristic_2getNeighborhoodFunction, "\n\t\tgetNeighborhoodFunction()\n\n\t\tReturns the neighborhood function of the graph.\n\n\t\tReturns\n\t\t-------\n\t\tlist(int)\n\t\t\tThe i-th element denotes the number of node pairs that have a distance at most (i+1).\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_29NeighborhoodFunctionHeuristic_3getNeighborhoodFunction = {"getNeighborhoodFunction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_29NeighborhoodFunctionHeuristic_3getNeighborhoodFunction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_29NeighborhoodFunctionHeuristic_2getNeighborhoodFunction};
static PyObject *__pyx_pw_9networkit_8distance_29NeighborhoodFunctionHeuristic_3getNeighborhoodFunction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNeighborhoodFunction (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getNeighborhoodFunction", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getNeighborhoodFunction", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_29NeighborhoodFunctionHeuristic_2getNeighborhoodFunction(((struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_29NeighborhoodFunctionHeuristic_2getNeighborhoodFunction(struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::vector<__pyx_t_9networkit_10structures_count> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNeighborhoodFunction", 1);

  /* "networkit/distance.pyx":1145
 * 			The i-th element denotes the number of node pairs that have a distance at most (i+1).
 * 		"""
 * 		return (<_NeighborhoodFunctionHeuristic*>(self._this)).getNeighborhoodFunction()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/APSP.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::NeighborhoodFunctionHeuristic *)__pyx_v_self->__pyx_base.__pyx_base._this)->getNeighborhoodFunction();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1145, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_count(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":1134
 * 		self._this = new _NeighborhoodFunctionHeuristic(G._this, nSamples, strategy)
 * 
 * 	def getNeighborhoodFunction(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getNeighborhoodFunction()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunctionHeuristic.getNeighborhoodFunction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_29NeighborhoodFunctionHeuristic_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_29NeighborhoodFunctionHeuristic_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_29NeighborhoodFunctionHeuristic_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_29NeighborhoodFunctionHeuristic_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_29NeighborhoodFunctionHeuristic_4__reduce_cython__(((struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_29NeighborhoodFunctionHeuristic_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunctionHeuristic.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_29NeighborhoodFunctionHeuristic_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_29NeighborhoodFunctionHeuristic_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_29NeighborhoodFunctionHeuristic_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_29NeighborhoodFunctionHeuristic_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunctionHeuristic.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_29NeighborhoodFunctionHeuristic_6__setstate_cython__(((struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_29NeighborhoodFunctionHeuristic_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.NeighborhoodFunctionHeuristic.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1168
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _APSP(G._this)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_4APSP_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_4APSP_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1168, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1168, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1168, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.APSP.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1168, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_4APSP___cinit__(((struct __pyx_obj_9networkit_8distance_APSP *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_4APSP___cinit__(struct __pyx_obj_9networkit_8distance_APSP *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::APSP *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":1169
 * 
 * 	def __cinit__(self, Graph G):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _APSP(G._this)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":1170
 * 	def __cinit__(self, Graph G):
 * 		self._G = G
 * 		self._this = new _APSP(G._this)             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new NetworKit::APSP(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1170, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/distance.pyx":1168
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _APSP(G._this)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.APSP.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1172
 * 		self._this = new _APSP(G._this)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		self._G = None
 * 
 */

/* Python wrapper */
static void __pyx_pw_9networkit_8distance_4APSP_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_8distance_4APSP_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_9networkit_8distance_4APSP_2__dealloc__(((struct __pyx_obj_9networkit_8distance_APSP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_8distance_4APSP_2__dealloc__(struct __pyx_obj_9networkit_8distance_APSP *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 1);

  /* "networkit/distance.pyx":1173
 * 
 * 	def __dealloc__(self):
 * 		self._G = None             # <<<<<<<<<<<<<<
 * 
 * 	def getDistances(self, asarray=None):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None);

  /* "networkit/distance.pyx":1172
 * 		self._this = new _APSP(G._this)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		self._G = None
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "networkit/distance.pyx":1175
 * 		self._G = None
 * 
 * 	def getDistances(self, asarray=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistances(asarray=None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4APSP_5getDistances(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4APSP_4getDistances, "\n\t\tgetDistances(asarray=None)\n\n\t\tReturns a vector of vectors of distances between each node pair.\n\n\t\tParameters\n\t\t----------\n\t\tasarray : optional\n\t\t\tReturn the result as a numpy array. Default: Falsy.\n\n\t\tReturns\n\t\t-------\n\t\tlist(list(float)) or np.ndarray\n\t\t\tThe shortest-path distances from each node to any other node in the graph.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4APSP_5getDistances = {"getDistances", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4APSP_5getDistances, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4APSP_4getDistances};
static PyObject *__pyx_pw_9networkit_8distance_4APSP_5getDistances(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_asarray = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDistances (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_asarray,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_asarray);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1175, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getDistances") < 0)) __PYX_ERR(0, 1175, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_asarray = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getDistances", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1175, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.APSP.getDistances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4APSP_4getDistances(((struct __pyx_obj_9networkit_8distance_APSP *)__pyx_v_self), __pyx_v_asarray);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4APSP_4getDistances(struct __pyx_obj_9networkit_8distance_APSP *__pyx_v_self, PyObject *__pyx_v_asarray) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::vector<std::vector<__pyx_t_9networkit_10structures_edgeweight> > > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDistances", 1);

  /* "networkit/distance.pyx":1191
 * 			The shortest-path distances from each node to any other node in the graph.
 * 		"""
 * 		return maybe_asarray_2d(&(<_APSP*>(self._this)).getDistances(), asarray)             # <<<<<<<<<<<<<<
 * 
 * 	def getDistance(self, node u, node v):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::APSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->getDistances();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1191, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_fuse_2__pyx_f_9networkit_7helpers_maybe_asarray_2d((&__pyx_t_1), __pyx_v_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":1175
 * 		self._G = None
 * 
 * 	def getDistances(self, asarray=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistances(asarray=None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.APSP.getDistances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1193
 * 		return maybe_asarray_2d(&(<_APSP*>(self._this)).getDistances(), asarray)
 * 
 * 	def getDistance(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistance(u, v)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4APSP_7getDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4APSP_6getDistance, "\n\t\tgetDistance(u, v)\n\t\t\n\t\tReturns the length of the shortest path from source u to target v.\n\n\t\tParameters\n\t\t----------\n\t\tu : node\n\t\t\tIndex of source node u.\n\t\tv : node\n\t\t\tIndex of target node v.\n\n\t\tReturns\n\t\t-------\n\t\tint or float\n\t\t\tThe distance from u to v. Returned value is of type int, if the graph is unweighted - otherwise the return\n\t\t\ttype is float.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4APSP_7getDistance = {"getDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4APSP_7getDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4APSP_6getDistance};
static PyObject *__pyx_pw_9networkit_8distance_4APSP_7getDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __pyx_t_9networkit_10structures_node __pyx_v_u;
  __pyx_t_9networkit_10structures_node __pyx_v_v;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDistance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,&__pyx_n_s_v,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_u)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1193, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_v)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1193, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getDistance", 1, 2, 2, 1); __PYX_ERR(0, 1193, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getDistance") < 0)) __PYX_ERR(0, 1193, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_u = __Pyx_PyInt_As_uint64_t(values[0]); if (unlikely((__pyx_v_u == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1193, __pyx_L3_error)
    __pyx_v_v = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_v == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1193, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getDistance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1193, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.APSP.getDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4APSP_6getDistance(((struct __pyx_obj_9networkit_8distance_APSP *)__pyx_v_self), __pyx_v_u, __pyx_v_v);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4APSP_6getDistance(struct __pyx_obj_9networkit_8distance_APSP *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_u, __pyx_t_9networkit_10structures_node __pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_edgeweight __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDistance", 1);

  /* "networkit/distance.pyx":1212
 * 			type is float.
 * 		"""
 * 		return (<_APSP*>(self._this)).getDistance(u, v)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/SPSP.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::APSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->getDistance(__pyx_v_u, __pyx_v_v);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1212, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":1193
 * 		return maybe_asarray_2d(&(<_APSP*>(self._this)).getDistances(), asarray)
 * 
 * 	def getDistance(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistance(u, v)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.APSP.getDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4APSP_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_4APSP_9__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4APSP_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_4APSP_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_4APSP_8__reduce_cython__(((struct __pyx_obj_9networkit_8distance_APSP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4APSP_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_APSP *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.APSP.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4APSP_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_4APSP_11__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4APSP_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_4APSP_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.APSP.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4APSP_10__setstate_cython__(((struct __pyx_obj_9networkit_8distance_APSP *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4APSP_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_APSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.APSP.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1242
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, vector[node] sources, vector[node] targets = []):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		if not targets.empty():
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_4SPSP_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_4SPSP_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_sources;
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_targets;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_sources,&__pyx_n_s_targets,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sources)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(0, 1242, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_targets);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1242, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_sources = __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_targets = __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L3_error)
    } else {
      __pyx_v_targets = __pyx_k__8;
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 1242, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.SPSP.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 1242, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_4SPSP___cinit__(((struct __pyx_obj_9networkit_8distance_SPSP *)__pyx_v_self), __pyx_v_G, __PYX_STD_MOVE_IF_SUPPORTED(__pyx_v_sources), __PYX_STD_MOVE_IF_SUPPORTED(__pyx_v_targets));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_4SPSP___cinit__(struct __pyx_obj_9networkit_8distance_SPSP *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_sources, std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_targets) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  NetworKit::SPSP *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":1243
 * 
 * 	def __cinit__(self, Graph G not None, vector[node] sources, vector[node] targets = []):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		if not targets.empty():
 * 			self._this = new _SPSP(G._this, sources.begin(), sources.end(), targets.begin(), targets.end())
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":1244
 * 	def __cinit__(self, Graph G not None, vector[node] sources, vector[node] targets = []):
 * 		self._G = G
 * 		if not targets.empty():             # <<<<<<<<<<<<<<
 * 			self._this = new _SPSP(G._this, sources.begin(), sources.end(), targets.begin(), targets.end())
 * 		else:
 */
  __pyx_t_1 = (!__pyx_v_targets.empty());
  if (__pyx_t_1) {

    /* "networkit/distance.pyx":1245
 * 		self._G = G
 * 		if not targets.empty():
 * 			self._this = new _SPSP(G._this, sources.begin(), sources.end(), targets.begin(), targets.end())             # <<<<<<<<<<<<<<
 * 		else:
 * 			self._this = new _SPSP(G._this, sources.begin(), sources.end())
 */
    try {
      __pyx_t_2 = new NetworKit::SPSP(__pyx_v_G->_this, __pyx_v_sources.begin(), __pyx_v_sources.end(), __pyx_v_targets.begin(), __pyx_v_targets.end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1245, __pyx_L1_error)
    }
    __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_2;

    /* "networkit/distance.pyx":1244
 * 	def __cinit__(self, Graph G not None, vector[node] sources, vector[node] targets = []):
 * 		self._G = G
 * 		if not targets.empty():             # <<<<<<<<<<<<<<
 * 			self._this = new _SPSP(G._this, sources.begin(), sources.end(), targets.begin(), targets.end())
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "networkit/distance.pyx":1247
 * 			self._this = new _SPSP(G._this, sources.begin(), sources.end(), targets.begin(), targets.end())
 * 		else:
 * 			self._this = new _SPSP(G._this, sources.begin(), sources.end())             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  /*else*/ {
    try {
      __pyx_t_2 = new NetworKit::SPSP(__pyx_v_G->_this, __pyx_v_sources.begin(), __pyx_v_sources.end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1247, __pyx_L1_error)
    }
    __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_2;
  }
  __pyx_L3:;

  /* "networkit/distance.pyx":1242
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, vector[node] sources, vector[node] targets = []):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		if not targets.empty():
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.SPSP.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1249
 * 			self._this = new _SPSP(G._this, sources.begin(), sources.end())
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		self._G = None
 * 
 */

/* Python wrapper */
static void __pyx_pw_9networkit_8distance_4SPSP_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_8distance_4SPSP_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_9networkit_8distance_4SPSP_2__dealloc__(((struct __pyx_obj_9networkit_8distance_SPSP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_8distance_4SPSP_2__dealloc__(struct __pyx_obj_9networkit_8distance_SPSP *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 1);

  /* "networkit/distance.pyx":1250
 * 
 * 	def __dealloc__(self):
 * 		self._G = None             # <<<<<<<<<<<<<<
 * 
 * 	def getDistances(self, asarray=None):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None);

  /* "networkit/distance.pyx":1249
 * 			self._this = new _SPSP(G._this, sources.begin(), sources.end())
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		self._G = None
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "networkit/distance.pyx":1252
 * 		self._G = None
 * 
 * 	def getDistances(self, asarray=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistances(asarray=None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SPSP_5getDistances(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4SPSP_4getDistances, "\n\t\tgetDistances(asarray=None)\n\n\t\tReturns a list of lists of distances between each source node\n\t\tand either all the other nodes (if no targets have been specified) or all target nodes.\n\n\t\tParameters\n\t\t----------\n\t\tasarray : optional\n\t\t\tReturn the result as a numpy array. Default: Falsy.\n\n\t\tReturns\n\t\t-------\n\t\tlist(list(float)) or np.ndarray\n\t\t\tThe shortest-path distances from each source node to the target nodes (if target nodes\n\t\t\thave been specified), or any other node in the graph.\n\n\t\tReturns\n\t\t-------\n\t\tlist(list(float)) or np.ndarray\n\t\t\tThe shortest-path distances from each source node to any other node\n\t\t\tin the graph.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4SPSP_5getDistances = {"getDistances", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SPSP_5getDistances, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SPSP_4getDistances};
static PyObject *__pyx_pw_9networkit_8distance_4SPSP_5getDistances(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_asarray = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDistances (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_asarray,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_asarray);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1252, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getDistances") < 0)) __PYX_ERR(0, 1252, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_asarray = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getDistances", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1252, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.SPSP.getDistances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4SPSP_4getDistances(((struct __pyx_obj_9networkit_8distance_SPSP *)__pyx_v_self), __pyx_v_asarray);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SPSP_4getDistances(struct __pyx_obj_9networkit_8distance_SPSP *__pyx_v_self, PyObject *__pyx_v_asarray) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::vector<std::vector<__pyx_t_9networkit_10structures_edgeweight> > > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDistances", 1);

  /* "networkit/distance.pyx":1276
 * 			in the graph.
 * 		"""
 * 		return maybe_asarray_2d(&(<_SPSP*>self._this).getDistances(), asarray)             # <<<<<<<<<<<<<<
 * 
 * 	def getDistance(self, node u, node v):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::SPSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->getDistances();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1276, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_fuse_2__pyx_f_9networkit_7helpers_maybe_asarray_2d((&__pyx_t_1), __pyx_v_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":1252
 * 		self._G = None
 * 
 * 	def getDistances(self, asarray=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistances(asarray=None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.SPSP.getDistances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1278
 * 		return maybe_asarray_2d(&(<_SPSP*>self._this).getDistances(), asarray)
 * 
 * 	def getDistance(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistance(u, v)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SPSP_7getDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4SPSP_6getDistance, "\n\t\tgetDistance(u, v)\n\n\t\tReturns the length of the shortest path from source u to target v.\n\n\t\tParameters\n\t\t----------\n\t\tu : node\n\t\t\tIndex of source node.\n\t\tv : node\n\t\t\tIndex of target node.\n\n\t\tReturns\n\t\t-------\n\t\tfloat\n\t\t\tThe distance from u to v.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4SPSP_7getDistance = {"getDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SPSP_7getDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SPSP_6getDistance};
static PyObject *__pyx_pw_9networkit_8distance_4SPSP_7getDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __pyx_t_9networkit_10structures_node __pyx_v_u;
  __pyx_t_9networkit_10structures_node __pyx_v_v;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDistance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,&__pyx_n_s_v,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_u)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1278, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_v)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1278, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getDistance", 1, 2, 2, 1); __PYX_ERR(0, 1278, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getDistance") < 0)) __PYX_ERR(0, 1278, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_u = __Pyx_PyInt_As_uint64_t(values[0]); if (unlikely((__pyx_v_u == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1278, __pyx_L3_error)
    __pyx_v_v = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_v == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1278, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getDistance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1278, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.SPSP.getDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4SPSP_6getDistance(((struct __pyx_obj_9networkit_8distance_SPSP *)__pyx_v_self), __pyx_v_u, __pyx_v_v);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SPSP_6getDistance(struct __pyx_obj_9networkit_8distance_SPSP *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_u, __pyx_t_9networkit_10structures_node __pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_edgeweight __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDistance", 1);

  /* "networkit/distance.pyx":1296
 * 			The distance from u to v.
 * 		"""
 * 		return (<_SPSP*>self._this).getDistance(u, v)             # <<<<<<<<<<<<<<
 * 
 * 	def setSources(self, vector[node] sources):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::SPSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->getDistance(__pyx_v_u, __pyx_v_v);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1296, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":1278
 * 		return maybe_asarray_2d(&(<_SPSP*>self._this).getDistances(), asarray)
 * 
 * 	def getDistance(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistance(u, v)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.SPSP.getDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1298
 * 		return (<_SPSP*>self._this).getDistance(u, v)
 * 
 * 	def setSources(self, vector[node] sources):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setSources(sources)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SPSP_9setSources(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4SPSP_8setSources, " \n\t\tsetSources(sources)\n\t\t\n\t\tSets the source nodes.\n\n\t\tParameters\n\t\t----------\n\t\tsources : list(int)\n\t\t\tList of the new source nodes.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4SPSP_9setSources = {"setSources", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SPSP_9setSources, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SPSP_8setSources};
static PyObject *__pyx_pw_9networkit_8distance_4SPSP_9setSources(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_sources;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setSources (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sources,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sources)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1298, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setSources") < 0)) __PYX_ERR(0, 1298, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_sources = __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1298, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setSources", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1298, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.SPSP.setSources", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4SPSP_8setSources(((struct __pyx_obj_9networkit_8distance_SPSP *)__pyx_v_self), __PYX_STD_MOVE_IF_SUPPORTED(__pyx_v_sources));

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SPSP_8setSources(struct __pyx_obj_9networkit_8distance_SPSP *__pyx_v_self, std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_sources) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setSources", 1);

  /* "networkit/distance.pyx":1309
 * 			List of the new source nodes.
 * 		"""
 * 		(<_SPSP*>self._this).setSources(sources.begin(), sources.end())             # <<<<<<<<<<<<<<
 * 
 * 	def setTargets(self, vector[node] targets):
 */
  ((NetworKit::SPSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->setSources(__pyx_v_sources.begin(), __pyx_v_sources.end());

  /* "networkit/distance.pyx":1298
 * 		return (<_SPSP*>self._this).getDistance(u, v)
 * 
 * 	def setSources(self, vector[node] sources):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setSources(sources)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1311
 * 		(<_SPSP*>self._this).setSources(sources.begin(), sources.end())
 * 
 * 	def setTargets(self, vector[node] targets):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTargets(targets)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SPSP_11setTargets(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_4SPSP_10setTargets, "\n\t\tsetTargets(targets)\n\t\t\n\t\tSets the target nodes.\n\n\t\tParameters\n\t\t----------\n\t\ttargets : list(int)\n\t\t\tList of the new target nodes.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_4SPSP_11setTargets = {"setTargets", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SPSP_11setTargets, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SPSP_10setTargets};
static PyObject *__pyx_pw_9networkit_8distance_4SPSP_11setTargets(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_targets;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setTargets (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_targets,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_targets)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1311, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setTargets") < 0)) __PYX_ERR(0, 1311, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_targets = __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1311, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setTargets", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1311, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.SPSP.setTargets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4SPSP_10setTargets(((struct __pyx_obj_9networkit_8distance_SPSP *)__pyx_v_self), __PYX_STD_MOVE_IF_SUPPORTED(__pyx_v_targets));

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SPSP_10setTargets(struct __pyx_obj_9networkit_8distance_SPSP *__pyx_v_self, std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_targets) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setTargets", 1);

  /* "networkit/distance.pyx":1322
 * 			List of the new target nodes.
 * 		"""
 * 		(<_SPSP*>self._this).setTargets(targets.begin(), targets.end())             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/DynAPSP.hpp>":
 */
  ((NetworKit::SPSP *)__pyx_v_self->__pyx_base.__pyx_base._this)->setTargets(__pyx_v_targets.begin(), __pyx_v_targets.end());

  /* "networkit/distance.pyx":1311
 * 		(<_SPSP*>self._this).setSources(sources.begin(), sources.end())
 * 
 * 	def setTargets(self, vector[node] targets):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTargets(targets)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SPSP_13__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_4SPSP_13__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SPSP_13__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_4SPSP_13__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_4SPSP_12__reduce_cython__(((struct __pyx_obj_9networkit_8distance_SPSP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SPSP_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_SPSP *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.SPSP.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_4SPSP_15__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_4SPSP_15__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SPSP_15__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_4SPSP_15__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.SPSP.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_4SPSP_14__setstate_cython__(((struct __pyx_obj_9networkit_8distance_SPSP *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_4SPSP_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_SPSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.SPSP.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1341
 * 		The graph.
 * 		"""
 * 	def __init__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynAPSP(G._this)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_7DynAPSP_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_7DynAPSP_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1341, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 1341, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1341, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.DynAPSP.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1341, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_7DynAPSP___init__(((struct __pyx_obj_9networkit_8distance_DynAPSP *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_7DynAPSP___init__(struct __pyx_obj_9networkit_8distance_DynAPSP *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::DynAPSP *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "networkit/distance.pyx":1342
 * 		"""
 * 	def __init__(self, Graph G):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _DynAPSP(G._this)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/distance.pyx":1343
 * 	def __init__(self, Graph G):
 * 		self._G = G
 * 		self._this = new _DynAPSP(G._this)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = new NetworKit::DynAPSP(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1343, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/distance.pyx":1341
 * 		The graph.
 * 		"""
 * 	def __init__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynAPSP(G._this)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.DynAPSP.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_7DynAPSP_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_7DynAPSP_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_7DynAPSP_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_7DynAPSP_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_7DynAPSP_2__reduce_cython__(((struct __pyx_obj_9networkit_8distance_DynAPSP *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_7DynAPSP_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynAPSP *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.DynAPSP.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_7DynAPSP_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_7DynAPSP_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_7DynAPSP_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_7DynAPSP_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.DynAPSP.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_7DynAPSP_4__setstate_cython__(((struct __pyx_obj_9networkit_8distance_DynAPSP *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_7DynAPSP_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynAPSP *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.DynAPSP.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1372
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, source, storePaths=True, storeNodesSortedByDistance=False, target=none):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _BFS(G._this, source, storePaths, storeNodesSortedByDistance, target)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_3BFS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_3BFS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_source = 0;
  PyObject *__pyx_v_storePaths = 0;
  PyObject *__pyx_v_storeNodesSortedByDistance = 0;
  PyObject *__pyx_v_target = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_source,&__pyx_n_s_storePaths,&__pyx_n_s_storeNodesSortedByDistance,&__pyx_n_s_target,0};
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_True));
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_False));
    values[4] = __Pyx_Arg_NewRef_VARARGS(__pyx_k__9);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1372, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_source)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1372, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 5, 1); __PYX_ERR(0, 1372, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_storePaths);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1372, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_storeNodesSortedByDistance);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1372, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_target);
          if (value) { values[4] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1372, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1372, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_source = values[1];
    __pyx_v_storePaths = values[2];
    __pyx_v_storeNodesSortedByDistance = values[3];
    __pyx_v_target = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 5, __pyx_nargs); __PYX_ERR(0, 1372, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.BFS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1372, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_3BFS___cinit__(((struct __pyx_obj_9networkit_8distance_BFS *)__pyx_v_self), __pyx_v_G, __pyx_v_source, __pyx_v_storePaths, __pyx_v_storeNodesSortedByDistance, __pyx_v_target);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_3BFS___cinit__(struct __pyx_obj_9networkit_8distance_BFS *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_source, PyObject *__pyx_v_storePaths, PyObject *__pyx_v_storeNodesSortedByDistance, PyObject *__pyx_v_target) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  bool __pyx_t_2;
  bool __pyx_t_3;
  __pyx_t_9networkit_10structures_node __pyx_t_4;
  NetworKit::BFS *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":1373
 * 
 * 	def __cinit__(self, Graph G, source, storePaths=True, storeNodesSortedByDistance=False, target=none):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _BFS(G._this, source, storePaths, storeNodesSortedByDistance, target)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/distance.pyx":1374
 * 	def __cinit__(self, Graph G, source, storePaths=True, storeNodesSortedByDistance=False, target=none):
 * 		self._G = G
 * 		self._this = new _BFS(G._this, source, storePaths, storeNodesSortedByDistance, target)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/Dijkstra.hpp>":
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_source); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1374, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_storePaths); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1374, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_storeNodesSortedByDistance); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1374, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_v_target); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1374, __pyx_L1_error)
  try {
    __pyx_t_5 = new NetworKit::BFS(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1374, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_5;

  /* "networkit/distance.pyx":1372
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, source, storePaths=True, storeNodesSortedByDistance=False, target=none):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _BFS(G._this, source, storePaths, storeNodesSortedByDistance, target)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.BFS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_3BFS_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_3BFS_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_3BFS_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_3BFS_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_3BFS_2__reduce_cython__(((struct __pyx_obj_9networkit_8distance_BFS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_3BFS_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_BFS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.BFS.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_3BFS_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_3BFS_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_3BFS_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_3BFS_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.BFS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_3BFS_4__setstate_cython__(((struct __pyx_obj_9networkit_8distance_BFS *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_3BFS_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_BFS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.BFS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1401
 * 		Terminate search when the target has been reached. In default-mode, this target is set to None.
 * 	"""
 * 	def __cinit__(self, Graph G, source, storePaths=True, storeNodesSortedByDistance=False, node target=none):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _Dijkstra(G._this, source, storePaths, storeNodesSortedByDistance, target)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_8Dijkstra_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_8Dijkstra_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_source = 0;
  PyObject *__pyx_v_storePaths = 0;
  PyObject *__pyx_v_storeNodesSortedByDistance = 0;
  __pyx_t_9networkit_10structures_node __pyx_v_target;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_source,&__pyx_n_s_storePaths,&__pyx_n_s_storeNodesSortedByDistance,&__pyx_n_s_target,0};
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_True));
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1401, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_source)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1401, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 5, 1); __PYX_ERR(0, 1401, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_storePaths);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1401, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_storeNodesSortedByDistance);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1401, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_target);
          if (value) { values[4] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1401, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1401, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_source = values[1];
    __pyx_v_storePaths = values[2];
    __pyx_v_storeNodesSortedByDistance = values[3];
    if (values[4]) {
      __pyx_v_target = __Pyx_PyInt_As_uint64_t(values[4]); if (unlikely((__pyx_v_target == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1401, __pyx_L3_error)
    } else {
      __pyx_v_target = __pyx_k__10;
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 5, __pyx_nargs); __PYX_ERR(0, 1401, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.Dijkstra.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1401, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_8Dijkstra___cinit__(((struct __pyx_obj_9networkit_8distance_Dijkstra *)__pyx_v_self), __pyx_v_G, __pyx_v_source, __pyx_v_storePaths, __pyx_v_storeNodesSortedByDistance, __pyx_v_target);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_8Dijkstra___cinit__(struct __pyx_obj_9networkit_8distance_Dijkstra *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_source, PyObject *__pyx_v_storePaths, PyObject *__pyx_v_storeNodesSortedByDistance, __pyx_t_9networkit_10structures_node __pyx_v_target) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  bool __pyx_t_2;
  bool __pyx_t_3;
  NetworKit::Dijkstra *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":1402
 * 	"""
 * 	def __cinit__(self, Graph G, source, storePaths=True, storeNodesSortedByDistance=False, node target=none):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _Dijkstra(G._this, source, storePaths, storeNodesSortedByDistance, target)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/distance.pyx":1403
 * 	def __cinit__(self, Graph G, source, storePaths=True, storeNodesSortedByDistance=False, node target=none):
 * 		self._G = G
 * 		self._this = new _Dijkstra(G._this, source, storePaths, storeNodesSortedByDistance, target)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/MultiTargetBFS.hpp>":
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_source); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1403, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_storePaths); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1403, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_storeNodesSortedByDistance); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1403, __pyx_L1_error)
  try {
    __pyx_t_4 = new NetworKit::Dijkstra(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_v_target);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1403, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_4;

  /* "networkit/distance.pyx":1401
 * 		Terminate search when the target has been reached. In default-mode, this target is set to None.
 * 	"""
 * 	def __cinit__(self, Graph G, source, storePaths=True, storeNodesSortedByDistance=False, node target=none):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _Dijkstra(G._this, source, storePaths, storeNodesSortedByDistance, target)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.Dijkstra.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_8Dijkstra_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_8Dijkstra_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_8Dijkstra_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_8Dijkstra_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_8Dijkstra_2__reduce_cython__(((struct __pyx_obj_9networkit_8distance_Dijkstra *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_8Dijkstra_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_Dijkstra *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.Dijkstra.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_8Dijkstra_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_8Dijkstra_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_8Dijkstra_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_8Dijkstra_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.Dijkstra.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_8Dijkstra_4__setstate_cython__(((struct __pyx_obj_9networkit_8distance_Dijkstra *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_8Dijkstra_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_Dijkstra *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.Dijkstra.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1425
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, node source, vector[node] targets):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _MultiTargetBFS(G._this, source, targets.begin(), targets.end())
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_14MultiTargetBFS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_14MultiTargetBFS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  __pyx_t_9networkit_10structures_node __pyx_v_source;
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_targets;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_source,&__pyx_n_s_targets,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1425, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_source)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1425, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 1425, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_targets)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1425, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 1425, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1425, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
      values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_source = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_source == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1425, __pyx_L3_error)
    __pyx_v_targets = __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1425, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1425, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.MultiTargetBFS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1425, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_14MultiTargetBFS___cinit__(((struct __pyx_obj_9networkit_8distance_MultiTargetBFS *)__pyx_v_self), __pyx_v_G, __pyx_v_source, __PYX_STD_MOVE_IF_SUPPORTED(__pyx_v_targets));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_14MultiTargetBFS___cinit__(struct __pyx_obj_9networkit_8distance_MultiTargetBFS *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_node __pyx_v_source, std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_targets) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::MultiTargetBFS *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":1426
 * 
 * 	def __cinit__(self, Graph G, node source, vector[node] targets):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _MultiTargetBFS(G._this, source, targets.begin(), targets.end())
 * 		self.targets = targets
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/distance.pyx":1427
 * 	def __cinit__(self, Graph G, node source, vector[node] targets):
 * 		self._G = G
 * 		self._this = new _MultiTargetBFS(G._this, source, targets.begin(), targets.end())             # <<<<<<<<<<<<<<
 * 		self.targets = targets
 * 
 */
  try {
    __pyx_t_1 = new NetworKit::MultiTargetBFS(__pyx_v_G->_this, __pyx_v_source, __pyx_v_targets.begin(), __pyx_v_targets.end());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1427, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/distance.pyx":1428
 * 		self._G = G
 * 		self._this = new _MultiTargetBFS(G._this, source, targets.begin(), targets.end())
 * 		self.targets = targets             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/MultiTargetDijkstra.hpp>":
 */
  __pyx_v_self->__pyx_base.targets = __pyx_v_targets;

  /* "networkit/distance.pyx":1425
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, node source, vector[node] targets):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _MultiTargetBFS(G._this, source, targets.begin(), targets.end())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.MultiTargetBFS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_14MultiTargetBFS_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_14MultiTargetBFS_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_14MultiTargetBFS_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_14MultiTargetBFS_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_14MultiTargetBFS_2__reduce_cython__(((struct __pyx_obj_9networkit_8distance_MultiTargetBFS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_14MultiTargetBFS_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_MultiTargetBFS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.MultiTargetBFS.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_14MultiTargetBFS_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_14MultiTargetBFS_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_14MultiTargetBFS_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_14MultiTargetBFS_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.MultiTargetBFS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_14MultiTargetBFS_4__setstate_cython__(((struct __pyx_obj_9networkit_8distance_MultiTargetBFS *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_14MultiTargetBFS_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_MultiTargetBFS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.MultiTargetBFS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1450
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, node source, vector[node] targets):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _MultiTargetDijkstra(G._this, source, targets.begin(), targets.end())
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_19MultiTargetDijkstra_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_19MultiTargetDijkstra_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  __pyx_t_9networkit_10structures_node __pyx_v_source;
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_targets;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_source,&__pyx_n_s_targets,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1450, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_source)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1450, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 1450, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_targets)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1450, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 1450, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1450, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
      values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_source = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_source == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1450, __pyx_L3_error)
    __pyx_v_targets = __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1450, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1450, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.MultiTargetDijkstra.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1450, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_19MultiTargetDijkstra___cinit__(((struct __pyx_obj_9networkit_8distance_MultiTargetDijkstra *)__pyx_v_self), __pyx_v_G, __pyx_v_source, __PYX_STD_MOVE_IF_SUPPORTED(__pyx_v_targets));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_19MultiTargetDijkstra___cinit__(struct __pyx_obj_9networkit_8distance_MultiTargetDijkstra *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_node __pyx_v_source, std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_targets) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::MultiTargetDijkstra *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":1451
 * 
 * 	def __cinit__(self, Graph G, node source, vector[node] targets):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _MultiTargetDijkstra(G._this, source, targets.begin(), targets.end())
 * 		self.targets = targets
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/distance.pyx":1452
 * 	def __cinit__(self, Graph G, node source, vector[node] targets):
 * 		self._G = G
 * 		self._this = new _MultiTargetDijkstra(G._this, source, targets.begin(), targets.end())             # <<<<<<<<<<<<<<
 * 		self.targets = targets
 * 
 */
  try {
    __pyx_t_1 = new NetworKit::MultiTargetDijkstra(__pyx_v_G->_this, __pyx_v_source, __pyx_v_targets.begin(), __pyx_v_targets.end());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1452, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/distance.pyx":1453
 * 		self._G = G
 * 		self._this = new _MultiTargetDijkstra(G._this, source, targets.begin(), targets.end())
 * 		self.targets = targets             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/DynBFS.hpp>":
 */
  __pyx_v_self->__pyx_base.targets = __pyx_v_targets;

  /* "networkit/distance.pyx":1450
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, node source, vector[node] targets):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _MultiTargetDijkstra(G._this, source, targets.begin(), targets.end())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.MultiTargetDijkstra.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_19MultiTargetDijkstra_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_19MultiTargetDijkstra_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19MultiTargetDijkstra_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_19MultiTargetDijkstra_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_19MultiTargetDijkstra_2__reduce_cython__(((struct __pyx_obj_9networkit_8distance_MultiTargetDijkstra *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_19MultiTargetDijkstra_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_MultiTargetDijkstra *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.MultiTargetDijkstra.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_19MultiTargetDijkstra_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_19MultiTargetDijkstra_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19MultiTargetDijkstra_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_19MultiTargetDijkstra_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.MultiTargetDijkstra.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_19MultiTargetDijkstra_4__setstate_cython__(((struct __pyx_obj_9networkit_8distance_MultiTargetDijkstra *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_19MultiTargetDijkstra_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_MultiTargetDijkstra *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.MultiTargetDijkstra.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1473
 * 		The source node of the breadth-first search.
 * 	"""
 * 	def __cinit__(self, Graph G, source):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynBFS(G._this, source)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_6DynBFS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_6DynBFS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_source = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_source,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1473, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_source)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1473, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 1473, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1473, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_source = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1473, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.DynBFS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1473, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_6DynBFS___cinit__(((struct __pyx_obj_9networkit_8distance_DynBFS *)__pyx_v_self), __pyx_v_G, __pyx_v_source);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_6DynBFS___cinit__(struct __pyx_obj_9networkit_8distance_DynBFS *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_source) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  NetworKit::DynBFS *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":1474
 * 	"""
 * 	def __cinit__(self, Graph G, source):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _DynBFS(G._this, source)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._G);
  __pyx_v_self->__pyx_base.__pyx_base._G = __pyx_v_G;

  /* "networkit/distance.pyx":1475
 * 	def __cinit__(self, Graph G, source):
 * 		self._G = G
 * 		self._this = new _DynBFS(G._this, source)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/DynDijkstra.hpp>":
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_source); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1475, __pyx_L1_error)
  try {
    __pyx_t_2 = new NetworKit::DynBFS(__pyx_v_G->_this, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1475, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_2;

  /* "networkit/distance.pyx":1473
 * 		The source node of the breadth-first search.
 * 	"""
 * 	def __cinit__(self, Graph G, source):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynBFS(G._this, source)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.DynBFS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_6DynBFS_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_6DynBFS_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_6DynBFS_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_6DynBFS_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_6DynBFS_2__reduce_cython__(((struct __pyx_obj_9networkit_8distance_DynBFS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_6DynBFS_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynBFS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.DynBFS.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_6DynBFS_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_6DynBFS_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_6DynBFS_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_6DynBFS_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.DynBFS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_6DynBFS_4__setstate_cython__(((struct __pyx_obj_9networkit_8distance_DynBFS *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_6DynBFS_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynBFS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.DynBFS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1496
 * 
 * 	"""
 * 	def __cinit__(self, Graph G, source):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynDijkstra(G._this, source)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_11DynDijkstra_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_11DynDijkstra_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_source = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_source,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1496, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_source)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1496, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 1496, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1496, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_source = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1496, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.DynDijkstra.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1496, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_11DynDijkstra___cinit__(((struct __pyx_obj_9networkit_8distance_DynDijkstra *)__pyx_v_self), __pyx_v_G, __pyx_v_source);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_11DynDijkstra___cinit__(struct __pyx_obj_9networkit_8distance_DynDijkstra *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_source) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  NetworKit::DynDijkstra *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":1497
 * 	"""
 * 	def __cinit__(self, Graph G, source):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _DynDijkstra(G._this, source)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._G);
  __pyx_v_self->__pyx_base.__pyx_base._G = __pyx_v_G;

  /* "networkit/distance.pyx":1498
 * 	def __cinit__(self, Graph G, source):
 * 		self._G = G
 * 		self._this = new _DynDijkstra(G._this, source)             # <<<<<<<<<<<<<<
 * 
 * cdef cppclass PathCallbackWrapper:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_source); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1498, __pyx_L1_error)
  try {
    __pyx_t_2 = new NetworKit::DynDijkstra(__pyx_v_G->_this, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1498, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_2;

  /* "networkit/distance.pyx":1496
 * 
 * 	"""
 * 	def __cinit__(self, Graph G, source):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynDijkstra(G._this, source)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.DynDijkstra.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_11DynDijkstra_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_11DynDijkstra_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_11DynDijkstra_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_11DynDijkstra_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_11DynDijkstra_2__reduce_cython__(((struct __pyx_obj_9networkit_8distance_DynDijkstra *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_11DynDijkstra_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynDijkstra *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.DynDijkstra.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_11DynDijkstra_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_11DynDijkstra_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_11DynDijkstra_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_11DynDijkstra_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.DynDijkstra.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_11DynDijkstra_4__setstate_cython__(((struct __pyx_obj_9networkit_8distance_DynDijkstra *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_11DynDijkstra_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynDijkstra *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.DynDijkstra.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1502
 * cdef cppclass PathCallbackWrapper:
 * 	void* callback
 * 	__init__(object callback):             # <<<<<<<<<<<<<<
 * 		this.callback = <void*>callback
 * 	void cython_call_operator(vector[node] path):
 */

void __pyx_t_9networkit_8distance_PathCallbackWrapper::__pyx_f___init__PathCallbackWrapper(PyObject *__pyx_v_callback) {

  /* "networkit/distance.pyx":1503
 * 	void* callback
 * 	__init__(object callback):
 * 		this.callback = <void*>callback             # <<<<<<<<<<<<<<
 * 	void cython_call_operator(vector[node] path):
 * 		cdef bool_t error = False
 */
  this->callback = ((void *)__pyx_v_callback);

  /* "networkit/distance.pyx":1502
 * cdef cppclass PathCallbackWrapper:
 * 	void* callback
 * 	__init__(object callback):             # <<<<<<<<<<<<<<
 * 		this.callback = <void*>callback
 * 	void cython_call_operator(vector[node] path):
 */

  /* function exit code */
}

/* "networkit/distance.pyx":1504
 * 	__init__(object callback):
 * 		this.callback = <void*>callback
 * 	void cython_call_operator(vector[node] path):             # <<<<<<<<<<<<<<
 * 		cdef bool_t error = False
 * 		cdef string message
 */

void __pyx_t_9networkit_8distance_PathCallbackWrapper::cython_call_operator(std::vector<__pyx_t_9networkit_10structures_node>  __pyx_v_path) {
  bool __pyx_v_error;
  std::string __pyx_v_message;
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  std::string __pyx_t_13;
  int __pyx_t_14;
  char const *__pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cython_call_operator", 1);

  /* "networkit/distance.pyx":1505
 * 		this.callback = <void*>callback
 * 	void cython_call_operator(vector[node] path):
 * 		cdef bool_t error = False             # <<<<<<<<<<<<<<
 * 		cdef string message
 * 		try:
 */
  __pyx_v_error = 0;

  /* "networkit/distance.pyx":1507
 * 		cdef bool_t error = False
 * 		cdef string message
 * 		try:             # <<<<<<<<<<<<<<
 * 			(<object>callback)(path)
 * 		except Exception as e:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "networkit/distance.pyx":1508
 * 		cdef string message
 * 		try:
 * 			(<object>callback)(path)             # <<<<<<<<<<<<<<
 * 		except Exception as e:
 * 			error = True
 */
      __pyx_t_5 = __pyx_convert_vector_to_py___pyx_t_9networkit_10structures_node(__pyx_v_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1508, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(((PyObject *)callback));
      __pyx_t_6 = ((PyObject *)callback); __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_8 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1508, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "networkit/distance.pyx":1507
 * 		cdef bool_t error = False
 * 		cdef string message
 * 		try:             # <<<<<<<<<<<<<<
 * 			(<object>callback)(path)
 * 		except Exception as e:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "networkit/distance.pyx":1509
 * 		try:
 * 			(<object>callback)(path)
 * 		except Exception as e:             # <<<<<<<<<<<<<<
 * 			error = True
 * 			message = stdstring("An Exception occurred, aborting execution of iterator: {0}".format(e))
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_8) {
      __Pyx_AddTraceback("PathCallbackWrapper.cython_call_operator", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 1509, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __pyx_v_e = __pyx_t_6;
      /*try:*/ {

        /* "networkit/distance.pyx":1510
 * 			(<object>callback)(path)
 * 		except Exception as e:
 * 			error = True             # <<<<<<<<<<<<<<
 * 			message = stdstring("An Exception occurred, aborting execution of iterator: {0}".format(e))
 * 		if (error):
 */
        __pyx_v_error = 1;

        /* "networkit/distance.pyx":1511
 * 		except Exception as e:
 * 			error = True
 * 			message = stdstring("An Exception occurred, aborting execution of iterator: {0}".format(e))             # <<<<<<<<<<<<<<
 * 		if (error):
 * 			throw_runtime_error(message)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_stdstring); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1511, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_An_Exception_occurred_aborting_e, __pyx_n_s_format); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1511, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        __pyx_t_8 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_8 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_v_e};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1511, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_t_11 = NULL;
        __pyx_t_8 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_8 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_10};
          __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1511, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1511, __pyx_L14_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_v_message = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_13);
      }

      /* "networkit/distance.pyx":1509
 * 		try:
 * 			(<object>callback)(path)
 * 		except Exception as e:             # <<<<<<<<<<<<<<
 * 			error = True
 * 			message = stdstring("An Exception occurred, aborting execution of iterator: {0}".format(e))
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          goto __pyx_L15;
        }
        __pyx_L14_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __pyx_t_8 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
          }
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
          __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
          __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;
          goto __pyx_L5_except_error;
        }
        __pyx_L15:;
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "networkit/distance.pyx":1507
 * 		cdef bool_t error = False
 * 		cdef string message
 * 		try:             # <<<<<<<<<<<<<<
 * 			(<object>callback)(path)
 * 		except Exception as e:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "networkit/distance.pyx":1512
 * 			error = True
 * 			message = stdstring("An Exception occurred, aborting execution of iterator: {0}".format(e))
 * 		if (error):             # <<<<<<<<<<<<<<
 * 			throw_runtime_error(message)
 * 
 */
  __pyx_t_22 = (__pyx_v_error != 0);
  if (__pyx_t_22) {

    /* "networkit/distance.pyx":1513
 * 			message = stdstring("An Exception occurred, aborting execution of iterator: {0}".format(e))
 * 		if (error):
 * 			throw_runtime_error(message)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/BidirectionalBFS.hpp>":
 */
    throw_runtime_error(__pyx_v_message);

    /* "networkit/distance.pyx":1512
 * 			error = True
 * 			message = stdstring("An Exception occurred, aborting execution of iterator: {0}".format(e))
 * 		if (error):             # <<<<<<<<<<<<<<
 * 			throw_runtime_error(message)
 * 
 */
  }

  /* "networkit/distance.pyx":1504
 * 	__init__(object callback):
 * 		this.callback = <void*>callback
 * 	void cython_call_operator(vector[node] path):             # <<<<<<<<<<<<<<
 * 		cdef bool_t error = False
 * 		cdef string message
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("PathCallbackWrapper.cython_call_operator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "networkit/distance.pyx":1540
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, node source, node target, bool_t storePred=True):             # <<<<<<<<<<<<<<
 * 		self._this = new _BidirectionalBFS(G._this, source, target, storePred)
 * 
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_16BidirectionalBFS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_16BidirectionalBFS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  __pyx_t_9networkit_10structures_node __pyx_v_source;
  __pyx_t_9networkit_10structures_node __pyx_v_target;
  bool __pyx_v_storePred;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_source,&__pyx_n_s_target,&__pyx_n_s_storePred,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1540, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_source)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1540, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); __PYX_ERR(0, 1540, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_target)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1540, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); __PYX_ERR(0, 1540, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_storePred);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1540, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1540, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_source = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_source == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1540, __pyx_L3_error)
    __pyx_v_target = __Pyx_PyInt_As_uint64_t(values[2]); if (unlikely((__pyx_v_target == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1540, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_storePred = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_storePred == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1540, __pyx_L3_error)
    } else {
      __pyx_v_storePred = ((bool)1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 1540, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.BidirectionalBFS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1540, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_16BidirectionalBFS___cinit__(((struct __pyx_obj_9networkit_8distance_BidirectionalBFS *)__pyx_v_self), __pyx_v_G, __pyx_v_source, __pyx_v_target, __pyx_v_storePred);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_16BidirectionalBFS___cinit__(struct __pyx_obj_9networkit_8distance_BidirectionalBFS *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_node __pyx_v_source, __pyx_t_9networkit_10structures_node __pyx_v_target, bool __pyx_v_storePred) {
  int __pyx_r;
  NetworKit::BidirectionalBFS *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "networkit/distance.pyx":1541
 * 
 * 	def __cinit__(self, Graph G, node source, node target, bool_t storePred=True):
 * 		self._this = new _BidirectionalBFS(G._this, source, target, storePred)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/BidirectionalDijkstra.hpp>":
 */
  try {
    __pyx_t_1 = new NetworKit::BidirectionalBFS(__pyx_v_G->_this, __pyx_v_source, __pyx_v_target, __pyx_v_storePred);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1541, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/distance.pyx":1540
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, node source, node target, bool_t storePred=True):             # <<<<<<<<<<<<<<
 * 		self._this = new _BidirectionalBFS(G._this, source, target, storePred)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.BidirectionalBFS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_16BidirectionalBFS_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_16BidirectionalBFS_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_16BidirectionalBFS_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_16BidirectionalBFS_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_16BidirectionalBFS_2__reduce_cython__(((struct __pyx_obj_9networkit_8distance_BidirectionalBFS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_16BidirectionalBFS_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_BidirectionalBFS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.BidirectionalBFS.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_16BidirectionalBFS_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_16BidirectionalBFS_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_16BidirectionalBFS_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_16BidirectionalBFS_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.BidirectionalBFS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_16BidirectionalBFS_4__setstate_cython__(((struct __pyx_obj_9networkit_8distance_BidirectionalBFS *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_16BidirectionalBFS_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_BidirectionalBFS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.BidirectionalBFS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1570
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, node source, node target, bool_t storePred=True):             # <<<<<<<<<<<<<<
 * 		self._this = new _BidirectionalDijkstra(G._this, source, target, storePred)
 * 
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_21BidirectionalDijkstra_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_21BidirectionalDijkstra_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  __pyx_t_9networkit_10structures_node __pyx_v_source;
  __pyx_t_9networkit_10structures_node __pyx_v_target;
  bool __pyx_v_storePred;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_source,&__pyx_n_s_target,&__pyx_n_s_storePred,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1570, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_source)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1570, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); __PYX_ERR(0, 1570, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_target)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1570, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); __PYX_ERR(0, 1570, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_storePred);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1570, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1570, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_source = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_source == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1570, __pyx_L3_error)
    __pyx_v_target = __Pyx_PyInt_As_uint64_t(values[2]); if (unlikely((__pyx_v_target == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1570, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_storePred = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_storePred == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1570, __pyx_L3_error)
    } else {
      __pyx_v_storePred = ((bool)1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 1570, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.BidirectionalDijkstra.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1570, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_21BidirectionalDijkstra___cinit__(((struct __pyx_obj_9networkit_8distance_BidirectionalDijkstra *)__pyx_v_self), __pyx_v_G, __pyx_v_source, __pyx_v_target, __pyx_v_storePred);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_21BidirectionalDijkstra___cinit__(struct __pyx_obj_9networkit_8distance_BidirectionalDijkstra *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, __pyx_t_9networkit_10structures_node __pyx_v_source, __pyx_t_9networkit_10structures_node __pyx_v_target, bool __pyx_v_storePred) {
  int __pyx_r;
  NetworKit::BidirectionalDijkstra *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "networkit/distance.pyx":1571
 * 
 * 	def __cinit__(self, Graph G, node source, node target, bool_t storePred=True):
 * 		self._this = new _BidirectionalDijkstra(G._this, source, target, storePred)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/AStar.hpp>":
 */
  try {
    __pyx_t_1 = new NetworKit::BidirectionalDijkstra(__pyx_v_G->_this, __pyx_v_source, __pyx_v_target, __pyx_v_storePred);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1571, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/distance.pyx":1570
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, node source, node target, bool_t storePred=True):             # <<<<<<<<<<<<<<
 * 		self._this = new _BidirectionalDijkstra(G._this, source, target, storePred)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.BidirectionalDijkstra.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_21BidirectionalDijkstra_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_21BidirectionalDijkstra_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_21BidirectionalDijkstra_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_21BidirectionalDijkstra_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_21BidirectionalDijkstra_2__reduce_cython__(((struct __pyx_obj_9networkit_8distance_BidirectionalDijkstra *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_21BidirectionalDijkstra_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_BidirectionalDijkstra *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.BidirectionalDijkstra.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_21BidirectionalDijkstra_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_21BidirectionalDijkstra_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_21BidirectionalDijkstra_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_21BidirectionalDijkstra_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.BidirectionalDijkstra.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_21BidirectionalDijkstra_4__setstate_cython__(((struct __pyx_obj_9networkit_8distance_BidirectionalDijkstra *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_21BidirectionalDijkstra_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_BidirectionalDijkstra *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.BidirectionalDijkstra.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1599
 * 
 * 	cdef vector[double] heu
 * 	def __cinit__(self, Graph G, vector[double] &heu, node source, node target, bool_t storePred=True):             # <<<<<<<<<<<<<<
 * 		self.heu = heu
 * 		self._this = new _AStar(G._this, self.heu, source, target, storePred)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_5AStar_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_5AStar_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  std::vector<double>  __pyx_v_heu;
  __pyx_t_9networkit_10structures_node __pyx_v_source;
  __pyx_t_9networkit_10structures_node __pyx_v_target;
  bool __pyx_v_storePred;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_heu,&__pyx_n_s_source,&__pyx_n_s_target,&__pyx_n_s_storePred,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1599, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_heu)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1599, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 5, 1); __PYX_ERR(0, 1599, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_source)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1599, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 5, 2); __PYX_ERR(0, 1599, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_target)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1599, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 5, 3); __PYX_ERR(0, 1599, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_storePred);
          if (value) { values[4] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1599, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1599, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_heu = __pyx_convert_vector_from_py_double(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1599, __pyx_L3_error)
    __pyx_v_source = __Pyx_PyInt_As_uint64_t(values[2]); if (unlikely((__pyx_v_source == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1599, __pyx_L3_error)
    __pyx_v_target = __Pyx_PyInt_As_uint64_t(values[3]); if (unlikely((__pyx_v_target == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1599, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_storePred = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_storePred == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1599, __pyx_L3_error)
    } else {
      __pyx_v_storePred = ((bool)1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 5, __pyx_nargs); __PYX_ERR(0, 1599, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.AStar.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1599, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_5AStar___cinit__(((struct __pyx_obj_9networkit_8distance_AStar *)__pyx_v_self), __pyx_v_G, __PYX_STD_MOVE_IF_SUPPORTED(__pyx_v_heu), __pyx_v_source, __pyx_v_target, __pyx_v_storePred);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_5AStar___cinit__(struct __pyx_obj_9networkit_8distance_AStar *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_heu, __pyx_t_9networkit_10structures_node __pyx_v_source, __pyx_t_9networkit_10structures_node __pyx_v_target, bool __pyx_v_storePred) {
  int __pyx_r;
  NetworKit::AStar *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "networkit/distance.pyx":1600
 * 	cdef vector[double] heu
 * 	def __cinit__(self, Graph G, vector[double] &heu, node source, node target, bool_t storePred=True):
 * 		self.heu = heu             # <<<<<<<<<<<<<<
 * 		self._this = new _AStar(G._this, self.heu, source, target, storePred)
 * 
 */
  __pyx_v_self->heu = __pyx_v_heu;

  /* "networkit/distance.pyx":1601
 * 	def __cinit__(self, Graph G, vector[double] &heu, node source, node target, bool_t storePred=True):
 * 		self.heu = heu
 * 		self._this = new _AStar(G._this, self.heu, source, target, storePred)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/reachability/AllSimplePaths.hpp>":
 */
  try {
    __pyx_t_1 = new NetworKit::AStar(__pyx_v_G->_this, __pyx_v_self->heu, __pyx_v_source, __pyx_v_target, __pyx_v_storePred);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1601, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/distance.pyx":1599
 * 
 * 	cdef vector[double] heu
 * 	def __cinit__(self, Graph G, vector[double] &heu, node source, node target, bool_t storePred=True):             # <<<<<<<<<<<<<<
 * 		self.heu = heu
 * 		self._this = new _AStar(G._this, self.heu, source, target, storePred)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.AStar.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_5AStar_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_5AStar_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_5AStar_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_5AStar_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_5AStar_2__reduce_cython__(((struct __pyx_obj_9networkit_8distance_AStar *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_5AStar_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_AStar *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.AStar.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_5AStar_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_5AStar_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_5AStar_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_5AStar_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.AStar.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_5AStar_4__setstate_cython__(((struct __pyx_obj_9networkit_8distance_AStar *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_5AStar_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_AStar *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.AStar.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1634
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self,  Graph G, source, target, cutoff=none):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _AllSimplePaths(G._this, source, target, cutoff)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_14AllSimplePaths_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_14AllSimplePaths_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_source = 0;
  PyObject *__pyx_v_target = 0;
  PyObject *__pyx_v_cutoff = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_source,&__pyx_n_s_target,&__pyx_n_s_cutoff,0};
    values[3] = __Pyx_Arg_NewRef_VARARGS(__pyx_k__11);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1634, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_source)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1634, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); __PYX_ERR(0, 1634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_target)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1634, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); __PYX_ERR(0, 1634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cutoff);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1634, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1634, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_source = values[1];
    __pyx_v_target = values[2];
    __pyx_v_cutoff = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 1634, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.AllSimplePaths.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1634, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_14AllSimplePaths___cinit__(((struct __pyx_obj_9networkit_8distance_AllSimplePaths *)__pyx_v_self), __pyx_v_G, __pyx_v_source, __pyx_v_target, __pyx_v_cutoff);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_14AllSimplePaths___cinit__(struct __pyx_obj_9networkit_8distance_AllSimplePaths *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_source, PyObject *__pyx_v_target, PyObject *__pyx_v_cutoff) {
  PyObject *__pyx_v_warn = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  __pyx_t_9networkit_10structures_node __pyx_t_2;
  __pyx_t_9networkit_10structures_count __pyx_t_3;
  NetworKit::AllSimplePaths *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":1635
 * 
 * 	def __cinit__(self,  Graph G, source, target, cutoff=none):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _AllSimplePaths(G._this, source, target, cutoff)
 * 		from warnings import warn
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":1636
 * 	def __cinit__(self,  Graph G, source, target, cutoff=none):
 * 		self._G = G
 * 		self._this = new _AllSimplePaths(G._this, source, target, cutoff)             # <<<<<<<<<<<<<<
 * 		from warnings import warn
 * 		warn("networkit.distance.AllSimplePaths is deprecated, use networkit.reachability.AllSimplePaths")
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_source); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1636, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_v_target); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1636, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_v_cutoff); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1636, __pyx_L1_error)
  try {
    __pyx_t_4 = new NetworKit::AllSimplePaths(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1636, __pyx_L1_error)
  }
  __pyx_v_self->_this = __pyx_t_4;

  /* "networkit/distance.pyx":1637
 * 		self._G = G
 * 		self._this = new _AllSimplePaths(G._this, source, target, cutoff)
 * 		from warnings import warn             # <<<<<<<<<<<<<<
 * 		warn("networkit.distance.AllSimplePaths is deprecated, use networkit.reachability.AllSimplePaths")
 * 
 */
  __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_warn);
  __Pyx_GIVEREF(__pyx_n_s_warn);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_warn)) __PYX_ERR(0, 1637, __pyx_L1_error);
  __pyx_t_6 = __Pyx_Import(__pyx_n_s_warnings, __pyx_t_5, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_warn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_warn = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/distance.pyx":1638
 * 		self._this = new _AllSimplePaths(G._this, source, target, cutoff)
 * 		from warnings import warn
 * 		warn("networkit.distance.AllSimplePaths is deprecated, use networkit.reachability.AllSimplePaths")             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  __Pyx_INCREF(__pyx_v_warn);
  __pyx_t_5 = __pyx_v_warn; __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_kp_u_networkit_distance_AllSimplePath};
    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/distance.pyx":1634
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self,  Graph G, source, target, cutoff=none):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _AllSimplePaths(G._this, source, target, cutoff)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("networkit.distance.AllSimplePaths.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_warn);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1640
 * 		warn("networkit.distance.AllSimplePaths is deprecated, use networkit.reachability.AllSimplePaths")
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self._this
 * 
 */

/* Python wrapper */
static void __pyx_pw_9networkit_8distance_14AllSimplePaths_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_8distance_14AllSimplePaths_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_9networkit_8distance_14AllSimplePaths_2__dealloc__(((struct __pyx_obj_9networkit_8distance_AllSimplePaths *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_8distance_14AllSimplePaths_2__dealloc__(struct __pyx_obj_9networkit_8distance_AllSimplePaths *__pyx_v_self) {

  /* "networkit/distance.pyx":1641
 * 
 * 	def __dealloc__(self):
 * 		del self._this             # <<<<<<<<<<<<<<
 * 
 * 	def run(self):
 */
  delete __pyx_v_self->_this;

  /* "networkit/distance.pyx":1640
 * 		warn("networkit.distance.AllSimplePaths is deprecated, use networkit.reachability.AllSimplePaths")
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self._this
 * 
 */

  /* function exit code */
}

/* "networkit/distance.pyx":1643
 * 		del self._this
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		self._this.run()
 * 		return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_14AllSimplePaths_5run(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_14AllSimplePaths_5run = {"run", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_14AllSimplePaths_5run, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_14AllSimplePaths_5run(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("run", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "run", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_14AllSimplePaths_4run(((struct __pyx_obj_9networkit_8distance_AllSimplePaths *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_14AllSimplePaths_4run(struct __pyx_obj_9networkit_8distance_AllSimplePaths *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 1);

  /* "networkit/distance.pyx":1644
 * 
 * 	def run(self):
 * 		self._this.run()             # <<<<<<<<<<<<<<
 * 		return self
 * 
 */
  try {
    __pyx_v_self->_this->run();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1644, __pyx_L1_error)
  }

  /* "networkit/distance.pyx":1645
 * 	def run(self):
 * 		self._this.run()
 * 		return self             # <<<<<<<<<<<<<<
 * 
 * 	def numberOfSimplePaths(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "networkit/distance.pyx":1643
 * 		del self._this
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		self._this.run()
 * 		return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.AllSimplePaths.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1647
 * 		return self
 * 
 * 	def numberOfSimplePaths(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		numberOfSimplePaths()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_14AllSimplePaths_7numberOfSimplePaths(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_14AllSimplePaths_6numberOfSimplePaths, "\n\t\tnumberOfSimplePaths()\n\n\t\tReturns the number of simple paths.\n\n\t\tReturns\n\t\t-------\n\t\tint\n\t\t\tThe number of simple paths.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_14AllSimplePaths_7numberOfSimplePaths = {"numberOfSimplePaths", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_14AllSimplePaths_7numberOfSimplePaths, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_14AllSimplePaths_6numberOfSimplePaths};
static PyObject *__pyx_pw_9networkit_8distance_14AllSimplePaths_7numberOfSimplePaths(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("numberOfSimplePaths (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("numberOfSimplePaths", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "numberOfSimplePaths", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_14AllSimplePaths_6numberOfSimplePaths(((struct __pyx_obj_9networkit_8distance_AllSimplePaths *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_14AllSimplePaths_6numberOfSimplePaths(struct __pyx_obj_9networkit_8distance_AllSimplePaths *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_count __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("numberOfSimplePaths", 1);

  /* "networkit/distance.pyx":1658
 * 			The number of simple paths.
 * 		"""
 * 		return self._this.numberOfSimplePaths()             # <<<<<<<<<<<<<<
 * 
 * 	def getAllSimplePaths(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_this->numberOfSimplePaths();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1658, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":1647
 * 		return self
 * 
 * 	def numberOfSimplePaths(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		numberOfSimplePaths()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.AllSimplePaths.numberOfSimplePaths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1660
 * 		return self._this.numberOfSimplePaths()
 * 
 * 	def getAllSimplePaths(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getAllSimplePaths()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_14AllSimplePaths_9getAllSimplePaths(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_14AllSimplePaths_8getAllSimplePaths, "\n\t\tgetAllSimplePaths()\n\n\t\tReturns all the simple paths from source to target.\n\n\t\tReturns\n\t\t-------\n\t\tlist(list(int))\n\t\t\tA list containing list of node indexes which represent all simple paths.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_14AllSimplePaths_9getAllSimplePaths = {"getAllSimplePaths", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_14AllSimplePaths_9getAllSimplePaths, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_14AllSimplePaths_8getAllSimplePaths};
static PyObject *__pyx_pw_9networkit_8distance_14AllSimplePaths_9getAllSimplePaths(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAllSimplePaths (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getAllSimplePaths", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getAllSimplePaths", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_14AllSimplePaths_8getAllSimplePaths(((struct __pyx_obj_9networkit_8distance_AllSimplePaths *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_14AllSimplePaths_8getAllSimplePaths(struct __pyx_obj_9networkit_8distance_AllSimplePaths *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<__pyx_t_9networkit_10structures_node> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAllSimplePaths", 1);

  /* "networkit/distance.pyx":1671
 * 			A list containing list of node indexes which represent all simple paths.
 * 		"""
 * 		return self._this.getAllSimplePaths()             # <<<<<<<<<<<<<<
 * 
 * 	def forAllSimplePaths(self, object callback):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_this->getAllSimplePaths();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1671, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_9networkit_10structures_node_3e___(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":1660
 * 		return self._this.numberOfSimplePaths()
 * 
 * 	def getAllSimplePaths(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getAllSimplePaths()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.AllSimplePaths.getAllSimplePaths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1673
 * 		return self._this.getAllSimplePaths()
 * 
 * 	def forAllSimplePaths(self, object callback):             # <<<<<<<<<<<<<<
 * 		"""
 * 		forAllSimplePaths(callback)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_14AllSimplePaths_11forAllSimplePaths(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_14AllSimplePaths_10forAllSimplePaths, " \n\t\tforAllSimplePaths(callback)\n\t\t\n\t\tMore efficient path iterator. Iterates over all the simple paths.\n\n\t\tParameters\n\t\t----------\n\t\tcallback : object\n\t\t\tAny callable object that takes the parameter path\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_14AllSimplePaths_11forAllSimplePaths = {"forAllSimplePaths", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_14AllSimplePaths_11forAllSimplePaths, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_14AllSimplePaths_10forAllSimplePaths};
static PyObject *__pyx_pw_9networkit_8distance_14AllSimplePaths_11forAllSimplePaths(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_callback = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("forAllSimplePaths (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_callback,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_callback)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1673, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "forAllSimplePaths") < 0)) __PYX_ERR(0, 1673, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_callback = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("forAllSimplePaths", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1673, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.AllSimplePaths.forAllSimplePaths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_14AllSimplePaths_10forAllSimplePaths(((struct __pyx_obj_9networkit_8distance_AllSimplePaths *)__pyx_v_self), __pyx_v_callback);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_14AllSimplePaths_10forAllSimplePaths(struct __pyx_obj_9networkit_8distance_AllSimplePaths *__pyx_v_self, PyObject *__pyx_v_callback) {
  __pyx_t_9networkit_8distance_PathCallbackWrapper *__pyx_v_wrapper;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("forAllSimplePaths", 1);

  /* "networkit/distance.pyx":1685
 * 		"""
 * 		cdef PathCallbackWrapper* wrapper
 * 		try:             # <<<<<<<<<<<<<<
 * 			wrapper = new PathCallbackWrapper(callback)
 * 			self._this.forAllSimplePaths[PathCallbackWrapper](dereference(wrapper))
 */
  /*try:*/ {

    /* "networkit/distance.pyx":1686
 * 		cdef PathCallbackWrapper* wrapper
 * 		try:
 * 			wrapper = new PathCallbackWrapper(callback)             # <<<<<<<<<<<<<<
 * 			self._this.forAllSimplePaths[PathCallbackWrapper](dereference(wrapper))
 * 		finally:
 */
    __pyx_v_wrapper = new __pyx_t_9networkit_8distance_PathCallbackWrapper(__pyx_v_callback);

    /* "networkit/distance.pyx":1687
 * 		try:
 * 			wrapper = new PathCallbackWrapper(callback)
 * 			self._this.forAllSimplePaths[PathCallbackWrapper](dereference(wrapper))             # <<<<<<<<<<<<<<
 * 		finally:
 * 			del wrapper
 */
    try {
      __pyx_v_self->_this->forAllSimplePaths<__pyx_t_9networkit_8distance_PathCallbackWrapper>((*__pyx_v_wrapper));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1687, __pyx_L4_error)
    }
  }

  /* "networkit/distance.pyx":1689
 * 			self._this.forAllSimplePaths[PathCallbackWrapper](dereference(wrapper))
 * 		finally:
 * 			del wrapper             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/ReverseBFS.hpp>":
 */
  /*finally:*/ {
    /*normal exit:*/{
      delete __pyx_v_wrapper;
      goto __pyx_L5;
    }
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_4 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0)) __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __pyx_t_1 = __pyx_lineno; __pyx_t_2 = __pyx_clineno; __pyx_t_3 = __pyx_filename;
      {
        delete __pyx_v_wrapper;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ErrRestore(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      __pyx_t_4 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0;
      __pyx_lineno = __pyx_t_1; __pyx_clineno = __pyx_t_2; __pyx_filename = __pyx_t_3;
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "networkit/distance.pyx":1673
 * 		return self._this.getAllSimplePaths()
 * 
 * 	def forAllSimplePaths(self, object callback):             # <<<<<<<<<<<<<<
 * 		"""
 * 		forAllSimplePaths(callback)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.AllSimplePaths.forAllSimplePaths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_14AllSimplePaths_13__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_14AllSimplePaths_13__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_14AllSimplePaths_13__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_14AllSimplePaths_13__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_14AllSimplePaths_12__reduce_cython__(((struct __pyx_obj_9networkit_8distance_AllSimplePaths *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_14AllSimplePaths_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_AllSimplePaths *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.AllSimplePaths.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_14AllSimplePaths_15__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_14AllSimplePaths_15__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_14AllSimplePaths_15__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_14AllSimplePaths_15__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.AllSimplePaths.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_14AllSimplePaths_14__setstate_cython__(((struct __pyx_obj_9networkit_8distance_AllSimplePaths *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_14AllSimplePaths_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_AllSimplePaths *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.AllSimplePaths.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1716
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, source, storePaths=True, storeNodesSortedByDistance=False, target=none):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ReverseBFS(G._this, source, storePaths, storeNodesSortedByDistance, target)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_10ReverseBFS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_10ReverseBFS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_source = 0;
  PyObject *__pyx_v_storePaths = 0;
  PyObject *__pyx_v_storeNodesSortedByDistance = 0;
  PyObject *__pyx_v_target = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_source,&__pyx_n_s_storePaths,&__pyx_n_s_storeNodesSortedByDistance,&__pyx_n_s_target,0};
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_True));
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_False));
    values[4] = __Pyx_Arg_NewRef_VARARGS(__pyx_k__13);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1716, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_source)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1716, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 5, 1); __PYX_ERR(0, 1716, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_storePaths);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1716, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_storeNodesSortedByDistance);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1716, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_target);
          if (value) { values[4] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1716, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1716, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_source = values[1];
    __pyx_v_storePaths = values[2];
    __pyx_v_storeNodesSortedByDistance = values[3];
    __pyx_v_target = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 5, __pyx_nargs); __PYX_ERR(0, 1716, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.ReverseBFS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1716, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_10ReverseBFS___cinit__(((struct __pyx_obj_9networkit_8distance_ReverseBFS *)__pyx_v_self), __pyx_v_G, __pyx_v_source, __pyx_v_storePaths, __pyx_v_storeNodesSortedByDistance, __pyx_v_target);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_10ReverseBFS___cinit__(struct __pyx_obj_9networkit_8distance_ReverseBFS *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_source, PyObject *__pyx_v_storePaths, PyObject *__pyx_v_storeNodesSortedByDistance, PyObject *__pyx_v_target) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_node __pyx_t_1;
  bool __pyx_t_2;
  bool __pyx_t_3;
  __pyx_t_9networkit_10structures_node __pyx_t_4;
  NetworKit::ReverseBFS *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":1717
 * 
 * 	def __cinit__(self, Graph G, source, storePaths=True, storeNodesSortedByDistance=False, target=none):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _ReverseBFS(G._this, source, storePaths, storeNodesSortedByDistance, target)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->__pyx_base._G);
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/distance.pyx":1718
 * 	def __cinit__(self, Graph G, source, storePaths=True, storeNodesSortedByDistance=False, target=none):
 * 		self._G = G
 * 		self._this = new _ReverseBFS(G._this, source, storePaths, storeNodesSortedByDistance, target)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/PrunedLandmarkLabeling.hpp>":
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_source); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1718, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_storePaths); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1718, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_storeNodesSortedByDistance); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1718, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_v_target); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1718, __pyx_L1_error)
  try {
    __pyx_t_5 = new NetworKit::ReverseBFS(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1718, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._this = __pyx_t_5;

  /* "networkit/distance.pyx":1716
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, source, storePaths=True, storeNodesSortedByDistance=False, target=none):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ReverseBFS(G._this, source, storePaths, storeNodesSortedByDistance, target)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.ReverseBFS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_10ReverseBFS_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_10ReverseBFS_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_10ReverseBFS_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_10ReverseBFS_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_10ReverseBFS_2__reduce_cython__(((struct __pyx_obj_9networkit_8distance_ReverseBFS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_10ReverseBFS_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_ReverseBFS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.ReverseBFS.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_10ReverseBFS_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_10ReverseBFS_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_10ReverseBFS_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_10ReverseBFS_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.ReverseBFS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_10ReverseBFS_4__setstate_cython__(((struct __pyx_obj_9networkit_8distance_ReverseBFS *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_10ReverseBFS_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_ReverseBFS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.ReverseBFS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1743
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _PrunedLandmarkLabeling(G._this)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1743, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1743, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1743, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.PrunedLandmarkLabeling.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1743, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_22PrunedLandmarkLabeling___cinit__(((struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_22PrunedLandmarkLabeling___cinit__(struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::PrunedLandmarkLabeling *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":1744
 * 
 * 	def __cinit__(self, Graph G):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _PrunedLandmarkLabeling(G._this)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":1745
 * 	def __cinit__(self, Graph G):
 * 		self._G = G
 * 		self._this = new _PrunedLandmarkLabeling(G._this)             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new NetworKit::PrunedLandmarkLabeling(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1745, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/distance.pyx":1743
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _PrunedLandmarkLabeling(G._this)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.PrunedLandmarkLabeling.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1747
 * 		self._this = new _PrunedLandmarkLabeling(G._this)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		self._G = None
 * 
 */

/* Python wrapper */
static void __pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_9networkit_8distance_22PrunedLandmarkLabeling_2__dealloc__(((struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_8distance_22PrunedLandmarkLabeling_2__dealloc__(struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 1);

  /* "networkit/distance.pyx":1748
 * 
 * 	def __dealloc__(self):
 * 		self._G = None             # <<<<<<<<<<<<<<
 * 
 * 	def query(self, node u, node v):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None);

  /* "networkit/distance.pyx":1747
 * 		self._this = new _PrunedLandmarkLabeling(G._this)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		self._G = None
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "networkit/distance.pyx":1750
 * 		self._G = None
 * 
 * 	def query(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		query(u, v)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_5query(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_22PrunedLandmarkLabeling_4query, "\n\t\tquery(u, v)\n\n\t\tReturns the shortest-path distance between the two nodes.\n\n\t\tParameters\n\t\t----------\n\t\tu : node\n\t\t\tSource node.\n\t\tv : node\n\t\t\tTarget node.\n\n\t\tReturns\n\t\t-------\n\t\tint\n\t\t\tThe shortest-path distances from the source node to the target node.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_22PrunedLandmarkLabeling_5query = {"query", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_5query, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_22PrunedLandmarkLabeling_4query};
static PyObject *__pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_5query(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __pyx_t_9networkit_10structures_node __pyx_v_u;
  __pyx_t_9networkit_10structures_node __pyx_v_v;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,&__pyx_n_s_v,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_u)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1750, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_v)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1750, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("query", 1, 2, 2, 1); __PYX_ERR(0, 1750, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "query") < 0)) __PYX_ERR(0, 1750, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_u = __Pyx_PyInt_As_uint64_t(values[0]); if (unlikely((__pyx_v_u == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1750, __pyx_L3_error)
    __pyx_v_v = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_v == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1750, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1750, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.PrunedLandmarkLabeling.query", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_22PrunedLandmarkLabeling_4query(((struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *)__pyx_v_self), __pyx_v_u, __pyx_v_v);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_22PrunedLandmarkLabeling_4query(struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_u, __pyx_t_9networkit_10structures_node __pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_count __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("query", 1);

  /* "networkit/distance.pyx":1768
 * 			The shortest-path distances from the source node to the target node.
 * 		"""
 * 		return (<_PrunedLandmarkLabeling*>(self._this)).query(u, v)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::PrunedLandmarkLabeling *)__pyx_v_self->__pyx_base.__pyx_base._this)->query(__pyx_v_u, __pyx_v_v);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1768, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":1750
 * 		self._G = None
 * 
 * 	def query(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		query(u, v)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.PrunedLandmarkLabeling.query", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_22PrunedLandmarkLabeling_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_22PrunedLandmarkLabeling_6__reduce_cython__(((struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_22PrunedLandmarkLabeling_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.PrunedLandmarkLabeling.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_22PrunedLandmarkLabeling_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.PrunedLandmarkLabeling.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_22PrunedLandmarkLabeling_8__setstate_cython__(((struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_22PrunedLandmarkLabeling_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.PrunedLandmarkLabeling.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1796
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynPrunedLandmarkLabeling(G._this)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_G)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1796, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1796, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1796, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.DynPrunedLandmarkLabeling.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1796, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_8distance_25DynPrunedLandmarkLabeling___cinit__(((struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_8distance_25DynPrunedLandmarkLabeling___cinit__(struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::DynPrunedLandmarkLabeling *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "networkit/distance.pyx":1797
 * 
 * 	def __cinit__(self, Graph G):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _DynPrunedLandmarkLabeling(G._this)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_G);
  __Pyx_GIVEREF((PyObject *)__pyx_v_G);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/distance.pyx":1798
 * 	def __cinit__(self, Graph G):
 * 		self._G = G
 * 		self._this = new _DynPrunedLandmarkLabeling(G._this)             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new NetworKit::DynPrunedLandmarkLabeling(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1798, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/distance.pyx":1796
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynPrunedLandmarkLabeling(G._this)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.DynPrunedLandmarkLabeling.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/distance.pyx":1800
 * 		self._this = new _DynPrunedLandmarkLabeling(G._this)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		self._G = None
 * 
 */

/* Python wrapper */
static void __pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_9networkit_8distance_25DynPrunedLandmarkLabeling_2__dealloc__(((struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_8distance_25DynPrunedLandmarkLabeling_2__dealloc__(struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 1);

  /* "networkit/distance.pyx":1801
 * 
 * 	def __dealloc__(self):
 * 		self._G = None             # <<<<<<<<<<<<<<
 * 
 * 	def query(self, node u, node v):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_G);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_G);
  __pyx_v_self->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None);

  /* "networkit/distance.pyx":1800
 * 		self._this = new _DynPrunedLandmarkLabeling(G._this)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		self._G = None
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "networkit/distance.pyx":1803
 * 		self._G = None
 * 
 * 	def query(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		query(u, v)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_5query(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9networkit_8distance_25DynPrunedLandmarkLabeling_4query, "\n\t\tquery(u, v)\n\n\t\tReturns the shortest-path distance between the two nodes.\n\n\t\tParameters\n\t\t----------\n\t\tu : node\n\t\t\tSource node.\n\t\tv : node\n\t\t\tTarget node.\n\n\t\tReturns\n\t\t-------\n\t\tint\n\t\t\tThe shortest-path distances from the source node to the target node.\n\t\t");
static PyMethodDef __pyx_mdef_9networkit_8distance_25DynPrunedLandmarkLabeling_5query = {"query", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_5query, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_25DynPrunedLandmarkLabeling_4query};
static PyObject *__pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_5query(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __pyx_t_9networkit_10structures_node __pyx_v_u;
  __pyx_t_9networkit_10structures_node __pyx_v_v;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("query (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,&__pyx_n_s_v,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_u)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1803, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_v)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1803, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("query", 1, 2, 2, 1); __PYX_ERR(0, 1803, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "query") < 0)) __PYX_ERR(0, 1803, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_u = __Pyx_PyInt_As_uint64_t(values[0]); if (unlikely((__pyx_v_u == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1803, __pyx_L3_error)
    __pyx_v_v = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_v == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1803, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("query", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1803, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.DynPrunedLandmarkLabeling.query", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_25DynPrunedLandmarkLabeling_4query(((struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *)__pyx_v_self), __pyx_v_u, __pyx_v_v);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_25DynPrunedLandmarkLabeling_4query(struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *__pyx_v_self, __pyx_t_9networkit_10structures_node __pyx_v_u, __pyx_t_9networkit_10structures_node __pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10structures_count __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("query", 1);

  /* "networkit/distance.pyx":1821
 * 			The shortest-path distances from the source node to the target node.
 * 		"""
 * 		return (<_DynPrunedLandmarkLabeling*>(self._this)).query(u, v)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::DynPrunedLandmarkLabeling *)__pyx_v_self->__pyx_base.__pyx_base._this)->query(__pyx_v_u, __pyx_v_v);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1821, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/distance.pyx":1803
 * 		self._G = None
 * 
 * 	def query(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		query(u, v)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.distance.DynPrunedLandmarkLabeling.query", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_25DynPrunedLandmarkLabeling_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9networkit_8distance_25DynPrunedLandmarkLabeling_6__reduce_cython__(((struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_25DynPrunedLandmarkLabeling_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.DynPrunedLandmarkLabeling.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_25DynPrunedLandmarkLabeling_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.DynPrunedLandmarkLabeling.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_25DynPrunedLandmarkLabeling_8__setstate_cython__(((struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_25DynPrunedLandmarkLabeling_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.distance.DynPrunedLandmarkLabeling.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Eccentricity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_1__pyx_unpickle_Eccentricity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_1__pyx_unpickle_Eccentricity = {"__pyx_unpickle_Eccentricity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_1__pyx_unpickle_Eccentricity, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_1__pyx_unpickle_Eccentricity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Eccentricity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Eccentricity", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Eccentricity", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_Eccentricity") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Eccentricity", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.__pyx_unpickle_Eccentricity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance___pyx_unpickle_Eccentricity(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance___pyx_unpickle_Eccentricity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Eccentricity", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__14, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = Eccentricity.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = Eccentricity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = Eccentricity.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Eccentricity__set_state(<Eccentricity> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9networkit_8distance_Eccentricity), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = Eccentricity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Eccentricity__set_state(<Eccentricity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Eccentricity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Eccentricity__set_state(<Eccentricity> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Eccentricity__set_state(Eccentricity __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_9networkit_8distance___pyx_unpickle_Eccentricity__set_state(((struct __pyx_obj_9networkit_8distance_Eccentricity *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = Eccentricity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Eccentricity__set_state(<Eccentricity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Eccentricity__set_state(<Eccentricity> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Eccentricity__set_state(Eccentricity __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Eccentricity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.distance.__pyx_unpickle_Eccentricity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Eccentricity__set_state(<Eccentricity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Eccentricity__set_state(Eccentricity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_9networkit_8distance___pyx_unpickle_Eccentricity__set_state(struct __pyx_obj_9networkit_8distance_Eccentricity *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Eccentricity__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Eccentricity__set_state(Eccentricity __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 > 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Eccentricity__set_state(Eccentricity __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Eccentricity__set_state(Eccentricity __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Eccentricity__set_state(<Eccentricity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Eccentricity__set_state(Eccentricity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("networkit.distance.__pyx_unpickle_Eccentricity__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Volume(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_8distance_3__pyx_unpickle_Volume(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_8distance_3__pyx_unpickle_Volume = {"__pyx_unpickle_Volume", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_3__pyx_unpickle_Volume, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_8distance_3__pyx_unpickle_Volume(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Volume (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Volume", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Volume", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_Volume") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Volume", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("networkit.distance.__pyx_unpickle_Volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_8distance_2__pyx_unpickle_Volume(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_8distance_2__pyx_unpickle_Volume(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Volume", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__14, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = Volume.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = Volume.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = Volume.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Volume__set_state(<Volume> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9networkit_8distance_Volume), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = Volume.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Volume__set_state(<Volume> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Volume.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Volume__set_state(<Volume> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Volume__set_state(Volume __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_9networkit_8distance___pyx_unpickle_Volume__set_state(((struct __pyx_obj_9networkit_8distance_Volume *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 *     __pyx_result = Volume.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Volume__set_state(<Volume> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Volume__set_state(<Volume> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Volume__set_state(Volume __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Volume(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.distance.__pyx_unpickle_Volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Volume__set_state(<Volume> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Volume__set_state(Volume __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_9networkit_8distance___pyx_unpickle_Volume__set_state(struct __pyx_obj_9networkit_8distance_Volume *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Volume__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Volume__set_state(Volume __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 > 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Volume__set_state(Volume __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Volume__set_state(Volume __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Volume__set_state(<Volume> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Volume__set_state(Volume __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("networkit.distance.__pyx_unpickle_Volume__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_9networkit_8distance_STSP(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_STSP *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_8distance_STSP *)o);
  new((void*)&(p->targets)) std::vector<__pyx_t_9networkit_10structures_node> ();
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9networkit_8distance_STSP(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_STSP *p = (struct __pyx_obj_9networkit_8distance_STSP *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_STSP) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->targets);
  Py_CLEAR(p->_G);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_8distance_STSP);
}

static int __pyx_tp_traverse_9networkit_8distance_STSP(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_STSP *p = (struct __pyx_obj_9networkit_8distance_STSP *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_8distance_STSP)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_STSP(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_STSP *p = (struct __pyx_obj_9networkit_8distance_STSP *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_8distance_STSP);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_STSP[] = {
  {"setSource", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_3setSource, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4STSP_2setSource},
  {"setTarget", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_5setTarget, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4STSP_4setTarget},
  {"setTargets", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_7setTargets, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4STSP_6setTargets},
  {"getPath", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_9getPath, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4STSP_8getPath},
  {"getPredecessors", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_11getPredecessors, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4STSP_10getPredecessors},
  {"getDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_13getDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4STSP_12getDistance},
  {"getDistances", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_15getDistances, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4STSP_14getDistances},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_17__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4STSP_19__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_STSP_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_STSP},
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tSTSP(G, source, target, storePred)\n\t\n\tAbstract base class for source-target shortest path algorithms. \n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_STSP},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_STSP},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_STSP},
  {Py_tp_init, (void *)__pyx_pw_9networkit_8distance_4STSP_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_STSP},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_STSP_spec = {
  "networkit.distance.STSP",
  sizeof(struct __pyx_obj_9networkit_8distance_STSP),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_STSP_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_STSP = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""STSP", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_STSP), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_STSP, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tSTSP(G, source, target, storePred)\n\t\n\tAbstract base class for source-target shortest path algorithms. \n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_STSP, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_STSP, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_STSP, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9networkit_8distance_4STSP_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_STSP, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_SSSP(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_SSSP *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_8distance_SSSP *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9networkit_8distance_SSSP(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_SSSP *p = (struct __pyx_obj_9networkit_8distance_SSSP *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_SSSP) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_8distance_SSSP);
}

static int __pyx_tp_traverse_9networkit_8distance_SSSP(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_SSSP *p = (struct __pyx_obj_9networkit_8distance_SSSP *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_8distance_SSSP)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_SSSP(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_SSSP *p = (struct __pyx_obj_9networkit_8distance_SSSP *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_8distance_SSSP);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_SSSP[] = {
  {"getDistances", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_3getDistances, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_2getDistances},
  {"distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_5distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_4distance},
  {"getPredecessors", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_7getPredecessors, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_6getPredecessors},
  {"getPath", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_9getPath, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_8getPath},
  {"getPaths", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_11getPaths, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_10getPaths},
  {"getNodesSortedByDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_13getNodesSortedByDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_12getNodesSortedByDistance},
  {"numberOfPaths", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_15numberOfPaths, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_14numberOfPaths},
  {"setSource", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_17setSource, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_16setSource},
  {"setTarget", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_19setTarget, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SSSP_18setTarget},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_21__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SSSP_23__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_SSSP_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_SSSP},
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tSSSP(G, source, storePaths, storeNodesSortedByDistance, target)\n\n\tBase class for single source shortest path algorithms. \n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_SSSP},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_SSSP},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_SSSP},
  {Py_tp_init, (void *)__pyx_pw_9networkit_8distance_4SSSP_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_SSSP},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_SSSP_spec = {
  "networkit.distance.SSSP",
  sizeof(struct __pyx_obj_9networkit_8distance_SSSP),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_SSSP_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_SSSP = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""SSSP", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_SSSP), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_SSSP, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tSSSP(G, source, storePaths, storeNodesSortedByDistance, target)\n\n\tBase class for single source shortest path algorithms. \n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_SSSP, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_SSSP, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_SSSP, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9networkit_8distance_4SSSP_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_SSSP, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_9networkit_8distance_DynSSSP[] = {
  {"modified", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_7DynSSSP_3modified, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_7DynSSSP_2modified},
  {"setTargetNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_7DynSSSP_5setTargetNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_7DynSSSP_4setTargetNode},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_7DynSSSP_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_7DynSSSP_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_DynSSSP_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tDynSSSP(G, source, storePredecessors, target)\n\n\tBase class for single source shortest path algorithms in dynamic graphs. \n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_SSSP},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_SSSP},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_DynSSSP},
  {Py_tp_init, (void *)__pyx_pw_9networkit_8distance_7DynSSSP_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_SSSP},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_DynSSSP_spec = {
  "networkit.distance.DynSSSP",
  sizeof(struct __pyx_obj_9networkit_8distance_DynSSSP),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_DynSSSP_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_DynSSSP = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""DynSSSP", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_DynSSSP), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_SSSP, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tDynSSSP(G, source, storePredecessors, target)\n\n\tBase class for single source shortest path algorithms in dynamic graphs. \n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_SSSP, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_SSSP, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_DynSSSP, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9networkit_8distance_7DynSSSP_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_SSSP, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_AdamicAdarDistance(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_18AdamicAdarDistance_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_AdamicAdarDistance(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *p = (struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_AdamicAdarDistance) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_8distance_18AdamicAdarDistance_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_9networkit_8distance_AdamicAdarDistance(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *p = (struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *)o;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_AdamicAdarDistance(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *p = (struct __pyx_obj_9networkit_8distance_AdamicAdarDistance *)o;
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_AdamicAdarDistance[] = {
  {"preprocess", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_18AdamicAdarDistance_5preprocess, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getAttribute", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_18AdamicAdarDistance_7getAttribute, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_18AdamicAdarDistance_6getAttribute},
  {"distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_18AdamicAdarDistance_9distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_18AdamicAdarDistance_8distance},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_18AdamicAdarDistance_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_18AdamicAdarDistance_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_AdamicAdarDistance_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_AdamicAdarDistance},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tAdamicAdarDistance(G)\n\n\tCalculate the adamic adar similarity.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_AdamicAdarDistance},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_AdamicAdarDistance},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_AdamicAdarDistance},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_AdamicAdarDistance},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_AdamicAdarDistance_spec = {
  "networkit.distance.AdamicAdarDistance",
  sizeof(struct __pyx_obj_9networkit_8distance_AdamicAdarDistance),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9networkit_8distance_AdamicAdarDistance_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_AdamicAdarDistance = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""AdamicAdarDistance", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_AdamicAdarDistance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_AdamicAdarDistance, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n\tAdamicAdarDistance(G)\n\n\tCalculate the adamic adar similarity.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_AdamicAdarDistance, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_AdamicAdarDistance, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_AdamicAdarDistance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_AdamicAdarDistance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_Diameter(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_Diameter *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_8distance_Diameter *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_8Diameter_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_Diameter(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_Diameter *p = (struct __pyx_obj_9networkit_8distance_Diameter *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_Diameter) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_8distance_Diameter);
}

static int __pyx_tp_traverse_9networkit_8distance_Diameter(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_Diameter *p = (struct __pyx_obj_9networkit_8distance_Diameter *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_8distance_Diameter)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_Diameter(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_Diameter *p = (struct __pyx_obj_9networkit_8distance_Diameter *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_8distance_Diameter);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_Diameter[] = {
  {"getDiameter", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_8Diameter_3getDiameter, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_8Diameter_2getDiameter},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_8Diameter_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_8Diameter_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_Diameter_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_Diameter},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tDiameter(G, algo = networkit.DiameterAlgo.AUTOMATIC, error = -1., nSamples = 0)\n\n\tCalculate the Diameter of the graph based different possible algorithms.\n\n\tParameter :code:`algo` can be one of the following:\n\n\t- networkit.distance.DiameterAlgo.AUTOMATIC\n\t- networkit.distance.DiameterAlgo.EXACT\n\t- networkit.distance.DiameterAlgo.ESTIMATED_RANGE\n\t- networkit.distance.DiameterAlgo.ESTIMATED_SAMPLES\n\t- networkit.distance.DiameterAlgo.ESTIMATED_PEDANTIC\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\talgo : networkit.distance.DiameterAlgo, optional\n\t\tAlgorithm which should be used for diameter computation. Default: networkit.distance.DiameterAlgo.AUTOMATIC\n\terror : float, optional\n\t\tPossible error used for diameter algorithm EstimatedRange. Default: -1\n\tnSamples : int, optional\n\t\tNumber of samples (influencing the quality of the output) used for diameter algorithm EstimatedSamples. Default: 0\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_Diameter},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_Diameter},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_Diameter},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_Diameter},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_Diameter_spec = {
  "networkit.distance.Diameter",
  sizeof(struct __pyx_obj_9networkit_8distance_Diameter),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_Diameter_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_Diameter = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""Diameter", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_Diameter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_Diameter, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tDiameter(G, algo = networkit.DiameterAlgo.AUTOMATIC, error = -1., nSamples = 0)\n\n\tCalculate the Diameter of the graph based different possible algorithms.\n\n\tParameter :code:`algo` can be one of the following:\n\n\t- networkit.distance.DiameterAlgo.AUTOMATIC\n\t- networkit.distance.DiameterAlgo.EXACT\n\t- networkit.distance.DiameterAlgo.ESTIMATED_RANGE\n\t- networkit.distance.DiameterAlgo.ESTIMATED_SAMPLES\n\t- networkit.distance.DiameterAlgo.ESTIMATED_PEDANTIC\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\talgo : networkit.distance.DiameterAlgo, optional\n\t\tAlgorithm which should be used for diameter computation. Default: networkit.distance.DiameterAlgo.AUTOMATIC\n\terror : float, optional\n\t\tPossible error used for diameter algorithm EstimatedRange. Default: -1\n\tnSamples : int, optional\n\t\tNumber of samples (influencing the quality of the output) used for diameter algorithm EstimatedSamples. Default: 0\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_Diameter, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_Diameter, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_Diameter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_Diameter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_Eccentricity(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  return o;
}

static void __pyx_tp_dealloc_9networkit_8distance_Eccentricity(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_Eccentricity) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_9networkit_8distance_Eccentricity[] = {
  {"getValue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_12Eccentricity_1getValue, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_12Eccentricity_getValue},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_12Eccentricity_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_12Eccentricity_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_Eccentricity_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_Eccentricity},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tEccentricity()\n\t\n\tThe eccentricity of a node u is defined as the distance to the farthest node from node u. In other words, it is the longest shortest-path starting from node u.\n\t")},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_Eccentricity},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_Eccentricity},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_Eccentricity_spec = {
  "networkit.distance.Eccentricity",
  sizeof(struct __pyx_obj_9networkit_8distance_Eccentricity),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9networkit_8distance_Eccentricity_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_Eccentricity = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""Eccentricity", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_Eccentricity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_Eccentricity, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n\tEccentricity()\n\t\n\tThe eccentricity of a node u is defined as the distance to the farthest node from node u. In other words, it is the longest shortest-path starting from node u.\n\t"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_Eccentricity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_Eccentricity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_EffectiveDiameterApproximation(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_30EffectiveDiameterApproximation_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_EffectiveDiameterApproximation(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *p = (struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_EffectiveDiameterApproximation) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_8distance_EffectiveDiameterApproximation);
}

static int __pyx_tp_traverse_9networkit_8distance_EffectiveDiameterApproximation(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *p = (struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_8distance_EffectiveDiameterApproximation)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_EffectiveDiameterApproximation(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *p = (struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_8distance_EffectiveDiameterApproximation);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_EffectiveDiameterApproximation[] = {
  {"getEffectiveDiameter", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_30EffectiveDiameterApproximation_3getEffectiveDiameter, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_30EffectiveDiameterApproximation_2getEffectiveDiameter},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_30EffectiveDiameterApproximation_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_30EffectiveDiameterApproximation_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_EffectiveDiameterApproximation_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_EffectiveDiameterApproximation},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tEffectiveDiameterApproximation(G, ratio=0.9, k=64, r=7)\n\n\tCalculates the effective diameter of a graph.\n\tThe effective diameter is defined as the number of edges on average to reach a given ratio of all other nodes.\n\n\tImplementation after the ANF algorithm presented in the paper \"A Fast and Scalable Tool for Data Mining in Massive Graphs\"[1]\n\n\t[1] by Palmer, Gibbons and Faloutsos which can be found here: http://www.cs.cmu.edu/~christos/PUBLICATIONS/kdd02-anf.pdf\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tratio : float, optional\n\t\tThe percentage of nodes that shall be within stepwidth, default = 0.9\n\tk : int, optional\n\t\tNumber of parallel approximations, bigger k -> longer runtime, more precise result; default = 64\n\tr : int, optional\n\t\tNumber of additional bits, important in tiny graphs; default = 7\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_EffectiveDiameterApproximation},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_EffectiveDiameterApproximation},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_EffectiveDiameterApproximation},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_EffectiveDiameterApproximation},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_EffectiveDiameterApproximation_spec = {
  "networkit.distance.EffectiveDiameterApproximation",
  sizeof(struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_EffectiveDiameterApproximation_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_EffectiveDiameterApproximation = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""EffectiveDiameterApproximation", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_EffectiveDiameterApproximation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_EffectiveDiameterApproximation, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tEffectiveDiameterApproximation(G, ratio=0.9, k=64, r=7)\n\n\tCalculates the effective diameter of a graph.\n\tThe effective diameter is defined as the number of edges on average to reach a given ratio of all other nodes.\n\n\tImplementation after the ANF algorithm presented in the paper \"A Fast and Scalable Tool for Data Mining in Massive Graphs\"[1]\n\n\t[1] by Palmer, Gibbons and Faloutsos which can be found here: http://www.cs.cmu.edu/~christos/PUBLICATIONS/kdd02-anf.pdf\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tratio : float, optional\n\t\tThe percentage of nodes that shall be within stepwidth, default = 0.9\n\tk : int, optional\n\t\tNumber of parallel approximations, bigger k -> longer runtime, more precise result; default = 64\n\tr : int, optional\n\t\tNumber of additional bits, important in tiny graphs; default = 7\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_EffectiveDiameterApproximation, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_EffectiveDiameterApproximation, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_EffectiveDiameterApproximation, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_EffectiveDiameterApproximation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_EffectiveDiameter(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_EffectiveDiameter *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_8distance_EffectiveDiameter *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_17EffectiveDiameter_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_EffectiveDiameter(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_EffectiveDiameter *p = (struct __pyx_obj_9networkit_8distance_EffectiveDiameter *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_EffectiveDiameter) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_8distance_EffectiveDiameter);
}

static int __pyx_tp_traverse_9networkit_8distance_EffectiveDiameter(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_EffectiveDiameter *p = (struct __pyx_obj_9networkit_8distance_EffectiveDiameter *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_8distance_EffectiveDiameter)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_EffectiveDiameter(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_EffectiveDiameter *p = (struct __pyx_obj_9networkit_8distance_EffectiveDiameter *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_8distance_EffectiveDiameter);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_EffectiveDiameter[] = {
  {"getEffectiveDiameter", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_17EffectiveDiameter_3getEffectiveDiameter, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_17EffectiveDiameter_2getEffectiveDiameter},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_17EffectiveDiameter_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_17EffectiveDiameter_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_EffectiveDiameter_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_EffectiveDiameter},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tEffectiveDiameter(G, ratio=0.9)\n\n\tCalculates the effective diameter of a graph.\n\tThe effective diameter is defined as the number of edges on average to reach a given ratio of all other nodes.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tratio : float, optional\n\t\tThe percentage of nodes that shall be within stepwidth; default = 0.9\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_EffectiveDiameter},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_EffectiveDiameter},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_EffectiveDiameter},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_EffectiveDiameter},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_EffectiveDiameter_spec = {
  "networkit.distance.EffectiveDiameter",
  sizeof(struct __pyx_obj_9networkit_8distance_EffectiveDiameter),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_EffectiveDiameter_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_EffectiveDiameter = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""EffectiveDiameter", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_EffectiveDiameter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_EffectiveDiameter, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tEffectiveDiameter(G, ratio=0.9)\n\n\tCalculates the effective diameter of a graph.\n\tThe effective diameter is defined as the number of edges on average to reach a given ratio of all other nodes.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tratio : float, optional\n\t\tThe percentage of nodes that shall be within stepwidth; default = 0.9\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_EffectiveDiameter, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_EffectiveDiameter, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_EffectiveDiameter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_EffectiveDiameter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_HopPlotApproximation(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_HopPlotApproximation *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_8distance_HopPlotApproximation *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_20HopPlotApproximation_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_HopPlotApproximation(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_HopPlotApproximation *p = (struct __pyx_obj_9networkit_8distance_HopPlotApproximation *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_HopPlotApproximation) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_8distance_HopPlotApproximation);
}

static int __pyx_tp_traverse_9networkit_8distance_HopPlotApproximation(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_HopPlotApproximation *p = (struct __pyx_obj_9networkit_8distance_HopPlotApproximation *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_8distance_HopPlotApproximation)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_HopPlotApproximation(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_HopPlotApproximation *p = (struct __pyx_obj_9networkit_8distance_HopPlotApproximation *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_8distance_HopPlotApproximation);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_HopPlotApproximation[] = {
  {"getHopPlot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_20HopPlotApproximation_3getHopPlot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_20HopPlotApproximation_2getHopPlot},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_20HopPlotApproximation_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_20HopPlotApproximation_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_HopPlotApproximation_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_HopPlotApproximation},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tHopPlotApproximation(G, maxDistance=0, k=64, r=7)\n\n\tComputes an approxmation of the hop-plot of a given graph.\n\tThe hop-plot is the set of pairs (d, g(g)) for each natural number d\n\tand where g(d) is the fraction of connected node pairs whose shortest connecting path has length at most d.\n\n\tImplementation after the ANF algorithm presented in the paper \"A Fast and Scalable Tool for Data Mining in Massive Graphs\"[1]\n\n\t[1] by Palmer, Gibbons and Faloutsos which can be found here: http://www.cs.cmu.edu/~christos/PUBLICATIONS/kdd02-anf.pdf\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tmaxDistance : float, optional\n\t\tMaximum distance between considered nodes set to 0 or negative to get the hop-plot \n\t\tfor the entire graph so that each node can reach each other node.\n\tk : int, optional\n\t\tNumber of parallel approximations, bigger k -> longer runtime, more precise result; default = 64\n\tr : int, optional\n\t\tNumber of additional bits, important in tiny graphs; default = 7\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_HopPlotApproximation},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_HopPlotApproximation},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_HopPlotApproximation},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_HopPlotApproximation},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_HopPlotApproximation_spec = {
  "networkit.distance.HopPlotApproximation",
  sizeof(struct __pyx_obj_9networkit_8distance_HopPlotApproximation),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_HopPlotApproximation_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_HopPlotApproximation = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""HopPlotApproximation", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_HopPlotApproximation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_HopPlotApproximation, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tHopPlotApproximation(G, maxDistance=0, k=64, r=7)\n\n\tComputes an approxmation of the hop-plot of a given graph.\n\tThe hop-plot is the set of pairs (d, g(g)) for each natural number d\n\tand where g(d) is the fraction of connected node pairs whose shortest connecting path has length at most d.\n\n\tImplementation after the ANF algorithm presented in the paper \"A Fast and Scalable Tool for Data Mining in Massive Graphs\"[1]\n\n\t[1] by Palmer, Gibbons and Faloutsos which can be found here: http://www.cs.cmu.edu/~christos/PUBLICATIONS/kdd02-anf.pdf\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tmaxDistance : float, optional\n\t\tMaximum distance between considered nodes set to 0 or negative to get the hop-plot \n\t\tfor the entire graph so that each node can reach each other node.\n\tk : int, optional\n\t\tNumber of parallel approximations, bigger k -> longer runtime, more precise result; default = 64\n\tr : int, optional\n\t\tNumber of additional bits, important in tiny graphs; default = 7\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_HopPlotApproximation, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_HopPlotApproximation, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_HopPlotApproximation, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_HopPlotApproximation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_NeighborhoodFunction(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_20NeighborhoodFunction_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_NeighborhoodFunction(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *p = (struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_NeighborhoodFunction) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_8distance_NeighborhoodFunction);
}

static int __pyx_tp_traverse_9networkit_8distance_NeighborhoodFunction(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *p = (struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_8distance_NeighborhoodFunction)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_NeighborhoodFunction(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *p = (struct __pyx_obj_9networkit_8distance_NeighborhoodFunction *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_8distance_NeighborhoodFunction);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_NeighborhoodFunction[] = {
  {"getNeighborhoodFunction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_20NeighborhoodFunction_3getNeighborhoodFunction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_20NeighborhoodFunction_2getNeighborhoodFunction},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_20NeighborhoodFunction_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_20NeighborhoodFunction_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_NeighborhoodFunction_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_NeighborhoodFunction},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tNeighborhoodFunction(G)\n\n\tComputes the neighborhood function exactly.\n\tThe neighborhood function N of a graph G for a given distance t is defined\n\tas the number of node pairs (u,v) that can be reached within distance t.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_NeighborhoodFunction},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_NeighborhoodFunction},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_NeighborhoodFunction},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_NeighborhoodFunction},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_NeighborhoodFunction_spec = {
  "networkit.distance.NeighborhoodFunction",
  sizeof(struct __pyx_obj_9networkit_8distance_NeighborhoodFunction),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_NeighborhoodFunction_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_NeighborhoodFunction = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""NeighborhoodFunction", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_NeighborhoodFunction), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_NeighborhoodFunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tNeighborhoodFunction(G)\n\n\tComputes the neighborhood function exactly.\n\tThe neighborhood function N of a graph G for a given distance t is defined\n\tas the number of node pairs (u,v) that can be reached within distance t.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_NeighborhoodFunction, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_NeighborhoodFunction, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_NeighborhoodFunction, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_NeighborhoodFunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_NeighborhoodFunctionApproximation(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_33NeighborhoodFunctionApproximation_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_NeighborhoodFunctionApproximation(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *p = (struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_NeighborhoodFunctionApproximation) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_8distance_NeighborhoodFunctionApproximation);
}

static int __pyx_tp_traverse_9networkit_8distance_NeighborhoodFunctionApproximation(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *p = (struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_8distance_NeighborhoodFunctionApproximation)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_NeighborhoodFunctionApproximation(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *p = (struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_8distance_NeighborhoodFunctionApproximation);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_NeighborhoodFunctionApproximation[] = {
  {"getNeighborhoodFunction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_33NeighborhoodFunctionApproximation_3getNeighborhoodFunction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_33NeighborhoodFunctionApproximation_2getNeighborhoodFunction},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_33NeighborhoodFunctionApproximation_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_33NeighborhoodFunctionApproximation_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_NeighborhoodFunctionApproximation_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_NeighborhoodFunctionApproximation},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tNeighborhoodFunctionApproximation(G, k=64, r=7)\n\n\tComputes an approximation of the neighborhood function.\n\tThe neighborhood function N of a graph G for a given distance t is defined\n\tas the number of node pairs (u,v) that can be reached within distance t.\n\n\tImplementation after the ANF algorithm presented in the paper \"A Fast and Scalable Tool for Data Mining in Massive Graphs\"[1]\n\n\t[1] by Palmer, Gibbons and Faloutsos which can be found here: http://www.cs.cmu.edu/~christos/PUBLICATIONS/kdd02-anf.pdf\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tk : int, optional\n\t\tNumber of approximations, bigger k -> longer runtime, more precise result; default = 64\n\tr : int, optional\n\t\tNumber of additional bits, important in tiny graphs; default = 7\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_NeighborhoodFunctionApproximation},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_NeighborhoodFunctionApproximation},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_NeighborhoodFunctionApproximation},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_NeighborhoodFunctionApproximation},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_NeighborhoodFunctionApproximation_spec = {
  "networkit.distance.NeighborhoodFunctionApproximation",
  sizeof(struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_NeighborhoodFunctionApproximation_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_NeighborhoodFunctionApproximation = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""NeighborhoodFunctionApproximation", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionApproximation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_NeighborhoodFunctionApproximation, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tNeighborhoodFunctionApproximation(G, k=64, r=7)\n\n\tComputes an approximation of the neighborhood function.\n\tThe neighborhood function N of a graph G for a given distance t is defined\n\tas the number of node pairs (u,v) that can be reached within distance t.\n\n\tImplementation after the ANF algorithm presented in the paper \"A Fast and Scalable Tool for Data Mining in Massive Graphs\"[1]\n\n\t[1] by Palmer, Gibbons and Faloutsos which can be found here: http://www.cs.cmu.edu/~christos/PUBLICATIONS/kdd02-anf.pdf\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tk : int, optional\n\t\tNumber of approximations, bigger k -> longer runtime, more precise result; default = 64\n\tr : int, optional\n\t\tNumber of additional bits, important in tiny graphs; default = 7\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_NeighborhoodFunctionApproximation, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_NeighborhoodFunctionApproximation, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_NeighborhoodFunctionApproximation, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_NeighborhoodFunctionApproximation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_Volume(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  return o;
}

static void __pyx_tp_dealloc_9networkit_8distance_Volume(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_Volume) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_9networkit_8distance_Volume[] = {
  {"volume", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_6Volume_1volume, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_6Volume_volume},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_6Volume_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_6Volume_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_Volume_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_Volume},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tVolume()\n\t\n\tThe volume of a graph and its meaning is explained in the following publication:\n\n\tFranz-Benjamin Mocnik: \"The Polynomial Volume Law of Complex Networks in\n\tthe Context of Local and Global Optimization\", Scientific Reports 8(11274)\n\t2018. doi: 10.1038/s41598-018-29131-0\n\t")},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_Volume},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_Volume},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_Volume_spec = {
  "networkit.distance.Volume",
  sizeof(struct __pyx_obj_9networkit_8distance_Volume),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9networkit_8distance_Volume_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_Volume = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""Volume", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_Volume), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_Volume, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n\tVolume()\n\t\n\tThe volume of a graph and its meaning is explained in the following publication:\n\n\tFranz-Benjamin Mocnik: \"The Polynomial Volume Law of Complex Networks in\n\tthe Context of Local and Global Optimization\", Scientific Reports 8(11274)\n\t2018. doi: 10.1038/s41598-018-29131-0\n\t"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_Volume, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_Volume, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_JaccardDistance(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_JaccardDistance *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9networkit_8distance_JaccardDistance *)o);
  new((void*)&(p->_triangles)) std::vector<__pyx_t_9networkit_10structures_count> ();
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_15JaccardDistance_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_JaccardDistance(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_JaccardDistance *p = (struct __pyx_obj_9networkit_8distance_JaccardDistance *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_JaccardDistance) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_8distance_15JaccardDistance_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->_triangles);
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_9networkit_8distance_JaccardDistance(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_JaccardDistance *p = (struct __pyx_obj_9networkit_8distance_JaccardDistance *)o;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_JaccardDistance(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_JaccardDistance *p = (struct __pyx_obj_9networkit_8distance_JaccardDistance *)o;
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_JaccardDistance[] = {
  {"getAttribute", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_15JaccardDistance_5getAttribute, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_15JaccardDistance_4getAttribute},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_15JaccardDistance_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_15JaccardDistance_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_JaccardDistance_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_JaccardDistance},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tJaccardDistance(G, triangles)\n\n\tThe Jaccard distance measure assigns to each edge the jaccard coefficient\n\tof the neighborhoods of the two adjacent nodes.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph to calculate Jaccard distances for.\n\ttriangles : list(int)\n\t\tPreviously calculated edge triangle counts.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_JaccardDistance},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_JaccardDistance},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_JaccardDistance},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_JaccardDistance},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_JaccardDistance_spec = {
  "networkit.distance.JaccardDistance",
  sizeof(struct __pyx_obj_9networkit_8distance_JaccardDistance),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9networkit_8distance_JaccardDistance_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_JaccardDistance = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""JaccardDistance", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_JaccardDistance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_JaccardDistance, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n\tJaccardDistance(G, triangles)\n\n\tThe Jaccard distance measure assigns to each edge the jaccard coefficient\n\tof the neighborhoods of the two adjacent nodes.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph to calculate Jaccard distances for.\n\ttriangles : list(int)\n\t\tPreviously calculated edge triangle counts.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_JaccardDistance, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_JaccardDistance, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_JaccardDistance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_JaccardDistance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_JaccardSimilarityAttributizer(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *)o);
  new((void*)&(p->_triangles)) std::vector<__pyx_t_9networkit_10structures_count> ();
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_JaccardSimilarityAttributizer(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *p = (struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_JaccardSimilarityAttributizer) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->_triangles);
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_9networkit_8distance_JaccardSimilarityAttributizer(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *p = (struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *)o;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_JaccardSimilarityAttributizer(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *p = (struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer *)o;
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_JaccardSimilarityAttributizer[] = {
  {"getAttribute", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_5getAttribute, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_29JaccardSimilarityAttributizer_4getAttribute},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_29JaccardSimilarityAttributizer_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_JaccardSimilarityAttributizer_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_JaccardSimilarityAttributizer},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tJaccardSimilarityAtrributizer(G, triangles)\n\n\tThe Jaccard similarity measure assigns to each edge (1 - the jaccard coefficient\n\tof the neighborhoods of the two adjacent nodes).\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph to calculate Jaccard similarities for.\n\ttriangles : list(int)\n\t\tPreviously calculated edge triangle counts.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_JaccardSimilarityAttributizer},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_JaccardSimilarityAttributizer},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_JaccardSimilarityAttributizer},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_JaccardSimilarityAttributizer},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_JaccardSimilarityAttributizer_spec = {
  "networkit.distance.JaccardSimilarityAttributizer",
  sizeof(struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9networkit_8distance_JaccardSimilarityAttributizer_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_JaccardSimilarityAttributizer = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""JaccardSimilarityAttributizer", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_JaccardSimilarityAttributizer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_JaccardSimilarityAttributizer, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n\tJaccardSimilarityAtrributizer(G, triangles)\n\n\tThe Jaccard similarity measure assigns to each edge (1 - the jaccard coefficient\n\tof the neighborhoods of the two adjacent nodes).\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph to calculate Jaccard similarities for.\n\ttriangles : list(int)\n\t\tPreviously calculated edge triangle counts.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_JaccardSimilarityAttributizer, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_JaccardSimilarityAttributizer, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_JaccardSimilarityAttributizer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_JaccardSimilarityAttributizer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_AlgebraicDistance(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_AlgebraicDistance *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9networkit_8distance_AlgebraicDistance *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_17AlgebraicDistance_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_AlgebraicDistance(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_AlgebraicDistance *p = (struct __pyx_obj_9networkit_8distance_AlgebraicDistance *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_AlgebraicDistance) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_8distance_17AlgebraicDistance_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_9networkit_8distance_AlgebraicDistance(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_AlgebraicDistance *p = (struct __pyx_obj_9networkit_8distance_AlgebraicDistance *)o;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_AlgebraicDistance(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_AlgebraicDistance *p = (struct __pyx_obj_9networkit_8distance_AlgebraicDistance *)o;
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_AlgebraicDistance[] = {
  {"preprocess", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_17AlgebraicDistance_5preprocess, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_17AlgebraicDistance_7distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getEdgeScores", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_17AlgebraicDistance_9getEdgeScores, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_17AlgebraicDistance_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_17AlgebraicDistance_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_AlgebraicDistance_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_AlgebraicDistance},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tAlgebraicDistance(G, numberSystems=10, numberIterations=30, omega=0.5, norm=0, withEdgeScores=False)\n\n\tAlgebraic distance assigns a distance value to pairs of nodes\n\taccording to their structural closeness in the graph.\n\tAlgebraic distances will become small within dense subgraphs.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph to calculate Jaccard distances for.\n\tnumberSystems : int, optional\n\t \tNumber of vectors/systems used for algebraic iteration. Default: 10\n\tnumberIterations : int, optional\n\t \tNumber of iterations in each system. Default: 30\n\tomega : float, optional\n\t \tAttenuation factor in [0,1] influencing convergence speed. Default: 0.5\n\tnorm : int, optional\n\t\tThe norm factor of the extended algebraic distance. Default: 0\n\twithEdgeScores : bool, optional\n\t\tCalculate array of scores for edges {u,v} that equal ad(u,v). Default: False\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_AlgebraicDistance},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_AlgebraicDistance},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_AlgebraicDistance},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_AlgebraicDistance},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_AlgebraicDistance_spec = {
  "networkit.distance.AlgebraicDistance",
  sizeof(struct __pyx_obj_9networkit_8distance_AlgebraicDistance),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9networkit_8distance_AlgebraicDistance_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_AlgebraicDistance = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""AlgebraicDistance", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_AlgebraicDistance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_AlgebraicDistance, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n\tAlgebraicDistance(G, numberSystems=10, numberIterations=30, omega=0.5, norm=0, withEdgeScores=False)\n\n\tAlgebraic distance assigns a distance value to pairs of nodes\n\taccording to their structural closeness in the graph.\n\tAlgebraic distances will become small within dense subgraphs.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph to calculate Jaccard distances for.\n\tnumberSystems : int, optional\n\t \tNumber of vectors/systems used for algebraic iteration. Default: 10\n\tnumberIterations : int, optional\n\t \tNumber of iterations in each system. Default: 30\n\tomega : float, optional\n\t \tAttenuation factor in [0,1] influencing convergence speed. Default: 0.5\n\tnorm : int, optional\n\t\tThe norm factor of the extended algebraic distance. Default: 0\n\twithEdgeScores : bool, optional\n\t\tCalculate array of scores for edges {u,v} that equal ad(u,v). Default: False\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_AlgebraicDistance, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_AlgebraicDistance, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_AlgebraicDistance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_AlgebraicDistance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_CommuteTimeDistance(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_19CommuteTimeDistance_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_CommuteTimeDistance(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *p = (struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_CommuteTimeDistance) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_8distance_CommuteTimeDistance);
}

static int __pyx_tp_traverse_9networkit_8distance_CommuteTimeDistance(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *p = (struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_8distance_CommuteTimeDistance)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_CommuteTimeDistance(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *p = (struct __pyx_obj_9networkit_8distance_CommuteTimeDistance *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_8distance_CommuteTimeDistance);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_CommuteTimeDistance[] = {
  {"runApproximation", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19CommuteTimeDistance_3runApproximation, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_19CommuteTimeDistance_2runApproximation},
  {"runParallelApproximation", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19CommuteTimeDistance_5runParallelApproximation, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_19CommuteTimeDistance_4runParallelApproximation},
  {"distance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19CommuteTimeDistance_7distance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_19CommuteTimeDistance_6distance},
  {"runSinglePair", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19CommuteTimeDistance_9runSinglePair, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_19CommuteTimeDistance_8runSinglePair},
  {"runSingleSource", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19CommuteTimeDistance_11runSingleSource, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_19CommuteTimeDistance_10runSingleSource},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19CommuteTimeDistance_13__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19CommuteTimeDistance_15__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_CommuteTimeDistance_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_CommuteTimeDistance},
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tCommuteTimeDistance(G, tol=0.1)\n\t\n\tComputes the Euclidean Commute Time Distance (ECTD) between each pair of nodes for an undirected unweighted graph.\n\n\tCommuteTimeDistance(G)\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\ttol: float, optional\n\t\tTolerance for computation (higher tolerance leads to faster running times). Default: 0.1\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_CommuteTimeDistance},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_CommuteTimeDistance},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_CommuteTimeDistance},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_CommuteTimeDistance},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_CommuteTimeDistance_spec = {
  "networkit.distance.CommuteTimeDistance",
  sizeof(struct __pyx_obj_9networkit_8distance_CommuteTimeDistance),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_CommuteTimeDistance_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_CommuteTimeDistance = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""CommuteTimeDistance", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_CommuteTimeDistance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_CommuteTimeDistance, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tCommuteTimeDistance(G, tol=0.1)\n\t\n\tComputes the Euclidean Commute Time Distance (ECTD) between each pair of nodes for an undirected unweighted graph.\n\n\tCommuteTimeDistance(G)\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\ttol: float, optional\n\t\tTolerance for computation (higher tolerance leads to faster running times). Default: 0.1\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_CommuteTimeDistance, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_CommuteTimeDistance, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_CommuteTimeDistance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_CommuteTimeDistance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_NeighborhoodFunctionHeuristic(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_29NeighborhoodFunctionHeuristic_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_NeighborhoodFunctionHeuristic(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *p = (struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_NeighborhoodFunctionHeuristic) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_8distance_NeighborhoodFunctionHeuristic);
}

static int __pyx_tp_traverse_9networkit_8distance_NeighborhoodFunctionHeuristic(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *p = (struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_8distance_NeighborhoodFunctionHeuristic)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_NeighborhoodFunctionHeuristic(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *p = (struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_8distance_NeighborhoodFunctionHeuristic);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_NeighborhoodFunctionHeuristic[] = {
  {"getNeighborhoodFunction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_29NeighborhoodFunctionHeuristic_3getNeighborhoodFunction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_29NeighborhoodFunctionHeuristic_2getNeighborhoodFunction},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_29NeighborhoodFunctionHeuristic_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_29NeighborhoodFunctionHeuristic_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_NeighborhoodFunctionHeuristic_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_NeighborhoodFunctionHeuristic},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tNeighborhoodFunctionHeuristic(G, nSamples=0, strategy=SelectionStrategy.SPLIT)\n\n\tComputes a heuristic of the neighborhood function.\n\tThe algorithm runs nSamples breadth-first searches and scales the results up to the actual amount of nodes.\n\n\tParameter :code:`strategy` can be one of the following:\n\n\t- networkit.distance.SelectionStrategy.RANDOM\n\t- networkit.distance.SelectionStrategy.SPLIT\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tnSamples : int, optional\n\t\tThe amount of samples, set to zero for heuristic of max(sqrt(m), 0.15*n). Default: 0\n\tstrategy : networkit.distance.SelectionStrategy, optional\n\t\tThe strategy to select the samples, accepts RANDOM (0) or SPLIT (1). Default: networkit.distance.SelectionStrategy.SPLIT\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_NeighborhoodFunctionHeuristic},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_NeighborhoodFunctionHeuristic},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_NeighborhoodFunctionHeuristic},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_NeighborhoodFunctionHeuristic},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_NeighborhoodFunctionHeuristic_spec = {
  "networkit.distance.NeighborhoodFunctionHeuristic",
  sizeof(struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_NeighborhoodFunctionHeuristic_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_NeighborhoodFunctionHeuristic = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""NeighborhoodFunctionHeuristic", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_NeighborhoodFunctionHeuristic), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_NeighborhoodFunctionHeuristic, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tNeighborhoodFunctionHeuristic(G, nSamples=0, strategy=SelectionStrategy.SPLIT)\n\n\tComputes a heuristic of the neighborhood function.\n\tThe algorithm runs nSamples breadth-first searches and scales the results up to the actual amount of nodes.\n\n\tParameter :code:`strategy` can be one of the following:\n\n\t- networkit.distance.SelectionStrategy.RANDOM\n\t- networkit.distance.SelectionStrategy.SPLIT\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tnSamples : int, optional\n\t\tThe amount of samples, set to zero for heuristic of max(sqrt(m), 0.15*n). Default: 0\n\tstrategy : networkit.distance.SelectionStrategy, optional\n\t\tThe strategy to select the samples, accepts RANDOM (0) or SPLIT (1). Default: networkit.distance.SelectionStrategy.SPLIT\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_NeighborhoodFunctionHeuristic, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_NeighborhoodFunctionHeuristic, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_NeighborhoodFunctionHeuristic, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_NeighborhoodFunctionHeuristic, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_APSP(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_APSP *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_8distance_APSP *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_4APSP_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_APSP(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_APSP *p = (struct __pyx_obj_9networkit_8distance_APSP *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_APSP) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_8distance_4APSP_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_G);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_8distance_APSP);
}

static int __pyx_tp_traverse_9networkit_8distance_APSP(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_APSP *p = (struct __pyx_obj_9networkit_8distance_APSP *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_8distance_APSP)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_APSP(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_APSP *p = (struct __pyx_obj_9networkit_8distance_APSP *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_8distance_APSP);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_APSP[] = {
  {"getDistances", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4APSP_5getDistances, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4APSP_4getDistances},
  {"getDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4APSP_7getDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4APSP_6getDistance},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4APSP_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4APSP_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_APSP_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_APSP},
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tAPSP(G)\n\n\tAll-Pairs Shortest-Paths algorithm (implemented running Dijkstra's algorithm from each node, or BFS if G is unweighted).\n\tComputes all pairwise shortest-path distances in G.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_APSP},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_APSP},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_APSP},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_APSP},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_APSP_spec = {
  "networkit.distance.APSP",
  sizeof(struct __pyx_obj_9networkit_8distance_APSP),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_APSP_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_APSP = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""APSP", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_APSP), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_APSP, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tAPSP(G)\n\n\tAll-Pairs Shortest-Paths algorithm (implemented running Dijkstra's algorithm from each node, or BFS if G is unweighted).\n\tComputes all pairwise shortest-path distances in G.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_APSP, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_APSP, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_APSP, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_APSP, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_SPSP(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_SPSP *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_8distance_SPSP *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_4SPSP_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_SPSP(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_SPSP *p = (struct __pyx_obj_9networkit_8distance_SPSP *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_SPSP) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_8distance_4SPSP_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_G);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_8distance_SPSP);
}

static int __pyx_tp_traverse_9networkit_8distance_SPSP(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_SPSP *p = (struct __pyx_obj_9networkit_8distance_SPSP *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_8distance_SPSP)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_SPSP(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_SPSP *p = (struct __pyx_obj_9networkit_8distance_SPSP *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_8distance_SPSP);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_SPSP[] = {
  {"getDistances", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SPSP_5getDistances, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SPSP_4getDistances},
  {"getDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SPSP_7getDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SPSP_6getDistance},
  {"setSources", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SPSP_9setSources, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SPSP_8setSources},
  {"setTargets", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SPSP_11setTargets, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_4SPSP_10setTargets},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SPSP_13__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_4SPSP_15__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_SPSP_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_SPSP},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tSPSP(G, sources)\n\t\n\tSome-Pairs Shortest-Paths algorithm (implemented running Dijkstra's algorithm from each source\n\tnode, or BFS if G is unweighted).\n\tComputes pairwise shortest-path distances from the source nodes to all the nodes in G.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsources : list(int)\n\t\tSet of source nodes.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_SPSP},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_SPSP},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_SPSP},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_SPSP},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_SPSP_spec = {
  "networkit.distance.SPSP",
  sizeof(struct __pyx_obj_9networkit_8distance_SPSP),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_SPSP_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_SPSP = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""SPSP", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_SPSP), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_SPSP, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tSPSP(G, sources)\n\t\n\tSome-Pairs Shortest-Paths algorithm (implemented running Dijkstra's algorithm from each source\n\tnode, or BFS if G is unweighted).\n\tComputes pairwise shortest-path distances from the source nodes to all the nodes in G.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsources : list(int)\n\t\tSet of source nodes.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_SPSP, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_SPSP, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_SPSP, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_SPSP, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods_9networkit_8distance_DynAPSP[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_7DynAPSP_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_7DynAPSP_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_DynAPSP_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tDynAPSP(G)\n\t\n\tAll-Pairs Shortest-Paths algorithm for dynamic graphs.\n\tComputes all pairwise shortest-path distances in G.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\t\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_APSP},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_APSP},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_DynAPSP},
  {Py_tp_init, (void *)__pyx_pw_9networkit_8distance_7DynAPSP_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_APSP},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_DynAPSP_spec = {
  "networkit.distance.DynAPSP",
  sizeof(struct __pyx_obj_9networkit_8distance_DynAPSP),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_DynAPSP_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_DynAPSP = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""DynAPSP", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_DynAPSP), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_APSP, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tDynAPSP(G)\n\t\n\tAll-Pairs Shortest-Paths algorithm for dynamic graphs.\n\tComputes all pairwise shortest-path distances in G.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\t\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_APSP, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_APSP, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_DynAPSP, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9networkit_8distance_7DynAPSP_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_APSP, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_BFS(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_8distance_SSSP(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_8distance_3BFS_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_8distance_BFS[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_3BFS_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_3BFS_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_BFS_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tBFS(G, source, storePaths=True, storeNodesSortedByDistance=False, target=None)\n\t\n\tSimple breadth-first search on a Graph from a given source.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsource : int\n\t\tThe source node of the breadth-first search.\n\tstorePaths : bool, optional\n\t\tControls whether to store paths and number of paths. Default: True\n\tstoreNodesSortedByDistance : bool, optional\n\t\tControls whether to store nodes sorted by distance. Default: False\n\ttarget: int or None, optional\n\t\tTerminate search when the target has been reached. In default-mode, this target is set to None.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_SSSP},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_SSSP},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_BFS},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_BFS},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_BFS_spec = {
  "networkit.distance.BFS",
  sizeof(struct __pyx_obj_9networkit_8distance_BFS),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_BFS_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_BFS = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""BFS", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_BFS), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_SSSP, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tBFS(G, source, storePaths=True, storeNodesSortedByDistance=False, target=None)\n\t\n\tSimple breadth-first search on a Graph from a given source.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsource : int\n\t\tThe source node of the breadth-first search.\n\tstorePaths : bool, optional\n\t\tControls whether to store paths and number of paths. Default: True\n\tstoreNodesSortedByDistance : bool, optional\n\t\tControls whether to store nodes sorted by distance. Default: False\n\ttarget: int or None, optional\n\t\tTerminate search when the target has been reached. In default-mode, this target is set to None.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_SSSP, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_SSSP, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_BFS, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_8distance_4SSSP_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_BFS, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_Dijkstra(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_8distance_SSSP(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_8distance_8Dijkstra_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_8distance_Dijkstra[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_8Dijkstra_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_8Dijkstra_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_Dijkstra_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tDijkstra(G, source, storePaths=True, storeNodesSortedByDistance=False, target=None)\n\t\n\tDijkstra's SSSP algorithm. Returns list of weighted distances from node source, i.e. the length of the shortest path from source to\n\tany other node.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsource : int\n\t\tThe source node of the Dijkstra search.\n\tstorePaths : bool, optional\n\t\tControls whether to store paths and number of paths. Default: True\n\tstoreNodesSortedByDistance : bool, optional\n\t\tControls whether to store nodes sorted by distance. Default: False\n\ttarget: int or None, optional\n\t\tTerminate search when the target has been reached. In default-mode, this target is set to None.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_SSSP},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_SSSP},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_Dijkstra},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_Dijkstra},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_Dijkstra_spec = {
  "networkit.distance.Dijkstra",
  sizeof(struct __pyx_obj_9networkit_8distance_Dijkstra),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_Dijkstra_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_Dijkstra = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""Dijkstra", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_Dijkstra), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_SSSP, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tDijkstra(G, source, storePaths=True, storeNodesSortedByDistance=False, target=None)\n\t\n\tDijkstra's SSSP algorithm. Returns list of weighted distances from node source, i.e. the length of the shortest path from source to\n\tany other node.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsource : int\n\t\tThe source node of the Dijkstra search.\n\tstorePaths : bool, optional\n\t\tControls whether to store paths and number of paths. Default: True\n\tstoreNodesSortedByDistance : bool, optional\n\t\tControls whether to store nodes sorted by distance. Default: False\n\ttarget: int or None, optional\n\t\tTerminate search when the target has been reached. In default-mode, this target is set to None.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_SSSP, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_SSSP, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_Dijkstra, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_8distance_4SSSP_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_Dijkstra, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_MultiTargetBFS(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_8distance_STSP(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_8distance_14MultiTargetBFS_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_8distance_MultiTargetBFS[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_14MultiTargetBFS_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_14MultiTargetBFS_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_MultiTargetBFS_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n\tMultiTargetBFS(G, source, targets)\n\t\n\tSimple breadth-first search on a Graph from a given source to multiple targets.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsource : int\n\t\tThe source node of the breadth-first search.\n\ttargets : list(int)\n\t\tList of target nodes.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_STSP},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_STSP},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_MultiTargetBFS},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_MultiTargetBFS},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_MultiTargetBFS_spec = {
  "networkit.distance.MultiTargetBFS",
  sizeof(struct __pyx_obj_9networkit_8distance_MultiTargetBFS),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_MultiTargetBFS_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_MultiTargetBFS = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""MultiTargetBFS", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_MultiTargetBFS), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_STSP, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tMultiTargetBFS(G, source, targets)\n\t\n\tSimple breadth-first search on a Graph from a given source to multiple targets.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsource : int\n\t\tThe source node of the breadth-first search.\n\ttargets : list(int)\n\t\tList of target nodes.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_STSP, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_STSP, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_MultiTargetBFS, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_8distance_4STSP_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_MultiTargetBFS, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_MultiTargetDijkstra(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_8distance_STSP(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_8distance_19MultiTargetDijkstra_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_8distance_MultiTargetDijkstra[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19MultiTargetDijkstra_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_19MultiTargetDijkstra_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_MultiTargetDijkstra_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n\tMultiTargetDijkstra(G, source, targets)\n\t\n\tDijkstra's SSSP algorithm from a single source node to multiple target nodes.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsource : int\n\t\tThe source node of the Dijkstra search.\n\ttargets : list(int)\n\t\tList of target nodes.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_STSP},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_STSP},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_MultiTargetDijkstra},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_MultiTargetDijkstra},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_MultiTargetDijkstra_spec = {
  "networkit.distance.MultiTargetDijkstra",
  sizeof(struct __pyx_obj_9networkit_8distance_MultiTargetDijkstra),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_MultiTargetDijkstra_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_MultiTargetDijkstra = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""MultiTargetDijkstra", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_MultiTargetDijkstra), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_STSP, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tMultiTargetDijkstra(G, source, targets)\n\t\n\tDijkstra's SSSP algorithm from a single source node to multiple target nodes.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsource : int\n\t\tThe source node of the Dijkstra search.\n\ttargets : list(int)\n\t\tList of target nodes.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_STSP, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_STSP, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_MultiTargetDijkstra, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_8distance_4STSP_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_MultiTargetDijkstra, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_DynBFS(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_8distance_SSSP(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_8distance_6DynBFS_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_8distance_DynBFS[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_6DynBFS_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_6DynBFS_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_DynBFS_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tDynBFS(G, source)\n\n\tDynamic version of BFS.\t\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsource : int\n\t\tThe source node of the breadth-first search.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_SSSP},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_SSSP},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_DynBFS},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_DynBFS},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_DynBFS_spec = {
  "networkit.distance.DynBFS",
  sizeof(struct __pyx_obj_9networkit_8distance_DynBFS),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_DynBFS_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_DynBFS = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""DynBFS", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_DynBFS), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_SSSP, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tDynBFS(G, source)\n\n\tDynamic version of BFS.\t\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsource : int\n\t\tThe source node of the breadth-first search.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_SSSP, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_SSSP, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_DynBFS, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_8distance_7DynSSSP_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_DynBFS, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_DynDijkstra(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_8distance_SSSP(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_8distance_11DynDijkstra_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_8distance_DynDijkstra[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_11DynDijkstra_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_11DynDijkstra_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_DynDijkstra_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tDynDijkstra(G, source)\t\n\t\n\tDynamic version of Dijkstra. Create DynDijkstra for G and a source node.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsource : int\n\t\tThe source node of the Dijkstra search.\n\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_SSSP},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_SSSP},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_DynDijkstra},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_DynDijkstra},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_DynDijkstra_spec = {
  "networkit.distance.DynDijkstra",
  sizeof(struct __pyx_obj_9networkit_8distance_DynDijkstra),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_DynDijkstra_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_DynDijkstra = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""DynDijkstra", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_DynDijkstra), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_SSSP, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tDynDijkstra(G, source)\t\n\t\n\tDynamic version of Dijkstra. Create DynDijkstra for G and a source node.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsource : int\n\t\tThe source node of the Dijkstra search.\n\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_SSSP, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_SSSP, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_DynDijkstra, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_8distance_7DynSSSP_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_DynDijkstra, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_BidirectionalBFS(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_8distance_STSP(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_8distance_16BidirectionalBFS_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_8distance_BidirectionalBFS[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_16BidirectionalBFS_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_16BidirectionalBFS_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_BidirectionalBFS_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n\tBidirectionalBFS(G, source, target, storePre=True)\n\n\tImplements a bidirectional breadth-first search on a graph from two given source and target nodes.\n\tExplores the graph from both the source and target nodes until the two explorations meet.\n\n\tParameters\n\t----------\n\n\tG : networkit.Graph\n\t\tThe input graph.\n\tsource : int\n\t\tThe source node.\n\ttarget : int\n\t\tThe target node.\n\tstorePred : bool, optional\n\t\tIf True, the algorithm will also store the predecessors\n\t\tand reconstruct a shortest path from source and target. Default: True\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_STSP},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_STSP},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_BidirectionalBFS},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_BidirectionalBFS},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_BidirectionalBFS_spec = {
  "networkit.distance.BidirectionalBFS",
  sizeof(struct __pyx_obj_9networkit_8distance_BidirectionalBFS),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_BidirectionalBFS_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_BidirectionalBFS = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""BidirectionalBFS", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_BidirectionalBFS), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_STSP, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tBidirectionalBFS(G, source, target, storePre=True)\n\n\tImplements a bidirectional breadth-first search on a graph from two given source and target nodes.\n\tExplores the graph from both the source and target nodes until the two explorations meet.\n\n\tParameters\n\t----------\n\n\tG : networkit.Graph\n\t\tThe input graph.\n\tsource : int\n\t\tThe source node.\n\ttarget : int\n\t\tThe target node.\n\tstorePred : bool, optional\n\t\tIf True, the algorithm will also store the predecessors\n\t\tand reconstruct a shortest path from source and target. Default: True\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_STSP, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_STSP, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_BidirectionalBFS, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_8distance_4STSP_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_BidirectionalBFS, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_BidirectionalDijkstra(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_8distance_STSP(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_8distance_21BidirectionalDijkstra_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_8distance_BidirectionalDijkstra[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_21BidirectionalDijkstra_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_21BidirectionalDijkstra_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_BidirectionalDijkstra_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n\tBidirectionalDijkstra(G, source, target, storePred=True)\n\n\tBidirectional implementation of the Dijkstra algorithm from\n\ttwo given source and target nodes.\n\tExplores the graph from both the source and target nodes until\n\tthe two explorations meet.\n\n\tParameters:\n\t-----------\n\n\tG : networkit.Graph\n\t\tThe input graph.\n\tsource : int\n\t\tThe source node.\n\ttarget : int\n\t\tThe target node.\n\tstorePred : bool, optional\n\t\tIf True, the algorithm will also store the predecessors\n\t\tand reconstruct a shortest path from source and target.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_STSP},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_STSP},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_BidirectionalDijkstra},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_BidirectionalDijkstra},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_BidirectionalDijkstra_spec = {
  "networkit.distance.BidirectionalDijkstra",
  sizeof(struct __pyx_obj_9networkit_8distance_BidirectionalDijkstra),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_BidirectionalDijkstra_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_BidirectionalDijkstra = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""BidirectionalDijkstra", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_BidirectionalDijkstra), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_STSP, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tBidirectionalDijkstra(G, source, target, storePred=True)\n\n\tBidirectional implementation of the Dijkstra algorithm from\n\ttwo given source and target nodes.\n\tExplores the graph from both the source and target nodes until\n\tthe two explorations meet.\n\n\tParameters:\n\t-----------\n\n\tG : networkit.Graph\n\t\tThe input graph.\n\tsource : int\n\t\tThe source node.\n\ttarget : int\n\t\tThe target node.\n\tstorePred : bool, optional\n\t\tIf True, the algorithm will also store the predecessors\n\t\tand reconstruct a shortest path from source and target.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_STSP, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_STSP, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_BidirectionalDijkstra, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_8distance_4STSP_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_BidirectionalDijkstra, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_AStar(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_AStar *p;
  PyObject *o = __pyx_tp_new_9networkit_8distance_STSP(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_8distance_AStar *)o);
  new((void*)&(p->heu)) std::vector<double> ();
  if (unlikely(__pyx_pw_9networkit_8distance_5AStar_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_AStar(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_AStar *p = (struct __pyx_obj_9networkit_8distance_AStar *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_AStar) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->heu);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9networkit_8distance_STSP(o);
}

static PyMethodDef __pyx_methods_9networkit_8distance_AStar[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_5AStar_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_5AStar_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_AStar_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_AStar},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tAStar(G, heu, source, target, storePred=True)\n\n\tA* path-finding algorithm.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\theu : list(float)\n\t\tList of lower bounds of the distance of each node to the target.\n\tsource : int\n\t\tThe source node.\n\ttarget : int\n\t\tThe target node.\n\tstorePred : bool, optional\n\t\tIf True, the algorithm will also store the predecessors\n\t\tand reconstruct a shortest path from source and target. Default: True\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_STSP},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_STSP},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_AStar},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_AStar},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_AStar_spec = {
  "networkit.distance.AStar",
  sizeof(struct __pyx_obj_9networkit_8distance_AStar),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_AStar_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_AStar = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""AStar", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_AStar), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_AStar, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tAStar(G, heu, source, target, storePred=True)\n\n\tA* path-finding algorithm.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\theu : list(float)\n\t\tList of lower bounds of the distance of each node to the target.\n\tsource : int\n\t\tThe source node.\n\ttarget : int\n\t\tThe target node.\n\tstorePred : bool, optional\n\t\tIf True, the algorithm will also store the predecessors\n\t\tand reconstruct a shortest path from source and target. Default: True\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_STSP, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_STSP, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_AStar, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_8distance_4STSP_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_AStar, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_AllSimplePaths(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_AllSimplePaths *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9networkit_8distance_AllSimplePaths *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_14AllSimplePaths_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_AllSimplePaths(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_AllSimplePaths *p = (struct __pyx_obj_9networkit_8distance_AllSimplePaths *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_AllSimplePaths) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_8distance_14AllSimplePaths_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_9networkit_8distance_AllSimplePaths(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_AllSimplePaths *p = (struct __pyx_obj_9networkit_8distance_AllSimplePaths *)o;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_AllSimplePaths(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_AllSimplePaths *p = (struct __pyx_obj_9networkit_8distance_AllSimplePaths *)o;
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_AllSimplePaths[] = {
  {"run", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_14AllSimplePaths_5run, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"numberOfSimplePaths", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_14AllSimplePaths_7numberOfSimplePaths, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_14AllSimplePaths_6numberOfSimplePaths},
  {"getAllSimplePaths", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_14AllSimplePaths_9getAllSimplePaths, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_14AllSimplePaths_8getAllSimplePaths},
  {"forAllSimplePaths", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_14AllSimplePaths_11forAllSimplePaths, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_14AllSimplePaths_10forAllSimplePaths},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_14AllSimplePaths_13__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_14AllSimplePaths_15__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_AllSimplePaths_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_AllSimplePaths},
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tAllSimplePaths(G, source, target, cutoff=None)\n\n\tAlgorithm to compute all existing simple paths from a source node to a target node. The maximum length of the paths can be fixed through 'cutoff'.\n\tCAUTION: This algorithm could take a lot of time on large networks (many edges), especially if the cutoff value is high or not specified.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsource : int\n\t\tThe source node.\n\ttarget : int\n\t\tThe target node.\n\tcutoff : int or None, optional\n\t\tThe maximum length of the simple paths. In default mode, there is no cutoff set.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_AllSimplePaths},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_AllSimplePaths},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_AllSimplePaths},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_AllSimplePaths},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_AllSimplePaths_spec = {
  "networkit.distance.AllSimplePaths",
  sizeof(struct __pyx_obj_9networkit_8distance_AllSimplePaths),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9networkit_8distance_AllSimplePaths_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_AllSimplePaths = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""AllSimplePaths", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_AllSimplePaths), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_AllSimplePaths, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR(" \n\tAllSimplePaths(G, source, target, cutoff=None)\n\n\tAlgorithm to compute all existing simple paths from a source node to a target node. The maximum length of the paths can be fixed through 'cutoff'.\n\tCAUTION: This algorithm could take a lot of time on large networks (many edges), especially if the cutoff value is high or not specified.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsource : int\n\t\tThe source node.\n\ttarget : int\n\t\tThe target node.\n\tcutoff : int or None, optional\n\t\tThe maximum length of the simple paths. In default mode, there is no cutoff set.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_AllSimplePaths, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_AllSimplePaths, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_AllSimplePaths, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_AllSimplePaths, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_ReverseBFS(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_8distance_SSSP(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_8distance_10ReverseBFS_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_8distance_ReverseBFS[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_10ReverseBFS_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_10ReverseBFS_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_ReverseBFS_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR(" \n\tReverseBFS(G, source, storePaths=True, storeNodesSortedByDistance=False, target=None)\n\n\tSimple reverse breadth-first search on a Graph from a given source.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsource : int\n\t\tThe source node of the breadth-first search.\n\tstorePaths : bool, optional\n\t\tControls whether to store paths and number of paths. Default: True\n\tstoreNodesSortedByDistance : bool, optional\n\t\tControls whether to store nodes sorted by distance. Default: False\n\ttarget: int or None, optional\n\t\tTerminate search when the target has been reached. In default-mode, this target is set to None.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_SSSP},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_SSSP},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_ReverseBFS},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_ReverseBFS},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_ReverseBFS_spec = {
  "networkit.distance.ReverseBFS",
  sizeof(struct __pyx_obj_9networkit_8distance_ReverseBFS),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_ReverseBFS_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_ReverseBFS = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""ReverseBFS", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_ReverseBFS), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_SSSP, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" \n\tReverseBFS(G, source, storePaths=True, storeNodesSortedByDistance=False, target=None)\n\n\tSimple reverse breadth-first search on a Graph from a given source.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tsource : int\n\t\tThe source node of the breadth-first search.\n\tstorePaths : bool, optional\n\t\tControls whether to store paths and number of paths. Default: True\n\tstoreNodesSortedByDistance : bool, optional\n\t\tControls whether to store nodes sorted by distance. Default: False\n\ttarget: int or None, optional\n\t\tTerminate search when the target has been reached. In default-mode, this target is set to None.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_SSSP, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_SSSP, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_ReverseBFS, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_9networkit_8distance_4SSSP_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_ReverseBFS, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_PrunedLandmarkLabeling(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_PrunedLandmarkLabeling(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *p = (struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_PrunedLandmarkLabeling) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_G);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_8distance_PrunedLandmarkLabeling);
}

static int __pyx_tp_traverse_9networkit_8distance_PrunedLandmarkLabeling(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *p = (struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_8distance_PrunedLandmarkLabeling)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_PrunedLandmarkLabeling(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *p = (struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_8distance_PrunedLandmarkLabeling);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_PrunedLandmarkLabeling[] = {
  {"query", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_5query, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_22PrunedLandmarkLabeling_4query},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_22PrunedLandmarkLabeling_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_PrunedLandmarkLabeling_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_PrunedLandmarkLabeling},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tPrunedLandmarkLabeling(G)\n\n\tPruned Landmark Labeling algorithm based on the paper \"Fast exact shortest-path distance\n\tqueries on large networks by pruned landmark labeling\" from Akiba et al., ACM SIGMOD 2013.\n\tThe algorithm computes distance labels by performing pruned breadth-first searches from each\n\tvertex. Labels are used to quickly retrieve shortest-path distances between node pairs.\n\tNote: this algorithm only works for unweighted graphs.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_PrunedLandmarkLabeling},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_PrunedLandmarkLabeling},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_PrunedLandmarkLabeling},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_PrunedLandmarkLabeling},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_PrunedLandmarkLabeling_spec = {
  "networkit.distance.PrunedLandmarkLabeling",
  sizeof(struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_PrunedLandmarkLabeling_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_PrunedLandmarkLabeling = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""PrunedLandmarkLabeling", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_PrunedLandmarkLabeling), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_PrunedLandmarkLabeling, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tPrunedLandmarkLabeling(G)\n\n\tPruned Landmark Labeling algorithm based on the paper \"Fast exact shortest-path distance\n\tqueries on large networks by pruned landmark labeling\" from Akiba et al., ACM SIGMOD 2013.\n\tThe algorithm computes distance labels by performing pruned breadth-first searches from each\n\tvertex. Labels are used to quickly retrieve shortest-path distances between node pairs.\n\tNote: this algorithm only works for unweighted graphs.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_PrunedLandmarkLabeling, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_PrunedLandmarkLabeling, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_PrunedLandmarkLabeling, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_PrunedLandmarkLabeling, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9networkit_8distance_DynPrunedLandmarkLabeling(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_8distance_DynPrunedLandmarkLabeling(PyObject *o) {
  struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *p = (struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance_DynPrunedLandmarkLabeling) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_G);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __Pyx_PyType_GetSlot(__pyx_ptype_9networkit_4base_Algorithm, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_8distance_DynPrunedLandmarkLabeling);
}

static int __pyx_tp_traverse_9networkit_8distance_DynPrunedLandmarkLabeling(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *p = (struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_8distance_DynPrunedLandmarkLabeling)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance_DynPrunedLandmarkLabeling(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *p = (struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_8distance_DynPrunedLandmarkLabeling);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_8distance_DynPrunedLandmarkLabeling[] = {
  {"query", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_5query, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9networkit_8distance_25DynPrunedLandmarkLabeling_4query},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9networkit_8distance_25DynPrunedLandmarkLabeling_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance_DynPrunedLandmarkLabeling_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance_DynPrunedLandmarkLabeling},
  {Py_tp_doc, (void *)PyDoc_STR("\n\tDynPrunedLandmarkLabeling(G)\n\n\tDynamic Pruned Landmark Labeling algorithm based on the paper \"Fully\n\tDynamic 2-Hop Cover Labeling \" from D'Angelo et al., ACM JEA 2019. The\n\talgorithm computes distance labels by performing pruned breadth-first\n\tsearches from each vertex. Distance labels can be updated efficiently\n\tafter edge insertions.\n\tNote: this algorithm only works for unweighted graphs and only supports\n\tedge insertions.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\t")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance_DynPrunedLandmarkLabeling},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance_DynPrunedLandmarkLabeling},
  {Py_tp_methods, (void *)__pyx_methods_9networkit_8distance_DynPrunedLandmarkLabeling},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance_DynPrunedLandmarkLabeling},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance_DynPrunedLandmarkLabeling_spec = {
  "networkit.distance.DynPrunedLandmarkLabeling",
  sizeof(struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance_DynPrunedLandmarkLabeling_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance_DynPrunedLandmarkLabeling = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""DynPrunedLandmarkLabeling", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance_DynPrunedLandmarkLabeling), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance_DynPrunedLandmarkLabeling, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n\tDynPrunedLandmarkLabeling(G)\n\n\tDynamic Pruned Landmark Labeling algorithm based on the paper \"Fully\n\tDynamic 2-Hop Cover Labeling \" from D'Angelo et al., ACM JEA 2019. The\n\talgorithm computes distance labels by performing pruned breadth-first\n\tsearches from each vertex. Distance labels can be updated efficiently\n\tafter edge insertions.\n\tNote: this algorithm only works for unweighted graphs and only supports\n\tedge insertions.\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\t"), /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance_DynPrunedLandmarkLabeling, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance_DynPrunedLandmarkLabeling, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_8distance_DynPrunedLandmarkLabeling, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance_DynPrunedLandmarkLabeling, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume *__pyx_freelist_9networkit_8distance___pyx_scope_struct__volume[8];
static int __pyx_freecount_9networkit_8distance___pyx_scope_struct__volume = 0;

static PyObject *__pyx_tp_new_9networkit_8distance___pyx_scope_struct__volume(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_9networkit_8distance___pyx_scope_struct__volume > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume)))) {
    o = (PyObject*)__pyx_freelist_9networkit_8distance___pyx_scope_struct__volume[--__pyx_freecount_9networkit_8distance___pyx_scope_struct__volume];
    memset(o, 0, sizeof(struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9networkit_8distance___pyx_scope_struct__volume(PyObject *o) {
  struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume *p = (struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance___pyx_scope_struct__volume) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_is_number);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_9networkit_8distance___pyx_scope_struct__volume < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume)))) {
    __pyx_freelist_9networkit_8distance___pyx_scope_struct__volume[__pyx_freecount_9networkit_8distance___pyx_scope_struct__volume++] = ((struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_9networkit_8distance___pyx_scope_struct__volume(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume *p = (struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume *)o;
  if (p->__pyx_v_is_number) {
    e = (*v)(p->__pyx_v_is_number, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_8distance___pyx_scope_struct__volume(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume *p = (struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume *)o;
  tmp = ((PyObject*)p->__pyx_v_is_number);
  p->__pyx_v_is_number = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance___pyx_scope_struct__volume_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance___pyx_scope_struct__volume},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance___pyx_scope_struct__volume},
  {Py_tp_clear, (void *)__pyx_tp_clear_9networkit_8distance___pyx_scope_struct__volume},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance___pyx_scope_struct__volume},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance___pyx_scope_struct__volume_spec = {
  "networkit.distance.__pyx_scope_struct__volume",
  sizeof(struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance___pyx_scope_struct__volume_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance___pyx_scope_struct__volume = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""__pyx_scope_struct__volume", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance___pyx_scope_struct__volume), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance___pyx_scope_struct__volume, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance___pyx_scope_struct__volume, /*tp_traverse*/
  __pyx_tp_clear_9networkit_8distance___pyx_scope_struct__volume, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance___pyx_scope_struct__volume, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr *__pyx_freelist_9networkit_8distance___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_9networkit_8distance___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_9networkit_8distance___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_9networkit_8distance___pyx_scope_struct_1_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_9networkit_8distance___pyx_scope_struct_1_genexpr[--__pyx_freecount_9networkit_8distance___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_9networkit_8distance___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9networkit_8distance___pyx_scope_struct_1_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_genexpr_arg_0);
  Py_CLEAR(p->__pyx_v_item);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_9networkit_8distance___pyx_scope_struct_1_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_9networkit_8distance___pyx_scope_struct_1_genexpr[__pyx_freecount_9networkit_8distance___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_9networkit_8distance___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_item) {
    e = (*v)(p->__pyx_v_item, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9networkit_8distance___pyx_scope_struct_1_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9networkit_8distance___pyx_scope_struct_1_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9networkit_8distance___pyx_scope_struct_1_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_9networkit_8distance___pyx_scope_struct_1_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_9networkit_8distance___pyx_scope_struct_1_genexpr_spec = {
  "networkit.distance.__pyx_scope_struct_1_genexpr",
  sizeof(struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_9networkit_8distance___pyx_scope_struct_1_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_9networkit_8distance___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.distance.""__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_8distance___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_8distance___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9networkit_8distance___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_8distance___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_n_s_APSP, __pyx_k_APSP, sizeof(__pyx_k_APSP), 0, 0, 1, 1},
    {&__pyx_n_s_APSP___reduce_cython, __pyx_k_APSP___reduce_cython, sizeof(__pyx_k_APSP___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_APSP___setstate_cython, __pyx_k_APSP___setstate_cython, sizeof(__pyx_k_APSP___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_APSP_getDistance, __pyx_k_APSP_getDistance, sizeof(__pyx_k_APSP_getDistance), 0, 0, 1, 1},
    {&__pyx_n_s_APSP_getDistances, __pyx_k_APSP_getDistances, sizeof(__pyx_k_APSP_getDistances), 0, 0, 1, 1},
    {&__pyx_n_s_AStar, __pyx_k_AStar, sizeof(__pyx_k_AStar), 0, 0, 1, 1},
    {&__pyx_n_s_AStar___reduce_cython, __pyx_k_AStar___reduce_cython, sizeof(__pyx_k_AStar___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_AStar___setstate_cython, __pyx_k_AStar___setstate_cython, sizeof(__pyx_k_AStar___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_AUTOMATIC, __pyx_k_AUTOMATIC, sizeof(__pyx_k_AUTOMATIC), 0, 0, 1, 1},
    {&__pyx_n_s_AdamicAdarDistance, __pyx_k_AdamicAdarDistance, sizeof(__pyx_k_AdamicAdarDistance), 0, 0, 1, 1},
    {&__pyx_n_s_AdamicAdarDistance___reduce_cyth, __pyx_k_AdamicAdarDistance___reduce_cyth, sizeof(__pyx_k_AdamicAdarDistance___reduce_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_AdamicAdarDistance___setstate_cy, __pyx_k_AdamicAdarDistance___setstate_cy, sizeof(__pyx_k_AdamicAdarDistance___setstate_cy), 0, 0, 1, 1},
    {&__pyx_n_s_AdamicAdarDistance_distance, __pyx_k_AdamicAdarDistance_distance, sizeof(__pyx_k_AdamicAdarDistance_distance), 0, 0, 1, 1},
    {&__pyx_n_s_AdamicAdarDistance_getAttribute, __pyx_k_AdamicAdarDistance_getAttribute, sizeof(__pyx_k_AdamicAdarDistance_getAttribute), 0, 0, 1, 1},
    {&__pyx_n_s_AdamicAdarDistance_preprocess, __pyx_k_AdamicAdarDistance_preprocess, sizeof(__pyx_k_AdamicAdarDistance_preprocess), 0, 0, 1, 1},
    {&__pyx_n_s_AlgebraicDistance, __pyx_k_AlgebraicDistance, sizeof(__pyx_k_AlgebraicDistance), 0, 0, 1, 1},
    {&__pyx_n_s_AlgebraicDistance___reduce_cytho, __pyx_k_AlgebraicDistance___reduce_cytho, sizeof(__pyx_k_AlgebraicDistance___reduce_cytho), 0, 0, 1, 1},
    {&__pyx_n_s_AlgebraicDistance___setstate_cyt, __pyx_k_AlgebraicDistance___setstate_cyt, sizeof(__pyx_k_AlgebraicDistance___setstate_cyt), 0, 0, 1, 1},
    {&__pyx_n_s_AlgebraicDistance_distance, __pyx_k_AlgebraicDistance_distance, sizeof(__pyx_k_AlgebraicDistance_distance), 0, 0, 1, 1},
    {&__pyx_n_s_AlgebraicDistance_getEdgeScores, __pyx_k_AlgebraicDistance_getEdgeScores, sizeof(__pyx_k_AlgebraicDistance_getEdgeScores), 0, 0, 1, 1},
    {&__pyx_n_s_AlgebraicDistance_preprocess, __pyx_k_AlgebraicDistance_preprocess, sizeof(__pyx_k_AlgebraicDistance_preprocess), 0, 0, 1, 1},
    {&__pyx_n_s_AllSimplePaths, __pyx_k_AllSimplePaths, sizeof(__pyx_k_AllSimplePaths), 0, 0, 1, 1},
    {&__pyx_n_s_AllSimplePaths___reduce_cython, __pyx_k_AllSimplePaths___reduce_cython, sizeof(__pyx_k_AllSimplePaths___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_AllSimplePaths___setstate_cython, __pyx_k_AllSimplePaths___setstate_cython, sizeof(__pyx_k_AllSimplePaths___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_AllSimplePaths_forAllSimplePaths, __pyx_k_AllSimplePaths_forAllSimplePaths, sizeof(__pyx_k_AllSimplePaths_forAllSimplePaths), 0, 0, 1, 1},
    {&__pyx_n_s_AllSimplePaths_getAllSimplePaths, __pyx_k_AllSimplePaths_getAllSimplePaths, sizeof(__pyx_k_AllSimplePaths_getAllSimplePaths), 0, 0, 1, 1},
    {&__pyx_n_s_AllSimplePaths_numberOfSimplePat, __pyx_k_AllSimplePaths_numberOfSimplePat, sizeof(__pyx_k_AllSimplePaths_numberOfSimplePat), 0, 0, 1, 1},
    {&__pyx_n_s_AllSimplePaths_run, __pyx_k_AllSimplePaths_run, sizeof(__pyx_k_AllSimplePaths_run), 0, 0, 1, 1},
    {&__pyx_kp_u_An_Exception_occurred_aborting_e, __pyx_k_An_Exception_occurred_aborting_e, sizeof(__pyx_k_An_Exception_occurred_aborting_e), 0, 1, 0, 0},
    {&__pyx_n_s_Automatic, __pyx_k_Automatic, sizeof(__pyx_k_Automatic), 0, 0, 1, 1},
    {&__pyx_n_s_BFS, __pyx_k_BFS, sizeof(__pyx_k_BFS), 0, 0, 1, 1},
    {&__pyx_n_s_BFS___reduce_cython, __pyx_k_BFS___reduce_cython, sizeof(__pyx_k_BFS___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_BFS___setstate_cython, __pyx_k_BFS___setstate_cython, sizeof(__pyx_k_BFS___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_BidirectionalBFS, __pyx_k_BidirectionalBFS, sizeof(__pyx_k_BidirectionalBFS), 0, 0, 1, 1},
    {&__pyx_n_s_BidirectionalBFS___reduce_cython, __pyx_k_BidirectionalBFS___reduce_cython, sizeof(__pyx_k_BidirectionalBFS___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_BidirectionalBFS___setstate_cyth, __pyx_k_BidirectionalBFS___setstate_cyth, sizeof(__pyx_k_BidirectionalBFS___setstate_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_BidirectionalDijkstra, __pyx_k_BidirectionalDijkstra, sizeof(__pyx_k_BidirectionalDijkstra), 0, 0, 1, 1},
    {&__pyx_n_s_BidirectionalDijkstra___reduce_c, __pyx_k_BidirectionalDijkstra___reduce_c, sizeof(__pyx_k_BidirectionalDijkstra___reduce_c), 0, 0, 1, 1},
    {&__pyx_n_s_BidirectionalDijkstra___setstate, __pyx_k_BidirectionalDijkstra___setstate, sizeof(__pyx_k_BidirectionalDijkstra___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_CommuteTimeDistance, __pyx_k_CommuteTimeDistance, sizeof(__pyx_k_CommuteTimeDistance), 0, 0, 1, 1},
    {&__pyx_n_s_CommuteTimeDistance___reduce_cyt, __pyx_k_CommuteTimeDistance___reduce_cyt, sizeof(__pyx_k_CommuteTimeDistance___reduce_cyt), 0, 0, 1, 1},
    {&__pyx_n_s_CommuteTimeDistance___setstate_c, __pyx_k_CommuteTimeDistance___setstate_c, sizeof(__pyx_k_CommuteTimeDistance___setstate_c), 0, 0, 1, 1},
    {&__pyx_n_s_CommuteTimeDistance_distance, __pyx_k_CommuteTimeDistance_distance, sizeof(__pyx_k_CommuteTimeDistance_distance), 0, 0, 1, 1},
    {&__pyx_n_s_CommuteTimeDistance_runApproxima, __pyx_k_CommuteTimeDistance_runApproxima, sizeof(__pyx_k_CommuteTimeDistance_runApproxima), 0, 0, 1, 1},
    {&__pyx_n_s_CommuteTimeDistance_runParallelA, __pyx_k_CommuteTimeDistance_runParallelA, sizeof(__pyx_k_CommuteTimeDistance_runParallelA), 0, 0, 1, 1},
    {&__pyx_n_s_CommuteTimeDistance_runSinglePai, __pyx_k_CommuteTimeDistance_runSinglePai, sizeof(__pyx_k_CommuteTimeDistance_runSinglePai), 0, 0, 1, 1},
    {&__pyx_n_s_CommuteTimeDistance_runSingleSou, __pyx_k_CommuteTimeDistance_runSingleSou, sizeof(__pyx_k_CommuteTimeDistance_runSingleSou), 0, 0, 1, 1},
    {&__pyx_n_s_Diameter, __pyx_k_Diameter, sizeof(__pyx_k_Diameter), 0, 0, 1, 1},
    {&__pyx_n_s_DiameterAlgo, __pyx_k_DiameterAlgo, sizeof(__pyx_k_DiameterAlgo), 0, 0, 1, 1},
    {&__pyx_n_s_Diameter___reduce_cython, __pyx_k_Diameter___reduce_cython, sizeof(__pyx_k_Diameter___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Diameter___setstate_cython, __pyx_k_Diameter___setstate_cython, sizeof(__pyx_k_Diameter___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Diameter_getDiameter, __pyx_k_Diameter_getDiameter, sizeof(__pyx_k_Diameter_getDiameter), 0, 0, 1, 1},
    {&__pyx_n_s_Dijkstra, __pyx_k_Dijkstra, sizeof(__pyx_k_Dijkstra), 0, 0, 1, 1},
    {&__pyx_n_s_Dijkstra___reduce_cython, __pyx_k_Dijkstra___reduce_cython, sizeof(__pyx_k_Dijkstra___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Dijkstra___setstate_cython, __pyx_k_Dijkstra___setstate_cython, sizeof(__pyx_k_Dijkstra___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_DynAPSP, __pyx_k_DynAPSP, sizeof(__pyx_k_DynAPSP), 0, 0, 1, 1},
    {&__pyx_n_s_DynAPSP___reduce_cython, __pyx_k_DynAPSP___reduce_cython, sizeof(__pyx_k_DynAPSP___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_DynAPSP___setstate_cython, __pyx_k_DynAPSP___setstate_cython, sizeof(__pyx_k_DynAPSP___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_DynAlgorithm, __pyx_k_DynAlgorithm, sizeof(__pyx_k_DynAlgorithm), 0, 0, 1, 1},
    {&__pyx_n_s_DynBFS, __pyx_k_DynBFS, sizeof(__pyx_k_DynBFS), 0, 0, 1, 1},
    {&__pyx_n_s_DynBFS___reduce_cython, __pyx_k_DynBFS___reduce_cython, sizeof(__pyx_k_DynBFS___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_DynBFS___setstate_cython, __pyx_k_DynBFS___setstate_cython, sizeof(__pyx_k_DynBFS___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_DynDijkstra, __pyx_k_DynDijkstra, sizeof(__pyx_k_DynDijkstra), 0, 0, 1, 1},
    {&__pyx_n_s_DynDijkstra___reduce_cython, __pyx_k_DynDijkstra___reduce_cython, sizeof(__pyx_k_DynDijkstra___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_DynDijkstra___setstate_cython, __pyx_k_DynDijkstra___setstate_cython, sizeof(__pyx_k_DynDijkstra___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_DynPrunedLandmarkLabeling, __pyx_k_DynPrunedLandmarkLabeling, sizeof(__pyx_k_DynPrunedLandmarkLabeling), 0, 0, 1, 1},
    {&__pyx_n_s_DynPrunedLandmarkLabeling___redu, __pyx_k_DynPrunedLandmarkLabeling___redu, sizeof(__pyx_k_DynPrunedLandmarkLabeling___redu), 0, 0, 1, 1},
    {&__pyx_n_s_DynPrunedLandmarkLabeling___sets, __pyx_k_DynPrunedLandmarkLabeling___sets, sizeof(__pyx_k_DynPrunedLandmarkLabeling___sets), 0, 0, 1, 1},
    {&__pyx_n_s_DynPrunedLandmarkLabeling_query, __pyx_k_DynPrunedLandmarkLabeling_query, sizeof(__pyx_k_DynPrunedLandmarkLabeling_query), 0, 0, 1, 1},
    {&__pyx_n_s_DynSSSP, __pyx_k_DynSSSP, sizeof(__pyx_k_DynSSSP), 0, 0, 1, 1},
    {&__pyx_n_s_DynSSSP___reduce_cython, __pyx_k_DynSSSP___reduce_cython, sizeof(__pyx_k_DynSSSP___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_DynSSSP___setstate_cython, __pyx_k_DynSSSP___setstate_cython, sizeof(__pyx_k_DynSSSP___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_DynSSSP_modified, __pyx_k_DynSSSP_modified, sizeof(__pyx_k_DynSSSP_modified), 0, 0, 1, 1},
    {&__pyx_n_s_DynSSSP_setTargetNode, __pyx_k_DynSSSP_setTargetNode, sizeof(__pyx_k_DynSSSP_setTargetNode), 0, 0, 1, 1},
    {&__pyx_n_s_ESTIMATED_PEDANTIC, __pyx_k_ESTIMATED_PEDANTIC, sizeof(__pyx_k_ESTIMATED_PEDANTIC), 0, 0, 1, 1},
    {&__pyx_n_s_ESTIMATED_RANGE, __pyx_k_ESTIMATED_RANGE, sizeof(__pyx_k_ESTIMATED_RANGE), 0, 0, 1, 1},
    {&__pyx_n_s_ESTIMATED_SAMPLES, __pyx_k_ESTIMATED_SAMPLES, sizeof(__pyx_k_ESTIMATED_SAMPLES), 0, 0, 1, 1},
    {&__pyx_n_s_EXACT, __pyx_k_EXACT, sizeof(__pyx_k_EXACT), 0, 0, 1, 1},
    {&__pyx_n_s_Eccentricity, __pyx_k_Eccentricity, sizeof(__pyx_k_Eccentricity), 0, 0, 1, 1},
    {&__pyx_n_s_Eccentricity___reduce_cython, __pyx_k_Eccentricity___reduce_cython, sizeof(__pyx_k_Eccentricity___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Eccentricity___setstate_cython, __pyx_k_Eccentricity___setstate_cython, sizeof(__pyx_k_Eccentricity___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Eccentricity_getValue, __pyx_k_Eccentricity_getValue, sizeof(__pyx_k_Eccentricity_getValue), 0, 0, 1, 1},
    {&__pyx_n_s_EffectiveDiameter, __pyx_k_EffectiveDiameter, sizeof(__pyx_k_EffectiveDiameter), 0, 0, 1, 1},
    {&__pyx_n_s_EffectiveDiameterApproximation, __pyx_k_EffectiveDiameterApproximation, sizeof(__pyx_k_EffectiveDiameterApproximation), 0, 0, 1, 1},
    {&__pyx_n_s_EffectiveDiameterApproximation_2, __pyx_k_EffectiveDiameterApproximation_2, sizeof(__pyx_k_EffectiveDiameterApproximation_2), 0, 0, 1, 1},
    {&__pyx_n_s_EffectiveDiameterApproximation_3, __pyx_k_EffectiveDiameterApproximation_3, sizeof(__pyx_k_EffectiveDiameterApproximation_3), 0, 0, 1, 1},
    {&__pyx_n_s_EffectiveDiameterApproximation_g, __pyx_k_EffectiveDiameterApproximation_g, sizeof(__pyx_k_EffectiveDiameterApproximation_g), 0, 0, 1, 1},
    {&__pyx_n_s_EffectiveDiameter___reduce_cytho, __pyx_k_EffectiveDiameter___reduce_cytho, sizeof(__pyx_k_EffectiveDiameter___reduce_cytho), 0, 0, 1, 1},
    {&__pyx_n_s_EffectiveDiameter___setstate_cyt, __pyx_k_EffectiveDiameter___setstate_cyt, sizeof(__pyx_k_EffectiveDiameter___setstate_cyt), 0, 0, 1, 1},
    {&__pyx_n_s_EffectiveDiameter_getEffectiveDi, __pyx_k_EffectiveDiameter_getEffectiveDi, sizeof(__pyx_k_EffectiveDiameter_getEffectiveDi), 0, 0, 1, 1},
    {&__pyx_kp_u_Error_you_may_not_use_DynSSSP_di, __pyx_k_Error_you_may_not_use_DynSSSP_di, sizeof(__pyx_k_Error_you_may_not_use_DynSSSP_di), 0, 1, 0, 0},
    {&__pyx_kp_u_Error_you_may_not_use_SSSP_direc, __pyx_k_Error_you_may_not_use_SSSP_direc, sizeof(__pyx_k_Error_you_may_not_use_SSSP_direc), 0, 1, 0, 0},
    {&__pyx_kp_u_Error_you_may_not_use_STSP_direc, __pyx_k_Error_you_may_not_use_STSP_direc, sizeof(__pyx_k_Error_you_may_not_use_STSP_direc), 0, 1, 0, 0},
    {&__pyx_n_s_EstimatedPedantic, __pyx_k_EstimatedPedantic, sizeof(__pyx_k_EstimatedPedantic), 0, 0, 1, 1},
    {&__pyx_n_s_EstimatedRange, __pyx_k_EstimatedRange, sizeof(__pyx_k_EstimatedRange), 0, 0, 1, 1},
    {&__pyx_n_s_EstimatedSamples, __pyx_k_EstimatedSamples, sizeof(__pyx_k_EstimatedSamples), 0, 0, 1, 1},
    {&__pyx_n_s_Exact, __pyx_k_Exact, sizeof(__pyx_k_Exact), 0, 0, 1, 1},
    {&__pyx_n_s_G, __pyx_k_G, sizeof(__pyx_k_G), 0, 0, 1, 1},
    {&__pyx_n_s_HopPlotApproximation, __pyx_k_HopPlotApproximation, sizeof(__pyx_k_HopPlotApproximation), 0, 0, 1, 1},
    {&__pyx_n_s_HopPlotApproximation___reduce_cy, __pyx_k_HopPlotApproximation___reduce_cy, sizeof(__pyx_k_HopPlotApproximation___reduce_cy), 0, 0, 1, 1},
    {&__pyx_n_s_HopPlotApproximation___setstate, __pyx_k_HopPlotApproximation___setstate, sizeof(__pyx_k_HopPlotApproximation___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_HopPlotApproximation_getHopPlot, __pyx_k_HopPlotApproximation_getHopPlot, sizeof(__pyx_k_HopPlotApproximation_getHopPlot), 0, 0, 1, 1},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
    {&__pyx_n_s_JaccardDistance, __pyx_k_JaccardDistance, sizeof(__pyx_k_JaccardDistance), 0, 0, 1, 1},
    {&__pyx_n_s_JaccardDistance___reduce_cython, __pyx_k_JaccardDistance___reduce_cython, sizeof(__pyx_k_JaccardDistance___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_JaccardDistance___setstate_cytho, __pyx_k_JaccardDistance___setstate_cytho, sizeof(__pyx_k_JaccardDistance___setstate_cytho), 0, 0, 1, 1},
    {&__pyx_n_s_JaccardDistance_getAttribute, __pyx_k_JaccardDistance_getAttribute, sizeof(__pyx_k_JaccardDistance_getAttribute), 0, 0, 1, 1},
    {&__pyx_n_s_JaccardSimilarityAttributizer, __pyx_k_JaccardSimilarityAttributizer, sizeof(__pyx_k_JaccardSimilarityAttributizer), 0, 0, 1, 1},
    {&__pyx_n_s_JaccardSimilarityAttributizer_2, __pyx_k_JaccardSimilarityAttributizer_2, sizeof(__pyx_k_JaccardSimilarityAttributizer_2), 0, 0, 1, 1},
    {&__pyx_n_s_JaccardSimilarityAttributizer_3, __pyx_k_JaccardSimilarityAttributizer_3, sizeof(__pyx_k_JaccardSimilarityAttributizer_3), 0, 0, 1, 1},
    {&__pyx_n_s_JaccardSimilarityAttributizer_ge, __pyx_k_JaccardSimilarityAttributizer_ge, sizeof(__pyx_k_JaccardSimilarityAttributizer_ge), 0, 0, 1, 1},
    {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
    {&__pyx_n_s_MultiTargetBFS, __pyx_k_MultiTargetBFS, sizeof(__pyx_k_MultiTargetBFS), 0, 0, 1, 1},
    {&__pyx_n_s_MultiTargetBFS___reduce_cython, __pyx_k_MultiTargetBFS___reduce_cython, sizeof(__pyx_k_MultiTargetBFS___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_MultiTargetBFS___setstate_cython, __pyx_k_MultiTargetBFS___setstate_cython, sizeof(__pyx_k_MultiTargetBFS___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_MultiTargetDijkstra, __pyx_k_MultiTargetDijkstra, sizeof(__pyx_k_MultiTargetDijkstra), 0, 0, 1, 1},
    {&__pyx_n_s_MultiTargetDijkstra___reduce_cyt, __pyx_k_MultiTargetDijkstra___reduce_cyt, sizeof(__pyx_k_MultiTargetDijkstra___reduce_cyt), 0, 0, 1, 1},
    {&__pyx_n_s_MultiTargetDijkstra___setstate_c, __pyx_k_MultiTargetDijkstra___setstate_c, sizeof(__pyx_k_MultiTargetDijkstra___setstate_c), 0, 0, 1, 1},
    {&__pyx_n_s_NeighborhoodFunction, __pyx_k_NeighborhoodFunction, sizeof(__pyx_k_NeighborhoodFunction), 0, 0, 1, 1},
    {&__pyx_n_s_NeighborhoodFunctionApproximatio, __pyx_k_NeighborhoodFunctionApproximatio, sizeof(__pyx_k_NeighborhoodFunctionApproximatio), 0, 0, 1, 1},
    {&__pyx_n_s_NeighborhoodFunctionApproximatio_2, __pyx_k_NeighborhoodFunctionApproximatio_2, sizeof(__pyx_k_NeighborhoodFunctionApproximatio_2), 0, 0, 1, 1},
    {&__pyx_n_s_NeighborhoodFunctionApproximatio_3, __pyx_k_NeighborhoodFunctionApproximatio_3, sizeof(__pyx_k_NeighborhoodFunctionApproximatio_3), 0, 0, 1, 1},
    {&__pyx_n_s_NeighborhoodFunctionApproximatio_4, __pyx_k_NeighborhoodFunctionApproximatio_4, sizeof(__pyx_k_NeighborhoodFunctionApproximatio_4), 0, 0, 1, 1},
    {&__pyx_n_s_NeighborhoodFunctionHeuristic, __pyx_k_NeighborhoodFunctionHeuristic, sizeof(__pyx_k_NeighborhoodFunctionHeuristic), 0, 0, 1, 1},
    {&__pyx_n_s_NeighborhoodFunctionHeuristic_2, __pyx_k_NeighborhoodFunctionHeuristic_2, sizeof(__pyx_k_NeighborhoodFunctionHeuristic_2), 0, 0, 1, 1},
    {&__pyx_n_s_NeighborhoodFunctionHeuristic_3, __pyx_k_NeighborhoodFunctionHeuristic_3, sizeof(__pyx_k_NeighborhoodFunctionHeuristic_3), 0, 0, 1, 1},
    {&__pyx_n_s_NeighborhoodFunctionHeuristic_ge, __pyx_k_NeighborhoodFunctionHeuristic_ge, sizeof(__pyx_k_NeighborhoodFunctionHeuristic_ge), 0, 0, 1, 1},
    {&__pyx_n_s_NeighborhoodFunction___reduce_cy, __pyx_k_NeighborhoodFunction___reduce_cy, sizeof(__pyx_k_NeighborhoodFunction___reduce_cy), 0, 0, 1, 1},
    {&__pyx_n_s_NeighborhoodFunction___setstate, __pyx_k_NeighborhoodFunction___setstate, sizeof(__pyx_k_NeighborhoodFunction___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_NeighborhoodFunction_getNeighbor, __pyx_k_NeighborhoodFunction_getNeighbor, sizeof(__pyx_k_NeighborhoodFunction_getNeighbor), 0, 0, 1, 1},
    {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_PrunedLandmarkLabeling, __pyx_k_PrunedLandmarkLabeling, sizeof(__pyx_k_PrunedLandmarkLabeling), 0, 0, 1, 1},
    {&__pyx_n_s_PrunedLandmarkLabeling___reduce, __pyx_k_PrunedLandmarkLabeling___reduce, sizeof(__pyx_k_PrunedLandmarkLabeling___reduce), 0, 0, 1, 1},
    {&__pyx_n_s_PrunedLandmarkLabeling___setstat, __pyx_k_PrunedLandmarkLabeling___setstat, sizeof(__pyx_k_PrunedLandmarkLabeling___setstat), 0, 0, 1, 1},
    {&__pyx_n_s_PrunedLandmarkLabeling_query, __pyx_k_PrunedLandmarkLabeling_query, sizeof(__pyx_k_PrunedLandmarkLabeling_query), 0, 0, 1, 1},
    {&__pyx_n_s_RANDOM, __pyx_k_RANDOM, sizeof(__pyx_k_RANDOM), 0, 0, 1, 1},
    {&__pyx_n_s_ReverseBFS, __pyx_k_ReverseBFS, sizeof(__pyx_k_ReverseBFS), 0, 0, 1, 1},
    {&__pyx_n_s_ReverseBFS___reduce_cython, __pyx_k_ReverseBFS___reduce_cython, sizeof(__pyx_k_ReverseBFS___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ReverseBFS___setstate_cython, __pyx_k_ReverseBFS___setstate_cython, sizeof(__pyx_k_ReverseBFS___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
    {&__pyx_n_s_SPLIT, __pyx_k_SPLIT, sizeof(__pyx_k_SPLIT), 0, 0, 1, 1},
    {&__pyx_n_s_SPSP, __pyx_k_SPSP, sizeof(__pyx_k_SPSP), 0, 0, 1, 1},
    {&__pyx_n_s_SPSP___reduce_cython, __pyx_k_SPSP___reduce_cython, sizeof(__pyx_k_SPSP___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_SPSP___setstate_cython, __pyx_k_SPSP___setstate_cython, sizeof(__pyx_k_SPSP___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_SPSP_getDistance, __pyx_k_SPSP_getDistance, sizeof(__pyx_k_SPSP_getDistance), 0, 0, 1, 1},
    {&__pyx_n_s_SPSP_getDistances, __pyx_k_SPSP_getDistances, sizeof(__pyx_k_SPSP_getDistances), 0, 0, 1, 1},
    {&__pyx_n_s_SPSP_setSources, __pyx_k_SPSP_setSources, sizeof(__pyx_k_SPSP_setSources), 0, 0, 1, 1},
    {&__pyx_n_s_SPSP_setTargets, __pyx_k_SPSP_setTargets, sizeof(__pyx_k_SPSP_setTargets), 0, 0, 1, 1},
    {&__pyx_n_s_SSSP, __pyx_k_SSSP, sizeof(__pyx_k_SSSP), 0, 0, 1, 1},
    {&__pyx_n_s_SSSP___reduce_cython, __pyx_k_SSSP___reduce_cython, sizeof(__pyx_k_SSSP___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_SSSP___setstate_cython, __pyx_k_SSSP___setstate_cython, sizeof(__pyx_k_SSSP___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_SSSP_distance, __pyx_k_SSSP_distance, sizeof(__pyx_k_SSSP_distance), 0, 0, 1, 1},
    {&__pyx_n_s_SSSP_getDistances, __pyx_k_SSSP_getDistances, sizeof(__pyx_k_SSSP_getDistances), 0, 0, 1, 1},
    {&__pyx_n_s_SSSP_getNodesSortedByDistance, __pyx_k_SSSP_getNodesSortedByDistance, sizeof(__pyx_k_SSSP_getNodesSortedByDistance), 0, 0, 1, 1},
    {&__pyx_n_s_SSSP_getPath, __pyx_k_SSSP_getPath, sizeof(__pyx_k_SSSP_getPath), 0, 0, 1, 1},
    {&__pyx_n_s_SSSP_getPaths, __pyx_k_SSSP_getPaths, sizeof(__pyx_k_SSSP_getPaths), 0, 0, 1, 1},
    {&__pyx_n_s_SSSP_getPredecessors, __pyx_k_SSSP_getPredecessors, sizeof(__pyx_k_SSSP_getPredecessors), 0, 0, 1, 1},
    {&__pyx_n_s_SSSP_numberOfPaths, __pyx_k_SSSP_numberOfPaths, sizeof(__pyx_k_SSSP_numberOfPaths), 0, 0, 1, 1},
    {&__pyx_n_s_SSSP_setSource, __pyx_k_SSSP_setSource, sizeof(__pyx_k_SSSP_setSource), 0, 0, 1, 1},
    {&__pyx_n_s_SSSP_setTarget, __pyx_k_SSSP_setTarget, sizeof(__pyx_k_SSSP_setTarget), 0, 0, 1, 1},
    {&__pyx_n_s_STSP, __pyx_k_STSP, sizeof(__pyx_k_STSP), 0, 0, 1, 1},
    {&__pyx_n_s_STSP___reduce_cython, __pyx_k_STSP___reduce_cython, sizeof(__pyx_k_STSP___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_STSP___setstate_cython, __pyx_k_STSP___setstate_cython, sizeof(__pyx_k_STSP___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_STSP_getDistance, __pyx_k_STSP_getDistance, sizeof(__pyx_k_STSP_getDistance), 0, 0, 1, 1},
    {&__pyx_n_s_STSP_getDistances, __pyx_k_STSP_getDistances, sizeof(__pyx_k_STSP_getDistances), 0, 0, 1, 1},
    {&__pyx_n_s_STSP_getPath, __pyx_k_STSP_getPath, sizeof(__pyx_k_STSP_getPath), 0, 0, 1, 1},
    {&__pyx_n_s_STSP_getPredecessors, __pyx_k_STSP_getPredecessors, sizeof(__pyx_k_STSP_getPredecessors), 0, 0, 1, 1},
    {&__pyx_n_s_STSP_setSource, __pyx_k_STSP_setSource, sizeof(__pyx_k_STSP_setSource), 0, 0, 1, 1},
    {&__pyx_n_s_STSP_setTarget, __pyx_k_STSP_setTarget, sizeof(__pyx_k_STSP_setTarget), 0, 0, 1, 1},
    {&__pyx_n_s_STSP_setTargets, __pyx_k_STSP_setTargets, sizeof(__pyx_k_STSP_setTargets), 0, 0, 1, 1},
    {&__pyx_n_s_SelectionStrategy, __pyx_k_SelectionStrategy, sizeof(__pyx_k_SelectionStrategy), 0, 0, 1, 1},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_n_s_Volume, __pyx_k_Volume, sizeof(__pyx_k_Volume), 0, 0, 1, 1},
    {&__pyx_n_s_Volume___reduce_cython, __pyx_k_Volume___reduce_cython, sizeof(__pyx_k_Volume___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Volume___setstate_cython, __pyx_k_Volume___setstate_cython, sizeof(__pyx_k_Volume___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Volume_volume, __pyx_k_Volume_volume, sizeof(__pyx_k_Volume_volume), 0, 0, 1, 1},
    {&__pyx_kp_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},
    {&__pyx_n_s__164, __pyx_k__164, sizeof(__pyx_k__164), 0, 0, 1, 1},
    {&__pyx_n_s_algo, __pyx_k_algo, sizeof(__pyx_k_algo), 0, 0, 1, 1},
    {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
    {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_callback, __pyx_k_callback, sizeof(__pyx_k_callback), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
    {&__pyx_n_s_cutoff, __pyx_k_cutoff, sizeof(__pyx_k_cutoff), 0, 0, 1, 1},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_n_s_dict_2, __pyx_k_dict_2, sizeof(__pyx_k_dict_2), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_distance, __pyx_k_distance, sizeof(__pyx_k_distance), 0, 0, 1, 1},
    {&__pyx_n_s_distances, __pyx_k_distances, sizeof(__pyx_k_distances), 0, 0, 1, 1},
    {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
    {&__pyx_n_s_dynbase, __pyx_k_dynbase, sizeof(__pyx_k_dynbase), 0, 0, 1, 1},
    {&__pyx_n_s_elem, __pyx_k_elem, sizeof(__pyx_k_elem), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
    {&__pyx_n_s_forAllSimplePaths, __pyx_k_forAllSimplePaths, sizeof(__pyx_k_forAllSimplePaths), 0, 0, 1, 1},
    {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
    {&__pyx_n_s_forward, __pyx_k_forward, sizeof(__pyx_k_forward), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_getAllSimplePaths, __pyx_k_getAllSimplePaths, sizeof(__pyx_k_getAllSimplePaths), 0, 0, 1, 1},
    {&__pyx_n_s_getAttribute, __pyx_k_getAttribute, sizeof(__pyx_k_getAttribute), 0, 0, 1, 1},
    {&__pyx_n_s_getDiameter, __pyx_k_getDiameter, sizeof(__pyx_k_getDiameter), 0, 0, 1, 1},
    {&__pyx_n_s_getDistance, __pyx_k_getDistance, sizeof(__pyx_k_getDistance), 0, 0, 1, 1},
    {&__pyx_n_s_getDistances, __pyx_k_getDistances, sizeof(__pyx_k_getDistances), 0, 0, 1, 1},
    {&__pyx_n_s_getEdgeScores, __pyx_k_getEdgeScores, sizeof(__pyx_k_getEdgeScores), 0, 0, 1, 1},
    {&__pyx_n_s_getEffectiveDiameter, __pyx_k_getEffectiveDiameter, sizeof(__pyx_k_getEffectiveDiameter), 0, 0, 1, 1},
    {&__pyx_n_s_getHopPlot, __pyx_k_getHopPlot, sizeof(__pyx_k_getHopPlot), 0, 0, 1, 1},
    {&__pyx_n_s_getNeighborhoodFunction, __pyx_k_getNeighborhoodFunction, sizeof(__pyx_k_getNeighborhoodFunction), 0, 0, 1, 1},
    {&__pyx_n_s_getNodesSortedByDistance, __pyx_k_getNodesSortedByDistance, sizeof(__pyx_k_getNodesSortedByDistance), 0, 0, 1, 1},
    {&__pyx_n_s_getPath, __pyx_k_getPath, sizeof(__pyx_k_getPath), 0, 0, 1, 1},
    {&__pyx_n_s_getPaths, __pyx_k_getPaths, sizeof(__pyx_k_getPaths), 0, 0, 1, 1},
    {&__pyx_n_s_getPredecessors, __pyx_k_getPredecessors, sizeof(__pyx_k_getPredecessors), 0, 0, 1, 1},
    {&__pyx_n_s_getValue, __pyx_k_getValue, sizeof(__pyx_k_getValue), 0, 0, 1, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_helpers, __pyx_k_helpers, sizeof(__pyx_k_helpers), 0, 0, 1, 1},
    {&__pyx_n_s_heu, __pyx_k_heu, sizeof(__pyx_k_heu), 0, 0, 1, 1},
    {&__pyx_n_s_hp, __pyx_k_hp, sizeof(__pyx_k_hp), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_init_subclass, __pyx_k_init_subclass, sizeof(__pyx_k_init_subclass), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_n_s_is_number, __pyx_k_is_number, sizeof(__pyx_k_is_number), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_maxDistance, __pyx_k_maxDistance, sizeof(__pyx_k_maxDistance), 0, 0, 1, 1},
    {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
    {&__pyx_n_s_modified, __pyx_k_modified, sizeof(__pyx_k_modified), 0, 0, 1, 1},
    {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
    {&__pyx_n_s_mro_entries, __pyx_k_mro_entries, sizeof(__pyx_k_mro_entries), 0, 0, 1, 1},
    {&__pyx_n_s_nSamples, __pyx_k_nSamples, sizeof(__pyx_k_nSamples), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_networkit_distance, __pyx_k_networkit_distance, sizeof(__pyx_k_networkit_distance), 0, 0, 1, 1},
    {&__pyx_kp_u_networkit_distance_AllSimplePath, __pyx_k_networkit_distance_AllSimplePath, sizeof(__pyx_k_networkit_distance_AllSimplePath), 0, 1, 0, 0},
    {&__pyx_kp_s_networkit_distance_pyx, __pyx_k_networkit_distance_pyx, sizeof(__pyx_k_networkit_distance_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
    {&__pyx_n_s_newSource, __pyx_k_newSource, sizeof(__pyx_k_newSource), 0, 0, 1, 1},
    {&__pyx_n_s_newTarget, __pyx_k_newTarget, sizeof(__pyx_k_newTarget), 0, 0, 1, 1},
    {&__pyx_n_s_newTargets, __pyx_k_newTargets, sizeof(__pyx_k_newTargets), 0, 0, 1, 1},
    {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
    {&__pyx_n_s_none, __pyx_k_none, sizeof(__pyx_k_none), 0, 0, 1, 1},
    {&__pyx_n_s_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 0, 0, 1, 1},
    {&__pyx_n_s_numberIterations, __pyx_k_numberIterations, sizeof(__pyx_k_numberIterations), 0, 0, 1, 1},
    {&__pyx_n_s_numberOfPaths, __pyx_k_numberOfPaths, sizeof(__pyx_k_numberOfPaths), 0, 0, 1, 1},
    {&__pyx_n_s_numberOfSimplePaths, __pyx_k_numberOfSimplePaths, sizeof(__pyx_k_numberOfSimplePaths), 0, 0, 1, 1},
    {&__pyx_n_s_numberSystems, __pyx_k_numberSystems, sizeof(__pyx_k_numberSystems), 0, 0, 1, 1},
    {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
    {&__pyx_n_s_omega, __pyx_k_omega, sizeof(__pyx_k_omega), 0, 0, 1, 1},
    {&__pyx_n_s_paths, __pyx_k_paths, sizeof(__pyx_k_paths), 0, 0, 1, 1},
    {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
    {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
    {&__pyx_n_s_preprocess, __pyx_k_preprocess, sizeof(__pyx_k_preprocess), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_Eccentricity, __pyx_k_pyx_unpickle_Eccentricity, sizeof(__pyx_k_pyx_unpickle_Eccentricity), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_Volume, __pyx_k_pyx_unpickle_Volume, sizeof(__pyx_k_pyx_unpickle_Volume), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
    {&__pyx_n_s_query, __pyx_k_query, sizeof(__pyx_k_query), 0, 0, 1, 1},
    {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
    {&__pyx_n_s_r_2, __pyx_k_r_2, sizeof(__pyx_k_r_2), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_ratio, __pyx_k_ratio, sizeof(__pyx_k_ratio), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
    {&__pyx_n_s_rs, __pyx_k_rs, sizeof(__pyx_k_rs), 0, 0, 1, 1},
    {&__pyx_n_s_run, __pyx_k_run, sizeof(__pyx_k_run), 0, 0, 1, 1},
    {&__pyx_n_s_runApproximation, __pyx_k_runApproximation, sizeof(__pyx_k_runApproximation), 0, 0, 1, 1},
    {&__pyx_n_s_runParallelApproximation, __pyx_k_runParallelApproximation, sizeof(__pyx_k_runParallelApproximation), 0, 0, 1, 1},
    {&__pyx_n_s_runSinglePair, __pyx_k_runSinglePair, sizeof(__pyx_k_runSinglePair), 0, 0, 1, 1},
    {&__pyx_n_s_runSingleSource, __pyx_k_runSingleSource, sizeof(__pyx_k_runSingleSource), 0, 0, 1, 1},
    {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
    {&__pyx_n_s_samples, __pyx_k_samples, sizeof(__pyx_k_samples), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_kp_s_self__this_cannot_be_converted_t, __pyx_k_self__this_cannot_be_converted_t, sizeof(__pyx_k_self__this_cannot_be_converted_t), 0, 0, 1, 0},
    {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
    {&__pyx_n_s_setSource, __pyx_k_setSource, sizeof(__pyx_k_setSource), 0, 0, 1, 1},
    {&__pyx_n_s_setSources, __pyx_k_setSources, sizeof(__pyx_k_setSources), 0, 0, 1, 1},
    {&__pyx_n_s_setTarget, __pyx_k_setTarget, sizeof(__pyx_k_setTarget), 0, 0, 1, 1},
    {&__pyx_n_s_setTargetNode, __pyx_k_setTargetNode, sizeof(__pyx_k_setTargetNode), 0, 0, 1, 1},
    {&__pyx_n_s_setTargets, __pyx_k_setTargets, sizeof(__pyx_k_setTargets), 0, 0, 1, 1},
    {&__pyx_n_s_set_name, __pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_source, __pyx_k_source, sizeof(__pyx_k_source), 0, 0, 1, 1},
    {&__pyx_n_s_sources, __pyx_k_sources, sizeof(__pyx_k_sources), 0, 0, 1, 1},
    {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
    {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
    {&__pyx_n_s_stdstring, __pyx_k_stdstring, sizeof(__pyx_k_stdstring), 0, 0, 1, 1},
    {&__pyx_n_s_storeNodesSortedByDistance, __pyx_k_storeNodesSortedByDistance, sizeof(__pyx_k_storeNodesSortedByDistance), 0, 0, 1, 1},
    {&__pyx_n_s_storePaths, __pyx_k_storePaths, sizeof(__pyx_k_storePaths), 0, 0, 1, 1},
    {&__pyx_n_s_storePred, __pyx_k_storePred, sizeof(__pyx_k_storePred), 0, 0, 1, 1},
    {&__pyx_n_s_strategy, __pyx_k_strategy, sizeof(__pyx_k_strategy), 0, 0, 1, 1},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
    {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
    {&__pyx_n_s_target, __pyx_k_target, sizeof(__pyx_k_target), 0, 0, 1, 1},
    {&__pyx_n_s_targets, __pyx_k_targets, sizeof(__pyx_k_targets), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
    {&__pyx_n_s_tmap, __pyx_k_tmap, sizeof(__pyx_k_tmap), 0, 0, 1, 1},
    {&__pyx_n_s_tol, __pyx_k_tol, sizeof(__pyx_k_tol), 0, 0, 1, 1},
    {&__pyx_n_s_triangles, __pyx_k_triangles, sizeof(__pyx_k_triangles), 0, 0, 1, 1},
    {&__pyx_n_s_u, __pyx_k_u, sizeof(__pyx_k_u), 0, 0, 1, 1},
    {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
    {&__pyx_n_s_use_setstate, __pyx_k_use_setstate, sizeof(__pyx_k_use_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
    {&__pyx_n_s_v_2, __pyx_k_v_2, sizeof(__pyx_k_v_2), 0, 0, 1, 1},
    {&__pyx_n_s_volume, __pyx_k_volume, sizeof(__pyx_k_volume), 0, 0, 1, 1},
    {&__pyx_n_s_volume_locals_genexpr, __pyx_k_volume_locals_genexpr, sizeof(__pyx_k_volume_locals_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_volume_locals_is_number, __pyx_k_volume_locals_is_number, sizeof(__pyx_k_volume_locals_is_number), 0, 0, 1, 1},
    {&__pyx_n_s_vs, __pyx_k_vs, sizeof(__pyx_k_vs), 0, 0, 1, 1},
    {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
    {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
    {&__pyx_n_s_withEdgeScores, __pyx_k_withEdgeScores, sizeof(__pyx_k_withEdgeScores), 0, 0, 1, 1},
    {&__pyx_n_s_wrapper, __pyx_k_wrapper, sizeof(__pyx_k_wrapper), 0, 0, 1, 1},
    {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 468, __pyx_L1_error)
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 540, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 56, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 826, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 68, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 76, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "networkit/distance.pyx":56
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == STSP:
 * 			raise RuntimeError("Error, you may not use STSP directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def setSource(self, node newSource):
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Error_you_may_not_use_STSP_direc); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "networkit/distance.pyx":181
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == SSSP:
 * 			raise RuntimeError("Error, you may not use SSSP directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def getDistances(self, asarray=None):
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_Error_you_may_not_use_SSSP_direc); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "networkit/distance.pyx":361
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == SSSP:
 * 			raise RuntimeError("Error, you may not use DynSSSP directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def modified(self):
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Error_you_may_not_use_DynSSSP_di); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "networkit/distance.pyx":822
 * 		cdef double _v
 * 		cdef vector[double] _vs
 * 		def is_number(s):             # <<<<<<<<<<<<<<
 * 			try:
 * 				float(s)
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_n_s_s); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_is_number, 822, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 822, __pyx_L1_error)

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3b0c44, 0xda39a3e, 0xd41d8cd):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe3b0c44, 0xda39a3e, 0xd41d8cd) = ())" % __pyx_checksum
 */
  __pyx_tuple__14 = PyTuple_Pack(3, __pyx_int_238750788, __pyx_int_228825662, __pyx_int_222419149); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "networkit/distance.pyx":58
 * 			raise RuntimeError("Error, you may not use STSP directly, use a sub-class instead")
 * 
 * 	def setSource(self, node newSource):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setSource(newSource)
 */
  __pyx_tuple__15 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_newSource); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_setSource, 58, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 58, __pyx_L1_error)

  /* "networkit/distance.pyx":71
 * 		(<_STSP*>(self._this)).setSource(newSource)
 * 
 * 	def setTarget(self, node newTarget):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTarget(newTarget)
 */
  __pyx_tuple__17 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_newTarget); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_setTarget, 71, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 71, __pyx_L1_error)

  /* "networkit/distance.pyx":84
 * 		(<_STSP*>(self._this)).setTarget(newTarget)
 * 
 * 	def setTargets(self, vector[node] newTargets):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTargets(newTargets)
 */
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_newTargets); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_setTargets, 84, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 84, __pyx_L1_error)

  /* "networkit/distance.pyx":98
 * 		(<_STSP*>(self._this)).setTargets(newTargets.begin(), newTargets.end())
 * 
 * 	def getPath(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPath()
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getPath, 98, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 98, __pyx_L1_error)

  /* "networkit/distance.pyx":113
 * 		return (<_STSP*>(self._this)).getPath()
 * 
 * 	def getPredecessors(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPredecessors()
 */
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getPredecessors, 113, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 113, __pyx_L1_error)

  /* "networkit/distance.pyx":128
 * 		return (<_STSP*>(self._this)).getPredecessors()
 * 
 * 	def getDistance(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistance()
 */
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getDistance, 128, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 128, __pyx_L1_error)

  /* "networkit/distance.pyx":141
 * 		return (<_STSP*>(self._this)).getDistance()
 * 
 * 	def getDistances(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistances()
 */
  __pyx_tuple__25 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_tmap, __pyx_n_s_distances, __pyx_n_s_u); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getDistances, 141, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 141, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":183
 * 			raise RuntimeError("Error, you may not use SSSP directly, use a sub-class instead")
 * 
 * 	def getDistances(self, asarray=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistances(asarray=None)
 */
  __pyx_tuple__30 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_asarray); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getDistances, 183, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 183, __pyx_L1_error)
  __pyx_tuple__32 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "networkit/distance.pyx":202
 * 		return maybe_asarray_1d(&(<_SSSP*>(self._this)).getDistances(), asarray)
 * 
 * 	def distance(self, t):             # <<<<<<<<<<<<<<
 * 		"""
 * 		distance(t)
 */
  __pyx_tuple__33 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_t); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_distance, 202, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 202, __pyx_L1_error)

  /* "networkit/distance.pyx":220
 * 		return (<_SSSP*>(self._this)).distance(t)
 * 
 * 	def getPredecessors(self, t):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPredecessors(t)
 */
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getPredecessors, 220, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 220, __pyx_L1_error)

  /* "networkit/distance.pyx":239
 * 		return (<_SSSP*>(self._this)).getPredecessors(t)
 * 
 * 	def getPath(self, t, forward=True):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPath(t, forward=True)
 */
  __pyx_tuple__36 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_t, __pyx_n_s_forward); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getPath, 239, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 239, __pyx_L1_error)
  __pyx_tuple__38 = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "networkit/distance.pyx":261
 * 		return (<_SSSP*>(self._this)).getPath(t, forward)
 * 
 * 	def getPaths(self, t, forward=True):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPaths(t, forward=True)
 */
  __pyx_tuple__39 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_t, __pyx_n_s_forward, __pyx_n_s_paths, __pyx_n_s_result, __pyx_n_s_elem); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getPaths, 261, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 261, __pyx_L1_error)

  /* "networkit/distance.pyx":286
 * 		return result
 * 
 * 	def getNodesSortedByDistance(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getNodesSortedByDistance()
 */
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getNodesSortedByDistance, 286, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 286, __pyx_L1_error)

  /* "networkit/distance.pyx":302
 * 		return (<_SSSP*>(self._this)).getNodesSortedByDistance()
 * 
 * 	def numberOfPaths(self, t):             # <<<<<<<<<<<<<<
 * 		"""
 * 		numberOfPaths(t)
 */
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_numberOfPaths, 302, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 302, __pyx_L1_error)

  /* "networkit/distance.pyx":320
 * 		return (<_SSSP*>(self._this))._numberOfPaths(t)
 * 
 * 	def setSource(self, s not None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setSource(s)
 */
  __pyx_tuple__43 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_s); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_setSource, 320, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 320, __pyx_L1_error)

  /* "networkit/distance.pyx":333
 * 		(<_SSSP*>(self._this)).setSource(s)
 * 
 * 	def setTarget(self, t not None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTarget(t)
 */
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_setTarget, 333, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 333, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":363
 * 			raise RuntimeError("Error, you may not use DynSSSP directly, use a sub-class instead")
 * 
 * 	def modified(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		modified()
 */
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_modified, 363, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 363, __pyx_L1_error)

  /* "networkit/distance.pyx":377
 * 		return (<_DynSSSP*>(self._this)).modified()
 * 
 * 	def setTargetNode(self, t):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTargetNode(t)
 */
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_setTargetNode, 377, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 377, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":421
 * 		del self._this
 * 
 * 	def preprocess(self):             # <<<<<<<<<<<<<<
 * 		self._this.preprocess()
 * 
 */
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_preprocess, 421, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 421, __pyx_L1_error)

  /* "networkit/distance.pyx":424
 * 		self._this.preprocess()
 * 
 * 	def getAttribute(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getAttribute()
 */
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getAttribute, 424, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 424, __pyx_L1_error)

  /* "networkit/distance.pyx":439
 * 		return self._this.getEdgeScores()
 * 
 * 	def distance(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		distance(self, u, v)
 */
  __pyx_tuple__54 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_u, __pyx_n_s_v); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_distance, 439, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 439, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":468
 * 		ESTIMATED_PEDANTIC,
 * 
 * class DiameterAlgo(object):             # <<<<<<<<<<<<<<
 * 	AUTOMATIC = _DiameterAlgo.AUTOMATIC
 * 	EXACT = _DiameterAlgo.EXACT
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "networkit/distance.pyx":518
 * 		self._this = new _Diameter(G._this, algo, error, nSamples)
 * 
 * 	def getDiameter(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDiameter()
 */
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getDiameter, 518, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 518, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":540
 * 	"""
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def getValue(Graph G, v):
 * 		"""
 */
  __pyx_tuple__63 = PyTuple_Pack(2, __pyx_n_s_G, __pyx_n_s_v); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getValue, 540, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 540, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__65 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Eccentricity, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Eccentricity__set_state(self, __pyx_state)
 */
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "networkit/distance.pyx":593
 * 		self._this = new _EffectiveDiameterApproximation(G._this, ratio, k, r)
 * 
 * 	def getEffectiveDiameter(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getEffectiveDiameter()
 */
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getEffectiveDiameter, 593, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 593, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":630
 * 		self._this = new _EffectiveDiameter(G._this, ratio)
 * 
 * 	def getEffectiveDiameter(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getEffectiveDiameter()
 */
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getEffectiveDiameter, 630, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 630, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":677
 * 		self._this = new _HopPlotApproximation(G._this, maxDistance, k, r)
 * 
 * 	def getHopPlot(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getHopPlot()
 */
  __pyx_tuple__74 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_hp, __pyx_n_s_result, __pyx_n_s_elem); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getHopPlot, 677, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 677, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":719
 * 		self._this = new _NeighborhoodFunction(G._this)
 * 
 * 	def getNeighborhoodFunction(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getNeighborhoodFunction()
 */
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getNeighborhoodFunction, 719, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(0, 719, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":765
 * 		self._this = new _NeighborhoodFunctionApproximation(G._this, k, r)
 * 
 * 	def getNeighborhoodFunction(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getNeighborhoodFunction()
 */
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getNeighborhoodFunction, 765, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 765, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":794
 * 	"""
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def volume(Graph G, r, count samples=500):
 * 		"""
 */
  __pyx_tuple__84 = PyTuple_Pack(11, __pyx_n_s_G, __pyx_n_s_r, __pyx_n_s_samples, __pyx_n_s_r_2, __pyx_n_s_rs, __pyx_n_s_v_2, __pyx_n_s_vs, __pyx_n_s_is_number, __pyx_n_s_is_number, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_volume, 794, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 794, __pyx_L1_error)
  __pyx_tuple__86 = PyTuple_Pack(1, __pyx_int_500); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Volume, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Volume__set_state(self, __pyx_state)
 */
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "networkit/distance.pyx":875
 * 		del self._this
 * 
 * 	def getAttribute(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getAttribute()
 */
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getAttribute, 875, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(0, 875, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":916
 * 		del self._this
 * 
 * 	def getAttribute(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getAttribute()
 */
  __pyx_tuple__92 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_x); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getAttribute, 916, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 916, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":975
 * 		del self._this
 * 
 * 	def preprocess(self):             # <<<<<<<<<<<<<<
 * 		self._this.preprocess()
 * 		return self
 */
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_preprocess, 975, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(0, 975, __pyx_L1_error)

  /* "networkit/distance.pyx":979
 * 		return self
 * 
 * 	def distance(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		return self._this.distance(u, v)
 * 
 */
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_distance, 979, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 979, __pyx_L1_error)

  /* "networkit/distance.pyx":982
 * 		return self._this.distance(u, v)
 * 
 * 	def getEdgeScores(self):             # <<<<<<<<<<<<<<
 * 		return self._this.getEdgeScores()
 * 
 */
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getEdgeScores, 982, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(0, 982, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__100 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__100)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":1017
 * 		self._this = new _CommuteTimeDistance(G._this, tol)
 * 
 * 	def runApproximation(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		runApproximation()
 */
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_runApproximation, 1017, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 1017, __pyx_L1_error)

  /* "networkit/distance.pyx":1025
 * 		return (<_CommuteTimeDistance*>(self._this)).runApproximation()
 * 
 * 	def runParallelApproximation(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		runParallelApproximation()
 */
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_runParallelApproximation, 1025, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(0, 1025, __pyx_L1_error)

  /* "networkit/distance.pyx":1033
 * 		return (<_CommuteTimeDistance*>(self._this)).runParallelApproximation()
 * 
 * 	def distance(self, u, v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		distance(u, v)
 */
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_distance, 1033, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 1033, __pyx_L1_error)

  /* "networkit/distance.pyx":1053
 * 		return (<_CommuteTimeDistance*>(self._this)).distance(u, v)
 * 
 * 	def runSinglePair(self, u, v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		runSinglePair(u, v)
 */
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_runSinglePair, 1053, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(0, 1053, __pyx_L1_error)

  /* "networkit/distance.pyx":1073
 * 		return (<_CommuteTimeDistance*>(self._this)).runSinglePair(u, v)
 * 
 * 	def runSingleSource(self, u):             # <<<<<<<<<<<<<<
 * 		"""
 * 		runSingleSource(u)
 */
  __pyx_tuple__105 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_u); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);
  __pyx_codeobj__106 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__105, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_runSingleSource, 1073, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__106)) __PYX_ERR(0, 1073, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":1097
 * 		SPLIT = 1
 * 
 * class SelectionStrategy(object):             # <<<<<<<<<<<<<<
 * 	RANDOM = _SelectionStrategy.RANDOM
 * 	SPLIT = _SelectionStrategy.SPLIT
 */
  __pyx_tuple__109 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);
  __pyx_tuple__110 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);

  /* "networkit/distance.pyx":1134
 * 		self._this = new _NeighborhoodFunctionHeuristic(G._this, nSamples, strategy)
 * 
 * 	def getNeighborhoodFunction(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getNeighborhoodFunction()
 */
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getNeighborhoodFunction, 1134, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(0, 1134, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__112 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__112)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":1175
 * 		self._G = None
 * 
 * 	def getDistances(self, asarray=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistances(asarray=None)
 */
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getDistances, 1175, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(0, 1175, __pyx_L1_error)

  /* "networkit/distance.pyx":1193
 * 		return maybe_asarray_2d(&(<_APSP*>(self._this)).getDistances(), asarray)
 * 
 * 	def getDistance(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistance(u, v)
 */
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getDistance, 1193, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(0, 1193, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":1252
 * 		self._G = None
 * 
 * 	def getDistances(self, asarray=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistances(asarray=None)
 */
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getDistances, 1252, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) __PYX_ERR(0, 1252, __pyx_L1_error)

  /* "networkit/distance.pyx":1278
 * 		return maybe_asarray_2d(&(<_SPSP*>self._this).getDistances(), asarray)
 * 
 * 	def getDistance(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistance(u, v)
 */
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getDistance, 1278, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(0, 1278, __pyx_L1_error)

  /* "networkit/distance.pyx":1298
 * 		return (<_SPSP*>self._this).getDistance(u, v)
 * 
 * 	def setSources(self, vector[node] sources):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setSources(sources)
 */
  __pyx_tuple__120 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_sources); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_setSources, 1298, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(0, 1298, __pyx_L1_error)

  /* "networkit/distance.pyx":1311
 * 		(<_SPSP*>self._this).setSources(sources.begin(), sources.end())
 * 
 * 	def setTargets(self, vector[node] targets):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTargets(targets)
 */
  __pyx_tuple__122 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_targets); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_setTargets, 1311, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(0, 1311, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__124 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__124)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__126 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__126)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__128 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__128)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__130 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__130)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__132 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__132)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__134 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__134)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__136 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__136)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__138 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__138)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__140 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__140)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__142 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__142)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__144 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__144)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":1643
 * 		del self._this
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		self._this.run()
 * 		return self
 */
  __pyx_codeobj__146 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_run, 1643, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__146)) __PYX_ERR(0, 1643, __pyx_L1_error)

  /* "networkit/distance.pyx":1647
 * 		return self
 * 
 * 	def numberOfSimplePaths(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		numberOfSimplePaths()
 */
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_numberOfSimplePaths, 1647, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) __PYX_ERR(0, 1647, __pyx_L1_error)

  /* "networkit/distance.pyx":1660
 * 		return self._this.numberOfSimplePaths()
 * 
 * 	def getAllSimplePaths(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getAllSimplePaths()
 */
  __pyx_codeobj__148 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_getAllSimplePaths, 1660, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__148)) __PYX_ERR(0, 1660, __pyx_L1_error)

  /* "networkit/distance.pyx":1673
 * 		return self._this.getAllSimplePaths()
 * 
 * 	def forAllSimplePaths(self, object callback):             # <<<<<<<<<<<<<<
 * 		"""
 * 		forAllSimplePaths(callback)
 */
  __pyx_tuple__149 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_callback, __pyx_n_s_wrapper); if (unlikely(!__pyx_tuple__149)) __PYX_ERR(0, 1673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__149);
  __Pyx_GIVEREF(__pyx_tuple__149);
  __pyx_codeobj__150 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__149, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_forAllSimplePaths, 1673, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__150)) __PYX_ERR(0, 1673, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__152 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__152)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__153 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__153)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__154 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__154)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":1750
 * 		self._G = None
 * 
 * 	def query(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		query(u, v)
 */
  __pyx_codeobj__155 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_query, 1750, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__155)) __PYX_ERR(0, 1750, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__156 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__156)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__157 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__157)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "networkit/distance.pyx":1803
 * 		self._G = None
 * 
 * 	def query(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		query(u, v)
 */
  __pyx_codeobj__158 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_distance_pyx, __pyx_n_s_query, 1803, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__158)) __PYX_ERR(0, 1803, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__159 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__159)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__160 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__160)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_Eccentricity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__161 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__161)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);
  __pyx_codeobj__162 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__161, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Eccentricity, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__162)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_codeobj__163 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__161, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Volume, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__163)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_neg_1_ = PyFloat_FromDouble(-1.); if (unlikely(!__pyx_float_neg_1_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_500 = PyInt_FromLong(500); if (unlikely(!__pyx_int_500)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_228825662 = PyInt_FromLong(228825662L); if (unlikely(!__pyx_int_228825662)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_238750788 = PyInt_FromLong(238750788L); if (unlikely(!__pyx_int_238750788)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("networkit.base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_4base_Algorithm = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.base", "Algorithm", sizeof(struct __pyx_obj_9networkit_4base_Algorithm), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_4base_Algorithm),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_4base_Algorithm) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_4base_Algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_STSP = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_STSP_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_STSP)) __PYX_ERR(0, 45, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_STSP_spec, __pyx_ptype_9networkit_8distance_STSP) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_STSP = &__pyx_type_9networkit_8distance_STSP;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_STSP->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_STSP) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_STSP->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_STSP->tp_dictoffset && __pyx_ptype_9networkit_8distance_STSP->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_STSP->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_STSP, (PyObject *) __pyx_ptype_9networkit_8distance_STSP) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_STSP) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_4base_Algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_SSSP = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_SSSP_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_SSSP)) __PYX_ERR(0, 171, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_SSSP_spec, __pyx_ptype_9networkit_8distance_SSSP) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_SSSP = &__pyx_type_9networkit_8distance_SSSP;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_SSSP->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_SSSP) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_SSSP->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_SSSP->tp_dictoffset && __pyx_ptype_9networkit_8distance_SSSP->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_SSSP->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SSSP, (PyObject *) __pyx_ptype_9networkit_8distance_SSSP) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_SSSP) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_8distance_AdamicAdarDistance = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_AdamicAdarDistance_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_8distance_AdamicAdarDistance)) __PYX_ERR(0, 400, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_AdamicAdarDistance_spec, __pyx_ptype_9networkit_8distance_AdamicAdarDistance) < 0) __PYX_ERR(0, 400, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_AdamicAdarDistance = &__pyx_type_9networkit_8distance_AdamicAdarDistance;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_AdamicAdarDistance) < 0) __PYX_ERR(0, 400, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_AdamicAdarDistance->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_AdamicAdarDistance->tp_dictoffset && __pyx_ptype_9networkit_8distance_AdamicAdarDistance->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_AdamicAdarDistance->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AdamicAdarDistance, (PyObject *) __pyx_ptype_9networkit_8distance_AdamicAdarDistance) < 0) __PYX_ERR(0, 400, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_AdamicAdarDistance) < 0) __PYX_ERR(0, 400, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_4base_Algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_Diameter = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_Diameter_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_Diameter)) __PYX_ERR(0, 487, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_Diameter_spec, __pyx_ptype_9networkit_8distance_Diameter) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_Diameter = &__pyx_type_9networkit_8distance_Diameter;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_Diameter->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_Diameter) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_Diameter->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_Diameter->tp_dictoffset && __pyx_ptype_9networkit_8distance_Diameter->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_Diameter->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Diameter, (PyObject *) __pyx_ptype_9networkit_8distance_Diameter) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_Diameter) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_8distance_Eccentricity = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_Eccentricity_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_8distance_Eccentricity)) __PYX_ERR(0, 533, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_Eccentricity_spec, __pyx_ptype_9networkit_8distance_Eccentricity) < 0) __PYX_ERR(0, 533, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_Eccentricity = &__pyx_type_9networkit_8distance_Eccentricity;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_Eccentricity) < 0) __PYX_ERR(0, 533, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_Eccentricity->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_Eccentricity->tp_dictoffset && __pyx_ptype_9networkit_8distance_Eccentricity->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_Eccentricity->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Eccentricity, (PyObject *) __pyx_ptype_9networkit_8distance_Eccentricity) < 0) __PYX_ERR(0, 533, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_Eccentricity) < 0) __PYX_ERR(0, 533, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_4base_Algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_EffectiveDiameterApproximation_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation)) __PYX_ERR(0, 565, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_EffectiveDiameterApproximation_spec, __pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation) < 0) __PYX_ERR(0, 565, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation = &__pyx_type_9networkit_8distance_EffectiveDiameterApproximation;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation) < 0) __PYX_ERR(0, 565, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation->tp_dictoffset && __pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EffectiveDiameterApproximation, (PyObject *) __pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation) < 0) __PYX_ERR(0, 565, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation) < 0) __PYX_ERR(0, 565, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_4base_Algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_EffectiveDiameter = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_EffectiveDiameter_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_EffectiveDiameter)) __PYX_ERR(0, 610, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_EffectiveDiameter_spec, __pyx_ptype_9networkit_8distance_EffectiveDiameter) < 0) __PYX_ERR(0, 610, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_EffectiveDiameter = &__pyx_type_9networkit_8distance_EffectiveDiameter;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_EffectiveDiameter->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_EffectiveDiameter) < 0) __PYX_ERR(0, 610, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_EffectiveDiameter->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_EffectiveDiameter->tp_dictoffset && __pyx_ptype_9networkit_8distance_EffectiveDiameter->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_EffectiveDiameter->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EffectiveDiameter, (PyObject *) __pyx_ptype_9networkit_8distance_EffectiveDiameter) < 0) __PYX_ERR(0, 610, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_EffectiveDiameter) < 0) __PYX_ERR(0, 610, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_4base_Algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_HopPlotApproximation = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_HopPlotApproximation_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_HopPlotApproximation)) __PYX_ERR(0, 647, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_HopPlotApproximation_spec, __pyx_ptype_9networkit_8distance_HopPlotApproximation) < 0) __PYX_ERR(0, 647, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_HopPlotApproximation = &__pyx_type_9networkit_8distance_HopPlotApproximation;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_HopPlotApproximation->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_HopPlotApproximation) < 0) __PYX_ERR(0, 647, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_HopPlotApproximation->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_HopPlotApproximation->tp_dictoffset && __pyx_ptype_9networkit_8distance_HopPlotApproximation->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_HopPlotApproximation->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HopPlotApproximation, (PyObject *) __pyx_ptype_9networkit_8distance_HopPlotApproximation) < 0) __PYX_ERR(0, 647, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_HopPlotApproximation) < 0) __PYX_ERR(0, 647, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_4base_Algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_NeighborhoodFunction = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_NeighborhoodFunction_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_NeighborhoodFunction)) __PYX_ERR(0, 700, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_NeighborhoodFunction_spec, __pyx_ptype_9networkit_8distance_NeighborhoodFunction) < 0) __PYX_ERR(0, 700, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_NeighborhoodFunction = &__pyx_type_9networkit_8distance_NeighborhoodFunction;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_NeighborhoodFunction->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_NeighborhoodFunction) < 0) __PYX_ERR(0, 700, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_NeighborhoodFunction->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_NeighborhoodFunction->tp_dictoffset && __pyx_ptype_9networkit_8distance_NeighborhoodFunction->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_NeighborhoodFunction->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_NeighborhoodFunction, (PyObject *) __pyx_ptype_9networkit_8distance_NeighborhoodFunction) < 0) __PYX_ERR(0, 700, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_NeighborhoodFunction) < 0) __PYX_ERR(0, 700, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_4base_Algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_NeighborhoodFunctionApproximation_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation)) __PYX_ERR(0, 738, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_NeighborhoodFunctionApproximation_spec, __pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation) < 0) __PYX_ERR(0, 738, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation = &__pyx_type_9networkit_8distance_NeighborhoodFunctionApproximation;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation) < 0) __PYX_ERR(0, 738, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation->tp_dictoffset && __pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_NeighborhoodFunctionApproximatio, (PyObject *) __pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation) < 0) __PYX_ERR(0, 738, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation) < 0) __PYX_ERR(0, 738, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_8distance_Volume = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_Volume_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_8distance_Volume)) __PYX_ERR(0, 783, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_Volume_spec, __pyx_ptype_9networkit_8distance_Volume) < 0) __PYX_ERR(0, 783, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_Volume = &__pyx_type_9networkit_8distance_Volume;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_Volume) < 0) __PYX_ERR(0, 783, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_Volume->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_Volume->tp_dictoffset && __pyx_ptype_9networkit_8distance_Volume->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_Volume->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Volume, (PyObject *) __pyx_ptype_9networkit_8distance_Volume) < 0) __PYX_ERR(0, 783, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_Volume) < 0) __PYX_ERR(0, 783, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_8distance_JaccardDistance = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_JaccardDistance_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_8distance_JaccardDistance)) __PYX_ERR(0, 848, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_JaccardDistance_spec, __pyx_ptype_9networkit_8distance_JaccardDistance) < 0) __PYX_ERR(0, 848, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_JaccardDistance = &__pyx_type_9networkit_8distance_JaccardDistance;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_JaccardDistance) < 0) __PYX_ERR(0, 848, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_JaccardDistance->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_JaccardDistance->tp_dictoffset && __pyx_ptype_9networkit_8distance_JaccardDistance->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_JaccardDistance->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_JaccardDistance, (PyObject *) __pyx_ptype_9networkit_8distance_JaccardDistance) < 0) __PYX_ERR(0, 848, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_JaccardDistance) < 0) __PYX_ERR(0, 848, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_JaccardSimilarityAttributizer_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer)) __PYX_ERR(0, 889, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_JaccardSimilarityAttributizer_spec, __pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer) < 0) __PYX_ERR(0, 889, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer = &__pyx_type_9networkit_8distance_JaccardSimilarityAttributizer;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer) < 0) __PYX_ERR(0, 889, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer->tp_dictoffset && __pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_JaccardSimilarityAttributizer, (PyObject *) __pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer) < 0) __PYX_ERR(0, 889, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer) < 0) __PYX_ERR(0, 889, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_8distance_AlgebraicDistance = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_AlgebraicDistance_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_8distance_AlgebraicDistance)) __PYX_ERR(0, 941, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_AlgebraicDistance_spec, __pyx_ptype_9networkit_8distance_AlgebraicDistance) < 0) __PYX_ERR(0, 941, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_AlgebraicDistance = &__pyx_type_9networkit_8distance_AlgebraicDistance;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_AlgebraicDistance) < 0) __PYX_ERR(0, 941, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_AlgebraicDistance->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_AlgebraicDistance->tp_dictoffset && __pyx_ptype_9networkit_8distance_AlgebraicDistance->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_AlgebraicDistance->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AlgebraicDistance, (PyObject *) __pyx_ptype_9networkit_8distance_AlgebraicDistance) < 0) __PYX_ERR(0, 941, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_AlgebraicDistance) < 0) __PYX_ERR(0, 941, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_4base_Algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_CommuteTimeDistance = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_CommuteTimeDistance_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_CommuteTimeDistance)) __PYX_ERR(0, 996, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_CommuteTimeDistance_spec, __pyx_ptype_9networkit_8distance_CommuteTimeDistance) < 0) __PYX_ERR(0, 996, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_CommuteTimeDistance = &__pyx_type_9networkit_8distance_CommuteTimeDistance;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_CommuteTimeDistance->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_CommuteTimeDistance) < 0) __PYX_ERR(0, 996, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_CommuteTimeDistance->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_CommuteTimeDistance->tp_dictoffset && __pyx_ptype_9networkit_8distance_CommuteTimeDistance->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_CommuteTimeDistance->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CommuteTimeDistance, (PyObject *) __pyx_ptype_9networkit_8distance_CommuteTimeDistance) < 0) __PYX_ERR(0, 996, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_CommuteTimeDistance) < 0) __PYX_ERR(0, 996, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_4base_Algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_NeighborhoodFunctionHeuristic_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic)) __PYX_ERR(0, 1107, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_NeighborhoodFunctionHeuristic_spec, __pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic) < 0) __PYX_ERR(0, 1107, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic = &__pyx_type_9networkit_8distance_NeighborhoodFunctionHeuristic;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic) < 0) __PYX_ERR(0, 1107, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic->tp_dictoffset && __pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_NeighborhoodFunctionHeuristic, (PyObject *) __pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic) < 0) __PYX_ERR(0, 1107, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic) < 0) __PYX_ERR(0, 1107, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_4base_Algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_APSP = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_APSP_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_APSP)) __PYX_ERR(0, 1154, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_APSP_spec, __pyx_ptype_9networkit_8distance_APSP) < 0) __PYX_ERR(0, 1154, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_APSP = &__pyx_type_9networkit_8distance_APSP;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_APSP->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_APSP) < 0) __PYX_ERR(0, 1154, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_APSP->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_APSP->tp_dictoffset && __pyx_ptype_9networkit_8distance_APSP->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_APSP->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_APSP, (PyObject *) __pyx_ptype_9networkit_8distance_APSP) < 0) __PYX_ERR(0, 1154, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_APSP) < 0) __PYX_ERR(0, 1154, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_4base_Algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_SPSP = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_SPSP_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_SPSP)) __PYX_ERR(0, 1225, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_SPSP_spec, __pyx_ptype_9networkit_8distance_SPSP) < 0) __PYX_ERR(0, 1225, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_SPSP = &__pyx_type_9networkit_8distance_SPSP;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_SPSP->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_SPSP) < 0) __PYX_ERR(0, 1225, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_SPSP->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_SPSP->tp_dictoffset && __pyx_ptype_9networkit_8distance_SPSP->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_SPSP->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SPSP, (PyObject *) __pyx_ptype_9networkit_8distance_SPSP) < 0) __PYX_ERR(0, 1225, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_SPSP) < 0) __PYX_ERR(0, 1225, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_8distance_SSSP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_BFS = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_BFS_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_BFS)) __PYX_ERR(0, 1352, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_BFS_spec, __pyx_ptype_9networkit_8distance_BFS) < 0) __PYX_ERR(0, 1352, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_BFS = &__pyx_type_9networkit_8distance_BFS;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_BFS->tp_base = __pyx_ptype_9networkit_8distance_SSSP;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_BFS) < 0) __PYX_ERR(0, 1352, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_BFS->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_BFS->tp_dictoffset && __pyx_ptype_9networkit_8distance_BFS->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_BFS->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BFS, (PyObject *) __pyx_ptype_9networkit_8distance_BFS) < 0) __PYX_ERR(0, 1352, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_BFS) < 0) __PYX_ERR(0, 1352, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_8distance_SSSP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_Dijkstra = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_Dijkstra_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_Dijkstra)) __PYX_ERR(0, 1381, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_Dijkstra_spec, __pyx_ptype_9networkit_8distance_Dijkstra) < 0) __PYX_ERR(0, 1381, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_Dijkstra = &__pyx_type_9networkit_8distance_Dijkstra;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_Dijkstra->tp_base = __pyx_ptype_9networkit_8distance_SSSP;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_Dijkstra) < 0) __PYX_ERR(0, 1381, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_Dijkstra->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_Dijkstra->tp_dictoffset && __pyx_ptype_9networkit_8distance_Dijkstra->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_Dijkstra->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Dijkstra, (PyObject *) __pyx_ptype_9networkit_8distance_Dijkstra) < 0) __PYX_ERR(0, 1381, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_Dijkstra) < 0) __PYX_ERR(0, 1381, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_8distance_STSP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_MultiTargetBFS = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_MultiTargetBFS_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_MultiTargetBFS)) __PYX_ERR(0, 1409, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_MultiTargetBFS_spec, __pyx_ptype_9networkit_8distance_MultiTargetBFS) < 0) __PYX_ERR(0, 1409, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_MultiTargetBFS = &__pyx_type_9networkit_8distance_MultiTargetBFS;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_MultiTargetBFS->tp_base = __pyx_ptype_9networkit_8distance_STSP;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_MultiTargetBFS) < 0) __PYX_ERR(0, 1409, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_MultiTargetBFS->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_MultiTargetBFS->tp_dictoffset && __pyx_ptype_9networkit_8distance_MultiTargetBFS->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_MultiTargetBFS->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MultiTargetBFS, (PyObject *) __pyx_ptype_9networkit_8distance_MultiTargetBFS) < 0) __PYX_ERR(0, 1409, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_MultiTargetBFS) < 0) __PYX_ERR(0, 1409, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_8distance_STSP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_MultiTargetDijkstra = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_MultiTargetDijkstra_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_MultiTargetDijkstra)) __PYX_ERR(0, 1434, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_MultiTargetDijkstra_spec, __pyx_ptype_9networkit_8distance_MultiTargetDijkstra) < 0) __PYX_ERR(0, 1434, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_MultiTargetDijkstra = &__pyx_type_9networkit_8distance_MultiTargetDijkstra;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_MultiTargetDijkstra->tp_base = __pyx_ptype_9networkit_8distance_STSP;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_MultiTargetDijkstra) < 0) __PYX_ERR(0, 1434, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_MultiTargetDijkstra->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_MultiTargetDijkstra->tp_dictoffset && __pyx_ptype_9networkit_8distance_MultiTargetDijkstra->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_MultiTargetDijkstra->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MultiTargetDijkstra, (PyObject *) __pyx_ptype_9networkit_8distance_MultiTargetDijkstra) < 0) __PYX_ERR(0, 1434, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_MultiTargetDijkstra) < 0) __PYX_ERR(0, 1434, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_8distance_STSP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_BidirectionalBFS = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_BidirectionalBFS_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_BidirectionalBFS)) __PYX_ERR(0, 1519, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_BidirectionalBFS_spec, __pyx_ptype_9networkit_8distance_BidirectionalBFS) < 0) __PYX_ERR(0, 1519, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_BidirectionalBFS = &__pyx_type_9networkit_8distance_BidirectionalBFS;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_BidirectionalBFS->tp_base = __pyx_ptype_9networkit_8distance_STSP;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_BidirectionalBFS) < 0) __PYX_ERR(0, 1519, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_BidirectionalBFS->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_BidirectionalBFS->tp_dictoffset && __pyx_ptype_9networkit_8distance_BidirectionalBFS->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_BidirectionalBFS->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BidirectionalBFS, (PyObject *) __pyx_ptype_9networkit_8distance_BidirectionalBFS) < 0) __PYX_ERR(0, 1519, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_BidirectionalBFS) < 0) __PYX_ERR(0, 1519, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_8distance_STSP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_BidirectionalDijkstra = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_BidirectionalDijkstra_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_BidirectionalDijkstra)) __PYX_ERR(0, 1547, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_BidirectionalDijkstra_spec, __pyx_ptype_9networkit_8distance_BidirectionalDijkstra) < 0) __PYX_ERR(0, 1547, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_BidirectionalDijkstra = &__pyx_type_9networkit_8distance_BidirectionalDijkstra;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_BidirectionalDijkstra->tp_base = __pyx_ptype_9networkit_8distance_STSP;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_BidirectionalDijkstra) < 0) __PYX_ERR(0, 1547, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_BidirectionalDijkstra->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_BidirectionalDijkstra->tp_dictoffset && __pyx_ptype_9networkit_8distance_BidirectionalDijkstra->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_BidirectionalDijkstra->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BidirectionalDijkstra, (PyObject *) __pyx_ptype_9networkit_8distance_BidirectionalDijkstra) < 0) __PYX_ERR(0, 1547, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_BidirectionalDijkstra) < 0) __PYX_ERR(0, 1547, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_8distance_STSP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_AStar = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_AStar_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_AStar)) __PYX_ERR(0, 1577, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_AStar_spec, __pyx_ptype_9networkit_8distance_AStar) < 0) __PYX_ERR(0, 1577, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_AStar = &__pyx_type_9networkit_8distance_AStar;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_AStar->tp_base = __pyx_ptype_9networkit_8distance_STSP;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_AStar) < 0) __PYX_ERR(0, 1577, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_AStar->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_AStar->tp_dictoffset && __pyx_ptype_9networkit_8distance_AStar->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_AStar->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AStar, (PyObject *) __pyx_ptype_9networkit_8distance_AStar) < 0) __PYX_ERR(0, 1577, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_AStar) < 0) __PYX_ERR(0, 1577, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_8distance_AllSimplePaths = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_AllSimplePaths_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_8distance_AllSimplePaths)) __PYX_ERR(0, 1612, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_AllSimplePaths_spec, __pyx_ptype_9networkit_8distance_AllSimplePaths) < 0) __PYX_ERR(0, 1612, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_AllSimplePaths = &__pyx_type_9networkit_8distance_AllSimplePaths;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_AllSimplePaths) < 0) __PYX_ERR(0, 1612, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_AllSimplePaths->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_AllSimplePaths->tp_dictoffset && __pyx_ptype_9networkit_8distance_AllSimplePaths->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_AllSimplePaths->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AllSimplePaths, (PyObject *) __pyx_ptype_9networkit_8distance_AllSimplePaths) < 0) __PYX_ERR(0, 1612, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_AllSimplePaths) < 0) __PYX_ERR(0, 1612, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_8distance_SSSP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_ReverseBFS = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_ReverseBFS_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_ReverseBFS)) __PYX_ERR(0, 1696, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_ReverseBFS_spec, __pyx_ptype_9networkit_8distance_ReverseBFS) < 0) __PYX_ERR(0, 1696, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_ReverseBFS = &__pyx_type_9networkit_8distance_ReverseBFS;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_ReverseBFS->tp_base = __pyx_ptype_9networkit_8distance_SSSP;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_ReverseBFS) < 0) __PYX_ERR(0, 1696, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_ReverseBFS->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_ReverseBFS->tp_dictoffset && __pyx_ptype_9networkit_8distance_ReverseBFS->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_ReverseBFS->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ReverseBFS, (PyObject *) __pyx_ptype_9networkit_8distance_ReverseBFS) < 0) __PYX_ERR(0, 1696, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_ReverseBFS) < 0) __PYX_ERR(0, 1696, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_4base_Algorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_PrunedLandmarkLabeling_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling)) __PYX_ERR(0, 1726, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_PrunedLandmarkLabeling_spec, __pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling) < 0) __PYX_ERR(0, 1726, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling = &__pyx_type_9networkit_8distance_PrunedLandmarkLabeling;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling) < 0) __PYX_ERR(0, 1726, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling->tp_dictoffset && __pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PrunedLandmarkLabeling, (PyObject *) __pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling) < 0) __PYX_ERR(0, 1726, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling) < 0) __PYX_ERR(0, 1726, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_8distance___pyx_scope_struct__volume = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance___pyx_scope_struct__volume_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_8distance___pyx_scope_struct__volume)) __PYX_ERR(0, 794, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance___pyx_scope_struct__volume_spec, __pyx_ptype_9networkit_8distance___pyx_scope_struct__volume) < 0) __PYX_ERR(0, 794, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance___pyx_scope_struct__volume = &__pyx_type_9networkit_8distance___pyx_scope_struct__volume;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance___pyx_scope_struct__volume) < 0) __PYX_ERR(0, 794, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance___pyx_scope_struct__volume->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance___pyx_scope_struct__volume->tp_dictoffset && __pyx_ptype_9networkit_8distance___pyx_scope_struct__volume->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance___pyx_scope_struct__volume->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9networkit_8distance___pyx_scope_struct_1_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance___pyx_scope_struct_1_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_9networkit_8distance___pyx_scope_struct_1_genexpr)) __PYX_ERR(0, 833, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance___pyx_scope_struct_1_genexpr_spec, __pyx_ptype_9networkit_8distance___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 833, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance___pyx_scope_struct_1_genexpr = &__pyx_type_9networkit_8distance___pyx_scope_struct_1_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 833, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance___pyx_scope_struct_1_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance___pyx_scope_struct_1_genexpr->tp_dictoffset && __pyx_ptype_9networkit_8distance___pyx_scope_struct_1_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance___pyx_scope_struct_1_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("networkit.base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_4base__CythonParentClass = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.base", "_CythonParentClass", sizeof(struct __pyx_obj_9networkit_4base__CythonParentClass), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_4base__CythonParentClass),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_4base__CythonParentClass) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("networkit.structures"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_10structures_Cover = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.structures", "Cover", sizeof(struct __pyx_obj_9networkit_10structures_Cover), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_10structures_Cover),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_10structures_Cover) __PYX_ERR(4, 50, __pyx_L1_error)
  __pyx_vtabptr_9networkit_10structures_Cover = (struct __pyx_vtabstruct_9networkit_10structures_Cover*)__Pyx_GetVtable(__pyx_ptype_9networkit_10structures_Cover); if (unlikely(!__pyx_vtabptr_9networkit_10structures_Cover)) __PYX_ERR(4, 50, __pyx_L1_error)
  __pyx_ptype_9networkit_10structures_Partition = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.structures", "Partition", sizeof(struct __pyx_obj_9networkit_10structures_Partition), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_10structures_Partition),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_10structures_Partition) __PYX_ERR(4, 86, __pyx_L1_error)
  __pyx_vtabptr_9networkit_10structures_Partition = (struct __pyx_vtabstruct_9networkit_10structures_Partition*)__Pyx_GetVtable(__pyx_ptype_9networkit_10structures_Partition); if (unlikely(!__pyx_vtabptr_9networkit_10structures_Partition)) __PYX_ERR(4, 86, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("networkit.dynamics"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_8dynamics_GraphEvent = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.dynamics", "GraphEvent", sizeof(struct __pyx_obj_9networkit_8dynamics_GraphEvent), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_8dynamics_GraphEvent),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_8dynamics_GraphEvent) __PYX_ERR(5, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("networkit.graph"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_5graph_Graph = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "Graph", sizeof(struct __pyx_obj_9networkit_5graph_Graph), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_Graph),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_Graph) __PYX_ERR(6, 283, __pyx_L1_error)
  __pyx_vtabptr_9networkit_5graph_Graph = (struct __pyx_vtabstruct_9networkit_5graph_Graph*)__Pyx_GetVtable(__pyx_ptype_9networkit_5graph_Graph); if (unlikely(!__pyx_vtabptr_9networkit_5graph_Graph)) __PYX_ERR(6, 283, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_NodeIntAttribute = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "NodeIntAttribute", sizeof(struct __pyx_obj_9networkit_5graph_NodeIntAttribute), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_NodeIntAttribute),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_NodeIntAttribute) __PYX_ERR(6, 287, __pyx_L1_error)
  __pyx_vtabptr_9networkit_5graph_NodeIntAttribute = (struct __pyx_vtabstruct_9networkit_5graph_NodeIntAttribute*)__Pyx_GetVtable(__pyx_ptype_9networkit_5graph_NodeIntAttribute); if (unlikely(!__pyx_vtabptr_9networkit_5graph_NodeIntAttribute)) __PYX_ERR(6, 287, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_NodeDoubleAttribute = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "NodeDoubleAttribute", sizeof(struct __pyx_obj_9networkit_5graph_NodeDoubleAttribute), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_NodeDoubleAttribute),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_NodeDoubleAttribute) __PYX_ERR(6, 294, __pyx_L1_error)
  __pyx_vtabptr_9networkit_5graph_NodeDoubleAttribute = (struct __pyx_vtabstruct_9networkit_5graph_NodeDoubleAttribute*)__Pyx_GetVtable(__pyx_ptype_9networkit_5graph_NodeDoubleAttribute); if (unlikely(!__pyx_vtabptr_9networkit_5graph_NodeDoubleAttribute)) __PYX_ERR(6, 294, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_NodeStringAttribute = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "NodeStringAttribute", sizeof(struct __pyx_obj_9networkit_5graph_NodeStringAttribute), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_NodeStringAttribute),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_NodeStringAttribute) __PYX_ERR(6, 301, __pyx_L1_error)
  __pyx_vtabptr_9networkit_5graph_NodeStringAttribute = (struct __pyx_vtabstruct_9networkit_5graph_NodeStringAttribute*)__Pyx_GetVtable(__pyx_ptype_9networkit_5graph_NodeStringAttribute); if (unlikely(!__pyx_vtabptr_9networkit_5graph_NodeStringAttribute)) __PYX_ERR(6, 301, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_EdgeIntAttribute = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "EdgeIntAttribute", sizeof(struct __pyx_obj_9networkit_5graph_EdgeIntAttribute), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_EdgeIntAttribute),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_EdgeIntAttribute) __PYX_ERR(6, 308, __pyx_L1_error)
  __pyx_vtabptr_9networkit_5graph_EdgeIntAttribute = (struct __pyx_vtabstruct_9networkit_5graph_EdgeIntAttribute*)__Pyx_GetVtable(__pyx_ptype_9networkit_5graph_EdgeIntAttribute); if (unlikely(!__pyx_vtabptr_9networkit_5graph_EdgeIntAttribute)) __PYX_ERR(6, 308, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_EdgeDoubleAttribute = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "EdgeDoubleAttribute", sizeof(struct __pyx_obj_9networkit_5graph_EdgeDoubleAttribute), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_EdgeDoubleAttribute),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_EdgeDoubleAttribute) __PYX_ERR(6, 315, __pyx_L1_error)
  __pyx_vtabptr_9networkit_5graph_EdgeDoubleAttribute = (struct __pyx_vtabstruct_9networkit_5graph_EdgeDoubleAttribute*)__Pyx_GetVtable(__pyx_ptype_9networkit_5graph_EdgeDoubleAttribute); if (unlikely(!__pyx_vtabptr_9networkit_5graph_EdgeDoubleAttribute)) __PYX_ERR(6, 315, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_EdgeStringAttribute = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "EdgeStringAttribute", sizeof(struct __pyx_obj_9networkit_5graph_EdgeStringAttribute), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_EdgeStringAttribute),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_EdgeStringAttribute) __PYX_ERR(6, 322, __pyx_L1_error)
  __pyx_vtabptr_9networkit_5graph_EdgeStringAttribute = (struct __pyx_vtabstruct_9networkit_5graph_EdgeStringAttribute*)__Pyx_GetVtable(__pyx_ptype_9networkit_5graph_EdgeStringAttribute); if (unlikely(!__pyx_vtabptr_9networkit_5graph_EdgeStringAttribute)) __PYX_ERR(6, 322, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "RandomMaximumSpanningForest", sizeof(struct __pyx_obj_9networkit_5graph_RandomMaximumSpanningForest), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_RandomMaximumSpanningForest),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest) __PYX_ERR(6, 347, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.graph", "UnionMaximumSpanningForest", sizeof(struct __pyx_obj_9networkit_5graph_UnionMaximumSpanningForest), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_5graph_UnionMaximumSpanningForest),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest) __PYX_ERR(6, 362, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("networkit.matching"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_8matching_Matching = __Pyx_ImportType_3_0_8(__pyx_t_1, "networkit.matching", "Matching", sizeof(struct __pyx_obj_9networkit_8matching_Matching), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(struct __pyx_obj_9networkit_8matching_Matching),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_9networkit_8matching_Matching) __PYX_ERR(7, 32, __pyx_L1_error)
  __pyx_vtabptr_9networkit_8matching_Matching = (struct __pyx_vtabstruct_9networkit_8matching_Matching*)__Pyx_GetVtable(__pyx_ptype_9networkit_8matching_Matching); if (unlikely(!__pyx_vtabptr_9networkit_8matching_Matching)) __PYX_ERR(7, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("networkit.helpers"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_8(__pyx_t_1, "__pyx_fuse_0asarray_1d", (void (**)(void))&__pyx_fuse_0__pyx_f_9networkit_7helpers_asarray_1d, "PyObject *(std::vector<__pyx_t_9networkit_10structures_edgeweight>  *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_8(__pyx_t_1, "__pyx_fuse_1asarray_1d", (void (**)(void))&__pyx_fuse_1__pyx_f_9networkit_7helpers_asarray_1d, "PyObject *(std::vector<__pyx_t_9networkit_10structures_node>  *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_8(__pyx_t_1, "__pyx_fuse_2asarray_1d", (void (**)(void))&__pyx_fuse_2__pyx_f_9networkit_7helpers_asarray_1d, "PyObject *(std::vector<double>  *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_8(__pyx_t_1, "__pyx_fuse_0asarray_2d", (void (**)(void))&__pyx_fuse_0__pyx_f_9networkit_7helpers_asarray_2d, "PyObject *(std::vector<std::vector<__pyx_t_9networkit_10structures_edgeweight> >  *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_8(__pyx_t_1, "__pyx_fuse_1asarray_2d", (void (**)(void))&__pyx_fuse_1__pyx_f_9networkit_7helpers_asarray_2d, "PyObject *(std::vector<std::vector<__pyx_t_9networkit_10structures_node> >  *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_8(__pyx_t_1, "__pyx_fuse_2asarray_2d", (void (**)(void))&__pyx_fuse_2__pyx_f_9networkit_7helpers_asarray_2d, "PyObject *(std::vector<std::vector<double> >  *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_distance(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_distance},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "distance",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initdistance(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initdistance(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_distance(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_distance(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_distance(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::vector<__pyx_t_9networkit_10structures_node>  __pyx_t_6;
  __pyx_t_9networkit_10structures_node __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'distance' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("distance", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "distance" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_distance(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_networkit__distance) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "networkit.distance")) {
      if (unlikely((PyDict_SetItemString(modules, "networkit.distance", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely((__Pyx_modinit_function_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "networkit/distance.pyx":15
 * from .base cimport _Algorithm, Algorithm
 * from .dynbase cimport _DynAlgorithm
 * from .dynbase import DynAlgorithm             # <<<<<<<<<<<<<<
 * from .dynamics cimport _GraphEvent
 * from .graph cimport _Graph, Graph
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_DynAlgorithm);
  __Pyx_GIVEREF(__pyx_n_s_DynAlgorithm);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_DynAlgorithm)) __PYX_ERR(0, 15, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_dynbase, __pyx_t_2, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_DynAlgorithm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DynAlgorithm, __pyx_t_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/distance.pyx":18
 * from .dynamics cimport _GraphEvent
 * from .graph cimport _Graph, Graph
 * from .helpers import stdstring             # <<<<<<<<<<<<<<
 * from .helpers cimport maybe_asarray_1d, maybe_asarray_2d
 * from .structures cimport count, index, node, edgeweight
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_stdstring);
  __Pyx_GIVEREF(__pyx_n_s_stdstring);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_stdstring)) __PYX_ERR(0, 18, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_helpers, __pyx_t_3, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_stdstring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_stdstring, __pyx_t_3) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":26
 * 	index _none "NetworKit::none"
 * 
 * none = _none             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "cython_helper.h":
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(NetworKit::none); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_none, __pyx_t_2) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":58
 * 			raise RuntimeError("Error, you may not use STSP directly, use a sub-class instead")
 * 
 * 	def setSource(self, node newSource):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setSource(newSource)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4STSP_3setSource, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_STSP_setSource, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_STSP, __pyx_n_s_setSource, __pyx_t_2) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_STSP);

  /* "networkit/distance.pyx":71
 * 		(<_STSP*>(self._this)).setSource(newSource)
 * 
 * 	def setTarget(self, node newTarget):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTarget(newTarget)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4STSP_5setTarget, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_STSP_setTarget, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_STSP, __pyx_n_s_setTarget, __pyx_t_2) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_STSP);

  /* "networkit/distance.pyx":84
 * 		(<_STSP*>(self._this)).setTarget(newTarget)
 * 
 * 	def setTargets(self, vector[node] newTargets):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTargets(newTargets)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4STSP_7setTargets, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_STSP_setTargets, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_STSP, __pyx_n_s_setTargets, __pyx_t_2) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_STSP);

  /* "networkit/distance.pyx":98
 * 		(<_STSP*>(self._this)).setTargets(newTargets.begin(), newTargets.end())
 * 
 * 	def getPath(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPath()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4STSP_9getPath, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_STSP_getPath, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_STSP, __pyx_n_s_getPath, __pyx_t_2) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_STSP);

  /* "networkit/distance.pyx":113
 * 		return (<_STSP*>(self._this)).getPath()
 * 
 * 	def getPredecessors(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPredecessors()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4STSP_11getPredecessors, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_STSP_getPredecessors, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__23)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_STSP, __pyx_n_s_getPredecessors, __pyx_t_2) < 0) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_STSP);

  /* "networkit/distance.pyx":128
 * 		return (<_STSP*>(self._this)).getPredecessors()
 * 
 * 	def getDistance(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistance()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4STSP_13getDistance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_STSP_getDistance, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_STSP, __pyx_n_s_getDistance, __pyx_t_2) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_STSP);

  /* "networkit/distance.pyx":141
 * 		return (<_STSP*>(self._this)).getDistance()
 * 
 * 	def getDistances(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistances()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4STSP_15getDistances, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_STSP_getDistances, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_STSP, __pyx_n_s_getDistances, __pyx_t_2) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_STSP);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4STSP_17__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_STSP___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4STSP_19__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_STSP___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":183
 * 			raise RuntimeError("Error, you may not use SSSP directly, use a sub-class instead")
 * 
 * 	def getDistances(self, asarray=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistances(asarray=None)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SSSP_3getDistances, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SSSP_getDistances, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__32);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_SSSP, __pyx_n_s_getDistances, __pyx_t_2) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_SSSP);

  /* "networkit/distance.pyx":202
 * 		return maybe_asarray_1d(&(<_SSSP*>(self._this)).getDistances(), asarray)
 * 
 * 	def distance(self, t):             # <<<<<<<<<<<<<<
 * 		"""
 * 		distance(t)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SSSP_5distance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SSSP_distance, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_SSSP, __pyx_n_s_distance, __pyx_t_2) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_SSSP);

  /* "networkit/distance.pyx":220
 * 		return (<_SSSP*>(self._this)).distance(t)
 * 
 * 	def getPredecessors(self, t):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPredecessors(t)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SSSP_7getPredecessors, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SSSP_getPredecessors, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_SSSP, __pyx_n_s_getPredecessors, __pyx_t_2) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_SSSP);

  /* "networkit/distance.pyx":239
 * 		return (<_SSSP*>(self._this)).getPredecessors(t)
 * 
 * 	def getPath(self, t, forward=True):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPath(t, forward=True)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SSSP_9getPath, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SSSP_getPath, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__38);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_SSSP, __pyx_n_s_getPath, __pyx_t_2) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_SSSP);

  /* "networkit/distance.pyx":261
 * 		return (<_SSSP*>(self._this)).getPath(t, forward)
 * 
 * 	def getPaths(self, t, forward=True):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getPaths(t, forward=True)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SSSP_11getPaths, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SSSP_getPaths, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__38);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_SSSP, __pyx_n_s_getPaths, __pyx_t_2) < 0) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_SSSP);

  /* "networkit/distance.pyx":286
 * 		return result
 * 
 * 	def getNodesSortedByDistance(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getNodesSortedByDistance()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SSSP_13getNodesSortedByDistance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SSSP_getNodesSortedByDistance, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_SSSP, __pyx_n_s_getNodesSortedByDistance, __pyx_t_2) < 0) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_SSSP);

  /* "networkit/distance.pyx":302
 * 		return (<_SSSP*>(self._this)).getNodesSortedByDistance()
 * 
 * 	def numberOfPaths(self, t):             # <<<<<<<<<<<<<<
 * 		"""
 * 		numberOfPaths(t)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SSSP_15numberOfPaths, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SSSP_numberOfPaths, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__42)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_SSSP, __pyx_n_s_numberOfPaths, __pyx_t_2) < 0) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_SSSP);

  /* "networkit/distance.pyx":320
 * 		return (<_SSSP*>(self._this))._numberOfPaths(t)
 * 
 * 	def setSource(self, s not None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setSource(s)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SSSP_17setSource, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SSSP_setSource, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_SSSP, __pyx_n_s_setSource, __pyx_t_2) < 0) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_SSSP);

  /* "networkit/distance.pyx":333
 * 		(<_SSSP*>(self._this)).setSource(s)
 * 
 * 	def setTarget(self, t not None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTarget(t)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SSSP_19setTarget, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SSSP_setTarget, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_SSSP, __pyx_n_s_setTarget, __pyx_t_2) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_SSSP);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SSSP_21__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SSSP___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SSSP_23__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SSSP___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":353
 * 		void setTargetNode(node t) except +
 * 
 * cdef class DynSSSP(SSSP, DynAlgorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	DynSSSP(G, source, storePredecessors, target)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_DynAlgorithm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF((PyObject *)__pyx_ptype_9networkit_8distance_SSSP);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_9networkit_8distance_SSSP);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_ptype_9networkit_8distance_SSSP))) __PYX_ERR(0, 353, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_DynSSSP);
  __Pyx_GIVEREF(__pyx_n_s_DynSSSP);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_DynSSSP)) __PYX_ERR(0, 353, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(0, 353, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, 1);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyType_GetSlot(&PyType_Type, tp_new, newfunc)(&PyType_Type, __pyx_t_5, NULL);
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyType_GetSlot((PyTypeObject*) __pyx_t_3, tp_base, PyTypeObject*) != ((PyTypeObject*)PyTuple_GET_ITEM(__pyx_t_2, 0))) {
    __Pyx_TypeName base_name = __Pyx_PyType_GetName(__Pyx_PyType_GetSlot((PyTypeObject*) __pyx_t_3, tp_base, PyTypeObject*));
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(((PyTypeObject*)PyTuple_GET_ITEM(__pyx_t_2, 0)));
    PyErr_Format(PyExc_TypeError, "best base '" __Pyx_FMT_TYPENAME "' must be equal to first base '" __Pyx_FMT_TYPENAME "'",
                 base_name, type_name);
    __Pyx_DECREF_TypeName(base_name);
    __Pyx_DECREF_TypeName(type_name);
    __PYX_ERR(0, 353, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  #if CYTHON_USE_TYPE_SPECS
  if (__Pyx_validate_bases_tuple(__pyx_type_9networkit_8distance_DynSSSP_spec.name, 0, __pyx_t_2) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
  __pyx_ptype_9networkit_8distance_DynSSSP = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_DynSSSP_spec, __pyx_t_2);
  if (unlikely(!__pyx_ptype_9networkit_8distance_DynSSSP)) __PYX_ERR(0, 353, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_DynSSSP_spec, __pyx_ptype_9networkit_8distance_DynSSSP) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
  #else
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_type_9networkit_8distance_DynSSSP.tp_bases = __pyx_t_2;
  __pyx_ptype_9networkit_8distance_DynSSSP = &__pyx_type_9networkit_8distance_DynSSSP;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_DynSSSP->tp_base = __pyx_ptype_9networkit_8distance_SSSP;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_DynSSSP) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_DynSSSP->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_DynSSSP->tp_dictoffset && __pyx_ptype_9networkit_8distance_DynSSSP->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_DynSSSP->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DynSSSP, (PyObject *) __pyx_ptype_9networkit_8distance_DynSSSP) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_DynSSSP) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
  #endif
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":363
 * 			raise RuntimeError("Error, you may not use DynSSSP directly, use a sub-class instead")
 * 
 * 	def modified(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		modified()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_7DynSSSP_3modified, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DynSSSP_modified, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_DynSSSP, __pyx_n_s_modified, __pyx_t_2) < 0) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_DynSSSP);

  /* "networkit/distance.pyx":377
 * 		return (<_DynSSSP*>(self._this)).modified()
 * 
 * 	def setTargetNode(self, t):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTargetNode(t)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_7DynSSSP_5setTargetNode, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DynSSSP_setTargetNode, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_DynSSSP, __pyx_n_s_setTargetNode, __pyx_t_2) < 0) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_DynSSSP);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_7DynSSSP_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DynSSSP___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._this cannot be converted to a Python object for pickling"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_7DynSSSP_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DynSSSP___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":421
 * 		del self._this
 * 
 * 	def preprocess(self):             # <<<<<<<<<<<<<<
 * 		self._this.preprocess()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_18AdamicAdarDistance_5preprocess, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AdamicAdarDistance_preprocess, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_AdamicAdarDistance, __pyx_n_s_preprocess, __pyx_t_2) < 0) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_AdamicAdarDistance);

  /* "networkit/distance.pyx":424
 * 		self._this.preprocess()
 * 
 * 	def getAttribute(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getAttribute()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_18AdamicAdarDistance_7getAttribute, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AdamicAdarDistance_getAttribute, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__53)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_AdamicAdarDistance, __pyx_n_s_getAttribute, __pyx_t_2) < 0) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_AdamicAdarDistance);

  /* "networkit/distance.pyx":439
 * 		return self._this.getEdgeScores()
 * 
 * 	def distance(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		distance(self, u, v)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_18AdamicAdarDistance_9distance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AdamicAdarDistance_distance, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_AdamicAdarDistance, __pyx_n_s_distance, __pyx_t_2) < 0) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_AdamicAdarDistance);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_18AdamicAdarDistance_11__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AdamicAdarDistance___reduce_cyth, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_18AdamicAdarDistance_13__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AdamicAdarDistance___setstate_cy, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__57)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":468
 * 		ESTIMATED_PEDANTIC,
 * 
 * class DiameterAlgo(object):             # <<<<<<<<<<<<<<
 * 	AUTOMATIC = _DiameterAlgo.AUTOMATIC
 * 	EXACT = _DiameterAlgo.EXACT
 */
  __pyx_t_2 = __Pyx_PEP560_update_bases(__pyx_tuple__59); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_5, __pyx_t_2, __pyx_n_s_DiameterAlgo, __pyx_n_s_DiameterAlgo, (PyObject *) NULL, __pyx_n_s_networkit_distance, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__pyx_t_2 != __pyx_tuple__59) {
    if (unlikely((PyDict_SetItemString(__pyx_t_3, "__orig_bases__", __pyx_tuple__59) < 0))) __PYX_ERR(0, 468, __pyx_L1_error)
  }

  /* "networkit/distance.pyx":469
 * 
 * class DiameterAlgo(object):
 * 	AUTOMATIC = _DiameterAlgo.AUTOMATIC             # <<<<<<<<<<<<<<
 * 	EXACT = _DiameterAlgo.EXACT
 * 	ESTIMATED_RANGE = _DiameterAlgo.ESTIMATED_RANGE
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_DiameterAlgo(NetworKit::AUTOMATIC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_AUTOMATIC, __pyx_t_4) < 0) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/distance.pyx":470
 * class DiameterAlgo(object):
 * 	AUTOMATIC = _DiameterAlgo.AUTOMATIC
 * 	EXACT = _DiameterAlgo.EXACT             # <<<<<<<<<<<<<<
 * 	ESTIMATED_RANGE = _DiameterAlgo.ESTIMATED_RANGE
 * 	ESTIMATED_SAMPLES = _DiameterAlgo.ESTIMATED_SAMPLES
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_DiameterAlgo(NetworKit::EXACT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_EXACT, __pyx_t_4) < 0) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/distance.pyx":471
 * 	AUTOMATIC = _DiameterAlgo.AUTOMATIC
 * 	EXACT = _DiameterAlgo.EXACT
 * 	ESTIMATED_RANGE = _DiameterAlgo.ESTIMATED_RANGE             # <<<<<<<<<<<<<<
 * 	ESTIMATED_SAMPLES = _DiameterAlgo.ESTIMATED_SAMPLES
 * 	ESTIMATED_PEDANTIC = _DiameterAlgo.ESTIMATED_PEDANTIC
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_DiameterAlgo(NetworKit::ESTIMATED_RANGE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_ESTIMATED_RANGE, __pyx_t_4) < 0) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/distance.pyx":472
 * 	EXACT = _DiameterAlgo.EXACT
 * 	ESTIMATED_RANGE = _DiameterAlgo.ESTIMATED_RANGE
 * 	ESTIMATED_SAMPLES = _DiameterAlgo.ESTIMATED_SAMPLES             # <<<<<<<<<<<<<<
 * 	ESTIMATED_PEDANTIC = _DiameterAlgo.ESTIMATED_PEDANTIC
 * 	Automatic = AUTOMATIC # this + following added for backwards compatibility
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_DiameterAlgo(NetworKit::ESTIMATED_SAMPLES); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_ESTIMATED_SAMPLES, __pyx_t_4) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/distance.pyx":473
 * 	ESTIMATED_RANGE = _DiameterAlgo.ESTIMATED_RANGE
 * 	ESTIMATED_SAMPLES = _DiameterAlgo.ESTIMATED_SAMPLES
 * 	ESTIMATED_PEDANTIC = _DiameterAlgo.ESTIMATED_PEDANTIC             # <<<<<<<<<<<<<<
 * 	Automatic = AUTOMATIC # this + following added for backwards compatibility
 * 	Exact = EXACT
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_DiameterAlgo(NetworKit::ESTIMATED_PEDANTIC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_ESTIMATED_PEDANTIC, __pyx_t_4) < 0) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/distance.pyx":474
 * 	ESTIMATED_SAMPLES = _DiameterAlgo.ESTIMATED_SAMPLES
 * 	ESTIMATED_PEDANTIC = _DiameterAlgo.ESTIMATED_PEDANTIC
 * 	Automatic = AUTOMATIC # this + following added for backwards compatibility             # <<<<<<<<<<<<<<
 * 	Exact = EXACT
 * 	EstimatedRange = ESTIMATED_RANGE
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_AUTOMATIC);
  if (unlikely(!__pyx_t_4)) {
    PyErr_Clear();
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_AUTOMATIC);
  }
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_Automatic, __pyx_t_4) < 0) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/distance.pyx":475
 * 	ESTIMATED_PEDANTIC = _DiameterAlgo.ESTIMATED_PEDANTIC
 * 	Automatic = AUTOMATIC # this + following added for backwards compatibility
 * 	Exact = EXACT             # <<<<<<<<<<<<<<
 * 	EstimatedRange = ESTIMATED_RANGE
 * 	EstimatedSamples = ESTIMATED_SAMPLES
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_EXACT);
  if (unlikely(!__pyx_t_4)) {
    PyErr_Clear();
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_EXACT);
  }
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_Exact, __pyx_t_4) < 0) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/distance.pyx":476
 * 	Automatic = AUTOMATIC # this + following added for backwards compatibility
 * 	Exact = EXACT
 * 	EstimatedRange = ESTIMATED_RANGE             # <<<<<<<<<<<<<<
 * 	EstimatedSamples = ESTIMATED_SAMPLES
 * 	EstimatedPedantic = ESTIMATED_PEDANTIC
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_ESTIMATED_RANGE);
  if (unlikely(!__pyx_t_4)) {
    PyErr_Clear();
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ESTIMATED_RANGE);
  }
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_EstimatedRange, __pyx_t_4) < 0) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/distance.pyx":477
 * 	Exact = EXACT
 * 	EstimatedRange = ESTIMATED_RANGE
 * 	EstimatedSamples = ESTIMATED_SAMPLES             # <<<<<<<<<<<<<<
 * 	EstimatedPedantic = ESTIMATED_PEDANTIC
 * 
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_ESTIMATED_SAMPLES);
  if (unlikely(!__pyx_t_4)) {
    PyErr_Clear();
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ESTIMATED_SAMPLES);
  }
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_EstimatedSamples, __pyx_t_4) < 0) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/distance.pyx":478
 * 	EstimatedRange = ESTIMATED_RANGE
 * 	EstimatedSamples = ESTIMATED_SAMPLES
 * 	EstimatedPedantic = ESTIMATED_PEDANTIC             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_t_3, __pyx_n_s_ESTIMATED_PEDANTIC);
  if (unlikely(!__pyx_t_4)) {
    PyErr_Clear();
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ESTIMATED_PEDANTIC);
  }
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_EstimatedPedantic, __pyx_t_4) < 0) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/distance.pyx":468
 * 		ESTIMATED_PEDANTIC,
 * 
 * class DiameterAlgo(object):             # <<<<<<<<<<<<<<
 * 	AUTOMATIC = _DiameterAlgo.AUTOMATIC
 * 	EXACT = _DiameterAlgo.EXACT
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_5, __pyx_n_s_DiameterAlgo, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DiameterAlgo, __pyx_t_4) < 0) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":514
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, algo = DiameterAlgo.AUTOMATIC, error = -1., nSamples = 0):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _Diameter(G._this, algo, error, nSamples)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DiameterAlgo); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_AUTOMATIC); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__4 = __pyx_t_5;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;

  /* "networkit/distance.pyx":518
 * 		self._this = new _Diameter(G._this, algo, error, nSamples)
 * 
 * 	def getDiameter(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDiameter()
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_8Diameter_3getDiameter, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Diameter_getDiameter, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_Diameter, __pyx_n_s_getDiameter, __pyx_t_5) < 0) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_Diameter);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_8Diameter_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Diameter___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_8Diameter_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Diameter___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_5) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/distance.pyx":540
 * 	"""
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def getValue(Graph G, v):
 * 		"""
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_12Eccentricity_1getValue, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Eccentricity_getValue, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_Eccentricity, __pyx_n_s_getValue, __pyx_t_5) < 0) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_Eccentricity);
  __Pyx_GetNameInClass(__pyx_t_5, (PyObject *)__pyx_ptype_9networkit_8distance_Eccentricity, __pyx_n_s_getValue); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_Eccentricity, __pyx_n_s_getValue, __pyx_t_2) < 0) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_Eccentricity);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_12Eccentricity_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Eccentricity___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_Eccentricity, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_Eccentricity);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Eccentricity, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Eccentricity__set_state(self, __pyx_state)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_12Eccentricity_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Eccentricity___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__67)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_Eccentricity, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_Eccentricity);

  /* "networkit/distance.pyx":593
 * 		self._this = new _EffectiveDiameterApproximation(G._this, ratio, k, r)
 * 
 * 	def getEffectiveDiameter(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getEffectiveDiameter()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_30EffectiveDiameterApproximation_3getEffectiveDiameter, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EffectiveDiameterApproximation_g, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation, __pyx_n_s_getEffectiveDiameter, __pyx_t_2) < 0) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_EffectiveDiameterApproximation);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_30EffectiveDiameterApproximation_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EffectiveDiameterApproximation_2, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_30EffectiveDiameterApproximation_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EffectiveDiameterApproximation_3, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__70)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":630
 * 		self._this = new _EffectiveDiameter(G._this, ratio)
 * 
 * 	def getEffectiveDiameter(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getEffectiveDiameter()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_17EffectiveDiameter_3getEffectiveDiameter, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EffectiveDiameter_getEffectiveDi, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_EffectiveDiameter, __pyx_n_s_getEffectiveDiameter, __pyx_t_2) < 0) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_EffectiveDiameter);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_17EffectiveDiameter_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EffectiveDiameter___reduce_cytho, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__72)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_17EffectiveDiameter_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EffectiveDiameter___setstate_cyt, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":677
 * 		self._this = new _HopPlotApproximation(G._this, maxDistance, k, r)
 * 
 * 	def getHopPlot(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getHopPlot()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_20HopPlotApproximation_3getHopPlot, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HopPlotApproximation_getHopPlot, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__75)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_HopPlotApproximation, __pyx_n_s_getHopPlot, __pyx_t_2) < 0) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_HopPlotApproximation);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_20HopPlotApproximation_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HopPlotApproximation___reduce_cy, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__76)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_20HopPlotApproximation_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_HopPlotApproximation___setstate, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":719
 * 		self._this = new _NeighborhoodFunction(G._this)
 * 
 * 	def getNeighborhoodFunction(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getNeighborhoodFunction()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_20NeighborhoodFunction_3getNeighborhoodFunction, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NeighborhoodFunction_getNeighbor, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__78)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_NeighborhoodFunction, __pyx_n_s_getNeighborhoodFunction, __pyx_t_2) < 0) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_NeighborhoodFunction);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_20NeighborhoodFunction_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NeighborhoodFunction___reduce_cy, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_20NeighborhoodFunction_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NeighborhoodFunction___setstate, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":765
 * 		self._this = new _NeighborhoodFunctionApproximation(G._this, k, r)
 * 
 * 	def getNeighborhoodFunction(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getNeighborhoodFunction()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_33NeighborhoodFunctionApproximation_3getNeighborhoodFunction, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NeighborhoodFunctionApproximatio_2, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation, __pyx_n_s_getNeighborhoodFunction, __pyx_t_2) < 0) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_NeighborhoodFunctionApproximation);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_33NeighborhoodFunctionApproximation_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NeighborhoodFunctionApproximatio_3, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_33NeighborhoodFunctionApproximation_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NeighborhoodFunctionApproximatio_4, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":794
 * 	"""
 * 
 * 	@staticmethod             # <<<<<<<<<<<<<<
 * 	def volume(Graph G, r, count samples=500):
 * 		"""
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_6Volume_1volume, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Volume_volume, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__86);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_Volume, __pyx_n_s_volume, __pyx_t_2) < 0) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_Volume);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_9networkit_8distance_Volume, __pyx_n_s_volume); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_Volume, __pyx_n_s_volume, __pyx_t_5) < 0) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_Volume);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_6Volume_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Volume___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_Volume, __pyx_n_s_reduce_cython, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_Volume);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Volume, (type(self), 0xe3b0c44, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Volume__set_state(self, __pyx_state)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_6Volume_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Volume___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__88)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_Volume, __pyx_n_s_setstate_cython, __pyx_t_5) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_Volume);

  /* "networkit/distance.pyx":875
 * 		del self._this
 * 
 * 	def getAttribute(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getAttribute()
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_15JaccardDistance_5getAttribute, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_JaccardDistance_getAttribute, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_JaccardDistance, __pyx_n_s_getAttribute, __pyx_t_5) < 0) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_JaccardDistance);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_15JaccardDistance_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_JaccardDistance___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_15JaccardDistance_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_JaccardDistance___setstate_cytho, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_5) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/distance.pyx":916
 * 		del self._this
 * 
 * 	def getAttribute(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getAttribute()
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_29JaccardSimilarityAttributizer_5getAttribute, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_JaccardSimilarityAttributizer_ge, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer, __pyx_n_s_getAttribute, __pyx_t_5) < 0) __PYX_ERR(0, 916, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_JaccardSimilarityAttributizer);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_29JaccardSimilarityAttributizer_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_JaccardSimilarityAttributizer_2, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_29JaccardSimilarityAttributizer_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_JaccardSimilarityAttributizer_3, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__95)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_5) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/distance.pyx":975
 * 		del self._this
 * 
 * 	def preprocess(self):             # <<<<<<<<<<<<<<
 * 		self._this.preprocess()
 * 		return self
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_17AlgebraicDistance_5preprocess, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlgebraicDistance_preprocess, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__96)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_AlgebraicDistance, __pyx_n_s_preprocess, __pyx_t_5) < 0) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_AlgebraicDistance);

  /* "networkit/distance.pyx":979
 * 		return self
 * 
 * 	def distance(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		return self._this.distance(u, v)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_17AlgebraicDistance_7distance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlgebraicDistance_distance, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_AlgebraicDistance, __pyx_n_s_distance, __pyx_t_5) < 0) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_AlgebraicDistance);

  /* "networkit/distance.pyx":982
 * 		return self._this.distance(u, v)
 * 
 * 	def getEdgeScores(self):             # <<<<<<<<<<<<<<
 * 		return self._this.getEdgeScores()
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_17AlgebraicDistance_9getEdgeScores, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlgebraicDistance_getEdgeScores, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__98)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_AlgebraicDistance, __pyx_n_s_getEdgeScores, __pyx_t_5) < 0) __PYX_ERR(0, 982, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_AlgebraicDistance);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_17AlgebraicDistance_11__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlgebraicDistance___reduce_cytho, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_17AlgebraicDistance_13__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AlgebraicDistance___setstate_cyt, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__100)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_5) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/distance.pyx":1017
 * 		self._this = new _CommuteTimeDistance(G._this, tol)
 * 
 * 	def runApproximation(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		runApproximation()
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_19CommuteTimeDistance_3runApproximation, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CommuteTimeDistance_runApproxima, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_CommuteTimeDistance, __pyx_n_s_runApproximation, __pyx_t_5) < 0) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_CommuteTimeDistance);

  /* "networkit/distance.pyx":1025
 * 		return (<_CommuteTimeDistance*>(self._this)).runApproximation()
 * 
 * 	def runParallelApproximation(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		runParallelApproximation()
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_19CommuteTimeDistance_5runParallelApproximation, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CommuteTimeDistance_runParallelA, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__102)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_CommuteTimeDistance, __pyx_n_s_runParallelApproximation, __pyx_t_5) < 0) __PYX_ERR(0, 1025, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_CommuteTimeDistance);

  /* "networkit/distance.pyx":1033
 * 		return (<_CommuteTimeDistance*>(self._this)).runParallelApproximation()
 * 
 * 	def distance(self, u, v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		distance(u, v)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_19CommuteTimeDistance_7distance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CommuteTimeDistance_distance, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_CommuteTimeDistance, __pyx_n_s_distance, __pyx_t_5) < 0) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_CommuteTimeDistance);

  /* "networkit/distance.pyx":1053
 * 		return (<_CommuteTimeDistance*>(self._this)).distance(u, v)
 * 
 * 	def runSinglePair(self, u, v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		runSinglePair(u, v)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_19CommuteTimeDistance_9runSinglePair, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CommuteTimeDistance_runSinglePai, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__104)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_CommuteTimeDistance, __pyx_n_s_runSinglePair, __pyx_t_5) < 0) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_CommuteTimeDistance);

  /* "networkit/distance.pyx":1073
 * 		return (<_CommuteTimeDistance*>(self._this)).runSinglePair(u, v)
 * 
 * 	def runSingleSource(self, u):             # <<<<<<<<<<<<<<
 * 		"""
 * 		runSingleSource(u)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_19CommuteTimeDistance_11runSingleSource, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CommuteTimeDistance_runSingleSou, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__106)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_CommuteTimeDistance, __pyx_n_s_runSingleSource, __pyx_t_5) < 0) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_CommuteTimeDistance);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_19CommuteTimeDistance_13__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CommuteTimeDistance___reduce_cyt, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_19CommuteTimeDistance_15__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_CommuteTimeDistance___setstate_c, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__108)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_5) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/distance.pyx":1097
 * 		SPLIT = 1
 * 
 * class SelectionStrategy(object):             # <<<<<<<<<<<<<<
 * 	RANDOM = _SelectionStrategy.RANDOM
 * 	SPLIT = _SelectionStrategy.SPLIT
 */
  __pyx_t_5 = __Pyx_PEP560_update_bases(__pyx_tuple__110); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_5, __pyx_n_s_SelectionStrategy, __pyx_n_s_SelectionStrategy, (PyObject *) NULL, __pyx_n_s_networkit_distance, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__pyx_t_5 != __pyx_tuple__110) {
    if (unlikely((PyDict_SetItemString(__pyx_t_3, "__orig_bases__", __pyx_tuple__110) < 0))) __PYX_ERR(0, 1097, __pyx_L1_error)
  }

  /* "networkit/distance.pyx":1098
 * 
 * class SelectionStrategy(object):
 * 	RANDOM = _SelectionStrategy.RANDOM             # <<<<<<<<<<<<<<
 * 	SPLIT = _SelectionStrategy.SPLIT
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_NeighborhoodFunctionHeuristic_3a__3a_SelectionStrategy(NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy::RANDOM); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_RANDOM, __pyx_t_4) < 0) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/distance.pyx":1099
 * class SelectionStrategy(object):
 * 	RANDOM = _SelectionStrategy.RANDOM
 * 	SPLIT = _SelectionStrategy.SPLIT             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/distance/NeighborhoodFunctionHeuristic.hpp>" namespace "NetworKit::NeighborhoodFunctionHeuristic":
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_NeighborhoodFunctionHeuristic_3a__3a_SelectionStrategy(NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy::SPLIT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_SPLIT, __pyx_t_4) < 0) __PYX_ERR(0, 1099, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/distance.pyx":1097
 * 		SPLIT = 1
 * 
 * class SelectionStrategy(object):             # <<<<<<<<<<<<<<
 * 	RANDOM = _SelectionStrategy.RANDOM
 * 	SPLIT = _SelectionStrategy.SPLIT
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_SelectionStrategy, __pyx_t_5, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SelectionStrategy, __pyx_t_4) < 0) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/distance.pyx":1130
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, count nSamples=0, strategy=SelectionStrategy.SPLIT):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _NeighborhoodFunctionHeuristic(G._this, nSamples, strategy)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_SelectionStrategy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_SPLIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_k__7 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/distance.pyx":1134
 * 		self._this = new _NeighborhoodFunctionHeuristic(G._this, nSamples, strategy)
 * 
 * 	def getNeighborhoodFunction(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getNeighborhoodFunction()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_29NeighborhoodFunctionHeuristic_3getNeighborhoodFunction, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NeighborhoodFunctionHeuristic_ge, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__111)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic, __pyx_n_s_getNeighborhoodFunction, __pyx_t_2) < 0) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_NeighborhoodFunctionHeuristic);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_29NeighborhoodFunctionHeuristic_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NeighborhoodFunctionHeuristic_2, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__112)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_29NeighborhoodFunctionHeuristic_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_NeighborhoodFunctionHeuristic_3, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__113)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":1175
 * 		self._G = None
 * 
 * 	def getDistances(self, asarray=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistances(asarray=None)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4APSP_5getDistances, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_APSP_getDistances, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__32);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_APSP, __pyx_n_s_getDistances, __pyx_t_2) < 0) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_APSP);

  /* "networkit/distance.pyx":1193
 * 		return maybe_asarray_2d(&(<_APSP*>(self._this)).getDistances(), asarray)
 * 
 * 	def getDistance(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistance(u, v)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4APSP_7getDistance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_APSP_getDistance, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__115)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_APSP, __pyx_n_s_getDistance, __pyx_t_2) < 0) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_APSP);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4APSP_9__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_APSP___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__116)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4APSP_11__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_APSP___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__117)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":1242
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G not None, vector[node] sources, vector[node] targets = []):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		if not targets.empty():
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __pyx_convert_vector_from_py___pyx_t_9networkit_10structures_node(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__8 = __pyx_t_6;

  /* "networkit/distance.pyx":1252
 * 		self._G = None
 * 
 * 	def getDistances(self, asarray=None):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistances(asarray=None)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SPSP_5getDistances, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SPSP_getDistances, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__118)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__32);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_SPSP, __pyx_n_s_getDistances, __pyx_t_2) < 0) __PYX_ERR(0, 1252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_SPSP);

  /* "networkit/distance.pyx":1278
 * 		return maybe_asarray_2d(&(<_SPSP*>self._this).getDistances(), asarray)
 * 
 * 	def getDistance(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getDistance(u, v)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SPSP_7getDistance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SPSP_getDistance, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__119)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_SPSP, __pyx_n_s_getDistance, __pyx_t_2) < 0) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_SPSP);

  /* "networkit/distance.pyx":1298
 * 		return (<_SPSP*>self._this).getDistance(u, v)
 * 
 * 	def setSources(self, vector[node] sources):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setSources(sources)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SPSP_9setSources, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SPSP_setSources, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__121)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_SPSP, __pyx_n_s_setSources, __pyx_t_2) < 0) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_SPSP);

  /* "networkit/distance.pyx":1311
 * 		(<_SPSP*>self._this).setSources(sources.begin(), sources.end())
 * 
 * 	def setTargets(self, vector[node] targets):             # <<<<<<<<<<<<<<
 * 		"""
 * 		setTargets(targets)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SPSP_11setTargets, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SPSP_setTargets, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__123)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_SPSP, __pyx_n_s_setTargets, __pyx_t_2) < 0) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_SPSP);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SPSP_13__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SPSP___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__124)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_4SPSP_15__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SPSP___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__125)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":1329
 * 		_DynAPSP(_Graph G) except +
 * 
 * cdef class DynAPSP(APSP, DynAlgorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	DynAPSP(G)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_DynAlgorithm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF((PyObject *)__pyx_ptype_9networkit_8distance_APSP);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_9networkit_8distance_APSP);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_ptype_9networkit_8distance_APSP))) __PYX_ERR(0, 1329, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5)) __PYX_ERR(0, 1329, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_DynAPSP);
  __Pyx_GIVEREF(__pyx_n_s_DynAPSP);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_DynAPSP)) __PYX_ERR(0, 1329, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3)) __PYX_ERR(0, 1329, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_5)) __PYX_ERR(0, 1329, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, 1);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyType_GetSlot(&PyType_Type, tp_new, newfunc)(&PyType_Type, __pyx_t_4, NULL);
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_PyType_GetSlot((PyTypeObject*) __pyx_t_5, tp_base, PyTypeObject*) != ((PyTypeObject*)PyTuple_GET_ITEM(__pyx_t_2, 0))) {
    __Pyx_TypeName base_name = __Pyx_PyType_GetName(__Pyx_PyType_GetSlot((PyTypeObject*) __pyx_t_5, tp_base, PyTypeObject*));
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(((PyTypeObject*)PyTuple_GET_ITEM(__pyx_t_2, 0)));
    PyErr_Format(PyExc_TypeError, "best base '" __Pyx_FMT_TYPENAME "' must be equal to first base '" __Pyx_FMT_TYPENAME "'",
                 base_name, type_name);
    __Pyx_DECREF_TypeName(base_name);
    __Pyx_DECREF_TypeName(type_name);
    __PYX_ERR(0, 1329, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  #if CYTHON_USE_TYPE_SPECS
  if (__Pyx_validate_bases_tuple(__pyx_type_9networkit_8distance_DynAPSP_spec.name, 0, __pyx_t_2) < 0) __PYX_ERR(0, 1329, __pyx_L1_error)
  __pyx_ptype_9networkit_8distance_DynAPSP = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_DynAPSP_spec, __pyx_t_2);
  if (unlikely(!__pyx_ptype_9networkit_8distance_DynAPSP)) __PYX_ERR(0, 1329, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_DynAPSP_spec, __pyx_ptype_9networkit_8distance_DynAPSP) < 0) __PYX_ERR(0, 1329, __pyx_L1_error)
  #else
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_type_9networkit_8distance_DynAPSP.tp_bases = __pyx_t_2;
  __pyx_ptype_9networkit_8distance_DynAPSP = &__pyx_type_9networkit_8distance_DynAPSP;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_DynAPSP->tp_base = __pyx_ptype_9networkit_8distance_APSP;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_DynAPSP) < 0) __PYX_ERR(0, 1329, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_DynAPSP->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_DynAPSP->tp_dictoffset && __pyx_ptype_9networkit_8distance_DynAPSP->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_DynAPSP->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DynAPSP, (PyObject *) __pyx_ptype_9networkit_8distance_DynAPSP) < 0) __PYX_ERR(0, 1329, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_DynAPSP) < 0) __PYX_ERR(0, 1329, __pyx_L1_error)
  #endif
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_7DynAPSP_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DynAPSP___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__126)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_7DynAPSP_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DynAPSP___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__127)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":1372
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, source, storePaths=True, storeNodesSortedByDistance=False, target=none):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _BFS(G._this, source, storePaths, storeNodesSortedByDistance, target)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_none); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__9 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_3BFS_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BFS___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__128)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_3BFS_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BFS___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__129)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":1401
 * 		Terminate search when the target has been reached. In default-mode, this target is set to None.
 * 	"""
 * 	def __cinit__(self, Graph G, source, storePaths=True, storeNodesSortedByDistance=False, node target=none):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _Dijkstra(G._this, source, storePaths, storeNodesSortedByDistance, target)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_none); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_7 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__10 = __pyx_t_7;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_8Dijkstra_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Dijkstra___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__130)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_8Dijkstra_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Dijkstra___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__131)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_14MultiTargetBFS_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_MultiTargetBFS___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__132)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_14MultiTargetBFS_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_MultiTargetBFS___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__133)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_19MultiTargetDijkstra_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_MultiTargetDijkstra___reduce_cyt, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__134)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_19MultiTargetDijkstra_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_MultiTargetDijkstra___setstate_c, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__135)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":1460
 * 		_DynBFS(_Graph G, node source) except +
 * 
 * cdef class DynBFS(DynSSSP):             # <<<<<<<<<<<<<<
 * 	"""
 * 	DynBFS(G, source)
 */
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_8distance_DynSSSP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_validate_bases_tuple(__pyx_type_9networkit_8distance_DynBFS_spec.name, 0, __pyx_t_2) < 0) __PYX_ERR(0, 1460, __pyx_L1_error)
  __pyx_ptype_9networkit_8distance_DynBFS = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_DynBFS_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_DynBFS)) __PYX_ERR(0, 1460, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_DynBFS_spec, __pyx_ptype_9networkit_8distance_DynBFS) < 0) __PYX_ERR(0, 1460, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_DynBFS = &__pyx_type_9networkit_8distance_DynBFS;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_DynBFS->tp_base = __pyx_ptype_9networkit_8distance_DynSSSP;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_DynBFS) < 0) __PYX_ERR(0, 1460, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_DynBFS->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_DynBFS->tp_dictoffset && __pyx_ptype_9networkit_8distance_DynBFS->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_DynBFS->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DynBFS, (PyObject *) __pyx_ptype_9networkit_8distance_DynBFS) < 0) __PYX_ERR(0, 1460, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_DynBFS) < 0) __PYX_ERR(0, 1460, __pyx_L1_error)
  #endif

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_6DynBFS_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DynBFS___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__136)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_6DynBFS_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DynBFS___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__137)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":1482
 * 		_DynDijkstra(_Graph G, node source) except +
 * 
 * cdef class DynDijkstra(DynSSSP):             # <<<<<<<<<<<<<<
 * 	"""
 * 	DynDijkstra(G, source)
 */
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_9networkit_8distance_DynSSSP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_validate_bases_tuple(__pyx_type_9networkit_8distance_DynDijkstra_spec.name, 0, __pyx_t_2) < 0) __PYX_ERR(0, 1482, __pyx_L1_error)
  __pyx_ptype_9networkit_8distance_DynDijkstra = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_DynDijkstra_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_9networkit_8distance_DynDijkstra)) __PYX_ERR(0, 1482, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_DynDijkstra_spec, __pyx_ptype_9networkit_8distance_DynDijkstra) < 0) __PYX_ERR(0, 1482, __pyx_L1_error)
  #else
  __pyx_ptype_9networkit_8distance_DynDijkstra = &__pyx_type_9networkit_8distance_DynDijkstra;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_DynDijkstra->tp_base = __pyx_ptype_9networkit_8distance_DynSSSP;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_DynDijkstra) < 0) __PYX_ERR(0, 1482, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_DynDijkstra->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_DynDijkstra->tp_dictoffset && __pyx_ptype_9networkit_8distance_DynDijkstra->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_DynDijkstra->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DynDijkstra, (PyObject *) __pyx_ptype_9networkit_8distance_DynDijkstra) < 0) __PYX_ERR(0, 1482, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_DynDijkstra) < 0) __PYX_ERR(0, 1482, __pyx_L1_error)
  #endif

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_11DynDijkstra_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DynDijkstra___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__138)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_11DynDijkstra_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DynDijkstra___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__139)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_16BidirectionalBFS_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BidirectionalBFS___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__140)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_16BidirectionalBFS_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BidirectionalBFS___setstate_cyth, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__141)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_21BidirectionalDijkstra_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BidirectionalDijkstra___reduce_c, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__142)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_21BidirectionalDijkstra_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BidirectionalDijkstra___setstate, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__143)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_5AStar_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AStar___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__144)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_5AStar_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AStar___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__145)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":1634
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self,  Graph G, source, target, cutoff=none):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _AllSimplePaths(G._this, source, target, cutoff)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_none); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__11 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/distance.pyx":1643
 * 		del self._this
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		self._this.run()
 * 		return self
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_14AllSimplePaths_5run, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AllSimplePaths_run, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__146)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_AllSimplePaths, __pyx_n_s_run, __pyx_t_2) < 0) __PYX_ERR(0, 1643, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_AllSimplePaths);

  /* "networkit/distance.pyx":1647
 * 		return self
 * 
 * 	def numberOfSimplePaths(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		numberOfSimplePaths()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_14AllSimplePaths_7numberOfSimplePaths, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AllSimplePaths_numberOfSimplePat, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__147)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_AllSimplePaths, __pyx_n_s_numberOfSimplePaths, __pyx_t_2) < 0) __PYX_ERR(0, 1647, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_AllSimplePaths);

  /* "networkit/distance.pyx":1660
 * 		return self._this.numberOfSimplePaths()
 * 
 * 	def getAllSimplePaths(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		getAllSimplePaths()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_14AllSimplePaths_9getAllSimplePaths, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AllSimplePaths_getAllSimplePaths, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__148)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_AllSimplePaths, __pyx_n_s_getAllSimplePaths, __pyx_t_2) < 0) __PYX_ERR(0, 1660, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_AllSimplePaths);

  /* "networkit/distance.pyx":1673
 * 		return self._this.getAllSimplePaths()
 * 
 * 	def forAllSimplePaths(self, object callback):             # <<<<<<<<<<<<<<
 * 		"""
 * 		forAllSimplePaths(callback)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_14AllSimplePaths_11forAllSimplePaths, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AllSimplePaths_forAllSimplePaths, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__150)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_AllSimplePaths, __pyx_n_s_forAllSimplePaths, __pyx_t_2) < 0) __PYX_ERR(0, 1673, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_AllSimplePaths);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_14AllSimplePaths_13__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AllSimplePaths___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__151)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_14AllSimplePaths_15__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AllSimplePaths___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__152)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":1716
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, source, storePaths=True, storeNodesSortedByDistance=False, target=none):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ReverseBFS(G._this, source, storePaths, storeNodesSortedByDistance, target)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_none); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__13 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_10ReverseBFS_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReverseBFS___reduce_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__153)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_10ReverseBFS_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReverseBFS___setstate_cython, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__154)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":1750
 * 		self._G = None
 * 
 * 	def query(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		query(u, v)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_22PrunedLandmarkLabeling_5query, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PrunedLandmarkLabeling_query, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__155)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling, __pyx_n_s_query, __pyx_t_2) < 0) __PYX_ERR(0, 1750, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_PrunedLandmarkLabeling);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_22PrunedLandmarkLabeling_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PrunedLandmarkLabeling___reduce, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__156)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_22PrunedLandmarkLabeling_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PrunedLandmarkLabeling___setstat, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__157)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":1777
 * 		count query(node u, node v) except +
 * 
 * cdef class DynPrunedLandmarkLabeling(Algorithm, DynAlgorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	DynPrunedLandmarkLabeling(G)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_DynAlgorithm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF((PyObject *)__pyx_ptype_9networkit_4base_Algorithm);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_9networkit_4base_Algorithm);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_ptype_9networkit_4base_Algorithm))) __PYX_ERR(0, 1777, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(0, 1777, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_DynPrunedLandmarkLabeling);
  __Pyx_GIVEREF(__pyx_n_s_DynPrunedLandmarkLabeling);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_DynPrunedLandmarkLabeling)) __PYX_ERR(0, 1777, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5)) __PYX_ERR(0, 1777, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_4)) __PYX_ERR(0, 1777, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, 1);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyType_GetSlot(&PyType_Type, tp_new, newfunc)(&PyType_Type, __pyx_t_3, NULL);
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_PyType_GetSlot((PyTypeObject*) __pyx_t_4, tp_base, PyTypeObject*) != ((PyTypeObject*)PyTuple_GET_ITEM(__pyx_t_2, 0))) {
    __Pyx_TypeName base_name = __Pyx_PyType_GetName(__Pyx_PyType_GetSlot((PyTypeObject*) __pyx_t_4, tp_base, PyTypeObject*));
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(((PyTypeObject*)PyTuple_GET_ITEM(__pyx_t_2, 0)));
    PyErr_Format(PyExc_TypeError, "best base '" __Pyx_FMT_TYPENAME "' must be equal to first base '" __Pyx_FMT_TYPENAME "'",
                 base_name, type_name);
    __Pyx_DECREF_TypeName(base_name);
    __Pyx_DECREF_TypeName(type_name);
    __PYX_ERR(0, 1777, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  #if CYTHON_USE_TYPE_SPECS
  if (__Pyx_validate_bases_tuple(__pyx_type_9networkit_8distance_DynPrunedLandmarkLabeling_spec.name, 0, __pyx_t_2) < 0) __PYX_ERR(0, 1777, __pyx_L1_error)
  __pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9networkit_8distance_DynPrunedLandmarkLabeling_spec, __pyx_t_2);
  if (unlikely(!__pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling)) __PYX_ERR(0, 1777, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9networkit_8distance_DynPrunedLandmarkLabeling_spec, __pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling) < 0) __PYX_ERR(0, 1777, __pyx_L1_error)
  #else
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_type_9networkit_8distance_DynPrunedLandmarkLabeling.tp_bases = __pyx_t_2;
  __pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling = &__pyx_type_9networkit_8distance_DynPrunedLandmarkLabeling;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling->tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling) < 0) __PYX_ERR(0, 1777, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling->tp_dictoffset && __pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DynPrunedLandmarkLabeling, (PyObject *) __pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling) < 0) __PYX_ERR(0, 1777, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling) < 0) __PYX_ERR(0, 1777, __pyx_L1_error)
  #endif
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":1803
 * 		self._G = None
 * 
 * 	def query(self, node u, node v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		query(u, v)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_25DynPrunedLandmarkLabeling_5query, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DynPrunedLandmarkLabeling_query, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__158)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling, __pyx_n_s_query, __pyx_t_2) < 0) __PYX_ERR(0, 1803, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9networkit_8distance_DynPrunedLandmarkLabeling);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_25DynPrunedLandmarkLabeling_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DynPrunedLandmarkLabeling___redu, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__159)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_25DynPrunedLandmarkLabeling_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DynPrunedLandmarkLabeling___sets, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__160)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Eccentricity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_1__pyx_unpickle_Eccentricity, 0, __pyx_n_s_pyx_unpickle_Eccentricity, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__162)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Eccentricity, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Eccentricity__set_state(<Eccentricity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Eccentricity__set_state(Eccentricity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_8distance_3__pyx_unpickle_Volume, 0, __pyx_n_s_pyx_unpickle_Volume, NULL, __pyx_n_s_networkit_distance, __pyx_d, ((PyObject *)__pyx_codeobj__163)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Volume, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/distance.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * 
 * from cython.operator import dereference, preincrement
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init networkit.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init networkit.distance");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* GetAttr3 */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    int res = PyObject_GetOptionalAttr(o, n, &r);
    return (res != 0) ? r : __Pyx_NewRef(d);
#else
  #if CYTHON_USE_TYPE_SLOTS
    if (likely(PyString_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
  #endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
#endif
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* pybytes_as_double */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj) {
    PyObject *float_value;
#if PY_MAJOR_VERSION >= 3
    float_value = PyFloat_FromString(obj);
#else
    float_value = PyFloat_FromString(obj, 0);
#endif
    if (likely(float_value)) {
#if CYTHON_ASSUME_SAFE_MACROS
        double value = PyFloat_AS_DOUBLE(float_value);
#else
        double value = PyFloat_AsDouble(float_value);
#endif
        Py_DECREF(float_value);
        return value;
    }
    return (double)-1;
}
static const char* __Pyx__PyBytes_AsDouble_Copy(const char* start, char* buffer, Py_ssize_t length) {
    int last_was_punctuation = 1;
    Py_ssize_t i;
    for (i=0; i < length; i++) {
        char chr = start[i];
        int is_punctuation = (chr == '_') | (chr == '.') | (chr == 'e') | (chr == 'E');
        *buffer = chr;
        buffer += (chr != '_');
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyBytes_AsDouble_inf_nan(const char* start, Py_ssize_t length) {
    int matches = 1;
    char sign = start[0];
    int is_signed = (sign == '+') | (sign == '-');
    start += is_signed;
    length -= is_signed;
    switch (start[0]) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            matches &= (start[1] == 'a' || start[1] == 'A');
            matches &= (start[2] == 'n' || start[2] == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            matches &= (start[1] == 'n' || start[1] == 'N');
            matches &= (start[2] == 'f' || start[2] == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            matches &= (start[3] == 'i' || start[3] == 'I');
            matches &= (start[4] == 'n' || start[4] == 'N');
            matches &= (start[5] == 'i' || start[5] == 'I');
            matches &= (start[6] == 't' || start[6] == 'T');
            matches &= (start[7] == 'y' || start[7] == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static CYTHON_INLINE int __Pyx__PyBytes_AsDouble_IsSpace(char ch) {
    return (ch == 0x20) | !((ch < 0x9) | (ch > 0xd));
}
CYTHON_UNUSED static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length) {
    double value;
    Py_ssize_t i, digits;
    const char *last = start + length;
    char *end;
    while (__Pyx__PyBytes_AsDouble_IsSpace(*start))
        start++;
    while (start < last - 1 && __Pyx__PyBytes_AsDouble_IsSpace(last[-1]))
        last--;
    length = last - start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyBytes_AsDouble_inf_nan(start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    digits = 0;
    for (i=0; i < length; digits += start[i++] != '_');
    if (likely(digits == length)) {
        value = PyOS_string_to_double(start, &end, NULL);
    } else if (digits < 40) {
        char number[40];
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((digits + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}

/* pyobject_as_double */
static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    if (PyUnicode_CheckExact(obj)) {
        return __Pyx_PyUnicode_AsDouble(obj);
    } else if (PyBytes_CheckExact(obj)) {
        return __Pyx_PyBytes_AsDouble(obj);
    } else if (PyByteArray_CheckExact(obj)) {
        return __Pyx_PyByteArray_AsDouble(obj);
    } else {
        PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
        float_value = PyNumber_Float(obj);  if ((0)) goto bad;
        (void)__Pyx_PyObject_CallOneArg;
#else
        PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
        if (likely(nb) && likely(nb->nb_float)) {
            float_value = nb->nb_float(obj);
            if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
                __Pyx_TypeName float_value_type_name = __Pyx_PyType_GetName(Py_TYPE(float_value));
                PyErr_Format(PyExc_TypeError,
                    "__float__ returned non-float (type " __Pyx_FMT_TYPENAME ")",
                    float_value_type_name);
                __Pyx_DECREF_TypeName(float_value_type_name);
                Py_DECREF(float_value);
                goto bad;
            }
        } else {
            float_value = __Pyx_PyObject_CallOneArg((PyObject*)&PyFloat_Type, obj);
        }
#endif
        if (likely(float_value)) {
            double value = PyFloat_AS_DOUBLE(float_value);
            Py_DECREF(float_value);
            return value;
        }
    }
bad:
    return (double)-1;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* RaiseUnboundLocalError */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* RaiseClosureNameError */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* pep479 */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen) {
    PyObject *exc, *val, *tb, *cur_exc;
    __Pyx_PyThreadState_declare
    #ifdef __Pyx_StopAsyncIteration_USED
    int is_async_stopiteration = 0;
    #endif
    CYTHON_MAYBE_UNUSED_VAR(in_async_gen);
    cur_exc = PyErr_Occurred();
    if (likely(!__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopIteration))) {
        #ifdef __Pyx_StopAsyncIteration_USED
        if (in_async_gen && unlikely(__Pyx_PyErr_GivenExceptionMatches(cur_exc, __Pyx_PyExc_StopAsyncIteration))) {
            is_async_stopiteration = 1;
        } else
        #endif
            return;
    }
    __Pyx_PyThreadState_assign
    __Pyx_GetException(&exc, &val, &tb);
    Py_XDECREF(exc);
    Py_XDECREF(val);
    Py_XDECREF(tb);
    PyErr_SetString(PyExc_RuntimeError,
        #ifdef __Pyx_StopAsyncIteration_USED
        is_async_stopiteration ? "async generator raised StopAsyncIteration" :
        in_async_gen ? "async generator raised StopIteration" :
        #endif
        "generator raised StopIteration");
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__12);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (!r) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    destructor tp_dealloc = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_dealloc, destructor) != current_tp_dealloc)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_dealloc = __Pyx_PyType_GetSlot(type, tp_dealloc, destructor)) == current_tp_dealloc)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type)
        tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    traverseproc tp_traverse = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_traverse, traverseproc) != current_tp_traverse)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_traverse = __Pyx_PyType_GetSlot(type, tp_traverse, traverseproc)) == current_tp_traverse)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type && tp_traverse)
        return tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    inquiry tp_clear = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_clear, inquiry) != current_tp_clear)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_clear = __Pyx_PyType_GetSlot(type, tp_clear, inquiry)) == current_tp_clear)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type && tp_clear)
        tp_clear(obj);
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_8
#define __PYX_HAVE_RT_ImportType_3_0_8
static PyTypeObject *__Pyx_ImportType_3_0_8(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_8 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_8 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_8 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Py3UpdateBases */
static PyObject*
__Pyx_PEP560_update_bases(PyObject *bases)
{
    Py_ssize_t i, j, size_bases;
    PyObject *base, *meth, *new_base, *result, *new_bases = NULL;
    size_bases = PyTuple_GET_SIZE(bases);
    for (i = 0; i < size_bases; i++) {
        base  = PyTuple_GET_ITEM(bases, i);
        if (PyType_Check(base)) {
            if (new_bases) {
                if (PyList_Append(new_bases, base) < 0) {
                    goto error;
                }
            }
            continue;
        }
        meth = __Pyx_PyObject_GetAttrStrNoError(base, __pyx_n_s_mro_entries);
        if (!meth && PyErr_Occurred()) {
            goto error;
        }
        if (!meth) {
            if (new_bases) {
                if (PyList_Append(new_bases, base) < 0) {
                    goto error;
                }
            }
            continue;
        }
        new_base = __Pyx_PyObject_CallOneArg(meth, bases);
        Py_DECREF(meth);
        if (!new_base) {
            goto error;
        }
        if (!PyTuple_Check(new_base)) {
            PyErr_SetString(PyExc_TypeError,
                            "__mro_entries__ must return a tuple");
            Py_DECREF(new_base);
            goto error;
        }
        if (!new_bases) {
            if (!(new_bases = PyList_New(i))) {
                goto error;
            }
            for (j = 0; j < i; j++) {
                base = PyTuple_GET_ITEM(bases, j);
                PyList_SET_ITEM(new_bases, j, base);
                Py_INCREF(base);
            }
        }
        j = PyList_GET_SIZE(new_bases);
        if (PyList_SetSlice(new_bases, j, j, new_base) < 0) {
            goto error;
        }
        Py_DECREF(new_base);
    }
    if (!new_bases) {
        Py_INCREF(bases);
        return bases;
    }
    result = PyList_AsTuple(new_bases);
    Py_DECREF(new_bases);
    return result;
error:
    Py_XDECREF(new_bases);
    return NULL;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases;
#if CYTHON_ASSUME_SAFE_MACROS
    nbases = PyTuple_GET_SIZE(bases);
#else
    nbases = PyTuple_Size(bases);
    if (nbases < 0) return NULL;
#endif
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
#if CYTHON_ASSUME_SAFE_MACROS
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *tmp = PyTuple_GetItem(bases, i);
        if (!tmp) return NULL;
#endif
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectLookupSpecial */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return with_error ? __Pyx_PyObject_GetAttrStr(obj, attr_name) : __Pyx_PyObject_GetAttrStrNoError(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStrNoError(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs[3] = {NULL, name, bases};
            ns = __Pyx_PyObject_FastCallDict(prep, pargs+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, mkw);
            Py_DECREF(prep);
        } else {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
#if PY_VERSION_HEX >= 0x03030000
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
#else
    CYTHON_MAYBE_UNUSED_VAR(qualname);
#endif
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
static int __Pyx_SetNamesPEP487(PyObject *type_obj) {
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *names_to_set, *key, *value, *set_name, *tmp;
    Py_ssize_t i = 0;
#if CYTHON_USE_TYPE_SLOTS
    names_to_set = PyDict_Copy(type->tp_dict);
#else
    {
        PyObject *d = PyObject_GetAttr(type_obj, __pyx_n_s_dict);
        names_to_set = NULL;
        if (likely(d)) {
            PyObject *names_to_set = PyDict_New();
            int ret = likely(names_to_set) ? PyDict_Update(names_to_set, d) : -1;
            Py_DECREF(d);
            if (unlikely(ret < 0))
                Py_CLEAR(names_to_set);
        }
    }
#endif
    if (unlikely(names_to_set == NULL))
        goto bad;
    while (PyDict_Next(names_to_set, &i, &key, &value)) {
        set_name = __Pyx_PyObject_LookupSpecialNoError(value, __pyx_n_s_set_name);
        if (unlikely(set_name != NULL)) {
            tmp = __Pyx_PyObject_Call2Args(set_name, type_obj, key);
            Py_DECREF(set_name);
            if (unlikely(tmp == NULL)) {
                __Pyx_TypeName value_type_name =
                    __Pyx_PyType_GetName(Py_TYPE(value));
                __Pyx_TypeName type_name = __Pyx_PyType_GetName(type);
                PyErr_Format(PyExc_RuntimeError,
#if PY_MAJOR_VERSION >= 3
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %R " "in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name, key, type_name);
#else
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %.100s in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name,
                    PyString_Check(key) ? PyString_AS_STRING(key) : "?",
                    type_name);
#endif
                goto bad;
            } else {
                Py_DECREF(tmp);
            }
        }
        else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
    Py_DECREF(names_to_set);
    return 0;
bad:
    Py_XDECREF(names_to_set);
    return -1;
}
static PyObject *__Pyx_InitSubclassPEP487(PyObject *type_obj, PyObject *mkw) {
#if CYTHON_USE_TYPE_SLOTS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *mro = type->tp_mro;
    Py_ssize_t i, nbases;
    if (unlikely(!mro)) goto done;
    (void) &__Pyx_GetBuiltinName;
    Py_INCREF(mro);
    nbases = PyTuple_GET_SIZE(mro);
    assert(PyTuple_GET_ITEM(mro, 0) == type_obj);
    for (i = 1; i < nbases-1; i++) {
        PyObject *base, *dict, *meth;
        base = PyTuple_GET_ITEM(mro, i);
        dict = ((PyTypeObject *)base)->tp_dict;
        meth = __Pyx_PyDict_GetItemStrWithError(dict, __pyx_n_s_init_subclass);
        if (unlikely(meth)) {
            descrgetfunc f = Py_TYPE(meth)->tp_descr_get;
            PyObject *res;
            Py_INCREF(meth);
            if (likely(f)) {
                res = f(meth, NULL, type_obj);
                Py_DECREF(meth);
                if (unlikely(!res)) goto bad;
                meth = res;
            }
            res = __Pyx_PyObject_FastCallDict(meth, NULL, 0, mkw);
            Py_DECREF(meth);
            if (unlikely(!res)) goto bad;
            Py_DECREF(res);
            goto done;
        } else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
done:
    Py_XDECREF(mro);
    return type_obj;
bad:
    Py_XDECREF(mro);
    Py_DECREF(type_obj);
    return NULL;
#else
    PyObject *super_type, *super, *func, *res;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    super_type = __Pyx_GetBuiltinName(__pyx_n_s_super);
#else
    super_type = (PyObject*) &PySuper_Type;
    (void) &__Pyx_GetBuiltinName;
#endif
    super = likely(super_type) ? __Pyx_PyObject_Call2Args(super_type, type_obj, type_obj) : NULL;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    Py_XDECREF(super_type);
#endif
    if (unlikely(!super)) {
        Py_CLEAR(type_obj);
        goto done;
    }
    func = __Pyx_PyObject_GetAttrStrNoError(super, __pyx_n_s_init_subclass);
    Py_DECREF(super);
    if (likely(!func)) {
        if (unlikely(PyErr_Occurred()))
            Py_CLEAR(type_obj);
        goto done;
    }
    res = __Pyx_PyObject_FastCallDict(func, NULL, 0, mkw);
    Py_DECREF(func);
    if (unlikely(!res))
        Py_CLEAR(type_obj);
    Py_XDECREF(res);
done:
    return type_obj;
#endif
}
#endif
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result;
    PyObject *owned_metaclass = NULL;
    PyObject *margs[4] = {NULL, name, bases, dict};
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    result = __Pyx_PyObject_FastCallDict(metaclass, margs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET,
#if PY_VERSION_HEX < 0x030600A4
        (metaclass == (PyObject*)&PyType_Type) ? NULL : mkw
#else
        mkw
#endif
    );
    Py_XDECREF(owned_metaclass);
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
    if (likely(result) && likely(PyType_Check(result))) {
        if (unlikely(__Pyx_SetNamesPEP487(result) < 0)) {
            Py_CLEAR(result);
        } else {
            result = __Pyx_InitSubclassPEP487(result, mkw);
        }
    }
#else
    (void) &__Pyx_GetBuiltinName;
#endif
    return result;
}

/* GetNameInClass */
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    PyObject *dict;
    assert(PyType_Check(nmspace));
#if CYTHON_USE_TYPE_SLOTS
    dict = ((PyTypeObject*)nmspace)->tp_dict;
    Py_XINCREF(dict);
#else
    dict = PyObject_GetAttr(nmspace, __pyx_n_s_dict);
#endif
    if (likely(dict)) {
        result = PyObject_GetItem(dict, name);
        Py_DECREF(dict);
        if (result) {
            return result;
        }
    }
    PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(uint64_t));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(uint64_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(uint64_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT)) {
                                return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(uint64_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT)) {
                                return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(uint64_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT)) {
                                return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(uint64_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(uint64_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(uint64_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(uint64_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(uint64_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(uint64_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (uint64_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (uint64_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (uint64_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (uint64_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (uint64_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(uint64_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((uint64_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(uint64_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((uint64_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((uint64_t) 1) << (sizeof(uint64_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NetworKit_3a__3a_DiameterAlgo(enum NetworKit::DiameterAlgo value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum NetworKit::DiameterAlgo neg_one = (enum NetworKit::DiameterAlgo) -1, const_zero = (enum NetworKit::DiameterAlgo) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NetworKit::DiameterAlgo) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NetworKit::DiameterAlgo) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NetworKit::DiameterAlgo) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NetworKit::DiameterAlgo) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NetworKit::DiameterAlgo) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(enum NetworKit::DiameterAlgo),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(enum NetworKit::DiameterAlgo));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NetworKit_3a__3a_NeighborhoodFunctionHeuristic_3a__3a_SelectionStrategy(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy neg_one = (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) -1, const_zero = (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum NetworKit::DiameterAlgo __Pyx_PyInt_As_enum__NetworKit_3a__3a_DiameterAlgo(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum NetworKit::DiameterAlgo neg_one = (enum NetworKit::DiameterAlgo) -1, const_zero = (enum NetworKit::DiameterAlgo) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(enum NetworKit::DiameterAlgo) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(enum NetworKit::DiameterAlgo, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum NetworKit::DiameterAlgo) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum NetworKit::DiameterAlgo, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(enum NetworKit::DiameterAlgo) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::DiameterAlgo, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::DiameterAlgo) >= 2 * PyLong_SHIFT)) {
                                return (enum NetworKit::DiameterAlgo) (((((enum NetworKit::DiameterAlgo)digits[1]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum NetworKit::DiameterAlgo) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::DiameterAlgo, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::DiameterAlgo) >= 3 * PyLong_SHIFT)) {
                                return (enum NetworKit::DiameterAlgo) (((((((enum NetworKit::DiameterAlgo)digits[2]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[1]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum NetworKit::DiameterAlgo) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::DiameterAlgo, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::DiameterAlgo) >= 4 * PyLong_SHIFT)) {
                                return (enum NetworKit::DiameterAlgo) (((((((((enum NetworKit::DiameterAlgo)digits[3]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[2]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[1]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum NetworKit::DiameterAlgo) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(enum NetworKit::DiameterAlgo) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::DiameterAlgo, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum NetworKit::DiameterAlgo) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::DiameterAlgo, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum NetworKit::DiameterAlgo, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(enum NetworKit::DiameterAlgo) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::DiameterAlgo, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::DiameterAlgo) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum NetworKit::DiameterAlgo) (((enum NetworKit::DiameterAlgo)-1)*(((((enum NetworKit::DiameterAlgo)digits[1]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(enum NetworKit::DiameterAlgo) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::DiameterAlgo, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::DiameterAlgo) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum NetworKit::DiameterAlgo) ((((((enum NetworKit::DiameterAlgo)digits[1]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(enum NetworKit::DiameterAlgo) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::DiameterAlgo, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::DiameterAlgo) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum NetworKit::DiameterAlgo) (((enum NetworKit::DiameterAlgo)-1)*(((((((enum NetworKit::DiameterAlgo)digits[2]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[1]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum NetworKit::DiameterAlgo) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::DiameterAlgo, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::DiameterAlgo) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum NetworKit::DiameterAlgo) ((((((((enum NetworKit::DiameterAlgo)digits[2]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[1]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(enum NetworKit::DiameterAlgo) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::DiameterAlgo, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::DiameterAlgo) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum NetworKit::DiameterAlgo) (((enum NetworKit::DiameterAlgo)-1)*(((((((((enum NetworKit::DiameterAlgo)digits[3]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[2]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[1]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum NetworKit::DiameterAlgo) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::DiameterAlgo, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::DiameterAlgo) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum NetworKit::DiameterAlgo) ((((((((((enum NetworKit::DiameterAlgo)digits[3]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[2]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[1]) << PyLong_SHIFT) | (enum NetworKit::DiameterAlgo)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(enum NetworKit::DiameterAlgo) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::DiameterAlgo, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum NetworKit::DiameterAlgo) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::DiameterAlgo, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available, cannot convert large enums");
        return (enum NetworKit::DiameterAlgo) -1;
    } else {
        enum NetworKit::DiameterAlgo val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum NetworKit::DiameterAlgo) -1;
        val = __Pyx_PyInt_As_enum__NetworKit_3a__3a_DiameterAlgo(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum NetworKit::DiameterAlgo");
    return (enum NetworKit::DiameterAlgo) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum NetworKit::DiameterAlgo");
    return (enum NetworKit::DiameterAlgo) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy __Pyx_PyInt_As_enum__NetworKit_3a__3a_NeighborhoodFunctionHeuristic_3a__3a_SelectionStrategy(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy neg_one = (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) -1, const_zero = (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) >= 2 * PyLong_SHIFT)) {
                                return (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) (((((enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) >= 3 * PyLong_SHIFT)) {
                                return (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) (((((((enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) >= 4 * PyLong_SHIFT)) {
                                return (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) (((((((((enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[3]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) (((enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)-1)*(((((enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) - 1 > 2 * PyLong_SHIFT)) {
                                return (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) ((((((enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) (((enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)-1)*(((((((enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) - 1 > 3 * PyLong_SHIFT)) {
                                return (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) ((((((((enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) (((enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)-1)*(((((((((enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[3]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) - 1 > 4 * PyLong_SHIFT)) {
                                return (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) ((((((((((enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[3]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available, cannot convert large enums");
        return (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) -1;
    } else {
        enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) -1;
        val = __Pyx_PyInt_As_enum__NetworKit_3a__3a_NeighborhoodFunctionHeuristic_3a__3a_SelectionStrategy(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy");
    return (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy");
    return (enum NetworKit::NeighborhoodFunctionHeuristic::SelectionStrategy) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__164);
    }
    return name;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyObjectCallMethod1 */
#if !(CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C00A2)
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
#endif
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
#if CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C00A2
    PyObject *args[2] = {obj, arg};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_Call2Args;
    return PyObject_VectorcallMethod(method_name, args, 2 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);
#else
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
#endif
}

/* CoroutineBase */
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    CYTHON_UNUSED_VAR(__pyx_tstate);
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (likely(__Pyx_IS_TYPE(ev, (PyTypeObject*)PyExc_StopIteration))) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_CLEAR(exc_state->exc_value);
#else
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
#endif
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(__pyx_CoroutineObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(PyObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(PyObject *gen, PyObject *value, int closing) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    CYTHON_MAYBE_UNUSED_VAR(closing);
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_value) {
        #if CYTHON_COMPILING_IN_PYPY
        #else
        PyObject *exc_tb;
        #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
        exc_tb = PyException_GetTraceback(exc_state->exc_value);
        #elif PY_VERSION_HEX >= 0x030B00a4
        exc_tb = ((PyBaseExceptionObject*) exc_state->exc_value)->traceback;
        #else
        exc_tb = exc_state->exc_traceback;
        #endif
        if (exc_tb) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
            #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
            Py_DECREF(exc_tb);
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body(self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
#if CYTHON_COMPILING_IN_PYPY
    CYTHON_UNUSED_VAR(exc_state);
#else
    PyObject *exc_tb;
    #if PY_VERSION_HEX >= 0x030B00a4
    if (!exc_state->exc_value) return;
    exc_tb = PyException_GetTraceback(exc_state->exc_value);
    #else
    exc_tb = exc_state->exc_traceback;
    #endif
    if (likely(exc_tb)) {
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
        #if PY_VERSION_HEX >= 0x030B00a4
        Py_DECREF(exc_tb);
        #endif
    }
#endif
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject* gen, PyObject *retval) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
#if PY_VERSION_HEX < 0x030d00A1
            _PyGen_SetStopIterationValue(result);
#else
            if (!PyTuple_Check(result) && !PyExceptionInstance_Check(result)) {
                PyErr_SetObject(PyExc_StopIteration, result);
            } else {
                PyObject *exc = __Pyx_PyObject_CallOneArg(PyExc_StopIteration, result);
                if (likely(exc != NULL)) {
                    PyErr_SetObject(PyExc_StopIteration, exc);
                    Py_DECREF(exc);
                }
            }
#endif
        }
        Py_DECREF(result);
        result = NULL;
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (unlikely(PyErr_Occurred())) {
                PyErr_WriteUnraisable(yf);
            }
        } else {
            retval = __Pyx_PyObject_CallNoArg(meth);
            Py_DECREF(meth);
            if (unlikely(!retval))
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (unlikely(PyErr_Occurred())) {
                    gen->is_running = 0;
                    return NULL;
                }
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = __Pyx_PyObject_Call(meth, args, NULL);
            } else {
                PyObject *cargs[4] = {NULL, typ, val, tb};
                ret = __Pyx_PyObject_FastCall(meth, cargs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (unlikely(!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb)))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_VISIT(exc_state->exc_value);
#else
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
#endif
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (unlikely(PyObject_CallFinalizerFromDealloc(self)))
#else
        Py_TYPE(gen)->tp_del(self);
        if (unlikely(Py_REFCNT(self) > 0))
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    __Pyx_PyHeapTypeObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (likely(--self->ob_refcnt == 0)) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_name;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_name, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_qualname;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_qualname, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, void *context)
{
    PyObject *frame = self->gi_frame;
    CYTHON_UNUSED_VAR(context);
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    #if PY_VERSION_HEX >= 0x030B00a4
    gen->gi_exc_state.exc_value = NULL;
    #else
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
    #endif
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (unlikely(!module)) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_modulename), 0, 0},
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CoroutineObject, gi_weakreflist), READONLY, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_GeneratorType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_Coroutine_dealloc},
    {Py_tp_traverse, (void *)__Pyx_Coroutine_traverse},
    {Py_tp_iter, (void *)PyObject_SelfIter},
    {Py_tp_iternext, (void *)__Pyx_Generator_Next},
    {Py_tp_methods, (void *)__pyx_Generator_methods},
    {Py_tp_members, (void *)__pyx_Generator_memberlist},
    {Py_tp_getset, (void *)__pyx_Generator_getsets},
    {Py_tp_getattro, (void *) __Pyx_PyObject_GenericGetAttrNoDict},
#if CYTHON_USE_TP_FINALIZE
    {Py_tp_finalize, (void *)__Pyx_Coroutine_del},
#endif
    {0, 0},
};
static PyType_Spec __pyx_GeneratorType_spec = {
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    __pyx_GeneratorType_slots
};
#else
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_Generator_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_GeneratorType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_GeneratorType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
#endif
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction_3_0_8
#define __PYX_HAVE_RT_ImportFunction_3_0_8
static int __Pyx_ImportFunction_3_0_8(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
